{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;};(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n/* eslint no-undef: 'error' */\n/* eslint no-param-reassign: [\"error\", { \"props\": false }] */\nimport moment from 'moment';\nimport { t, SupersetClient } from '@superset-ui/core';\nimport { getControlsState } from 'src/explore/store';\nimport { isFeatureEnabled, FeatureFlag } from 'src/featureFlags';\nimport {\ngetAnnotationJsonUrl,\ngetExploreUrl,\ngetLegacyEndpointType,\nbuildV1ChartDataPayload,\npostForm,\nshouldUseLegacyApi,\ngetChartDataUri } from\n'src/explore/exploreUtils';\nimport {\nrequiresQuery,\nANNOTATION_SOURCE_TYPES } from\n'src/modules/AnnotationTypes';\n\nimport { addDangerToast } from 'src/components/MessageToasts/actions';\nimport { logEvent } from 'src/logger/actions';\nimport { Logger, LOG_ACTIONS_LOAD_CHART } from 'src/logger/LogUtils';\nimport { getClientErrorObject } from 'src/utils/getClientErrorObject';\nimport { allowCrossDomain as domainShardingEnabled } from 'src/utils/hostNamesConfig';\nimport { updateDataMask } from 'src/dataMask/actions';\nimport { waitForAsyncData } from 'src/middleware/asyncEvent';\n\nexport const CHART_UPDATE_STARTED = 'CHART_UPDATE_STARTED';\nexport function chartUpdateStarted(queryController, latestQueryFormData, key) {\n  return {\n    type: CHART_UPDATE_STARTED,\n    queryController,\n    latestQueryFormData,\n    key };\n\n}\n\nexport const CHART_UPDATE_SUCCEEDED = 'CHART_UPDATE_SUCCEEDED';\nexport function chartUpdateSucceeded(queriesResponse, key) {\n  return { type: CHART_UPDATE_SUCCEEDED, queriesResponse, key };\n}\n\nexport const CHART_UPDATE_STOPPED = 'CHART_UPDATE_STOPPED';\nexport function chartUpdateStopped(key) {\n  return { type: CHART_UPDATE_STOPPED, key };\n}\n\nexport const CHART_UPDATE_FAILED = 'CHART_UPDATE_FAILED';\nexport function chartUpdateFailed(queriesResponse, key) {\n  return { type: CHART_UPDATE_FAILED, queriesResponse, key };\n}\n\nexport const CHART_RENDERING_FAILED = 'CHART_RENDERING_FAILED';\nexport function chartRenderingFailed(error, key, stackTrace) {\n  return { type: CHART_RENDERING_FAILED, error, key, stackTrace };\n}\n\nexport const CHART_RENDERING_SUCCEEDED = 'CHART_RENDERING_SUCCEEDED';\nexport function chartRenderingSucceeded(key) {\n  return { type: CHART_RENDERING_SUCCEEDED, key };\n}\n\nexport const REMOVE_CHART = 'REMOVE_CHART';\nexport function removeChart(key) {\n  return { type: REMOVE_CHART, key };\n}\n\nexport const ANNOTATION_QUERY_SUCCESS = 'ANNOTATION_QUERY_SUCCESS';\nexport function annotationQuerySuccess(annotation, queryResponse, key) {\n  return { type: ANNOTATION_QUERY_SUCCESS, annotation, queryResponse, key };\n}\n\nexport const ANNOTATION_QUERY_STARTED = 'ANNOTATION_QUERY_STARTED';\nexport function annotationQueryStarted(annotation, queryController, key) {\n  return { type: ANNOTATION_QUERY_STARTED, annotation, queryController, key };\n}\n\nexport const ANNOTATION_QUERY_FAILED = 'ANNOTATION_QUERY_FAILED';\nexport function annotationQueryFailed(annotation, queryResponse, key) {\n  return { type: ANNOTATION_QUERY_FAILED, annotation, queryResponse, key };\n}\n\nexport const DYNAMIC_PLUGIN_CONTROLS_READY = 'DYNAMIC_PLUGIN_CONTROLS_READY';\nexport const dynamicPluginControlsReady = () => (dispatch, getState) => {\n  const state = getState();\n  const controlsState = getControlsState(\n  state.explore,\n  state.explore.form_data);\n\n  dispatch({\n    type: DYNAMIC_PLUGIN_CONTROLS_READY,\n    key: controlsState.slice_id.value,\n    controlsState });\n\n};\n\nconst legacyChartDataRequest = async (\nformData,\nresultFormat,\nresultType,\nforce,\nmethod = 'POST',\nrequestParams = {}) =>\n{\n  const endpointType = getLegacyEndpointType({ resultFormat, resultType });\n  const allowDomainSharding =\n  // eslint-disable-next-line camelcase\n  domainShardingEnabled && (requestParams == null ? void 0 : requestParams.dashboard_id);\n  const url = getExploreUrl({\n    formData,\n    endpointType,\n    force,\n    allowDomainSharding,\n    method,\n    requestParams: requestParams.dashboard_id ?\n    { dashboard_id: requestParams.dashboard_id } :\n    {} });\n\n  const querySettings = {\n    ...requestParams,\n    url,\n    postPayload: { form_data: formData } };\n\n\n  const clientMethod =\n  'GET' && isFeatureEnabled(FeatureFlag.CLIENT_CACHE) ?\n  SupersetClient.get :\n  SupersetClient.post;\n  return clientMethod(querySettings).then(({ json, response }) => (\n\n\n  {\n    response,\n    json: { result: [json] } }));\n\n\n};\n\nconst v1ChartDataRequest = async (\nformData,\nresultFormat,\nresultType,\nforce,\nrequestParams,\nsetDataMask,\nownState) =>\n{\n  const payload = buildV1ChartDataPayload({\n    formData,\n    resultType,\n    resultFormat,\n    force,\n    setDataMask,\n    ownState });\n\n\n  // The dashboard id is added to query params for tracking purposes\n  const { slice_id: sliceId } = formData;\n  const { dashboard_id: dashboardId } = requestParams;\n\n  const qs = {};\n  if (sliceId !== undefined) qs.form_data = `{\"slice_id\":${sliceId}}`;\n  if (dashboardId !== undefined) qs.dashboard_id = dashboardId;\n  if (force !== false) qs.force = force;\n\n  const allowDomainSharding =\n  // eslint-disable-next-line camelcase\n  domainShardingEnabled && (requestParams == null ? void 0 : requestParams.dashboard_id);\n  const url = getChartDataUri({\n    path: '/api/v1/chart/data',\n    qs,\n    allowDomainSharding }).\n  toString();\n\n  const querySettings = {\n    ...requestParams,\n    url,\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(payload) };\n\n\n  return SupersetClient.post(querySettings);\n};\n\nexport async function getChartDataRequest({\n  formData,\n  setDataMask = () => {},\n  resultFormat = 'json',\n  resultType = 'full',\n  force = false,\n  method = 'POST',\n  requestParams = {},\n  ownState = {} })\n{\n  let querySettings = {\n    ...requestParams };\n\n\n  if (domainShardingEnabled) {\n    querySettings = {\n      ...querySettings,\n      mode: 'cors',\n      credentials: 'include' };\n\n  }\n\n  if (shouldUseLegacyApi(formData)) {\n    return legacyChartDataRequest(\n    formData,\n    resultFormat,\n    resultType,\n    force,\n    method,\n    querySettings);\n\n  }\n  return v1ChartDataRequest(\n  formData,\n  resultFormat,\n  resultType,\n  force,\n  querySettings,\n  setDataMask,\n  ownState);\n\n}\n\nexport function runAnnotationQuery(\nannotation,\ntimeout = 60,\nformData = null,\nkey,\nisDashboardRequest = false,\nforce = false)\n{\n  return function (dispatch, getState) {\n    const sliceKey = key || Object.keys(getState().charts)[0];\n    // make a copy of formData, not modifying original formData\n    const fd = {\n      ...(formData || getState().charts[sliceKey].latestQueryFormData) };\n\n\n    if (!requiresQuery(annotation.sourceType)) {\n      return Promise.resolve();\n    }\n\n    const granularity = fd.time_grain_sqla || fd.granularity;\n    fd.time_grain_sqla = granularity;\n    fd.granularity = granularity;\n    const overridesKeys = Object.keys(annotation.overrides);\n    if (overridesKeys.includes('since') || overridesKeys.includes('until')) {\n      annotation.overrides = {\n        ...annotation.overrides,\n        time_range: null };\n\n    }\n    const sliceFormData = Object.keys(annotation.overrides).reduce(\n    (d, k) => ({\n      ...d,\n      [k]: annotation.overrides[k] || fd[k] }),\n\n    {});\n\n\n    if (!isDashboardRequest && fd) {\n      const hasExtraFilters = fd.extra_filters && fd.extra_filters.length > 0;\n      sliceFormData.extra_filters = hasExtraFilters ?\n      fd.extra_filters :\n      undefined;\n    }\n\n    const isNative = annotation.sourceType === ANNOTATION_SOURCE_TYPES.NATIVE;\n    const url = getAnnotationJsonUrl(\n    annotation.value,\n    sliceFormData,\n    isNative,\n    force);\n\n    const controller = new AbortController();\n    const { signal } = controller;\n\n    dispatch(annotationQueryStarted(annotation, controller, sliceKey));\n\n    return SupersetClient.get({\n      url,\n      signal,\n      timeout: timeout * 1000 }).\n\n    then(({ json }) =>\n    dispatch(annotationQuerySuccess(annotation, json, sliceKey))).\n\n    catch((response) =>\n    getClientErrorObject(response).then((err) => {\n      if (err.statusText === 'timeout') {\n        dispatch(\n        annotationQueryFailed(\n        annotation,\n        { error: 'Query timeout' },\n        sliceKey));\n\n\n      } else if ((err.error || '').toLowerCase().includes('no data')) {\n        dispatch(annotationQuerySuccess(annotation, err, sliceKey));\n      } else if (err.statusText !== 'abort') {\n        dispatch(annotationQueryFailed(annotation, err, sliceKey));\n      }\n    }));\n\n  };\n}\n\nexport const TRIGGER_QUERY = 'TRIGGER_QUERY';\nexport function triggerQuery(value = true, key) {\n  return { type: TRIGGER_QUERY, value, key };\n}\n\n// this action is used for forced re-render without fetch data\nexport const RENDER_TRIGGERED = 'RENDER_TRIGGERED';\nexport function renderTriggered(value, key) {\n  return { type: RENDER_TRIGGERED, value, key };\n}\n\nexport const UPDATE_QUERY_FORM_DATA = 'UPDATE_QUERY_FORM_DATA';\nexport function updateQueryFormData(value, key) {\n  return { type: UPDATE_QUERY_FORM_DATA, value, key };\n}\n\n// in the sql lab -> explore flow, user can inline edit chart title,\n// then the chart will be assigned a new slice_id\nexport const UPDATE_CHART_ID = 'UPDATE_CHART_ID';\nexport function updateChartId(newId, key = 0) {\n  return { type: UPDATE_CHART_ID, newId, key };\n}\n\nexport const ADD_CHART = 'ADD_CHART';\nexport function addChart(chart, key) {\n  return { type: ADD_CHART, chart, key };\n}\n\nexport function exploreJSON(\nformData,\nforce = false,\ntimeout = 60,\nkey,\nmethod,\ndashboardId,\nownState)\n{\n  return async (dispatch) => {\n    const logStart = Logger.getTimestamp();\n    const controller = new AbortController();\n\n    const requestParams = {\n      signal: controller.signal,\n      timeout: timeout * 1000 };\n\n    if (dashboardId) requestParams.dashboard_id = dashboardId;\n\n    const setDataMask = (dataMask) => {\n      dispatch(updateDataMask(formData.slice_id, dataMask));\n    };\n    const chartDataRequest = getChartDataRequest({\n      setDataMask,\n      formData,\n      resultFormat: 'json',\n      resultType: 'full',\n      force,\n      method,\n      requestParams,\n      ownState });\n\n\n    dispatch(chartUpdateStarted(controller, formData, key));\n\n    const chartDataRequestCaught = chartDataRequest.\n    then(({ response, json }) => {\n      if (isFeatureEnabled(FeatureFlag.GLOBAL_ASYNC_QUERIES)) {\n        // deal with getChartDataRequest transforming the response data\n        const result = 'result' in json ? json.result : json;\n        switch (response.status) {\n          case 200:\n            // Query results returned synchronously, meaning query was already cached.\n            return Promise.resolve(result);\n          case 202:\n            // Query is running asynchronously and we must await the results\n            if (shouldUseLegacyApi(formData)) {\n              return waitForAsyncData(result[0]);\n            }\n            return waitForAsyncData(result);\n          default:\n            throw new Error(\n            `Received unexpected response status (${response.status}) while fetching chart data`);}\n\n\n      }\n\n      return json.result;\n    }).\n    then((queriesResponse) => {\n      queriesResponse.forEach((resultItem) =>\n      dispatch(\n      logEvent(LOG_ACTIONS_LOAD_CHART, {\n        slice_id: key,\n        applied_filters: resultItem.applied_filters,\n        is_cached: resultItem.is_cached,\n        force_refresh: force,\n        row_count: resultItem.rowcount,\n        datasource: formData.datasource,\n        start_offset: logStart,\n        ts: new Date().getTime(),\n        duration: Logger.getTimestamp() - logStart,\n        has_extra_filters:\n        formData.extra_filters && formData.extra_filters.length > 0,\n        viz_type: formData.viz_type,\n        data_age: resultItem.is_cached ?\n        moment(new Date()).diff(moment.utc(resultItem.cached_dttm)) :\n        null })));\n\n\n\n      return dispatch(chartUpdateSucceeded(queriesResponse, key));\n    }).\n    catch((response) => {\n      if (isFeatureEnabled(FeatureFlag.GLOBAL_ASYNC_QUERIES)) {\n        return dispatch(chartUpdateFailed([response], key));\n      }\n\n      const appendErrorLog = (errorDetails, isCached) => {\n        dispatch(\n        logEvent(LOG_ACTIONS_LOAD_CHART, {\n          slice_id: key,\n          has_err: true,\n          is_cached: isCached,\n          error_details: errorDetails,\n          datasource: formData.datasource,\n          start_offset: logStart,\n          ts: new Date().getTime(),\n          duration: Logger.getTimestamp() - logStart }));\n\n\n      };\n      if (response.name === 'AbortError') {\n        appendErrorLog('abort');\n        return dispatch(chartUpdateStopped(key));\n      }\n      return getClientErrorObject(response).then((parsedResponse) => {\n        if (response.statusText === 'timeout') {\n          appendErrorLog('timeout');\n        } else {\n          appendErrorLog(parsedResponse.error, parsedResponse.is_cached);\n        }\n        return dispatch(chartUpdateFailed([parsedResponse], key));\n      });\n    });\n\n    // only retrieve annotations when calling the legacy API\n    const annotationLayers = shouldUseLegacyApi(formData) ?\n    formData.annotation_layers || [] :\n    [];\n    const isDashboardRequest = dashboardId > 0;\n\n    return Promise.all([\n    chartDataRequestCaught,\n    dispatch(triggerQuery(false, key)),\n    dispatch(updateQueryFormData(formData, key)),\n    ...annotationLayers.map((x) =>\n    dispatch(\n    runAnnotationQuery(\n    x,\n    timeout,\n    formData,\n    key,\n    isDashboardRequest,\n    force)))]);\n\n\n\n\n  };\n}\n\nexport const GET_SAVED_CHART = 'GET_SAVED_CHART';\nexport function getSavedChart(\nformData,\nforce = false,\ntimeout = 60,\nkey,\ndashboardId,\nownState)\n{\n  /*\n   * Perform a GET request to `/explore_json`.\n   *\n   * This will return the payload of a saved chart, optionally filtered by\n   * ad-hoc or extra filters from dashboards. Eg:\n   *\n   *  GET  /explore_json?{\"chart_id\":1}\n   *  GET  /explore_json?{\"chart_id\":1,\"extra_filters\":\"...\"}\n   *\n   */\n  return exploreJSON(\n  formData,\n  force,\n  timeout,\n  key,\n  'GET',\n  dashboardId,\n  ownState);\n\n}\n\nexport const POST_CHART_FORM_DATA = 'POST_CHART_FORM_DATA';\nexport function postChartFormData(\nformData,\nforce = false,\ntimeout = 60,\nkey,\ndashboardId,\nownState)\n{\n  /*\n   * Perform a POST request to `/explore_json`.\n   *\n   * This will post the form data to the endpoint, returning a new chart.\n   *\n   */\n  return exploreJSON(\n  formData,\n  force,\n  timeout,\n  key,\n  'POST',\n  dashboardId,\n  ownState);\n\n}\n\nexport function redirectSQLLab(formData) {\n  return (dispatch) => {\n    getChartDataRequest({ formData, resultFormat: 'json', resultType: 'query' }).\n    then(({ json }) => {\n      const redirectUrl = '/superset/sqllab/';\n      const payload = {\n        datasourceKey: formData.datasource,\n        sql: json.result[0].query };\n\n      postForm(redirectUrl, payload);\n    }).\n    catch(() =>\n    dispatch(addDangerToast(t('An error occurred while loading the SQL'))));\n\n  };\n}\n\nexport function refreshChart(chartKey, force, dashboardId) {\n  return (dispatch, getState) => {var _getState$dataMask$ch;\n    const chart = (getState().charts || {})[chartKey];\n    const timeout = getState().dashboardInfo.common.conf.\n    SUPERSET_WEBSERVER_TIMEOUT;\n\n    if (\n    !chart.latestQueryFormData ||\n    Object.keys(chart.latestQueryFormData).length === 0)\n    {\n      return;\n    }\n    dispatch(\n    postChartFormData(\n    chart.latestQueryFormData,\n    force,\n    timeout,\n    chart.id,\n    dashboardId, (_getState$dataMask$ch =\n    getState().dataMask[chart.id]) == null ? void 0 : _getState$dataMask$ch.ownState));\n\n\n  };\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(CHART_UPDATE_STARTED, \"CHART_UPDATE_STARTED\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/chart/chartAction.js\");reactHotLoader.register(chartUpdateStarted, \"chartUpdateStarted\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/chart/chartAction.js\");reactHotLoader.register(CHART_UPDATE_SUCCEEDED, \"CHART_UPDATE_SUCCEEDED\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/chart/chartAction.js\");reactHotLoader.register(chartUpdateSucceeded, \"chartUpdateSucceeded\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/chart/chartAction.js\");reactHotLoader.register(CHART_UPDATE_STOPPED, \"CHART_UPDATE_STOPPED\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/chart/chartAction.js\");reactHotLoader.register(chartUpdateStopped, \"chartUpdateStopped\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/chart/chartAction.js\");reactHotLoader.register(CHART_UPDATE_FAILED, \"CHART_UPDATE_FAILED\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/chart/chartAction.js\");reactHotLoader.register(chartUpdateFailed, \"chartUpdateFailed\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/chart/chartAction.js\");reactHotLoader.register(CHART_RENDERING_FAILED, \"CHART_RENDERING_FAILED\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/chart/chartAction.js\");reactHotLoader.register(chartRenderingFailed, \"chartRenderingFailed\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/chart/chartAction.js\");reactHotLoader.register(CHART_RENDERING_SUCCEEDED, \"CHART_RENDERING_SUCCEEDED\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/chart/chartAction.js\");reactHotLoader.register(chartRenderingSucceeded, \"chartRenderingSucceeded\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/chart/chartAction.js\");reactHotLoader.register(REMOVE_CHART, \"REMOVE_CHART\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/chart/chartAction.js\");reactHotLoader.register(removeChart, \"removeChart\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/chart/chartAction.js\");reactHotLoader.register(ANNOTATION_QUERY_SUCCESS, \"ANNOTATION_QUERY_SUCCESS\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/chart/chartAction.js\");reactHotLoader.register(annotationQuerySuccess, \"annotationQuerySuccess\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/chart/chartAction.js\");reactHotLoader.register(ANNOTATION_QUERY_STARTED, \"ANNOTATION_QUERY_STARTED\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/chart/chartAction.js\");reactHotLoader.register(annotationQueryStarted, \"annotationQueryStarted\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/chart/chartAction.js\");reactHotLoader.register(ANNOTATION_QUERY_FAILED, \"ANNOTATION_QUERY_FAILED\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/chart/chartAction.js\");reactHotLoader.register(annotationQueryFailed, \"annotationQueryFailed\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/chart/chartAction.js\");reactHotLoader.register(DYNAMIC_PLUGIN_CONTROLS_READY, \"DYNAMIC_PLUGIN_CONTROLS_READY\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/chart/chartAction.js\");reactHotLoader.register(dynamicPluginControlsReady, \"dynamicPluginControlsReady\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/chart/chartAction.js\");reactHotLoader.register(legacyChartDataRequest, \"legacyChartDataRequest\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/chart/chartAction.js\");reactHotLoader.register(v1ChartDataRequest, \"v1ChartDataRequest\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/chart/chartAction.js\");reactHotLoader.register(getChartDataRequest, \"getChartDataRequest\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/chart/chartAction.js\");reactHotLoader.register(runAnnotationQuery, \"runAnnotationQuery\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/chart/chartAction.js\");reactHotLoader.register(TRIGGER_QUERY, \"TRIGGER_QUERY\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/chart/chartAction.js\");reactHotLoader.register(triggerQuery, \"triggerQuery\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/chart/chartAction.js\");reactHotLoader.register(RENDER_TRIGGERED, \"RENDER_TRIGGERED\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/chart/chartAction.js\");reactHotLoader.register(renderTriggered, \"renderTriggered\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/chart/chartAction.js\");reactHotLoader.register(UPDATE_QUERY_FORM_DATA, \"UPDATE_QUERY_FORM_DATA\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/chart/chartAction.js\");reactHotLoader.register(updateQueryFormData, \"updateQueryFormData\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/chart/chartAction.js\");reactHotLoader.register(UPDATE_CHART_ID, \"UPDATE_CHART_ID\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/chart/chartAction.js\");reactHotLoader.register(updateChartId, \"updateChartId\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/chart/chartAction.js\");reactHotLoader.register(ADD_CHART, \"ADD_CHART\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/chart/chartAction.js\");reactHotLoader.register(addChart, \"addChart\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/chart/chartAction.js\");reactHotLoader.register(exploreJSON, \"exploreJSON\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/chart/chartAction.js\");reactHotLoader.register(GET_SAVED_CHART, \"GET_SAVED_CHART\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/chart/chartAction.js\");reactHotLoader.register(getSavedChart, \"getSavedChart\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/chart/chartAction.js\");reactHotLoader.register(POST_CHART_FORM_DATA, \"POST_CHART_FORM_DATA\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/chart/chartAction.js\");reactHotLoader.register(postChartFormData, \"postChartFormData\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/chart/chartAction.js\");reactHotLoader.register(redirectSQLLab, \"redirectSQLLab\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/chart/chartAction.js\");reactHotLoader.register(refreshChart, \"refreshChart\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/chart/chartAction.js\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(__signature__, \"__signature__\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/chart/chartAction.js\");reactHotLoader.register(CHART_UPDATE_STARTED, \"CHART_UPDATE_STARTED\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/chart/chartAction.js\");reactHotLoader.register(chartUpdateStarted, \"chartUpdateStarted\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/chart/chartAction.js\");reactHotLoader.register(CHART_UPDATE_SUCCEEDED, \"CHART_UPDATE_SUCCEEDED\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/chart/chartAction.js\");reactHotLoader.register(chartUpdateSucceeded, \"chartUpdateSucceeded\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/chart/chartAction.js\");reactHotLoader.register(CHART_UPDATE_STOPPED, \"CHART_UPDATE_STOPPED\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/chart/chartAction.js\");reactHotLoader.register(chartUpdateStopped, \"chartUpdateStopped\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/chart/chartAction.js\");reactHotLoader.register(CHART_UPDATE_FAILED, \"CHART_UPDATE_FAILED\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/chart/chartAction.js\");reactHotLoader.register(chartUpdateFailed, \"chartUpdateFailed\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/chart/chartAction.js\");reactHotLoader.register(CHART_RENDERING_FAILED, \"CHART_RENDERING_FAILED\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/chart/chartAction.js\");reactHotLoader.register(chartRenderingFailed, \"chartRenderingFailed\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/chart/chartAction.js\");reactHotLoader.register(CHART_RENDERING_SUCCEEDED, \"CHART_RENDERING_SUCCEEDED\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/chart/chartAction.js\");reactHotLoader.register(chartRenderingSucceeded, \"chartRenderingSucceeded\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/chart/chartAction.js\");reactHotLoader.register(REMOVE_CHART, \"REMOVE_CHART\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/chart/chartAction.js\");reactHotLoader.register(removeChart, \"removeChart\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/chart/chartAction.js\");reactHotLoader.register(ANNOTATION_QUERY_SUCCESS, \"ANNOTATION_QUERY_SUCCESS\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/chart/chartAction.js\");reactHotLoader.register(annotationQuerySuccess, \"annotationQuerySuccess\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/chart/chartAction.js\");reactHotLoader.register(ANNOTATION_QUERY_STARTED, \"ANNOTATION_QUERY_STARTED\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/chart/chartAction.js\");reactHotLoader.register(annotationQueryStarted, \"annotationQueryStarted\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/chart/chartAction.js\");reactHotLoader.register(ANNOTATION_QUERY_FAILED, \"ANNOTATION_QUERY_FAILED\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/chart/chartAction.js\");reactHotLoader.register(annotationQueryFailed, \"annotationQueryFailed\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/chart/chartAction.js\");reactHotLoader.register(DYNAMIC_PLUGIN_CONTROLS_READY, \"DYNAMIC_PLUGIN_CONTROLS_READY\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/chart/chartAction.js\");reactHotLoader.register(dynamicPluginControlsReady, \"dynamicPluginControlsReady\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/chart/chartAction.js\");reactHotLoader.register(legacyChartDataRequest, \"legacyChartDataRequest\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/chart/chartAction.js\");reactHotLoader.register(v1ChartDataRequest, \"v1ChartDataRequest\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/chart/chartAction.js\");reactHotLoader.register(getChartDataRequest, \"getChartDataRequest\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/chart/chartAction.js\");reactHotLoader.register(runAnnotationQuery, \"runAnnotationQuery\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/chart/chartAction.js\");reactHotLoader.register(TRIGGER_QUERY, \"TRIGGER_QUERY\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/chart/chartAction.js\");reactHotLoader.register(triggerQuery, \"triggerQuery\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/chart/chartAction.js\");reactHotLoader.register(RENDER_TRIGGERED, \"RENDER_TRIGGERED\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/chart/chartAction.js\");reactHotLoader.register(renderTriggered, \"renderTriggered\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/chart/chartAction.js\");reactHotLoader.register(UPDATE_QUERY_FORM_DATA, \"UPDATE_QUERY_FORM_DATA\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/chart/chartAction.js\");reactHotLoader.register(updateQueryFormData, \"updateQueryFormData\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/chart/chartAction.js\");reactHotLoader.register(UPDATE_CHART_ID, \"UPDATE_CHART_ID\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/chart/chartAction.js\");reactHotLoader.register(updateChartId, \"updateChartId\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/chart/chartAction.js\");reactHotLoader.register(ADD_CHART, \"ADD_CHART\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/chart/chartAction.js\");reactHotLoader.register(addChart, \"addChart\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/chart/chartAction.js\");reactHotLoader.register(exploreJSON, \"exploreJSON\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/chart/chartAction.js\");reactHotLoader.register(GET_SAVED_CHART, \"GET_SAVED_CHART\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/chart/chartAction.js\");reactHotLoader.register(getSavedChart, \"getSavedChart\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/chart/chartAction.js\");reactHotLoader.register(POST_CHART_FORM_DATA, \"POST_CHART_FORM_DATA\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/chart/chartAction.js\");reactHotLoader.register(postChartFormData, \"postChartFormData\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/chart/chartAction.js\");reactHotLoader.register(redirectSQLLab, \"redirectSQLLab\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/chart/chartAction.js\");reactHotLoader.register(refreshChart, \"refreshChart\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/chart/chartAction.js\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/home/ubuntu/my_plugin/superset/superset-frontend/src/chart/chartAction.js"],"names":["allowCrossDomain","CHART_UPDATE_STARTED","chartUpdateStarted","type","CHART_UPDATE_SUCCEEDED","chartUpdateSucceeded","CHART_UPDATE_STOPPED","chartUpdateStopped","CHART_UPDATE_FAILED","chartUpdateFailed","CHART_RENDERING_FAILED","chartRenderingFailed","CHART_RENDERING_SUCCEEDED","chartRenderingSucceeded","REMOVE_CHART","removeChart","ANNOTATION_QUERY_SUCCESS","annotationQuerySuccess","ANNOTATION_QUERY_STARTED","annotationQueryStarted","ANNOTATION_QUERY_FAILED","annotationQueryFailed","DYNAMIC_PLUGIN_CONTROLS_READY","dynamicPluginControlsReady","state","getState","controlsState","getControlsState","dispatch","key","legacyChartDataRequest","method","requestParams","endpointType","getLegacyEndpointType","allowDomainSharding","domainShardingEnabled","url","getExploreUrl","dashboard_id","querySettings","postPayload","form_data","clientMethod","isFeatureEnabled","FeatureFlag","SupersetClient","json","result","v1ChartDataRequest","payload","buildV1ChartDataPayload","slice_id","qs","sliceId","dashboardId","force","path","headers","body","JSON","getChartDataRequest","setDataMask","resultFormat","resultType","ownState","mode","credentials","shouldUseLegacyApi","runAnnotationQuery","timeout","formData","isDashboardRequest","sliceKey","Object","fd","requiresQuery","annotation","Promise","granularity","overridesKeys","time_range","sliceFormData","hasExtraFilters","isNative","ANNOTATION_SOURCE_TYPES","getAnnotationJsonUrl","controller","getClientErrorObject","err","error","TRIGGER_QUERY","triggerQuery","value","RENDER_TRIGGERED","renderTriggered","UPDATE_QUERY_FORM_DATA","updateQueryFormData","UPDATE_CHART_ID","updateChartId","ADD_CHART","addChart","exploreJSON","logStart","Logger","signal","updateDataMask","chartDataRequest","chartDataRequestCaught","response","waitForAsyncData","status","queriesResponse","logEvent","applied_filters","resultItem","is_cached","force_refresh","row_count","datasource","start_offset","ts","duration","has_extra_filters","viz_type","data_age","moment","appendErrorLog","has_err","error_details","parsedResponse","annotationLayers","GET_SAVED_CHART","getSavedChart","POST_CHART_FORM_DATA","postChartFormData","redirectSQLLab","redirectUrl","datasourceKey","sql","postForm","addDangerToast","t","refreshChart","chart"],"mappings":"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B,mIACGC,qB,iIAIHC,6B,yIACAC,0B,sIAaPO,sB,kIA0CAmB,kB,8HA8CgBY,mB,+HA2CNQ,kB,8HAoFHsB,a,yHACGC,Y,wHAKHE,gB,4HACGC,e,2HAIHC,sB,kIACGC,mB,+HAMHC,e,2HACGC,a,yHAIHC,S,qHACGC,Q,oHAIAC,W,uHA8IH8B,e,2HACGC,a,yHA6BHC,oB,gIACGC,iB,6HAyBAC,c,0HAiBAO,Y,gkBA/gBH9I,oB,gIACN,kB,8HASMG,sB,kIACN,oB,gIAIME,oB,gIACN,kB,8HAIME,mB,+HACN,iB,6HAIME,sB,kIACN,oB,gIAIME,yB,qIACN,uB,mIAIME,Y,wHACN,W,uHAIME,wB,oIACN,sB,kIAIME,wB,oIACN,sB,kIAIME,uB,mIACN,qB,iIAIME,6B,yIACAC,0B,sIAaPO,sB,kIA0CAmB,kB,8HA8CC,mB,+HA2CA,kB,8HAoFM0C,a,yHACN,Y,wHAKMG,gB,4HACN,e,2HAIME,sB,kIACN,mB,+HAMME,e,2HACN,a,yHAIME,S,qHACN,Q,oHAIA,W,uHA8IMgC,e,2HACN,a,yHA6BME,oB,gIACN,iB,6HAyBA,c,0HAiBA,Y","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint no-undef: 'error' */\n/* eslint no-param-reassign: [\"error\", { \"props\": false }] */\nimport moment from 'moment';\nimport { t, SupersetClient } from '@superset-ui/core';\nimport { getControlsState } from 'src/explore/store';\nimport { isFeatureEnabled, FeatureFlag } from 'src/featureFlags';\nimport {\n  getAnnotationJsonUrl,\n  getExploreUrl,\n  getLegacyEndpointType,\n  buildV1ChartDataPayload,\n  postForm,\n  shouldUseLegacyApi,\n  getChartDataUri,\n} from 'src/explore/exploreUtils';\nimport {\n  requiresQuery,\n  ANNOTATION_SOURCE_TYPES,\n} from 'src/modules/AnnotationTypes';\n\nimport { addDangerToast } from 'src/components/MessageToasts/actions';\nimport { logEvent } from 'src/logger/actions';\nimport { Logger, LOG_ACTIONS_LOAD_CHART } from 'src/logger/LogUtils';\nimport { getClientErrorObject } from 'src/utils/getClientErrorObject';\nimport { allowCrossDomain as domainShardingEnabled } from 'src/utils/hostNamesConfig';\nimport { updateDataMask } from 'src/dataMask/actions';\nimport { waitForAsyncData } from 'src/middleware/asyncEvent';\n\nexport const CHART_UPDATE_STARTED = 'CHART_UPDATE_STARTED';\nexport function chartUpdateStarted(queryController, latestQueryFormData, key) {\n  return {\n    type: CHART_UPDATE_STARTED,\n    queryController,\n    latestQueryFormData,\n    key,\n  };\n}\n\nexport const CHART_UPDATE_SUCCEEDED = 'CHART_UPDATE_SUCCEEDED';\nexport function chartUpdateSucceeded(queriesResponse, key) {\n  return { type: CHART_UPDATE_SUCCEEDED, queriesResponse, key };\n}\n\nexport const CHART_UPDATE_STOPPED = 'CHART_UPDATE_STOPPED';\nexport function chartUpdateStopped(key) {\n  return { type: CHART_UPDATE_STOPPED, key };\n}\n\nexport const CHART_UPDATE_FAILED = 'CHART_UPDATE_FAILED';\nexport function chartUpdateFailed(queriesResponse, key) {\n  return { type: CHART_UPDATE_FAILED, queriesResponse, key };\n}\n\nexport const CHART_RENDERING_FAILED = 'CHART_RENDERING_FAILED';\nexport function chartRenderingFailed(error, key, stackTrace) {\n  return { type: CHART_RENDERING_FAILED, error, key, stackTrace };\n}\n\nexport const CHART_RENDERING_SUCCEEDED = 'CHART_RENDERING_SUCCEEDED';\nexport function chartRenderingSucceeded(key) {\n  return { type: CHART_RENDERING_SUCCEEDED, key };\n}\n\nexport const REMOVE_CHART = 'REMOVE_CHART';\nexport function removeChart(key) {\n  return { type: REMOVE_CHART, key };\n}\n\nexport const ANNOTATION_QUERY_SUCCESS = 'ANNOTATION_QUERY_SUCCESS';\nexport function annotationQuerySuccess(annotation, queryResponse, key) {\n  return { type: ANNOTATION_QUERY_SUCCESS, annotation, queryResponse, key };\n}\n\nexport const ANNOTATION_QUERY_STARTED = 'ANNOTATION_QUERY_STARTED';\nexport function annotationQueryStarted(annotation, queryController, key) {\n  return { type: ANNOTATION_QUERY_STARTED, annotation, queryController, key };\n}\n\nexport const ANNOTATION_QUERY_FAILED = 'ANNOTATION_QUERY_FAILED';\nexport function annotationQueryFailed(annotation, queryResponse, key) {\n  return { type: ANNOTATION_QUERY_FAILED, annotation, queryResponse, key };\n}\n\nexport const DYNAMIC_PLUGIN_CONTROLS_READY = 'DYNAMIC_PLUGIN_CONTROLS_READY';\nexport const dynamicPluginControlsReady = () => (dispatch, getState) => {\n  const state = getState();\n  const controlsState = getControlsState(\n    state.explore,\n    state.explore.form_data,\n  );\n  dispatch({\n    type: DYNAMIC_PLUGIN_CONTROLS_READY,\n    key: controlsState.slice_id.value,\n    controlsState,\n  });\n};\n\nconst legacyChartDataRequest = async (\n  formData,\n  resultFormat,\n  resultType,\n  force,\n  method = 'POST',\n  requestParams = {},\n) => {\n  const endpointType = getLegacyEndpointType({ resultFormat, resultType });\n  const allowDomainSharding =\n    // eslint-disable-next-line camelcase\n    domainShardingEnabled && requestParams?.dashboard_id;\n  const url = getExploreUrl({\n    formData,\n    endpointType,\n    force,\n    allowDomainSharding,\n    method,\n    requestParams: requestParams.dashboard_id\n      ? { dashboard_id: requestParams.dashboard_id }\n      : {},\n  });\n  const querySettings = {\n    ...requestParams,\n    url,\n    postPayload: { form_data: formData },\n  };\n\n  const clientMethod =\n    'GET' && isFeatureEnabled(FeatureFlag.CLIENT_CACHE)\n      ? SupersetClient.get\n      : SupersetClient.post;\n  return clientMethod(querySettings).then(({ json, response }) =>\n    // Make the legacy endpoint return a payload that corresponds to the\n    // V1 chart data endpoint response signature.\n    ({\n      response,\n      json: { result: [json] },\n    }),\n  );\n};\n\nconst v1ChartDataRequest = async (\n  formData,\n  resultFormat,\n  resultType,\n  force,\n  requestParams,\n  setDataMask,\n  ownState,\n) => {\n  const payload = buildV1ChartDataPayload({\n    formData,\n    resultType,\n    resultFormat,\n    force,\n    setDataMask,\n    ownState,\n  });\n\n  // The dashboard id is added to query params for tracking purposes\n  const { slice_id: sliceId } = formData;\n  const { dashboard_id: dashboardId } = requestParams;\n\n  const qs = {};\n  if (sliceId !== undefined) qs.form_data = `{\"slice_id\":${sliceId}}`;\n  if (dashboardId !== undefined) qs.dashboard_id = dashboardId;\n  if (force !== false) qs.force = force;\n\n  const allowDomainSharding =\n    // eslint-disable-next-line camelcase\n    domainShardingEnabled && requestParams?.dashboard_id;\n  const url = getChartDataUri({\n    path: '/api/v1/chart/data',\n    qs,\n    allowDomainSharding,\n  }).toString();\n\n  const querySettings = {\n    ...requestParams,\n    url,\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(payload),\n  };\n\n  return SupersetClient.post(querySettings);\n};\n\nexport async function getChartDataRequest({\n  formData,\n  setDataMask = () => {},\n  resultFormat = 'json',\n  resultType = 'full',\n  force = false,\n  method = 'POST',\n  requestParams = {},\n  ownState = {},\n}) {\n  let querySettings = {\n    ...requestParams,\n  };\n\n  if (domainShardingEnabled) {\n    querySettings = {\n      ...querySettings,\n      mode: 'cors',\n      credentials: 'include',\n    };\n  }\n\n  if (shouldUseLegacyApi(formData)) {\n    return legacyChartDataRequest(\n      formData,\n      resultFormat,\n      resultType,\n      force,\n      method,\n      querySettings,\n    );\n  }\n  return v1ChartDataRequest(\n    formData,\n    resultFormat,\n    resultType,\n    force,\n    querySettings,\n    setDataMask,\n    ownState,\n  );\n}\n\nexport function runAnnotationQuery(\n  annotation,\n  timeout = 60,\n  formData = null,\n  key,\n  isDashboardRequest = false,\n  force = false,\n) {\n  return function (dispatch, getState) {\n    const sliceKey = key || Object.keys(getState().charts)[0];\n    // make a copy of formData, not modifying original formData\n    const fd = {\n      ...(formData || getState().charts[sliceKey].latestQueryFormData),\n    };\n\n    if (!requiresQuery(annotation.sourceType)) {\n      return Promise.resolve();\n    }\n\n    const granularity = fd.time_grain_sqla || fd.granularity;\n    fd.time_grain_sqla = granularity;\n    fd.granularity = granularity;\n    const overridesKeys = Object.keys(annotation.overrides);\n    if (overridesKeys.includes('since') || overridesKeys.includes('until')) {\n      annotation.overrides = {\n        ...annotation.overrides,\n        time_range: null,\n      };\n    }\n    const sliceFormData = Object.keys(annotation.overrides).reduce(\n      (d, k) => ({\n        ...d,\n        [k]: annotation.overrides[k] || fd[k],\n      }),\n      {},\n    );\n\n    if (!isDashboardRequest && fd) {\n      const hasExtraFilters = fd.extra_filters && fd.extra_filters.length > 0;\n      sliceFormData.extra_filters = hasExtraFilters\n        ? fd.extra_filters\n        : undefined;\n    }\n\n    const isNative = annotation.sourceType === ANNOTATION_SOURCE_TYPES.NATIVE;\n    const url = getAnnotationJsonUrl(\n      annotation.value,\n      sliceFormData,\n      isNative,\n      force,\n    );\n    const controller = new AbortController();\n    const { signal } = controller;\n\n    dispatch(annotationQueryStarted(annotation, controller, sliceKey));\n\n    return SupersetClient.get({\n      url,\n      signal,\n      timeout: timeout * 1000,\n    })\n      .then(({ json }) =>\n        dispatch(annotationQuerySuccess(annotation, json, sliceKey)),\n      )\n      .catch(response =>\n        getClientErrorObject(response).then(err => {\n          if (err.statusText === 'timeout') {\n            dispatch(\n              annotationQueryFailed(\n                annotation,\n                { error: 'Query timeout' },\n                sliceKey,\n              ),\n            );\n          } else if ((err.error || '').toLowerCase().includes('no data')) {\n            dispatch(annotationQuerySuccess(annotation, err, sliceKey));\n          } else if (err.statusText !== 'abort') {\n            dispatch(annotationQueryFailed(annotation, err, sliceKey));\n          }\n        }),\n      );\n  };\n}\n\nexport const TRIGGER_QUERY = 'TRIGGER_QUERY';\nexport function triggerQuery(value = true, key) {\n  return { type: TRIGGER_QUERY, value, key };\n}\n\n// this action is used for forced re-render without fetch data\nexport const RENDER_TRIGGERED = 'RENDER_TRIGGERED';\nexport function renderTriggered(value, key) {\n  return { type: RENDER_TRIGGERED, value, key };\n}\n\nexport const UPDATE_QUERY_FORM_DATA = 'UPDATE_QUERY_FORM_DATA';\nexport function updateQueryFormData(value, key) {\n  return { type: UPDATE_QUERY_FORM_DATA, value, key };\n}\n\n// in the sql lab -> explore flow, user can inline edit chart title,\n// then the chart will be assigned a new slice_id\nexport const UPDATE_CHART_ID = 'UPDATE_CHART_ID';\nexport function updateChartId(newId, key = 0) {\n  return { type: UPDATE_CHART_ID, newId, key };\n}\n\nexport const ADD_CHART = 'ADD_CHART';\nexport function addChart(chart, key) {\n  return { type: ADD_CHART, chart, key };\n}\n\nexport function exploreJSON(\n  formData,\n  force = false,\n  timeout = 60,\n  key,\n  method,\n  dashboardId,\n  ownState,\n) {\n  return async dispatch => {\n    const logStart = Logger.getTimestamp();\n    const controller = new AbortController();\n\n    const requestParams = {\n      signal: controller.signal,\n      timeout: timeout * 1000,\n    };\n    if (dashboardId) requestParams.dashboard_id = dashboardId;\n\n    const setDataMask = dataMask => {\n      dispatch(updateDataMask(formData.slice_id, dataMask));\n    };\n    const chartDataRequest = getChartDataRequest({\n      setDataMask,\n      formData,\n      resultFormat: 'json',\n      resultType: 'full',\n      force,\n      method,\n      requestParams,\n      ownState,\n    });\n\n    dispatch(chartUpdateStarted(controller, formData, key));\n\n    const chartDataRequestCaught = chartDataRequest\n      .then(({ response, json }) => {\n        if (isFeatureEnabled(FeatureFlag.GLOBAL_ASYNC_QUERIES)) {\n          // deal with getChartDataRequest transforming the response data\n          const result = 'result' in json ? json.result : json;\n          switch (response.status) {\n            case 200:\n              // Query results returned synchronously, meaning query was already cached.\n              return Promise.resolve(result);\n            case 202:\n              // Query is running asynchronously and we must await the results\n              if (shouldUseLegacyApi(formData)) {\n                return waitForAsyncData(result[0]);\n              }\n              return waitForAsyncData(result);\n            default:\n              throw new Error(\n                `Received unexpected response status (${response.status}) while fetching chart data`,\n              );\n          }\n        }\n\n        return json.result;\n      })\n      .then(queriesResponse => {\n        queriesResponse.forEach(resultItem =>\n          dispatch(\n            logEvent(LOG_ACTIONS_LOAD_CHART, {\n              slice_id: key,\n              applied_filters: resultItem.applied_filters,\n              is_cached: resultItem.is_cached,\n              force_refresh: force,\n              row_count: resultItem.rowcount,\n              datasource: formData.datasource,\n              start_offset: logStart,\n              ts: new Date().getTime(),\n              duration: Logger.getTimestamp() - logStart,\n              has_extra_filters:\n                formData.extra_filters && formData.extra_filters.length > 0,\n              viz_type: formData.viz_type,\n              data_age: resultItem.is_cached\n                ? moment(new Date()).diff(moment.utc(resultItem.cached_dttm))\n                : null,\n            }),\n          ),\n        );\n        return dispatch(chartUpdateSucceeded(queriesResponse, key));\n      })\n      .catch(response => {\n        if (isFeatureEnabled(FeatureFlag.GLOBAL_ASYNC_QUERIES)) {\n          return dispatch(chartUpdateFailed([response], key));\n        }\n\n        const appendErrorLog = (errorDetails, isCached) => {\n          dispatch(\n            logEvent(LOG_ACTIONS_LOAD_CHART, {\n              slice_id: key,\n              has_err: true,\n              is_cached: isCached,\n              error_details: errorDetails,\n              datasource: formData.datasource,\n              start_offset: logStart,\n              ts: new Date().getTime(),\n              duration: Logger.getTimestamp() - logStart,\n            }),\n          );\n        };\n        if (response.name === 'AbortError') {\n          appendErrorLog('abort');\n          return dispatch(chartUpdateStopped(key));\n        }\n        return getClientErrorObject(response).then(parsedResponse => {\n          if (response.statusText === 'timeout') {\n            appendErrorLog('timeout');\n          } else {\n            appendErrorLog(parsedResponse.error, parsedResponse.is_cached);\n          }\n          return dispatch(chartUpdateFailed([parsedResponse], key));\n        });\n      });\n\n    // only retrieve annotations when calling the legacy API\n    const annotationLayers = shouldUseLegacyApi(formData)\n      ? formData.annotation_layers || []\n      : [];\n    const isDashboardRequest = dashboardId > 0;\n\n    return Promise.all([\n      chartDataRequestCaught,\n      dispatch(triggerQuery(false, key)),\n      dispatch(updateQueryFormData(formData, key)),\n      ...annotationLayers.map(x =>\n        dispatch(\n          runAnnotationQuery(\n            x,\n            timeout,\n            formData,\n            key,\n            isDashboardRequest,\n            force,\n          ),\n        ),\n      ),\n    ]);\n  };\n}\n\nexport const GET_SAVED_CHART = 'GET_SAVED_CHART';\nexport function getSavedChart(\n  formData,\n  force = false,\n  timeout = 60,\n  key,\n  dashboardId,\n  ownState,\n) {\n  /*\n   * Perform a GET request to `/explore_json`.\n   *\n   * This will return the payload of a saved chart, optionally filtered by\n   * ad-hoc or extra filters from dashboards. Eg:\n   *\n   *  GET  /explore_json?{\"chart_id\":1}\n   *  GET  /explore_json?{\"chart_id\":1,\"extra_filters\":\"...\"}\n   *\n   */\n  return exploreJSON(\n    formData,\n    force,\n    timeout,\n    key,\n    'GET',\n    dashboardId,\n    ownState,\n  );\n}\n\nexport const POST_CHART_FORM_DATA = 'POST_CHART_FORM_DATA';\nexport function postChartFormData(\n  formData,\n  force = false,\n  timeout = 60,\n  key,\n  dashboardId,\n  ownState,\n) {\n  /*\n   * Perform a POST request to `/explore_json`.\n   *\n   * This will post the form data to the endpoint, returning a new chart.\n   *\n   */\n  return exploreJSON(\n    formData,\n    force,\n    timeout,\n    key,\n    'POST',\n    dashboardId,\n    ownState,\n  );\n}\n\nexport function redirectSQLLab(formData) {\n  return dispatch => {\n    getChartDataRequest({ formData, resultFormat: 'json', resultType: 'query' })\n      .then(({ json }) => {\n        const redirectUrl = '/superset/sqllab/';\n        const payload = {\n          datasourceKey: formData.datasource,\n          sql: json.result[0].query,\n        };\n        postForm(redirectUrl, payload);\n      })\n      .catch(() =>\n        dispatch(addDangerToast(t('An error occurred while loading the SQL'))),\n      );\n  };\n}\n\nexport function refreshChart(chartKey, force, dashboardId) {\n  return (dispatch, getState) => {\n    const chart = (getState().charts || {})[chartKey];\n    const timeout = getState().dashboardInfo.common.conf\n      .SUPERSET_WEBSERVER_TIMEOUT;\n\n    if (\n      !chart.latestQueryFormData ||\n      Object.keys(chart.latestQueryFormData).length === 0\n    ) {\n      return;\n    }\n    dispatch(\n      postChartFormData(\n        chart.latestQueryFormData,\n        force,\n        timeout,\n        chart.id,\n        dashboardId,\n        getState().dataMask[chart.id]?.ownState,\n      ),\n    );\n  };\n}\n"]},"metadata":{},"sourceType":"module"}