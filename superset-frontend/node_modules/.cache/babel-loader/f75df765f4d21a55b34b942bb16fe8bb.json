{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint-disable camelcase */\nimport {\nADD_SLICE,\nON_CHANGE,\nON_SAVE,\nREMOVE_SLICE,\nSET_COLOR_SCHEME,\nSET_EDIT_MODE,\nSET_MAX_UNDO_HISTORY_EXCEEDED,\nSET_UNSAVED_CHANGES,\nSHOW_BUILDER_PANE,\nTOGGLE_EXPAND_SLICE,\nTOGGLE_FAVE_STAR,\nTOGGLE_PUBLISHED,\nUPDATE_CSS,\nSET_REFRESH_FREQUENCY,\nON_REFRESH,\nON_REFRESH_SUCCESS,\nSET_DIRECT_PATH,\nSET_FOCUSED_FILTER_FIELD,\nUNSET_FOCUSED_FILTER_FIELD,\nSET_ACTIVE_TABS,\nSET_FULL_SIZE_CHART_ID } from\n'../actions/dashboardState';\nimport { HYDRATE_DASHBOARD } from '../actions/hydrate';\n\nexport default function dashboardStateReducer(state = {}, action) {\n  const actionHandlers = {\n    [HYDRATE_DASHBOARD]() {\n      return { ...state, ...action.data.dashboardState };\n    },\n    [UPDATE_CSS]() {\n      return { ...state, css: action.css };\n    },\n    [ADD_SLICE]() {\n      const updatedSliceIds = new Set(state.sliceIds);\n      updatedSliceIds.add(action.slice.slice_id);\n      return {\n        ...state,\n        sliceIds: Array.from(updatedSliceIds) };\n\n    },\n    [REMOVE_SLICE]() {\n      const { sliceId } = action;\n      const updatedSliceIds = new Set(state.sliceIds);\n      updatedSliceIds.delete(sliceId);\n\n      return {\n        ...state,\n        sliceIds: Array.from(updatedSliceIds) };\n\n    },\n    [TOGGLE_FAVE_STAR]() {\n      return { ...state, isStarred: action.isStarred };\n    },\n    [TOGGLE_PUBLISHED]() {\n      return { ...state, isPublished: action.isPublished };\n    },\n    [SET_EDIT_MODE]() {\n      return {\n        ...state,\n        editMode: action.editMode };\n\n    },\n    [SET_MAX_UNDO_HISTORY_EXCEEDED]() {\n      const { maxUndoHistoryExceeded = true } = action.payload;\n      return { ...state, maxUndoHistoryExceeded };\n    },\n    [SHOW_BUILDER_PANE]() {\n      return { ...state };\n    },\n    [SET_COLOR_SCHEME]() {\n      return {\n        ...state,\n        colorScheme: action.colorScheme,\n        updatedColorScheme: true };\n\n    },\n    [TOGGLE_EXPAND_SLICE]() {\n      const updatedExpandedSlices = { ...state.expandedSlices };\n      const { sliceId } = action;\n      if (updatedExpandedSlices[sliceId]) {\n        delete updatedExpandedSlices[sliceId];\n      } else {\n        updatedExpandedSlices[sliceId] = true;\n      }\n      return { ...state, expandedSlices: updatedExpandedSlices };\n    },\n    [ON_CHANGE]() {\n      return { ...state, hasUnsavedChanges: true };\n    },\n    [ON_SAVE]() {\n      return {\n        ...state,\n        hasUnsavedChanges: false,\n        maxUndoHistoryExceeded: false,\n        editMode: false,\n        updatedColorScheme: false,\n        // server-side returns last_modified_time for latest change\n        lastModifiedTime: action.lastModifiedTime };\n\n    },\n    [SET_UNSAVED_CHANGES]() {\n      const { hasUnsavedChanges } = action.payload;\n      return { ...state, hasUnsavedChanges };\n    },\n    [SET_REFRESH_FREQUENCY]() {\n      return {\n        ...state,\n        refreshFrequency: action.refreshFrequency,\n        shouldPersistRefreshFrequency: action.isPersistent,\n        hasUnsavedChanges: action.isPersistent };\n\n    },\n    [ON_REFRESH]() {\n      return {\n        ...state,\n        isRefreshing: true };\n\n    },\n    [ON_REFRESH_SUCCESS]() {\n      return {\n        ...state,\n        isRefreshing: false };\n\n    },\n    [SET_DIRECT_PATH]() {\n      return {\n        ...state,\n        directPathToChild: action.path,\n        directPathLastUpdated: Date.now() };\n\n    },\n    [SET_ACTIVE_TABS]() {\n      const newActiveTabs = new Set(state.activeTabs);\n      newActiveTabs.delete(action.prevTabId);\n      newActiveTabs.add(action.tabId);\n      return {\n        ...state,\n        activeTabs: Array.from(newActiveTabs) };\n\n    },\n    [SET_FOCUSED_FILTER_FIELD]() {\n      return {\n        ...state,\n        focusedFilterField: {\n          chartId: action.chartId,\n          column: action.column } };\n\n\n    },\n    [UNSET_FOCUSED_FILTER_FIELD]() {\n      // dashboard only has 1 focused filter field at a time,\n      // but when user switch different filter boxes,\n      // browser didn't always fire onBlur and onFocus events in order.\n      if (\n      !state.focusedFilterField ||\n      action.chartId !== state.focusedFilterField.chartId ||\n      action.column !== state.focusedFilterField.column)\n      {\n        return state;\n      }\n      return {\n        ...state,\n        focusedFilterField: null };\n\n    },\n    [SET_FULL_SIZE_CHART_ID]() {\n      return {\n        ...state,\n        fullSizeChartId: action.chartId };\n\n    } };\n\n\n  if (action.type in actionHandlers) {\n    return actionHandlers[action.type]();\n  }\n  return state;\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(dashboardStateReducer, \"dashboardStateReducer\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/reducers/dashboardState.js\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/reducers/dashboardState.js"],"names":["ADD_SLICE","ON_CHANGE","ON_SAVE","REMOVE_SLICE","SET_COLOR_SCHEME","SET_EDIT_MODE","SET_MAX_UNDO_HISTORY_EXCEEDED","SET_UNSAVED_CHANGES","SHOW_BUILDER_PANE","TOGGLE_EXPAND_SLICE","TOGGLE_FAVE_STAR","TOGGLE_PUBLISHED","UPDATE_CSS","SET_REFRESH_FREQUENCY","ON_REFRESH","ON_REFRESH_SUCCESS","SET_DIRECT_PATH","SET_FOCUSED_FILTER_FIELD","UNSET_FOCUSED_FILTER_FIELD","SET_ACTIVE_TABS","SET_FULL_SIZE_CHART_ID","HYDRATE_DASHBOARD","dashboardStateReducer","state","action","actionHandlers","data","dashboardState","css","updatedSliceIds","Set","sliceIds","add","slice","slice_id","Array","from","sliceId","delete","isStarred","isPublished","editMode","maxUndoHistoryExceeded","payload","colorScheme","updatedColorScheme","updatedExpandedSlices","expandedSlices","hasUnsavedChanges","lastModifiedTime","refreshFrequency","shouldPersistRefreshFrequency","isPersistent","isRefreshing","directPathToChild","path","directPathLastUpdated","Date","now","newActiveTabs","activeTabs","prevTabId","tabId","focusedFilterField","chartId","column","fullSizeChartId","type"],"mappings":"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","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint-disable camelcase */\nimport {\n  ADD_SLICE,\n  ON_CHANGE,\n  ON_SAVE,\n  REMOVE_SLICE,\n  SET_COLOR_SCHEME,\n  SET_EDIT_MODE,\n  SET_MAX_UNDO_HISTORY_EXCEEDED,\n  SET_UNSAVED_CHANGES,\n  SHOW_BUILDER_PANE,\n  TOGGLE_EXPAND_SLICE,\n  TOGGLE_FAVE_STAR,\n  TOGGLE_PUBLISHED,\n  UPDATE_CSS,\n  SET_REFRESH_FREQUENCY,\n  ON_REFRESH,\n  ON_REFRESH_SUCCESS,\n  SET_DIRECT_PATH,\n  SET_FOCUSED_FILTER_FIELD,\n  UNSET_FOCUSED_FILTER_FIELD,\n  SET_ACTIVE_TABS,\n  SET_FULL_SIZE_CHART_ID,\n} from '../actions/dashboardState';\nimport { HYDRATE_DASHBOARD } from '../actions/hydrate';\n\nexport default function dashboardStateReducer(state = {}, action) {\n  const actionHandlers = {\n    [HYDRATE_DASHBOARD]() {\n      return { ...state, ...action.data.dashboardState };\n    },\n    [UPDATE_CSS]() {\n      return { ...state, css: action.css };\n    },\n    [ADD_SLICE]() {\n      const updatedSliceIds = new Set(state.sliceIds);\n      updatedSliceIds.add(action.slice.slice_id);\n      return {\n        ...state,\n        sliceIds: Array.from(updatedSliceIds),\n      };\n    },\n    [REMOVE_SLICE]() {\n      const { sliceId } = action;\n      const updatedSliceIds = new Set(state.sliceIds);\n      updatedSliceIds.delete(sliceId);\n\n      return {\n        ...state,\n        sliceIds: Array.from(updatedSliceIds),\n      };\n    },\n    [TOGGLE_FAVE_STAR]() {\n      return { ...state, isStarred: action.isStarred };\n    },\n    [TOGGLE_PUBLISHED]() {\n      return { ...state, isPublished: action.isPublished };\n    },\n    [SET_EDIT_MODE]() {\n      return {\n        ...state,\n        editMode: action.editMode,\n      };\n    },\n    [SET_MAX_UNDO_HISTORY_EXCEEDED]() {\n      const { maxUndoHistoryExceeded = true } = action.payload;\n      return { ...state, maxUndoHistoryExceeded };\n    },\n    [SHOW_BUILDER_PANE]() {\n      return { ...state };\n    },\n    [SET_COLOR_SCHEME]() {\n      return {\n        ...state,\n        colorScheme: action.colorScheme,\n        updatedColorScheme: true,\n      };\n    },\n    [TOGGLE_EXPAND_SLICE]() {\n      const updatedExpandedSlices = { ...state.expandedSlices };\n      const { sliceId } = action;\n      if (updatedExpandedSlices[sliceId]) {\n        delete updatedExpandedSlices[sliceId];\n      } else {\n        updatedExpandedSlices[sliceId] = true;\n      }\n      return { ...state, expandedSlices: updatedExpandedSlices };\n    },\n    [ON_CHANGE]() {\n      return { ...state, hasUnsavedChanges: true };\n    },\n    [ON_SAVE]() {\n      return {\n        ...state,\n        hasUnsavedChanges: false,\n        maxUndoHistoryExceeded: false,\n        editMode: false,\n        updatedColorScheme: false,\n        // server-side returns last_modified_time for latest change\n        lastModifiedTime: action.lastModifiedTime,\n      };\n    },\n    [SET_UNSAVED_CHANGES]() {\n      const { hasUnsavedChanges } = action.payload;\n      return { ...state, hasUnsavedChanges };\n    },\n    [SET_REFRESH_FREQUENCY]() {\n      return {\n        ...state,\n        refreshFrequency: action.refreshFrequency,\n        shouldPersistRefreshFrequency: action.isPersistent,\n        hasUnsavedChanges: action.isPersistent,\n      };\n    },\n    [ON_REFRESH]() {\n      return {\n        ...state,\n        isRefreshing: true,\n      };\n    },\n    [ON_REFRESH_SUCCESS]() {\n      return {\n        ...state,\n        isRefreshing: false,\n      };\n    },\n    [SET_DIRECT_PATH]() {\n      return {\n        ...state,\n        directPathToChild: action.path,\n        directPathLastUpdated: Date.now(),\n      };\n    },\n    [SET_ACTIVE_TABS]() {\n      const newActiveTabs = new Set(state.activeTabs);\n      newActiveTabs.delete(action.prevTabId);\n      newActiveTabs.add(action.tabId);\n      return {\n        ...state,\n        activeTabs: Array.from(newActiveTabs),\n      };\n    },\n    [SET_FOCUSED_FILTER_FIELD]() {\n      return {\n        ...state,\n        focusedFilterField: {\n          chartId: action.chartId,\n          column: action.column,\n        },\n      };\n    },\n    [UNSET_FOCUSED_FILTER_FIELD]() {\n      // dashboard only has 1 focused filter field at a time,\n      // but when user switch different filter boxes,\n      // browser didn't always fire onBlur and onFocus events in order.\n      if (\n        !state.focusedFilterField ||\n        action.chartId !== state.focusedFilterField.chartId ||\n        action.column !== state.focusedFilterField.column\n      ) {\n        return state;\n      }\n      return {\n        ...state,\n        focusedFilterField: null,\n      };\n    },\n    [SET_FULL_SIZE_CHART_ID]() {\n      return {\n        ...state,\n        fullSizeChartId: action.chartId,\n      };\n    },\n  };\n\n  if (action.type in actionHandlers) {\n    return actionHandlers[action.type]();\n  }\n  return state;\n}\n"]},"metadata":{},"sourceType":"module"}