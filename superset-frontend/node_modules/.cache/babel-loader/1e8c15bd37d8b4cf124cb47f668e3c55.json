{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;};function cleanAndFormat(value, formatFunc) {\n  if (value === null || value === undefined || Number.isNaN(value)) {\n    return \"\" + value;\n  }\n\n  if (value === Number.POSITIVE_INFINITY) {\n    return '∞';\n  }\n\n  if (value === Number.NEGATIVE_INFINITY) {\n    return '-∞';\n  }\n\n  return formatFunc(value);\n}\n\nexport default function createNumberFormatter(formatFunc, metadata) {\n  const format = (value) => cleanAndFormat(value, formatFunc);\n\n  if (typeof metadata !== 'undefined') {\n    const {\n      id,\n      label,\n      description,\n      isInvalid = false } =\n    metadata;\n    format.id = id;\n    format.label = label;\n    format.description = description;\n    format.isInvalid = isInvalid;\n  }\n\n  return format;\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(cleanAndFormat, \"cleanAndFormat\", \"/home/ubuntu/my_plugin/superset/superset-frontend/node_modules/@encodable/format/esm/number/createNumberFormatter.js\");reactHotLoader.register(createNumberFormatter, \"createNumberFormatter\", \"/home/ubuntu/my_plugin/superset/superset-frontend/node_modules/@encodable/format/esm/number/createNumberFormatter.js\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/home/ubuntu/my_plugin/superset/superset-frontend/node_modules/@encodable/format/esm/number/createNumberFormatter.js"],"names":["cleanAndFormat","value","formatFunc","undefined","Number","isNaN","POSITIVE_INFINITY","NEGATIVE_INFINITY","createNumberFormatter","metadata","format","id","label","description","isInvalid"],"mappings":"uSAAA,SAASA,cAAT,CAAwBC,KAAxB,EAA+BC,UAA/B,EAA2C;AACzC,MAAID,KAAK,KAAK,IAAV,IAAkBA,KAAK,KAAKE,SAA5B,IAAyCC,MAAM,CAACC,KAAP,CAAaJ,KAAb,CAA7C,EAAkE;AAChE,WAAO,KAAKA,KAAZ;AACD;;AAED,MAAIA,KAAK,KAAKG,MAAM,CAACE,iBAArB,EAAwC;AACtC,WAAO,GAAP;AACD;;AAED,MAAIL,KAAK,KAAKG,MAAM,CAACG,iBAArB,EAAwC;AACtC,WAAO,IAAP;AACD;;AAED,SAAOL,UAAU,CAACD,KAAD,CAAjB;AACD;;AAED,eAAe,SAASO,qBAAT,CAA+BN,UAA/B,EAA2CO,QAA3C,EAAqD;AAClE,QAAMC,MAAM,GAAG,CAAAT,KAAK,KAAID,cAAc,CAACC,KAAD,EAAQC,UAAR,CAAtC;;AAEA,MAAI,OAAOO,QAAP,KAAoB,WAAxB,EAAqC;AACnC,UAAM;AACJE,MAAAA,EADI;AAEJC,MAAAA,KAFI;AAGJC,MAAAA,WAHI;AAIJC,MAAAA,SAAS,GAAG,KAJR;AAKFL,IAAAA,QALJ;AAMAC,IAAAA,MAAM,CAACC,EAAP,GAAYA,EAAZ;AACAD,IAAAA,MAAM,CAACE,KAAP,GAAeA,KAAf;AACAF,IAAAA,MAAM,CAACG,WAAP,GAAqBA,WAArB;AACAH,IAAAA,MAAM,CAACI,SAAP,GAAmBA,SAAnB;AACD;;AAED,SAAOJ,MAAP;AACD,C,iLAjCQV,c,oKAgBeQ,qB","sourcesContent":["function cleanAndFormat(value, formatFunc) {\n  if (value === null || value === undefined || Number.isNaN(value)) {\n    return \"\" + value;\n  }\n\n  if (value === Number.POSITIVE_INFINITY) {\n    return '∞';\n  }\n\n  if (value === Number.NEGATIVE_INFINITY) {\n    return '-∞';\n  }\n\n  return formatFunc(value);\n}\n\nexport default function createNumberFormatter(formatFunc, metadata) {\n  const format = value => cleanAndFormat(value, formatFunc);\n\n  if (typeof metadata !== 'undefined') {\n    const {\n      id,\n      label,\n      description,\n      isInvalid = false\n    } = metadata;\n    format.id = id;\n    format.label = label;\n    format.description = description;\n    format.isInvalid = isInvalid;\n  }\n\n  return format;\n}"]},"metadata":{},"sourceType":"module"}