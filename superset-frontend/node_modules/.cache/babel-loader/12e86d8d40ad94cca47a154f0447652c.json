{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/my_plugin/superset/superset-frontend/src/components/TableSelector/index.tsx\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState, useMemo, useEffect } from 'react';\nimport { styled, SupersetClient, t } from '@superset-ui/core';\nimport { Select } from 'src/components';\nimport { FormLabel } from 'src/components/Form';\nimport Icons from 'src/components/Icons';\nimport DatabaseSelector from 'src/components/DatabaseSelector';\nimport RefreshLabel from 'src/components/RefreshLabel';\nimport CertifiedIcon from 'src/components/CertifiedIcon';\nimport WarningIconWithTooltip from 'src/components/WarningIconWithTooltip';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst TableSelectorWrapper = styled.div`\n  ${({ theme }) => `\n    .refresh {\n      display: flex;\n      align-items: center;\n      width: 30px;\n      margin-left: ${theme.gridUnit}px;\n      margin-top: ${theme.gridUnit * 5}px;\n    }\n\n    .section {\n      display: flex;\n      flex-direction: row;\n      align-items: center;\n    }\n\n    .divider {\n      border-bottom: 1px solid ${theme.colors.secondary.light5};\n      margin: 15px 0;\n    }\n\n    .table-length {\n      color: ${theme.colors.grayscale.light1};\n    }\n\n    .select {\n      flex: 1;\n    }\n  `}\n`;\nconst TableLabel = styled.span`\n  align-items: center;\n  display: flex;\n  white-space: nowrap;\n\n  svg,\n  small {\n    margin-right: ${({ theme }) => theme.gridUnit}px;\n  }\n`;\nconst TableOption = ({ table }) => {\n  const { label, type, extra } = table;\n  return ___EmotionJSX(TableLabel, { title: label, __self: this, __source: { fileName: _jsxFileName, lineNumber: 70, columnNumber: 13 } },\n  type === 'view' ? ___EmotionJSX(Icons.Eye, { iconSize: \"m\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 71, columnNumber: 27 } }) : ___EmotionJSX(Icons.Table, { iconSize: \"m\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 71, columnNumber: 57 } }),\n  (extra == null ? void 0 : extra.certification) && ___EmotionJSX(CertifiedIcon, { certifiedBy: extra.certification.certified_by, details: extra.certification.details, size: \"l\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 72, columnNumber: 33 } }),\n  (extra == null ? void 0 : extra.warning_markdown) && ___EmotionJSX(WarningIconWithTooltip, { warningMarkdown: extra.warning_markdown, size: \"l\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 73, columnNumber: 36 } }),\n  label);\n\n};\nconst TableSelector = ({ database, formMode = false, getDbList, handleError, isDatabaseSelectEnabled = true, onDbChange, onSchemaChange, onSchemasLoad, onTableChange, onTablesLoad, readOnly = false, schema, sqlLabMode = true, tableName }) => {\n  const [currentDatabase, setCurrentDatabase] = useState(database);\n  const [currentSchema, setCurrentSchema] = useState(schema);\n  const [currentTable, setCurrentTable] = useState();\n  const [refresh, setRefresh] = useState(0);\n  const [previousRefresh, setPreviousRefresh] = useState(0);\n  const [loadingTables, setLoadingTables] = useState(false);\n  const [tableOptions, setTableOptions] = useState([]);\n  useEffect(() => {\n    // reset selections\n    if (database === undefined) {\n      setCurrentDatabase(undefined);\n      setCurrentSchema(undefined);\n      setCurrentTable(undefined);\n    }\n  }, [database]);\n  useEffect(() => {\n    if (currentDatabase && currentSchema) {\n      setLoadingTables(true);\n      const encodedSchema = encodeURIComponent(currentSchema);\n      const forceRefresh = refresh !== previousRefresh;\n      // TODO: Would be nice to add pagination in a follow-up. Needs endpoint changes.\n      const endpoint = encodeURI(`/superset/tables/${currentDatabase.id}/${encodedSchema}/undefined/${forceRefresh}/`);\n      if (previousRefresh !== refresh) {\n        setPreviousRefresh(refresh);\n      }\n      SupersetClient.get({ endpoint }).\n      then(({ json }) => {\n        const options = [];\n        let currentTable;\n        json.options.forEach((table) => {\n          const option = {\n            value: table.value,\n            label: ___EmotionJSX(TableOption, { table: table, __self: this, __source: { fileName: _jsxFileName, lineNumber: 110, columnNumber: 32 } }),\n            text: table.label };\n\n          options.push(option);\n          if (table.label === tableName) {\n            currentTable = option;\n          }\n        });\n        if (onTablesLoad) {\n          onTablesLoad(json.options);\n        }\n        setTableOptions(options.sort((a, b) => a.text.localeCompare(b.text)));\n        setCurrentTable(currentTable);\n        setLoadingTables(false);\n      }).\n      catch((e) => {\n        setLoadingTables(false);\n        handleError(t('There was an error loading the tables'));\n      });\n    }\n    // We are using the refresh state to re-trigger the query\n    // previousRefresh should be out of dependencies array\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentDatabase, currentSchema, onTablesLoad, refresh]);\n  function renderSelectRow(select, refreshBtn) {\n    return ___EmotionJSX(\"div\", { className: \"section\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 135, columnNumber: 17 } },\n    ___EmotionJSX(\"span\", { className: \"select\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 136, columnNumber: 9 } }, select),\n    ___EmotionJSX(\"span\", { className: \"refresh\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 137, columnNumber: 9 } }, refreshBtn));\n\n  }\n  const internalTableChange = (table) => {\n    setCurrentTable(table);\n    if (onTableChange && currentSchema) {\n      onTableChange(table == null ? void 0 : table.value, currentSchema);\n    }\n  };\n  const internalDbChange = (db) => {\n    setCurrentDatabase(db);\n    if (onDbChange) {\n      onDbChange(db);\n    }\n  };\n  const internalSchemaChange = (schema) => {\n    setCurrentSchema(schema);\n    if (onSchemaChange) {\n      onSchemaChange(schema);\n    }\n    internalTableChange(undefined);\n  };\n  function renderDatabaseSelector() {\n    return ___EmotionJSX(DatabaseSelector, { key: currentDatabase == null ? void 0 : currentDatabase.id, db: currentDatabase, formMode: formMode, getDbList: getDbList, handleError: handleError, onDbChange: readOnly ? undefined : internalDbChange, onSchemaChange: readOnly ? undefined : internalSchemaChange, onSchemasLoad: onSchemasLoad, schema: currentSchema, sqlLabMode: sqlLabMode, isDatabaseSelectEnabled: isDatabaseSelectEnabled && !readOnly, readOnly: readOnly, __self: this, __source: { fileName: _jsxFileName, lineNumber: 160, columnNumber: 17 } });\n  }\n  const handleFilterOption = useMemo(() => (search, option) => {\n    const searchValue = search.trim().toLowerCase();\n    const { text } = option;\n    return text.toLowerCase().includes(searchValue);\n  }, []);\n  function renderTableSelect() {\n    const disabled = currentSchema && !formMode && readOnly ||\n    !currentSchema && !(database != null && database.allow_multi_schema_metadata_fetch);\n    const header = sqlLabMode ? ___EmotionJSX(FormLabel, { __self: this, __source: { fileName: _jsxFileName, lineNumber: 170, columnNumber: 38 } }, t('See table schema')) : ___EmotionJSX(FormLabel, { __self: this, __source: { fileName: _jsxFileName, lineNumber: 170, columnNumber: 89 } }, t('Table'));\n    const select = ___EmotionJSX(Select, { ariaLabel: t('Select table or type table name'), disabled: disabled, filterOption: handleFilterOption, header: header, labelInValue: true, lazyLoading: false, loading: loadingTables, name: \"select-table\", onChange: (table) => internalTableChange(table), options: tableOptions, placeholder: t('Select table or type table name'), showSearch: true, value: currentTable, __self: this, __source: { fileName: _jsxFileName, lineNumber: 171, columnNumber: 25 } });\n    const refreshLabel = !formMode && !readOnly && ___EmotionJSX(RefreshLabel, { onClick: () => setRefresh(refresh + 1), tooltipContent: t('Force refresh table list'), __self: this, __source: { fileName: _jsxFileName, lineNumber: 172, columnNumber: 57 } });\n    return renderSelectRow(select, refreshLabel);\n  }\n  return ___EmotionJSX(TableSelectorWrapper, { __self: this, __source: { fileName: _jsxFileName, lineNumber: 175, columnNumber: 13 } },\n  renderDatabaseSelector(),\n  sqlLabMode && !formMode && ___EmotionJSX(\"div\", { className: \"divider\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 177, columnNumber: 35 } }),\n  renderTableSelect());\n\n};__signature__(TableSelector, \"useState{[currentDatabase, setCurrentDatabase](database)}\\nuseState{[currentSchema, setCurrentSchema](schema)}\\nuseState{[currentTable, setCurrentTable]}\\nuseState{[refresh, setRefresh](0)}\\nuseState{[previousRefresh, setPreviousRefresh](0)}\\nuseState{[loadingTables, setLoadingTables](false)}\\nuseState{[tableOptions, setTableOptions]([])}\\nuseEffect{}\\nuseEffect{}\\nuseMemo{handleFilterOption}\");const _default =\nTableSelector;export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(TableSelectorWrapper, \"TableSelectorWrapper\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/components/TableSelector/index.tsx\");reactHotLoader.register(TableLabel, \"TableLabel\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/components/TableSelector/index.tsx\");reactHotLoader.register(TableOption, \"TableOption\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/components/TableSelector/index.tsx\");reactHotLoader.register(TableSelector, \"TableSelector\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/components/TableSelector/index.tsx\");reactHotLoader.register(_default, \"default\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/components/TableSelector/index.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/home/ubuntu/my_plugin/superset/superset-frontend/src/components/TableSelector/index.tsx"],"names":[],"mappings":"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","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, {\n  FunctionComponent,\n  useState,\n  ReactNode,\n  useMemo,\n  useEffect,\n} from 'react';\nimport { styled, SupersetClient, t } from '@superset-ui/core';\nimport { Select } from 'src/components';\nimport { FormLabel } from 'src/components/Form';\nimport Icons from 'src/components/Icons';\nimport DatabaseSelector, {\n  DatabaseObject,\n} from 'src/components/DatabaseSelector';\nimport RefreshLabel from 'src/components/RefreshLabel';\nimport CertifiedIcon from 'src/components/CertifiedIcon';\nimport WarningIconWithTooltip from 'src/components/WarningIconWithTooltip';\n\nconst TableSelectorWrapper = styled.div`\n  ${({ theme }) => `\n    .refresh {\n      display: flex;\n      align-items: center;\n      width: 30px;\n      margin-left: ${theme.gridUnit}px;\n      margin-top: ${theme.gridUnit * 5}px;\n    }\n\n    .section {\n      display: flex;\n      flex-direction: row;\n      align-items: center;\n    }\n\n    .divider {\n      border-bottom: 1px solid ${theme.colors.secondary.light5};\n      margin: 15px 0;\n    }\n\n    .table-length {\n      color: ${theme.colors.grayscale.light1};\n    }\n\n    .select {\n      flex: 1;\n    }\n  `}\n`;\n\nconst TableLabel = styled.span`\n  align-items: center;\n  display: flex;\n  white-space: nowrap;\n\n  svg,\n  small {\n    margin-right: ${({ theme }) => theme.gridUnit}px;\n  }\n`;\n\ninterface TableSelectorProps {\n  clearable?: boolean;\n  database?: DatabaseObject;\n  formMode?: boolean;\n  getDbList?: (arg0: any) => {};\n  handleError: (msg: string) => void;\n  isDatabaseSelectEnabled?: boolean;\n  onDbChange?: (db: DatabaseObject) => void;\n  onSchemaChange?: (schema?: string) => void;\n  onSchemasLoad?: () => void;\n  onTableChange?: (tableName?: string, schema?: string) => void;\n  onTablesLoad?: (options: Array<any>) => void;\n  readOnly?: boolean;\n  schema?: string;\n  sqlLabMode?: boolean;\n  tableName?: string;\n}\n\ninterface Table {\n  label: string;\n  value: string;\n  type: string;\n  extra?: {\n    certification?: {\n      certified_by: string;\n      details: string;\n    };\n    warning_markdown?: string;\n  };\n}\n\ninterface TableOption {\n  label: JSX.Element;\n  text: string;\n  value: string;\n}\n\nconst TableOption = ({ table }: { table: Table }) => {\n  const { label, type, extra } = table;\n  return (\n    <TableLabel title={label}>\n      {type === 'view' ? (\n        <Icons.Eye iconSize=\"m\" />\n      ) : (\n        <Icons.Table iconSize=\"m\" />\n      )}\n      {extra?.certification && (\n        <CertifiedIcon\n          certifiedBy={extra.certification.certified_by}\n          details={extra.certification.details}\n          size=\"l\"\n        />\n      )}\n      {extra?.warning_markdown && (\n        <WarningIconWithTooltip\n          warningMarkdown={extra.warning_markdown}\n          size=\"l\"\n        />\n      )}\n      {label}\n    </TableLabel>\n  );\n};\n\nconst TableSelector: FunctionComponent<TableSelectorProps> = ({\n  database,\n  formMode = false,\n  getDbList,\n  handleError,\n  isDatabaseSelectEnabled = true,\n  onDbChange,\n  onSchemaChange,\n  onSchemasLoad,\n  onTableChange,\n  onTablesLoad,\n  readOnly = false,\n  schema,\n  sqlLabMode = true,\n  tableName,\n}) => {\n  const [currentDatabase, setCurrentDatabase] = useState<\n    DatabaseObject | undefined\n  >(database);\n  const [currentSchema, setCurrentSchema] = useState<string | undefined>(\n    schema,\n  );\n  const [currentTable, setCurrentTable] = useState<TableOption | undefined>();\n  const [refresh, setRefresh] = useState(0);\n  const [previousRefresh, setPreviousRefresh] = useState(0);\n  const [loadingTables, setLoadingTables] = useState(false);\n  const [tableOptions, setTableOptions] = useState<TableOption[]>([]);\n\n  useEffect(() => {\n    // reset selections\n    if (database === undefined) {\n      setCurrentDatabase(undefined);\n      setCurrentSchema(undefined);\n      setCurrentTable(undefined);\n    }\n  }, [database]);\n\n  useEffect(() => {\n    if (currentDatabase && currentSchema) {\n      setLoadingTables(true);\n      const encodedSchema = encodeURIComponent(currentSchema);\n      const forceRefresh = refresh !== previousRefresh;\n      // TODO: Would be nice to add pagination in a follow-up. Needs endpoint changes.\n      const endpoint = encodeURI(\n        `/superset/tables/${currentDatabase.id}/${encodedSchema}/undefined/${forceRefresh}/`,\n      );\n\n      if (previousRefresh !== refresh) {\n        setPreviousRefresh(refresh);\n      }\n\n      SupersetClient.get({ endpoint })\n        .then(({ json }) => {\n          const options: TableOption[] = [];\n          let currentTable;\n          json.options.forEach((table: Table) => {\n            const option = {\n              value: table.value,\n              label: <TableOption table={table} />,\n              text: table.label,\n            };\n            options.push(option);\n            if (table.label === tableName) {\n              currentTable = option;\n            }\n          });\n          if (onTablesLoad) {\n            onTablesLoad(json.options);\n          }\n          setTableOptions(\n            options.sort((a: { text: string }, b: { text: string }) =>\n              a.text.localeCompare(b.text),\n            ),\n          );\n          setCurrentTable(currentTable);\n          setLoadingTables(false);\n        })\n        .catch(e => {\n          setLoadingTables(false);\n          handleError(t('There was an error loading the tables'));\n        });\n    }\n    // We are using the refresh state to re-trigger the query\n    // previousRefresh should be out of dependencies array\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentDatabase, currentSchema, onTablesLoad, refresh]);\n\n  function renderSelectRow(select: ReactNode, refreshBtn: ReactNode) {\n    return (\n      <div className=\"section\">\n        <span className=\"select\">{select}</span>\n        <span className=\"refresh\">{refreshBtn}</span>\n      </div>\n    );\n  }\n\n  const internalTableChange = (table?: TableOption) => {\n    setCurrentTable(table);\n    if (onTableChange && currentSchema) {\n      onTableChange(table?.value, currentSchema);\n    }\n  };\n\n  const internalDbChange = (db: DatabaseObject) => {\n    setCurrentDatabase(db);\n    if (onDbChange) {\n      onDbChange(db);\n    }\n  };\n\n  const internalSchemaChange = (schema?: string) => {\n    setCurrentSchema(schema);\n    if (onSchemaChange) {\n      onSchemaChange(schema);\n    }\n    internalTableChange(undefined);\n  };\n\n  function renderDatabaseSelector() {\n    return (\n      <DatabaseSelector\n        key={currentDatabase?.id}\n        db={currentDatabase}\n        formMode={formMode}\n        getDbList={getDbList}\n        handleError={handleError}\n        onDbChange={readOnly ? undefined : internalDbChange}\n        onSchemaChange={readOnly ? undefined : internalSchemaChange}\n        onSchemasLoad={onSchemasLoad}\n        schema={currentSchema}\n        sqlLabMode={sqlLabMode}\n        isDatabaseSelectEnabled={isDatabaseSelectEnabled && !readOnly}\n        readOnly={readOnly}\n      />\n    );\n  }\n\n  const handleFilterOption = useMemo(\n    () => (search: string, option: TableOption) => {\n      const searchValue = search.trim().toLowerCase();\n      const { text } = option;\n      return text.toLowerCase().includes(searchValue);\n    },\n    [],\n  );\n\n  function renderTableSelect() {\n    const disabled =\n      (currentSchema && !formMode && readOnly) ||\n      (!currentSchema && !database?.allow_multi_schema_metadata_fetch);\n\n    const header = sqlLabMode ? (\n      <FormLabel>{t('See table schema')}</FormLabel>\n    ) : (\n      <FormLabel>{t('Table')}</FormLabel>\n    );\n\n    const select = (\n      <Select\n        ariaLabel={t('Select table or type table name')}\n        disabled={disabled}\n        filterOption={handleFilterOption}\n        header={header}\n        labelInValue\n        lazyLoading={false}\n        loading={loadingTables}\n        name=\"select-table\"\n        onChange={(table: TableOption) => internalTableChange(table)}\n        options={tableOptions}\n        placeholder={t('Select table or type table name')}\n        showSearch\n        value={currentTable}\n      />\n    );\n\n    const refreshLabel = !formMode && !readOnly && (\n      <RefreshLabel\n        onClick={() => setRefresh(refresh + 1)}\n        tooltipContent={t('Force refresh table list')}\n      />\n    );\n\n    return renderSelectRow(select, refreshLabel);\n  }\n\n  return (\n    <TableSelectorWrapper>\n      {renderDatabaseSelector()}\n      {sqlLabMode && !formMode && <div className=\"divider\" />}\n      {renderTableSelect()}\n    </TableSelectorWrapper>\n  );\n};\n\nexport default TableSelector;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}