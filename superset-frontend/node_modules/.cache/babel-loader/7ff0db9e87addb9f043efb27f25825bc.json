{"ast":null,"code":"import _extends from \"@babel/runtime-corejs3/helpers/extends\";var _jsxFileName = \"/home/ubuntu/my_plugin/superset/superset-frontend/src/visualizations/TimeTable/SparklineCell.jsx\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {\nSparkline,\nLineSeries,\nPointSeries,\nHorizontalReferenceLine,\nVerticalReferenceLine,\nWithTooltip } from\n'@data-ui/sparkline';\nimport { getTextDimension, formatNumber } from '@superset-ui/core';import { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nconst propTypes = {\n  className: PropTypes.string,\n  width: PropTypes.number,\n  height: PropTypes.number,\n  data: PropTypes.array.isRequired,\n  ariaLabel: PropTypes.string,\n  numberFormat: PropTypes.string,\n  yAxisBounds: PropTypes.array,\n  showYAxis: PropTypes.bool,\n  renderTooltip: PropTypes.func };\n\nconst defaultProps = {\n  className: '',\n  width: 300,\n  height: 50,\n  ariaLabel: '',\n  numberFormat: undefined,\n  yAxisBounds: [null, null],\n  showYAxis: false,\n  renderTooltip() {\n    return ___EmotionJSX(\"div\", { __self: this, __source: { fileName: _jsxFileName, lineNumber: 51, columnNumber: 12 } });\n  } };\n\n\nconst MARGIN = {\n  top: 8,\n  right: 8,\n  bottom: 8,\n  left: 8 };\n\nconst tooltipProps = {\n  style: {\n    opacity: 0.8 },\n\n  offsetTop: 0 };\n\n\nfunction getSparklineTextWidth(text) {\n  return (\n    getTextDimension({\n      text,\n      style: {\n        fontSize: '12px',\n        fontWeight: 200,\n        letterSpacing: 0.4 } }).\n\n    width + 5);\n\n}\n\nfunction isValidBoundValue(value) {\n  return (\n    value !== null &&\n    value !== undefined &&\n    value !== '' &&\n    !Number.isNaN(value));\n\n}\n\nclass SparklineCell extends React.Component {\n  renderHorizontalReferenceLine(value, label) {\n    return (\n      ___EmotionJSX(HorizontalReferenceLine, {\n        reference: value,\n        labelPosition: \"right\",\n        renderLabel: () => label,\n        stroke: \"#bbb\",\n        strokeDasharray: \"3 3\",\n        strokeWidth: 1, __self: this, __source: { fileName: _jsxFileName, lineNumber: 93, columnNumber: 7 } }));\n\n\n  }\n\n  render() {\n    const {\n      width,\n      height,\n      data,\n      ariaLabel,\n      numberFormat,\n      yAxisBounds,\n      showYAxis,\n      renderTooltip } =\n    this.props;\n\n    const yScale = {};\n    let hasMinBound = false;\n    let hasMaxBound = false;\n\n    if (yAxisBounds) {\n      const [minBound, maxBound] = yAxisBounds;\n      hasMinBound = isValidBoundValue(minBound);\n      if (hasMinBound) {\n        yScale.min = minBound;\n      }\n      hasMaxBound = isValidBoundValue(maxBound);\n      if (hasMaxBound) {\n        yScale.max = maxBound;\n      }\n    }\n\n    let min;\n    let max;\n    let minLabel;\n    let maxLabel;\n    let labelLength = 0;\n    if (showYAxis) {\n      const [minBound, maxBound] = yAxisBounds;\n      min = hasMinBound ?\n      minBound :\n      data.reduce((acc, current) => Math.min(acc, current), data[0]);\n      max = hasMaxBound ?\n      maxBound :\n      data.reduce((acc, current) => Math.max(acc, current), data[0]);\n\n      minLabel = formatNumber(numberFormat, min);\n      maxLabel = formatNumber(numberFormat, max);\n      labelLength = Math.max(\n      getSparklineTextWidth(minLabel),\n      getSparklineTextWidth(maxLabel));\n\n    }\n\n    const margin = {\n      ...MARGIN,\n      right: MARGIN.right + labelLength };\n\n\n    return (\n      ___EmotionJSX(WithTooltip, {\n        tooltipProps: tooltipProps,\n        hoverStyles: null,\n        renderTooltip: renderTooltip, __self: this, __source: { fileName: _jsxFileName, lineNumber: 160, columnNumber: 7 } },\n\n      ({ onMouseLeave, onMouseMove, tooltipData }) =>\n      ___EmotionJSX(Sparkline, _extends({\n        ariaLabel: ariaLabel,\n        width: width,\n        height: height,\n        margin: margin,\n        data: data,\n        onMouseLeave: onMouseLeave,\n        onMouseMove: onMouseMove },\n      yScale, { __self: this, __source: { fileName: _jsxFileName, lineNumber: 166, columnNumber: 11 } }),\n\n      showYAxis && this.renderHorizontalReferenceLine(min, minLabel),\n      showYAxis && this.renderHorizontalReferenceLine(max, maxLabel),\n      ___EmotionJSX(LineSeries, { showArea: false, stroke: \"#767676\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 178, columnNumber: 13 } }),\n      tooltipData &&\n      ___EmotionJSX(VerticalReferenceLine, {\n        reference: tooltipData.index,\n        strokeDasharray: \"3 3\",\n        strokeWidth: 1, __self: this, __source: { fileName: _jsxFileName, lineNumber: 180, columnNumber: 15 } }),\n\n\n      tooltipData &&\n      ___EmotionJSX(PointSeries, {\n        points: [tooltipData.index],\n        fill: \"#767676\",\n        strokeWidth: 1, __self: this, __source: { fileName: _jsxFileName, lineNumber: 187, columnNumber: 15 } }))));\n\n\n\n\n\n\n  } // @ts-ignore\n  __reactstandin__regenerateByEval(key, code) {// @ts-ignore\n    this[key] = eval(code);}}\nSparklineCell.propTypes = propTypes;\nSparklineCell.defaultProps = defaultProps;const _default =\n\nSparklineCell;export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(propTypes, \"propTypes\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/visualizations/TimeTable/SparklineCell.jsx\");reactHotLoader.register(defaultProps, \"defaultProps\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/visualizations/TimeTable/SparklineCell.jsx\");reactHotLoader.register(MARGIN, \"MARGIN\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/visualizations/TimeTable/SparklineCell.jsx\");reactHotLoader.register(tooltipProps, \"tooltipProps\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/visualizations/TimeTable/SparklineCell.jsx\");reactHotLoader.register(getSparklineTextWidth, \"getSparklineTextWidth\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/visualizations/TimeTable/SparklineCell.jsx\");reactHotLoader.register(isValidBoundValue, \"isValidBoundValue\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/visualizations/TimeTable/SparklineCell.jsx\");reactHotLoader.register(SparklineCell, \"SparklineCell\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/visualizations/TimeTable/SparklineCell.jsx\");reactHotLoader.register(_default, \"default\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/visualizations/TimeTable/SparklineCell.jsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/home/ubuntu/my_plugin/superset/superset-frontend/src/visualizations/TimeTable/SparklineCell.jsx"],"names":["React","PropTypes","Sparkline","LineSeries","PointSeries","HorizontalReferenceLine","VerticalReferenceLine","WithTooltip","getTextDimension","formatNumber","propTypes","className","string","width","number","height","data","array","isRequired","ariaLabel","numberFormat","yAxisBounds","showYAxis","bool","renderTooltip","func","defaultProps","undefined","MARGIN","top","right","bottom","left","tooltipProps","style","opacity","offsetTop","getSparklineTextWidth","text","fontSize","fontWeight","letterSpacing","isValidBoundValue","value","Number","isNaN","SparklineCell","Component","renderHorizontalReferenceLine","label","render","props","yScale","hasMinBound","hasMaxBound","minBound","maxBound","min","max","minLabel","maxLabel","labelLength","reduce","acc","current","Math","margin","onMouseLeave","onMouseMove","tooltipData","index"],"mappings":"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","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Sparkline,\n  LineSeries,\n  PointSeries,\n  HorizontalReferenceLine,\n  VerticalReferenceLine,\n  WithTooltip,\n} from '@data-ui/sparkline';\nimport { getTextDimension, formatNumber } from '@superset-ui/core';\n\nconst propTypes = {\n  className: PropTypes.string,\n  width: PropTypes.number,\n  height: PropTypes.number,\n  data: PropTypes.array.isRequired,\n  ariaLabel: PropTypes.string,\n  numberFormat: PropTypes.string,\n  yAxisBounds: PropTypes.array,\n  showYAxis: PropTypes.bool,\n  renderTooltip: PropTypes.func,\n};\nconst defaultProps = {\n  className: '',\n  width: 300,\n  height: 50,\n  ariaLabel: '',\n  numberFormat: undefined,\n  yAxisBounds: [null, null],\n  showYAxis: false,\n  renderTooltip() {\n    return <div />;\n  },\n};\n\nconst MARGIN = {\n  top: 8,\n  right: 8,\n  bottom: 8,\n  left: 8,\n};\nconst tooltipProps = {\n  style: {\n    opacity: 0.8,\n  },\n  offsetTop: 0,\n};\n\nfunction getSparklineTextWidth(text) {\n  return (\n    getTextDimension({\n      text,\n      style: {\n        fontSize: '12px',\n        fontWeight: 200,\n        letterSpacing: 0.4,\n      },\n    }).width + 5\n  );\n}\n\nfunction isValidBoundValue(value) {\n  return (\n    value !== null &&\n    value !== undefined &&\n    value !== '' &&\n    !Number.isNaN(value)\n  );\n}\n\nclass SparklineCell extends React.Component {\n  renderHorizontalReferenceLine(value, label) {\n    return (\n      <HorizontalReferenceLine\n        reference={value}\n        labelPosition=\"right\"\n        renderLabel={() => label}\n        stroke=\"#bbb\"\n        strokeDasharray=\"3 3\"\n        strokeWidth={1}\n      />\n    );\n  }\n\n  render() {\n    const {\n      width,\n      height,\n      data,\n      ariaLabel,\n      numberFormat,\n      yAxisBounds,\n      showYAxis,\n      renderTooltip,\n    } = this.props;\n\n    const yScale = {};\n    let hasMinBound = false;\n    let hasMaxBound = false;\n\n    if (yAxisBounds) {\n      const [minBound, maxBound] = yAxisBounds;\n      hasMinBound = isValidBoundValue(minBound);\n      if (hasMinBound) {\n        yScale.min = minBound;\n      }\n      hasMaxBound = isValidBoundValue(maxBound);\n      if (hasMaxBound) {\n        yScale.max = maxBound;\n      }\n    }\n\n    let min;\n    let max;\n    let minLabel;\n    let maxLabel;\n    let labelLength = 0;\n    if (showYAxis) {\n      const [minBound, maxBound] = yAxisBounds;\n      min = hasMinBound\n        ? minBound\n        : data.reduce((acc, current) => Math.min(acc, current), data[0]);\n      max = hasMaxBound\n        ? maxBound\n        : data.reduce((acc, current) => Math.max(acc, current), data[0]);\n\n      minLabel = formatNumber(numberFormat, min);\n      maxLabel = formatNumber(numberFormat, max);\n      labelLength = Math.max(\n        getSparklineTextWidth(minLabel),\n        getSparklineTextWidth(maxLabel),\n      );\n    }\n\n    const margin = {\n      ...MARGIN,\n      right: MARGIN.right + labelLength,\n    };\n\n    return (\n      <WithTooltip\n        tooltipProps={tooltipProps}\n        hoverStyles={null}\n        renderTooltip={renderTooltip}\n      >\n        {({ onMouseLeave, onMouseMove, tooltipData }) => (\n          <Sparkline\n            ariaLabel={ariaLabel}\n            width={width}\n            height={height}\n            margin={margin}\n            data={data}\n            onMouseLeave={onMouseLeave}\n            onMouseMove={onMouseMove}\n            {...yScale}\n          >\n            {showYAxis && this.renderHorizontalReferenceLine(min, minLabel)}\n            {showYAxis && this.renderHorizontalReferenceLine(max, maxLabel)}\n            <LineSeries showArea={false} stroke=\"#767676\" />\n            {tooltipData && (\n              <VerticalReferenceLine\n                reference={tooltipData.index}\n                strokeDasharray=\"3 3\"\n                strokeWidth={1}\n              />\n            )}\n            {tooltipData && (\n              <PointSeries\n                points={[tooltipData.index]}\n                fill=\"#767676\"\n                strokeWidth={1}\n              />\n            )}\n          </Sparkline>\n        )}\n      </WithTooltip>\n    );\n  }\n}\n\nSparklineCell.propTypes = propTypes;\nSparklineCell.defaultProps = defaultProps;\n\nexport default SparklineCell;\n"]},"metadata":{},"sourceType":"module"}