{"ast":null,"code":"import _isString from \"lodash/isString\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;};import { makeApi, CategoricalColorNamespace } from '@superset-ui/core';\n\nexport const DASHBOARD_INFO_UPDATED = 'DASHBOARD_INFO_UPDATED';\n// updates partially changed dashboard info\nexport function dashboardInfoChanged(newInfo) {\n  const { metadata } = newInfo;\n  const categoricalNamespace = CategoricalColorNamespace.getNamespace(metadata == null ? void 0 : metadata.color_namespace);\n  categoricalNamespace.resetColors();\n  if (metadata != null && metadata.label_colors) {\n    const labelColors = metadata.label_colors;\n    const colorMap = _isString(labelColors) ?\n    JSON.parse(labelColors) :\n    labelColors;\n    Object.keys(colorMap).forEach((label) => {\n      categoricalNamespace.setColor(label, colorMap[label]);\n    });\n  }\n  return { type: DASHBOARD_INFO_UPDATED, newInfo };\n}\nexport const SET_CHART_CONFIG_BEGIN = 'SET_CHART_CONFIG_BEGIN';\nexport const SET_CHART_CONFIG_COMPLETE = 'SET_CHART_CONFIG_COMPLETE';\nexport const SET_CHART_CONFIG_FAIL = 'SET_CHART_CONFIG_FAIL';\nexport const setChartConfiguration = (chartConfiguration) => async (dispatch, getState) => {\n  dispatch({\n    type: SET_CHART_CONFIG_BEGIN,\n    chartConfiguration });\n\n  const { id, metadata } = getState().dashboardInfo;\n  // TODO extract this out when makeApi supports url parameters\n  const updateDashboard = makeApi({\n    method: 'PUT',\n    endpoint: `/api/v1/dashboard/${id}` });\n\n  try {\n    const response = await updateDashboard({\n      json_metadata: JSON.stringify({\n        ...metadata,\n        chart_configuration: chartConfiguration }) });\n\n\n    dispatch(dashboardInfoChanged({\n      metadata: JSON.parse(response.result.json_metadata) }));\n\n    dispatch({\n      type: SET_CHART_CONFIG_COMPLETE,\n      chartConfiguration });\n\n  }\n  catch (err) {\n    dispatch({ type: SET_CHART_CONFIG_FAIL, chartConfiguration });\n  }\n};;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(DASHBOARD_INFO_UPDATED, \"DASHBOARD_INFO_UPDATED\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/actions/dashboardInfo.ts\");reactHotLoader.register(dashboardInfoChanged, \"dashboardInfoChanged\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/actions/dashboardInfo.ts\");reactHotLoader.register(SET_CHART_CONFIG_BEGIN, \"SET_CHART_CONFIG_BEGIN\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/actions/dashboardInfo.ts\");reactHotLoader.register(SET_CHART_CONFIG_COMPLETE, \"SET_CHART_CONFIG_COMPLETE\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/actions/dashboardInfo.ts\");reactHotLoader.register(SET_CHART_CONFIG_FAIL, \"SET_CHART_CONFIG_FAIL\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/actions/dashboardInfo.ts\");reactHotLoader.register(setChartConfiguration, \"setChartConfiguration\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/actions/dashboardInfo.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/actions/dashboardInfo.ts"],"names":[],"mappings":"+UAmBA,SAAS,OAAT,EAAkB,yBAAlB,QAAmD,mBAAnD;;AAIA,OAAO,MAAM,sBAAsB,GAAG,wBAA/B;AAEP;AACA,OAAM,SAAU,oBAAV,CAA+B,OAA/B,EAAyD;AAC7D,QAAM,EAAE,QAAF,KAAe,OAArB;AAEA,QAAM,oBAAoB,GAAG,yBAAyB,CAAC,YAA1B,CAC3B,QAD2B,oBAC3B,QAAQ,CAAE,eADiB,CAA7B;AAIA,EAAA,oBAAoB,CAAC,WAArB;AAEA,MAAI,QAAJ,YAAI,QAAQ,CAAE,YAAd,EAA4B;AAC1B,UAAM,WAAW,GAAG,QAAQ,CAAC,YAA7B;AACA,UAAM,QAAQ,GAAG,UAAS,WAAT;AACb,IAAA,IAAI,CAAC,KAAL,CAAW,WAAX,CADa;AAEb,IAAA,WAFJ;AAGA,IAAA,MAAM,CAAC,IAAP,CAAY,QAAZ,EAAsB,OAAtB,CAA8B,CAAA,KAAK,KAAG;AACpC,MAAA,oBAAoB,CAAC,QAArB,CAA8B,KAA9B,EAAqC,QAAQ,CAAC,KAAD,CAA7C;AACD,KAFD;AAGD;AAED,SAAO,EAAE,IAAI,EAAE,sBAAR,EAAgC,OAAhC,EAAP;AACD;AACD,OAAO,MAAM,sBAAsB,GAAG,wBAA/B;AAKP,OAAO,MAAM,yBAAyB,GAAG,2BAAlC;AAKP,OAAO,MAAM,qBAAqB,GAAG,uBAA9B;AAKP,OAAO,MAAM,qBAAqB,GAAG,CACnC,kBADmC,KAEhC,OAAO,QAAP,EAA2B,QAA3B,KAAkD;AACrD,EAAA,QAAQ,CAAC;AACP,IAAA,IAAI,EAAE,sBADC;AAEP,IAAA,kBAFO,EAAD,CAAR;;AAIA,QAAM,EAAE,EAAF,EAAM,QAAN,KAAmB,QAAQ,GAAG,aAApC;AAEA;AACA,QAAM,eAAe,GAAG,OAAO,CAG7B;AACA,IAAA,MAAM,EAAE,KADR;AAEA,IAAA,QAAQ,EAAE,qBAAqB,EAAE,EAFjC,EAH6B,CAA/B;;AAQA,MAAI;AACF,UAAM,QAAQ,GAAG,MAAM,eAAe,CAAC;AACrC,MAAA,aAAa,EAAE,IAAI,CAAC,SAAL,CAAe;AAC5B,WAAG,QADyB;AAE5B,QAAA,mBAAmB,EAAE,kBAFO,EAAf,CADsB,EAAD,CAAtC;;;AAMA,IAAA,QAAQ,CACN,oBAAoB,CAAC;AACnB,MAAA,QAAQ,EAAE,IAAI,CAAC,KAAL,CAAW,QAAQ,CAAC,MAAT,CAAgB,aAA3B,CADS,EAAD,CADd,CAAR;;AAKA,IAAA,QAAQ,CAAC;AACP,MAAA,IAAI,EAAE,yBADC;AAEP,MAAA,kBAFO,EAAD,CAAR;;AAID;AAAC,SAAO,GAAP,EAAY;AACZ,IAAA,QAAQ,CAAC,EAAE,IAAI,EAAE,qBAAR,EAA+B,kBAA/B,EAAD,CAAR;AACD;AACF,CArCM,C,iLAvCM,sB,gJAGG,oB,8IAqBH,sB,gJAKA,yB,mJAKA,qB,+IAKA,qB","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { Dispatch } from 'redux';\nimport { makeApi, CategoricalColorNamespace } from '@superset-ui/core';\nimport { isString } from 'lodash';\nimport { ChartConfiguration, DashboardInfo } from '../reducers/types';\n\nexport const DASHBOARD_INFO_UPDATED = 'DASHBOARD_INFO_UPDATED';\n\n// updates partially changed dashboard info\nexport function dashboardInfoChanged(newInfo: { metadata: any }) {\n  const { metadata } = newInfo;\n\n  const categoricalNamespace = CategoricalColorNamespace.getNamespace(\n    metadata?.color_namespace,\n  );\n\n  categoricalNamespace.resetColors();\n\n  if (metadata?.label_colors) {\n    const labelColors = metadata.label_colors;\n    const colorMap = isString(labelColors)\n      ? JSON.parse(labelColors)\n      : labelColors;\n    Object.keys(colorMap).forEach(label => {\n      categoricalNamespace.setColor(label, colorMap[label]);\n    });\n  }\n\n  return { type: DASHBOARD_INFO_UPDATED, newInfo };\n}\nexport const SET_CHART_CONFIG_BEGIN = 'SET_CHART_CONFIG_BEGIN';\nexport interface SetChartConfigBegin {\n  type: typeof SET_CHART_CONFIG_BEGIN;\n  chartConfiguration: ChartConfiguration;\n}\nexport const SET_CHART_CONFIG_COMPLETE = 'SET_CHART_CONFIG_COMPLETE';\nexport interface SetChartConfigComplete {\n  type: typeof SET_CHART_CONFIG_COMPLETE;\n  chartConfiguration: ChartConfiguration;\n}\nexport const SET_CHART_CONFIG_FAIL = 'SET_CHART_CONFIG_FAIL';\nexport interface SetChartConfigFail {\n  type: typeof SET_CHART_CONFIG_FAIL;\n  chartConfiguration: ChartConfiguration;\n}\nexport const setChartConfiguration = (\n  chartConfiguration: ChartConfiguration,\n) => async (dispatch: Dispatch, getState: () => any) => {\n  dispatch({\n    type: SET_CHART_CONFIG_BEGIN,\n    chartConfiguration,\n  });\n  const { id, metadata } = getState().dashboardInfo;\n\n  // TODO extract this out when makeApi supports url parameters\n  const updateDashboard = makeApi<\n    Partial<DashboardInfo>,\n    { result: DashboardInfo }\n  >({\n    method: 'PUT',\n    endpoint: `/api/v1/dashboard/${id}`,\n  });\n\n  try {\n    const response = await updateDashboard({\n      json_metadata: JSON.stringify({\n        ...metadata,\n        chart_configuration: chartConfiguration,\n      }),\n    });\n    dispatch(\n      dashboardInfoChanged({\n        metadata: JSON.parse(response.result.json_metadata),\n      }),\n    );\n    dispatch({\n      type: SET_CHART_CONFIG_COMPLETE,\n      chartConfiguration,\n    });\n  } catch (err) {\n    dispatch({ type: SET_CHART_CONFIG_FAIL, chartConfiguration });\n  }\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}