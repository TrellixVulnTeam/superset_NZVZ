{"ast":null,"code":"import { css as _css } from \"@emotion/react\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { Global, css } from '@emotion/react';\nimport { t, useTheme } from '@superset-ui/core';\nimport { MinusCircleFilled, CheckCircleFilled, ExclamationCircleFilled } from '@ant-design/icons';\nimport Popover from 'src/components/Popover';\nimport Collapse from 'src/components/Collapse';\nimport Icons from 'src/components/Icons';\nimport { Indent, Panel, Reset, Title } from 'src/dashboard/components/FiltersBadge/Styles';\nimport FilterIndicator from 'src/dashboard/components/FiltersBadge/FilterIndicator';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst DetailsPanelPopover = ({ appliedCrossFilterIndicators = [], appliedIndicators = [], incompatibleIndicators = [], unsetIndicators = [], onHighlightFilterSource, children }) => {\n  const [visible, setVisible] = useState(false);\n  const theme = useTheme();\n  const activeTabs = useSelector((state) => {var _state$dashboardState;return (_state$dashboardState = state.dashboardState) == null ? void 0 : _state$dashboardState.activeTabs;});\n  // we don't need to clean up useEffect, setting { once: true } removes the event listener after handle function is called\n  useEffect(() => {\n    if (visible) {\n      window.addEventListener('resize', () => setVisible(false), {\n        once: true });\n\n    }\n  }, [visible]);\n  // if tabs change, popover doesn't close automatically\n  useEffect(() => {\n    setVisible(false);\n  }, [activeTabs]);\n  const getDefaultActivePanel = () => {\n    const result = [];\n    if (appliedCrossFilterIndicators.length) {\n      result.push('appliedCrossFilters');\n    }\n    if (appliedIndicators.length) {\n      result.push('applied');\n    }\n    if (incompatibleIndicators.length) {\n      result.push('incompatible');\n    }\n    if (result.length) {\n      return result;\n    }\n    return ['unset'];\n  };\n  const [activePanels, setActivePanels] = useState(() => [\n  ...getDefaultActivePanel()]);\n\n  function handlePopoverStatus(isOpen) {\n    setVisible(isOpen);\n    // every time the popover opens, make sure the most relevant panel is active\n    if (isOpen) {\n      setActivePanels(getDefaultActivePanel());\n    }\n  }\n  function handleActivePanelChange(panels) {\n    // need to convert to an array so that handlePopoverStatus will work\n    if (typeof panels === 'string') {\n      setActivePanels([panels]);\n    } else\n    {\n      setActivePanels(panels);\n    }\n  }\n  const indicatorKey = (indicator) => `${indicator.column} - ${indicator.name}`;\n  const content = ___EmotionJSX(Panel, null,\n  ___EmotionJSX(Global, { styles: /*#__PURE__*/css(\".filterStatusPopover{.ant-popover-inner{background-color:\",\n\n\n    theme.colors.grayscale.dark2, \"cc;.ant-popover-inner-content{padding-top:0;padding-bottom:0;}}&.ant-popover-placement-bottom,&.ant-popover-placement-bottomLeft,&.ant-popover-placement-bottomRight{&>.ant-popover-content>.ant-popover-arrow{border-top-color:\",\n\n\n\n\n\n\n\n\n\n    theme.colors.grayscale.dark2, \"cc;border-left-color:\",\n    theme.colors.grayscale.dark2, \"cc;}}&.ant-popover-placement-top,&.ant-popover-placement-topLeft,&.ant-popover-placement-topRight{&>.ant-popover-content>.ant-popover-arrow{border-bottom-color:\",\n\n\n\n\n\n\n    theme.colors.grayscale.dark2, \"cc;border-right-color:\",\n    theme.colors.grayscale.dark2, \"cc;}}&.ant-popover-placement-left,&.ant-popover-placement-leftTop,&.ant-popover-placement-leftBottom{&>.ant-popover-content>.ant-popover-arrow{border-top-color:\",\n\n\n\n\n\n\n    theme.colors.grayscale.dark2, \"cc;border-right-color:\",\n    theme.colors.grayscale.dark2, \"cc;}}&.ant-popover-placement-right,&.ant-popover-placement-rightTop,&.ant-popover-placement-rightBottom{&>.ant-popover-content>.ant-popover-arrow{border-bottom-color:\",\n\n\n\n\n\n\n    theme.colors.grayscale.dark2, \"cc;border-left-color:\",\n    theme.colors.grayscale.dark2, \"cc;}}&.ant-popover{color:\",\n\n\n\n    theme.colors.grayscale.light4, \";z-index:99;}}\" + (process.env.NODE_ENV === \"production\" ? \"\" : \";label:content;\"), process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\") }),\n\n\n\n\n  ___EmotionJSX(Reset, null,\n  ___EmotionJSX(Collapse, { ghost: true, light: true, activeKey: activePanels, onChange: handleActivePanelChange },\n  appliedCrossFilterIndicators.length ? ___EmotionJSX(Collapse.Panel, { key: \"appliedCrossFilters\", header: ___EmotionJSX(Title, { bold: true, color: theme.colors.primary.light1 },\n    ___EmotionJSX(Icons.CursorTarget, { css: /*#__PURE__*/_css({ fill: theme.colors.primary.light1 }, process.env.NODE_ENV === \"production\" ? \"\" : \";label:content;\", process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"), iconSize: \"xl\" }),\n    t('Applied Cross Filters (%d)', appliedCrossFilterIndicators.length)) },\n\n  ___EmotionJSX(Indent, { css: /*#__PURE__*/_css({ paddingBottom: theme.gridUnit * 3 }, process.env.NODE_ENV === \"production\" ? \"\" : \";label:content;\", process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\") },\n  appliedCrossFilterIndicators.map((indicator) => ___EmotionJSX(FilterIndicator, { key: indicatorKey(indicator), indicator: indicator, onClick: onHighlightFilterSource })))) :\n\n  null,\n  appliedIndicators.length ? ___EmotionJSX(Collapse.Panel, { key: \"applied\", header: ___EmotionJSX(Title, { bold: true, color: theme.colors.success.base },\n    ___EmotionJSX(CheckCircleFilled, null), ' ',\n    t('Applied Filters (%d)', appliedIndicators.length)) },\n\n  ___EmotionJSX(Indent, { css: /*#__PURE__*/_css({ paddingBottom: theme.gridUnit * 3 }, process.env.NODE_ENV === \"production\" ? \"\" : \";label:content;\", process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\") },\n  appliedIndicators.map((indicator) => ___EmotionJSX(FilterIndicator, { key: indicatorKey(indicator), indicator: indicator, onClick: onHighlightFilterSource })))) :\n\n  null,\n  incompatibleIndicators.length ? ___EmotionJSX(Collapse.Panel, { key: \"incompatible\", header: ___EmotionJSX(Title, { bold: true, color: theme.colors.alert.base },\n    ___EmotionJSX(ExclamationCircleFilled, null), ' ',\n    t('Incompatible Filters (%d)', incompatibleIndicators.length)) },\n\n  ___EmotionJSX(Indent, { css: /*#__PURE__*/_css({ paddingBottom: theme.gridUnit * 3 }, process.env.NODE_ENV === \"production\" ? \"\" : \";label:content;\", process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\") },\n  incompatibleIndicators.map((indicator) => ___EmotionJSX(FilterIndicator, { key: indicatorKey(indicator), indicator: indicator, onClick: onHighlightFilterSource })))) :\n\n  null,\n  unsetIndicators.length ? ___EmotionJSX(Collapse.Panel, { key: \"unset\", header: ___EmotionJSX(Title, { bold: true, color: theme.colors.grayscale.light1 },\n    ___EmotionJSX(MinusCircleFilled, null), ' ',\n    t('Unset Filters (%d)', unsetIndicators.length)),\n    disabled: !unsetIndicators.length },\n  ___EmotionJSX(Indent, { css: /*#__PURE__*/_css({ paddingBottom: theme.gridUnit * 3 }, process.env.NODE_ENV === \"production\" ? \"\" : \";label:content;\", process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\") },\n  unsetIndicators.map((indicator) => ___EmotionJSX(FilterIndicator, { key: indicatorKey(indicator), indicator: indicator, onClick: onHighlightFilterSource })))) :\n\n  null)));\n\n\n\n  return ___EmotionJSX(Popover, { overlayClassName: \"filterStatusPopover\", content: content, visible: visible, onVisibleChange: handlePopoverStatus, placement: \"bottom\", trigger: \"click\" },\n  children);\n\n};\nexport default DetailsPanelPopover;","map":null,"metadata":{},"sourceType":"module"}