{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;};import _keyBy from \"lodash/fp/keyBy\";import _flow from \"lodash/fp/flow\";import _mapValues from \"lodash/fp/mapValues\";import _isEmpty from \"lodash/isEmpty\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport {\ngetChartIdAndColumnFromFilterKey,\ngetDashboardFilterKey } from\n'./getDashboardFilterKey';\nimport { CHART_TYPE } from './componentTypes';\nimport { DASHBOARD_FILTER_SCOPE_GLOBAL } from '../reducers/dashboardFilters';\n\nlet allFilterBoxChartIds = [];\nlet activeFilters = {};\nlet appliedFilterValuesByChart = {};\nlet allComponents = {};\n\n// output: { [id_column]: { values, scope } }\nexport function getActiveFilters() {\n  return activeFilters;\n}\n\n// currently filter_box is a chart,\n// when selecting filter scopes, they have to be out pulled out in a few places.\n// after we make filter_box a dashboard build-in component, will not need this check anymore.\nexport function isFilterBox(chartId) {\n  return allFilterBoxChartIds.includes(chartId);\n}\n\n// this function is to find all filter values applied to a chart,\n// it goes through all active filters and their scopes.\n// return: { [column]: array of selected values }\nexport function getAppliedFilterValues(chartId) {\n  // use cached data if possible\n  if (!(chartId in appliedFilterValuesByChart)) {\n    const applicableFilters = Object.entries(\n    activeFilters).\n    filter(([, { scope: chartIds }]) => chartIds.includes(chartId));\n    appliedFilterValuesByChart[chartId] = _flow(\n    _keyBy(\n    ([filterKey]) => getChartIdAndColumnFromFilterKey(filterKey).column),\n\n    _mapValues(([, { values }]) => values))(\n    applicableFilters);\n  }\n  return appliedFilterValuesByChart[chartId];\n}\n\nexport function getChartIdsInFilterScope({\n  filterScope = DASHBOARD_FILTER_SCOPE_GLOBAL })\n{\n  function traverse(chartIds = [], component = {}, immuneChartIds = []) {\n    if (!component) {\n      return;\n    }\n\n    if (\n    component.type === CHART_TYPE &&\n    component.meta &&\n    component.meta.chartId &&\n    !immuneChartIds.includes(component.meta.chartId))\n    {\n      chartIds.push(component.meta.chartId);\n    } else if (component.children) {\n      component.children.forEach((child) =>\n      traverse(chartIds, allComponents[child], immuneChartIds));\n\n    }\n  }\n\n  const chartIds = [];\n  const { scope: scopeComponentIds, immune: immuneChartIds } = filterScope;\n  scopeComponentIds.forEach((componentId) =>\n  traverse(chartIds, allComponents[componentId], immuneChartIds));\n\n\n  return chartIds;\n}\n\n// non-empty filter fields in dashboardFilters,\n// activeFilters map contains selected values and filter scope.\n// values: array of selected values\n// scope: array of chartIds that applicable to the filter field.\nexport function buildActiveFilters({ dashboardFilters = {}, components = {} }) {\n  allFilterBoxChartIds = Object.values(dashboardFilters).map(\n  (filter) => filter.chartId);\n\n\n  // clear cache\n  if (!_isEmpty(components)) {\n    allComponents = components;\n  }\n  appliedFilterValuesByChart = {};\n  activeFilters = Object.values(dashboardFilters).reduce((result, filter) => {\n    const { chartId, columns, scopes } = filter;\n    const nonEmptyFilters = {};\n\n    Object.keys(columns).forEach((column) => {\n      if (\n      Array.isArray(columns[column]) ?\n      columns[column].length :\n      columns[column] !== undefined)\n      {\n        // remove filter itself\n        const scope = getChartIdsInFilterScope({\n          filterScope: scopes[column] }).\n        filter((id) => chartId !== id);\n\n        nonEmptyFilters[getDashboardFilterKey({ chartId, column })] = {\n          values: columns[column],\n          scope };\n\n      }\n    });\n\n    return {\n      ...result,\n      ...nonEmptyFilters };\n\n  }, {});\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(allFilterBoxChartIds, \"allFilterBoxChartIds\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/util/activeDashboardFilters.js\");reactHotLoader.register(activeFilters, \"activeFilters\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/util/activeDashboardFilters.js\");reactHotLoader.register(appliedFilterValuesByChart, \"appliedFilterValuesByChart\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/util/activeDashboardFilters.js\");reactHotLoader.register(allComponents, \"allComponents\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/util/activeDashboardFilters.js\");reactHotLoader.register(getActiveFilters, \"getActiveFilters\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/util/activeDashboardFilters.js\");reactHotLoader.register(isFilterBox, \"isFilterBox\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/util/activeDashboardFilters.js\");reactHotLoader.register(getAppliedFilterValues, \"getAppliedFilterValues\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/util/activeDashboardFilters.js\");reactHotLoader.register(getChartIdsInFilterScope, \"getChartIdsInFilterScope\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/util/activeDashboardFilters.js\");reactHotLoader.register(buildActiveFilters, \"buildActiveFilters\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/util/activeDashboardFilters.js\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(__signature__, \"__signature__\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/util/activeDashboardFilters.js\");reactHotLoader.register(allFilterBoxChartIds, \"allFilterBoxChartIds\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/util/activeDashboardFilters.js\");reactHotLoader.register(activeFilters, \"activeFilters\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/util/activeDashboardFilters.js\");reactHotLoader.register(appliedFilterValuesByChart, \"appliedFilterValuesByChart\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/util/activeDashboardFilters.js\");reactHotLoader.register(allComponents, \"allComponents\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/util/activeDashboardFilters.js\");reactHotLoader.register(getActiveFilters, \"getActiveFilters\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/util/activeDashboardFilters.js\");reactHotLoader.register(isFilterBox, \"isFilterBox\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/util/activeDashboardFilters.js\");reactHotLoader.register(getAppliedFilterValues, \"getAppliedFilterValues\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/util/activeDashboardFilters.js\");reactHotLoader.register(getChartIdsInFilterScope, \"getChartIdsInFilterScope\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/util/activeDashboardFilters.js\");reactHotLoader.register(buildActiveFilters, \"buildActiveFilters\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/util/activeDashboardFilters.js\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/util/activeDashboardFilters.js"],"names":["allFilterBoxChartIds","activeFilters","appliedFilterValuesByChart","allComponents","getActiveFilters","isFilterBox","getAppliedFilterValues","chartId","applicableFilters","scope","chartIds","getChartIdAndColumnFromFilterKey","getChartIdsInFilterScope","filterScope","component","immuneChartIds","traverse","immune","scopeComponentIds","buildActiveFilters","dashboardFilters","components","Object","filter","nonEmptyFilters","Array","columns","scopes","getDashboardFilterKey","values"],"mappings":"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","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { isEmpty } from 'lodash';\nimport { mapValues, flow, keyBy } from 'lodash/fp';\n\nimport {\n  getChartIdAndColumnFromFilterKey,\n  getDashboardFilterKey,\n} from './getDashboardFilterKey';\nimport { CHART_TYPE } from './componentTypes';\nimport { DASHBOARD_FILTER_SCOPE_GLOBAL } from '../reducers/dashboardFilters';\n\nlet allFilterBoxChartIds = [];\nlet activeFilters = {};\nlet appliedFilterValuesByChart = {};\nlet allComponents = {};\n\n// output: { [id_column]: { values, scope } }\nexport function getActiveFilters() {\n  return activeFilters;\n}\n\n// currently filter_box is a chart,\n// when selecting filter scopes, they have to be out pulled out in a few places.\n// after we make filter_box a dashboard build-in component, will not need this check anymore.\nexport function isFilterBox(chartId) {\n  return allFilterBoxChartIds.includes(chartId);\n}\n\n// this function is to find all filter values applied to a chart,\n// it goes through all active filters and their scopes.\n// return: { [column]: array of selected values }\nexport function getAppliedFilterValues(chartId) {\n  // use cached data if possible\n  if (!(chartId in appliedFilterValuesByChart)) {\n    const applicableFilters = Object.entries(\n      activeFilters,\n    ).filter(([, { scope: chartIds }]) => chartIds.includes(chartId));\n    appliedFilterValuesByChart[chartId] = flow(\n      keyBy(\n        ([filterKey]) => getChartIdAndColumnFromFilterKey(filterKey).column,\n      ),\n      mapValues(([, { values }]) => values),\n    )(applicableFilters);\n  }\n  return appliedFilterValuesByChart[chartId];\n}\n\nexport function getChartIdsInFilterScope({\n  filterScope = DASHBOARD_FILTER_SCOPE_GLOBAL,\n}) {\n  function traverse(chartIds = [], component = {}, immuneChartIds = []) {\n    if (!component) {\n      return;\n    }\n\n    if (\n      component.type === CHART_TYPE &&\n      component.meta &&\n      component.meta.chartId &&\n      !immuneChartIds.includes(component.meta.chartId)\n    ) {\n      chartIds.push(component.meta.chartId);\n    } else if (component.children) {\n      component.children.forEach(child =>\n        traverse(chartIds, allComponents[child], immuneChartIds),\n      );\n    }\n  }\n\n  const chartIds = [];\n  const { scope: scopeComponentIds, immune: immuneChartIds } = filterScope;\n  scopeComponentIds.forEach(componentId =>\n    traverse(chartIds, allComponents[componentId], immuneChartIds),\n  );\n\n  return chartIds;\n}\n\n// non-empty filter fields in dashboardFilters,\n// activeFilters map contains selected values and filter scope.\n// values: array of selected values\n// scope: array of chartIds that applicable to the filter field.\nexport function buildActiveFilters({ dashboardFilters = {}, components = {} }) {\n  allFilterBoxChartIds = Object.values(dashboardFilters).map(\n    filter => filter.chartId,\n  );\n\n  // clear cache\n  if (!isEmpty(components)) {\n    allComponents = components;\n  }\n  appliedFilterValuesByChart = {};\n  activeFilters = Object.values(dashboardFilters).reduce((result, filter) => {\n    const { chartId, columns, scopes } = filter;\n    const nonEmptyFilters = {};\n\n    Object.keys(columns).forEach(column => {\n      if (\n        Array.isArray(columns[column])\n          ? columns[column].length\n          : columns[column] !== undefined\n      ) {\n        // remove filter itself\n        const scope = getChartIdsInFilterScope({\n          filterScope: scopes[column],\n        }).filter(id => chartId !== id);\n\n        nonEmptyFilters[getDashboardFilterKey({ chartId, column })] = {\n          values: columns[column],\n          scope,\n        };\n      }\n    });\n\n    return {\n      ...result,\n      ...nonEmptyFilters,\n    };\n  }, {});\n}\n"]},"metadata":{},"sourceType":"module"}