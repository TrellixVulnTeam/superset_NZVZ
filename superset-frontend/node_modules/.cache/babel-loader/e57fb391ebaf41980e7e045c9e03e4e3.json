{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;};(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport shortid from 'shortid';\nimport JSONbig from 'json-bigint';\nimport { t, SupersetClient } from '@superset-ui/core';\nimport invert from 'lodash/invert';\nimport mapKeys from 'lodash/mapKeys';\nimport { isFeatureEnabled, FeatureFlag } from 'src/featureFlags';\n\nimport { now } from 'src/modules/dates';\nimport {\naddDangerToast as addDangerToastAction,\naddInfoToast as addInfoToastAction,\naddSuccessToast as addSuccessToastAction,\naddWarningToast as addWarningToastAction } from\n'src/components/MessageToasts/actions';\nimport { getClientErrorObject } from 'src/utils/getClientErrorObject';\nimport COMMON_ERR_MESSAGES from 'src/utils/errorMessages';\n\nexport const RESET_STATE = 'RESET_STATE';\nexport const ADD_QUERY_EDITOR = 'ADD_QUERY_EDITOR';\nexport const UPDATE_QUERY_EDITOR = 'UPDATE_QUERY_EDITOR';\nexport const QUERY_EDITOR_SAVED = 'QUERY_EDITOR_SAVED';\nexport const CLONE_QUERY_TO_NEW_TAB = 'CLONE_QUERY_TO_NEW_TAB';\nexport const REMOVE_QUERY_EDITOR = 'REMOVE_QUERY_EDITOR';\nexport const MERGE_TABLE = 'MERGE_TABLE';\nexport const REMOVE_TABLE = 'REMOVE_TABLE';\nexport const END_QUERY = 'END_QUERY';\nexport const REMOVE_QUERY = 'REMOVE_QUERY';\nexport const EXPAND_TABLE = 'EXPAND_TABLE';\nexport const COLLAPSE_TABLE = 'COLLAPSE_TABLE';\nexport const QUERY_EDITOR_SETDB = 'QUERY_EDITOR_SETDB';\nexport const QUERY_EDITOR_SET_SCHEMA = 'QUERY_EDITOR_SET_SCHEMA';\nexport const QUERY_EDITOR_SET_SCHEMA_OPTIONS =\n'QUERY_EDITOR_SET_SCHEMA_OPTIONS';\nexport const QUERY_EDITOR_SET_TABLE_OPTIONS = 'QUERY_EDITOR_SET_TABLE_OPTIONS';\nexport const QUERY_EDITOR_SET_TITLE = 'QUERY_EDITOR_SET_TITLE';\nexport const QUERY_EDITOR_SET_AUTORUN = 'QUERY_EDITOR_SET_AUTORUN';\nexport const QUERY_EDITOR_SET_SQL = 'QUERY_EDITOR_SET_SQL';\nexport const QUERY_EDITOR_SET_QUERY_LIMIT = 'QUERY_EDITOR_SET_QUERY_LIMIT';\nexport const QUERY_EDITOR_SET_TEMPLATE_PARAMS =\n'QUERY_EDITOR_SET_TEMPLATE_PARAMS';\nexport const QUERY_EDITOR_SET_SELECTED_TEXT = 'QUERY_EDITOR_SET_SELECTED_TEXT';\nexport const QUERY_EDITOR_SET_FUNCTION_NAMES =\n'QUERY_EDITOR_SET_FUNCTION_NAMES';\nexport const QUERY_EDITOR_PERSIST_HEIGHT = 'QUERY_EDITOR_PERSIST_HEIGHT';\nexport const QUERY_EDITOR_TOGGLE_LEFT_BAR = 'QUERY_EDITOR_TOGGLE_LEFT_BAR';\nexport const MIGRATE_QUERY_EDITOR = 'MIGRATE_QUERY_EDITOR';\nexport const MIGRATE_TAB_HISTORY = 'MIGRATE_TAB_HISTORY';\nexport const MIGRATE_TABLE = 'MIGRATE_TABLE';\nexport const MIGRATE_QUERY = 'MIGRATE_QUERY';\n\nexport const SET_DATABASES = 'SET_DATABASES';\nexport const SET_ACTIVE_QUERY_EDITOR = 'SET_ACTIVE_QUERY_EDITOR';\nexport const LOAD_QUERY_EDITOR = 'LOAD_QUERY_EDITOR';\nexport const SET_TABLES = 'SET_TABLES';\nexport const SET_ACTIVE_SOUTHPANE_TAB = 'SET_ACTIVE_SOUTHPANE_TAB';\nexport const REFRESH_QUERIES = 'REFRESH_QUERIES';\nexport const SET_USER_OFFLINE = 'SET_USER_OFFLINE';\nexport const RUN_QUERY = 'RUN_QUERY';\nexport const START_QUERY = 'START_QUERY';\nexport const STOP_QUERY = 'STOP_QUERY';\nexport const REQUEST_QUERY_RESULTS = 'REQUEST_QUERY_RESULTS';\nexport const QUERY_SUCCESS = 'QUERY_SUCCESS';\nexport const QUERY_FAILED = 'QUERY_FAILED';\nexport const CLEAR_QUERY_RESULTS = 'CLEAR_QUERY_RESULTS';\nexport const REMOVE_DATA_PREVIEW = 'REMOVE_DATA_PREVIEW';\nexport const CHANGE_DATA_PREVIEW_ID = 'CHANGE_DATA_PREVIEW_ID';\n\nexport const START_QUERY_VALIDATION = 'START_QUERY_VALIDATION';\nexport const QUERY_VALIDATION_RETURNED = 'QUERY_VALIDATION_RETURNED';\nexport const QUERY_VALIDATION_FAILED = 'QUERY_VALIDATION_FAILED';\nexport const COST_ESTIMATE_STARTED = 'COST_ESTIMATE_STARTED';\nexport const COST_ESTIMATE_RETURNED = 'COST_ESTIMATE_RETURNED';\nexport const COST_ESTIMATE_FAILED = 'COST_ESTIMATE_FAILED';\n\nexport const CREATE_DATASOURCE_STARTED = 'CREATE_DATASOURCE_STARTED';\nexport const CREATE_DATASOURCE_SUCCESS = 'CREATE_DATASOURCE_SUCCESS';\nexport const CREATE_DATASOURCE_FAILED = 'CREATE_DATASOURCE_FAILED';\n\nexport const addInfoToast = addInfoToastAction;\nexport const addSuccessToast = addSuccessToastAction;\nexport const addDangerToast = addDangerToastAction;\nexport const addWarningToast = addWarningToastAction;\n\nexport const CtasEnum = {\n  TABLE: 'TABLE',\n  VIEW: 'VIEW' };\n\nconst ERR_MSG_CANT_LOAD_QUERY = t(\"The query couldn't be loaded\");\n\n// a map of SavedQuery field names to the different names used client-side,\n// because for now making the names consistent is too complicated\n// so it might as well only happen in one place\nconst queryClientMapping = {\n  id: 'remoteId',\n  db_id: 'dbId',\n  client_id: 'id',\n  label: 'title' };\n\nconst queryServerMapping = invert(queryClientMapping);\n\n// uses a mapping like those above to convert object key names to another style\nconst fieldConverter = (mapping) => (obj) =>\nmapKeys(obj, (value, key) => key in mapping ? mapping[key] : key);\n\nconst convertQueryToServer = fieldConverter(queryServerMapping);\nconst convertQueryToClient = fieldConverter(queryClientMapping);\n\nexport function resetState() {\n  return { type: RESET_STATE };\n}\n\nexport function startQueryValidation(query) {\n  Object.assign(query, {\n    id: query.id ? query.id : shortid.generate() });\n\n  return { type: START_QUERY_VALIDATION, query };\n}\n\nexport function queryValidationReturned(query, results) {\n  return { type: QUERY_VALIDATION_RETURNED, query, results };\n}\n\nexport function queryValidationFailed(query, message, error) {\n  return { type: QUERY_VALIDATION_FAILED, query, message, error };\n}\n\nexport function updateQueryEditor(alterations) {\n  return { type: UPDATE_QUERY_EDITOR, alterations };\n}\n\nexport function scheduleQuery(query) {\n  return (dispatch) =>\n  SupersetClient.post({\n    endpoint: '/savedqueryviewapi/api/create',\n    postPayload: query,\n    stringify: false }).\n\n  then(() =>\n  dispatch(\n  addSuccessToast(\n  t(\n  'Your query has been scheduled. To see details of your query, navigate to Saved queries')))).\n\n\n\n\n  catch(() =>\n  dispatch(addDangerToast(t('Your query could not be scheduled'))));\n\n}\n\nexport function estimateQueryCost(query) {\n  const { dbId, schema, sql, templateParams } = query;\n  const endpoint =\n  schema === null ?\n  `/superset/estimate_query_cost/${dbId}/` :\n  `/superset/estimate_query_cost/${dbId}/${schema}/`;\n  return (dispatch) =>\n  Promise.all([\n  dispatch({ type: COST_ESTIMATE_STARTED, query }),\n  SupersetClient.post({\n    endpoint,\n    postPayload: {\n      sql,\n      templateParams: JSON.parse(templateParams || '{}') } }).\n\n\n  then(({ json }) =>\n  dispatch({ type: COST_ESTIMATE_RETURNED, query, json })).\n\n  catch((response) =>\n  getClientErrorObject(response).then((error) => {\n    const message =\n    error.error ||\n    error.statusText ||\n    t('Failed at retrieving results');\n    return dispatch({\n      type: COST_ESTIMATE_FAILED,\n      query,\n      error: message });\n\n  }))]);\n\n\n}\n\nexport function startQuery(query) {\n  Object.assign(query, {\n    id: query.id ? query.id : shortid.generate(),\n    progress: 0,\n    startDttm: now(),\n    state: query.runAsync ? 'pending' : 'running',\n    cached: false });\n\n  return { type: START_QUERY, query };\n}\n\nexport function querySuccess(query, results) {\n  return function (dispatch) {\n    const sync =\n    !query.isDataPreview &&\n    isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE) ?\n    SupersetClient.put({\n      endpoint: encodeURI(`/tabstateview/${results.query.sqlEditorId}`),\n      postPayload: { latest_query_id: query.id } }) :\n\n    Promise.resolve();\n\n    return sync.\n    then(() => dispatch({ type: QUERY_SUCCESS, query, results })).\n    catch(() =>\n    dispatch(\n    addDangerToast(\n    t(\n    'An error occurred while storing the latest query id in the backend. ' +\n    'Please contact your administrator if this problem persists.'))));\n\n\n\n\n  };\n}\n\nexport function queryFailed(query, msg, link, errors) {\n  return function (dispatch) {\n    const sync =\n    !query.isDataPreview &&\n    isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE) ?\n    SupersetClient.put({\n      endpoint: encodeURI(`/tabstateview/${query.sqlEditorId}`),\n      postPayload: { latest_query_id: query.id } }) :\n\n    Promise.resolve();\n\n    return (\n      sync.\n      catch(() =>\n      dispatch(\n      addDangerToast(\n      t(\n      'An error occurred while storing the latest query id in the backend. ' +\n      'Please contact your administrator if this problem persists.'))))\n\n\n\n\n      // We should always show the error message, even if we couldn't sync the\n      // state to the backend\n      .then(() => dispatch({ type: QUERY_FAILED, query, msg, link, errors })));\n\n  };\n}\n\nexport function stopQuery(query) {\n  return { type: STOP_QUERY, query };\n}\n\nexport function clearQueryResults(query) {\n  return { type: CLEAR_QUERY_RESULTS, query };\n}\n\nexport function removeDataPreview(table) {\n  return { type: REMOVE_DATA_PREVIEW, table };\n}\n\nexport function requestQueryResults(query) {\n  return { type: REQUEST_QUERY_RESULTS, query };\n}\n\nexport function fetchQueryResults(query, displayLimit) {\n  return function (dispatch) {\n    dispatch(requestQueryResults(query));\n\n    return SupersetClient.get({\n      endpoint: `/superset/results/${query.resultsKey}/?rows=${displayLimit}`,\n      parseMethod: 'text' }).\n\n    then(({ text = '{}' }) => {\n      const bigIntJson = JSONbig.parse(text);\n      return dispatch(querySuccess(query, bigIntJson));\n    }).\n    catch((response) =>\n    getClientErrorObject(response).then((error) => {\n      const message =\n      error.error ||\n      error.statusText ||\n      t('Failed at retrieving results');\n\n      return dispatch(\n      queryFailed(query, message, error.link, error.errors));\n\n    }));\n\n  };\n}\n\nexport function runQuery(query) {\n  return function (dispatch) {\n    dispatch(startQuery(query));\n    const postPayload = {\n      client_id: query.id,\n      database_id: query.dbId,\n      json: true,\n      runAsync: query.runAsync,\n      schema: query.schema,\n      sql: query.sql,\n      sql_editor_id: query.sqlEditorId,\n      tab: query.tab,\n      tmp_table_name: query.tempTable,\n      select_as_cta: query.ctas,\n      ctas_method: query.ctas_method,\n      templateParams: query.templateParams,\n      queryLimit: query.queryLimit,\n      expand_data: true };\n\n\n    return SupersetClient.post({\n      endpoint: '/superset/sql_json/',\n      body: JSON.stringify(postPayload),\n      headers: { 'Content-Type': 'application/json' },\n      parseMethod: 'text' }).\n\n    then(({ text = '{}' }) => {\n      if (!query.runAsync) {\n        const bigIntJson = JSONbig.parse(text);\n        dispatch(querySuccess(query, bigIntJson));\n      }\n    }).\n    catch((response) =>\n    getClientErrorObject(response).then((error) => {\n      let message = error.error || error.statusText || t('Unknown error');\n      if (message.includes('CSRF token')) {\n        message = t(COMMON_ERR_MESSAGES.SESSION_TIMED_OUT);\n      }\n      dispatch(queryFailed(query, message, error.link, error.errors));\n    }));\n\n  };\n}\n\nexport function reRunQuery(query) {\n  // run Query with a new id\n  return function (dispatch) {\n    dispatch(runQuery({ ...query, id: shortid.generate() }));\n  };\n}\n\nexport function validateQuery(query) {\n  return function (dispatch) {\n    dispatch(startQueryValidation(query));\n\n    const postPayload = {\n      client_id: query.id,\n      database_id: query.dbId,\n      json: true,\n      schema: query.schema,\n      sql: query.sql,\n      sql_editor_id: query.sqlEditorId,\n      templateParams: query.templateParams,\n      validate_only: true };\n\n\n    return SupersetClient.post({\n      endpoint: `/superset/validate_sql_json/${window.location.search}`,\n      postPayload,\n      stringify: false }).\n\n    then(({ json }) => dispatch(queryValidationReturned(query, json))).\n    catch((response) =>\n    getClientErrorObject(response).then((error) => {\n      let message = error.error || error.statusText || t('Unknown error');\n      if (message.includes('CSRF token')) {\n        message = t(COMMON_ERR_MESSAGES.SESSION_TIMED_OUT);\n      }\n      dispatch(queryValidationFailed(query, message, error));\n    }));\n\n  };\n}\n\nexport function postStopQuery(query) {\n  return function (dispatch) {\n    return SupersetClient.post({\n      endpoint: '/superset/stop_query/',\n      postPayload: { client_id: query.id },\n      stringify: false }).\n\n    then(() => dispatch(stopQuery(query))).\n    then(() => dispatch(addSuccessToast(t('Query was stopped.')))).\n    catch(() =>\n    dispatch(\n    addDangerToast(`${t('Failed at stopping query. ')}'${query.id}'`)));\n\n\n  };\n}\n\nexport function setDatabases(databases) {\n  return { type: SET_DATABASES, databases };\n}\n\nfunction migrateTable(table, queryEditorId, dispatch) {\n  return SupersetClient.post({\n    endpoint: encodeURI('/tableschemaview/'),\n    postPayload: { table: { ...table, queryEditorId } } }).\n\n  then(({ json }) => {\n    const newTable = {\n      ...table,\n      id: json.id,\n      queryEditorId };\n\n    return dispatch({ type: MIGRATE_TABLE, oldTable: table, newTable });\n  }).\n  catch(() =>\n  dispatch(\n  addWarningToast(\n  t(\n  'Unable to migrate table schema state to backend. Superset will retry ' +\n  'later. Please contact your administrator if this problem persists.'))));\n\n\n\n\n}\n\nfunction migrateQuery(queryId, queryEditorId, dispatch) {\n  return SupersetClient.post({\n    endpoint: encodeURI(`/tabstateview/${queryEditorId}/migrate_query`),\n    postPayload: { queryId } }).\n\n  then(() => dispatch({ type: MIGRATE_QUERY, queryId, queryEditorId })).\n  catch(() =>\n  dispatch(\n  addWarningToast(\n  t(\n  'Unable to migrate query state to backend. Superset will retry later. ' +\n  'Please contact your administrator if this problem persists.'))));\n\n\n\n\n}\n\nexport function migrateQueryEditorFromLocalStorage(\nqueryEditor,\ntables,\nqueries)\n{\n  return function (dispatch) {\n    return SupersetClient.post({\n      endpoint: '/tabstateview/',\n      postPayload: { queryEditor } }).\n\n    then(({ json }) => {\n      const newQueryEditor = {\n        ...queryEditor,\n        id: json.id.toString() };\n\n      dispatch({\n        type: MIGRATE_QUERY_EDITOR,\n        oldQueryEditor: queryEditor,\n        newQueryEditor });\n\n      dispatch({\n        type: MIGRATE_TAB_HISTORY,\n        oldId: queryEditor.id,\n        newId: newQueryEditor.id });\n\n      return Promise.all([\n      ...tables.map((table) =>\n      migrateTable(table, newQueryEditor.id, dispatch)),\n\n      ...queries.map((query) =>\n      migrateQuery(query.id, newQueryEditor.id, dispatch))]);\n\n\n    }).\n    catch(() =>\n    dispatch(\n    addWarningToast(\n    t(\n    'Unable to migrate query editor state to backend. Superset will retry ' +\n    'later. Please contact your administrator if this problem persists.'))));\n\n\n\n\n  };\n}\n\nexport function addQueryEditor(queryEditor) {\n  return function (dispatch) {\n    const sync = isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE) ?\n    SupersetClient.post({\n      endpoint: '/tabstateview/',\n      postPayload: { queryEditor } }) :\n\n    Promise.resolve({ json: { id: shortid.generate() } });\n\n    return sync.\n    then(({ json }) => {\n      const newQueryEditor = {\n        ...queryEditor,\n        id: json.id.toString() };\n\n      return dispatch({\n        type: ADD_QUERY_EDITOR,\n        queryEditor: newQueryEditor });\n\n    }).\n    catch(() =>\n    dispatch(\n    addDangerToast(\n    t(\n    'Unable to add a new tab to the backend. Please contact your administrator.'))));\n\n\n\n\n  };\n}\n\nexport function cloneQueryToNewTab(query, autorun) {\n  return function (dispatch, getState) {\n    const state = getState();\n    const { queryEditors, tabHistory } = state.sqlLab;\n    const sourceQueryEditor = queryEditors.find(\n    (qe) => qe.id === tabHistory[tabHistory.length - 1]);\n\n    const queryEditor = {\n      title: t('Copy of %s', sourceQueryEditor.title),\n      dbId: query.dbId ? query.dbId : null,\n      schema: query.schema ? query.schema : null,\n      autorun,\n      sql: query.sql,\n      queryLimit: sourceQueryEditor.queryLimit,\n      maxRow: sourceQueryEditor.maxRow,\n      templateParams: sourceQueryEditor.templateParams };\n\n    return dispatch(addQueryEditor(queryEditor));\n  };\n}\n\nexport function setActiveQueryEditor(queryEditor) {\n  return function (dispatch) {\n    const sync = isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE) ?\n    SupersetClient.post({\n      endpoint: encodeURI(`/tabstateview/${queryEditor.id}/activate`) }) :\n\n    Promise.resolve();\n\n    return sync.\n    then(() => dispatch({ type: SET_ACTIVE_QUERY_EDITOR, queryEditor })).\n    catch((response) => {\n      if (response.status !== 404) {\n        return dispatch(\n        addDangerToast(\n        t(\n        'An error occurred while setting the active tab. Please contact ' +\n        'your administrator.')));\n\n\n\n      }\n      return dispatch({ type: REMOVE_QUERY_EDITOR, queryEditor });\n    });\n  };\n}\n\nexport function loadQueryEditor(queryEditor) {\n  return { type: LOAD_QUERY_EDITOR, queryEditor };\n}\n\nexport function setTables(tableSchemas) {\n  const tables = tableSchemas.\n  filter((tableSchema) => tableSchema.description !== null).\n  map((tableSchema) => {\n    const {\n      columns,\n      selectStar,\n      primaryKey,\n      foreignKeys,\n      indexes,\n      dataPreviewQueryId } =\n    tableSchema.description;\n    return {\n      dbId: tableSchema.database_id,\n      queryEditorId: tableSchema.tab_state_id.toString(),\n      schema: tableSchema.schema,\n      name: tableSchema.table,\n      expanded: tableSchema.expanded,\n      id: tableSchema.id,\n      dataPreviewQueryId,\n      columns,\n      selectStar,\n      primaryKey,\n      foreignKeys,\n      indexes,\n      isMetadataLoading: false,\n      isExtraMetadataLoading: false };\n\n  });\n  return { type: SET_TABLES, tables };\n}\n\nexport function switchQueryEditor(queryEditor, displayLimit) {\n  return function (dispatch) {\n    if (\n    isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE) &&\n    !queryEditor.loaded)\n    {\n      SupersetClient.get({\n        endpoint: encodeURI(`/tabstateview/${queryEditor.id}`) }).\n\n      then(({ json }) => {\n        const loadedQueryEditor = {\n          id: json.id.toString(),\n          loaded: true,\n          title: json.label,\n          sql: json.sql,\n          selectedText: null,\n          latestQueryId: json.latest_query ? json.latest_query.id : null,\n          autorun: json.autorun,\n          dbId: json.database_id,\n          templateParams: json.template_params,\n          schema: json.schema,\n          queryLimit: json.query_limit,\n          validationResult: {\n            id: null,\n            errors: [],\n            completed: false },\n\n          hideLeftBar: json.hide_left_bar };\n\n        dispatch(loadQueryEditor(loadedQueryEditor));\n        dispatch(setTables(json.table_schemas || []));\n        dispatch(setActiveQueryEditor(loadedQueryEditor));\n        if (json.latest_query && json.latest_query.resultsKey) {\n          dispatch(fetchQueryResults(json.latest_query, displayLimit));\n        }\n      }).\n      catch((response) => {\n        if (response.status !== 404) {\n          return dispatch(\n          addDangerToast(t('An error occurred while fetching tab state')));\n\n        }\n        return dispatch({ type: REMOVE_QUERY_EDITOR, queryEditor });\n      });\n    } else {\n      dispatch(setActiveQueryEditor(queryEditor));\n    }\n  };\n}\n\nexport function setActiveSouthPaneTab(tabId) {\n  return { type: SET_ACTIVE_SOUTHPANE_TAB, tabId };\n}\n\nexport function toggleLeftBar(queryEditor) {\n  const hideLeftBar = !queryEditor.hideLeftBar;\n  return function (dispatch) {\n    const sync = isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE) ?\n    SupersetClient.put({\n      endpoint: encodeURI(`/tabstateview/${queryEditor.id}`),\n      postPayload: { hide_left_bar: hideLeftBar } }) :\n\n    Promise.resolve();\n\n    return sync.\n    then(() =>\n    dispatch({\n      type: QUERY_EDITOR_TOGGLE_LEFT_BAR,\n      queryEditor,\n      hideLeftBar })).\n\n\n    catch(() =>\n    dispatch(\n    addDangerToast(\n    t(\n    'An error occurred while hiding the left bar. Please contact your administrator.'))));\n\n\n\n\n  };\n}\n\nexport function removeQueryEditor(queryEditor) {\n  return function (dispatch) {\n    const sync = isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE) ?\n    SupersetClient.delete({\n      endpoint: encodeURI(`/tabstateview/${queryEditor.id}`) }) :\n\n    Promise.resolve();\n\n    return sync.\n    then(() => dispatch({ type: REMOVE_QUERY_EDITOR, queryEditor })).\n    catch(() =>\n    dispatch(\n    addDangerToast(\n    t(\n    'An error occurred while removing tab. Please contact your administrator.'))));\n\n\n\n\n  };\n}\n\nexport function removeQuery(query) {\n  return function (dispatch) {\n    const sync = isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE) ?\n    SupersetClient.delete({\n      endpoint: encodeURI(\n      `/tabstateview/${query.sqlEditorId}/query/${query.id}`) }) :\n\n\n    Promise.resolve();\n\n    return sync.\n    then(() => dispatch({ type: REMOVE_QUERY, query })).\n    catch(() =>\n    dispatch(\n    addDangerToast(\n    t(\n    'An error occurred while removing query. Please contact your administrator.'))));\n\n\n\n\n  };\n}\n\nexport function queryEditorSetDb(queryEditor, dbId) {\n  return function (dispatch) {\n    const sync = isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE) ?\n    SupersetClient.put({\n      endpoint: encodeURI(`/tabstateview/${queryEditor.id}`),\n      postPayload: { database_id: dbId } }) :\n\n    Promise.resolve();\n\n    return sync.\n    then(() => dispatch({ type: QUERY_EDITOR_SETDB, queryEditor, dbId })).\n    catch(() =>\n    dispatch(\n    addDangerToast(\n    t(\n    'An error occurred while setting the tab database ID. Please contact your administrator.'))));\n\n\n\n\n  };\n}\n\nexport function queryEditorSetSchema(queryEditor, schema) {\n  return function (dispatch) {\n    const sync = isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE) ?\n    SupersetClient.put({\n      endpoint: encodeURI(`/tabstateview/${queryEditor.id}`),\n      postPayload: { schema } }) :\n\n    Promise.resolve();\n\n    return sync.\n    then(() =>\n    dispatch({ type: QUERY_EDITOR_SET_SCHEMA, queryEditor, schema })).\n\n    catch(() =>\n    dispatch(\n    addDangerToast(\n    t(\n    'An error occurred while setting the tab schema. Please contact your administrator.'))));\n\n\n\n\n  };\n}\n\nexport function queryEditorSetSchemaOptions(queryEditor, options) {\n  return { type: QUERY_EDITOR_SET_SCHEMA_OPTIONS, queryEditor, options };\n}\n\nexport function queryEditorSetTableOptions(queryEditor, options) {\n  return { type: QUERY_EDITOR_SET_TABLE_OPTIONS, queryEditor, options };\n}\n\nexport function queryEditorSetAutorun(queryEditor, autorun) {\n  return function (dispatch) {\n    const sync = isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE) ?\n    SupersetClient.put({\n      endpoint: encodeURI(`/tabstateview/${queryEditor.id}`),\n      postPayload: { autorun } }) :\n\n    Promise.resolve();\n\n    return sync.\n    then(() =>\n    dispatch({ type: QUERY_EDITOR_SET_AUTORUN, queryEditor, autorun })).\n\n    catch(() =>\n    dispatch(\n    addDangerToast(\n    t(\n    'An error occurred while setting the tab autorun. Please contact your administrator.'))));\n\n\n\n\n  };\n}\n\nexport function queryEditorSetTitle(queryEditor, title) {\n  return function (dispatch) {\n    const sync = isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE) ?\n    SupersetClient.put({\n      endpoint: encodeURI(`/tabstateview/${queryEditor.id}`),\n      postPayload: { label: title } }) :\n\n    Promise.resolve();\n\n    return sync.\n    then(() =>\n    dispatch({ type: QUERY_EDITOR_SET_TITLE, queryEditor, title })).\n\n    catch(() =>\n    dispatch(\n    addDangerToast(\n    t(\n    'An error occurred while setting the tab title. Please contact your administrator.'))));\n\n\n\n\n  };\n}\n\nexport function saveQuery(query) {\n  return (dispatch) =>\n  SupersetClient.post({\n    endpoint: '/savedqueryviewapi/api/create',\n    postPayload: convertQueryToServer(query),\n    stringify: false }).\n\n  then((result) => {\n    dispatch({\n      type: QUERY_EDITOR_SAVED,\n      query,\n      result: convertQueryToClient(result.json.item) });\n\n    dispatch(addSuccessToast(t('Your query was saved')));\n    dispatch(queryEditorSetTitle(query, query.title));\n  }).\n  catch(() =>\n  dispatch(addDangerToast(t('Your query could not be saved'))));\n\n}\n\nexport function updateSavedQuery(query) {\n  return (dispatch) =>\n  SupersetClient.put({\n    endpoint: `/savedqueryviewapi/api/update/${query.remoteId}`,\n    postPayload: convertQueryToServer(query),\n    stringify: false }).\n\n  then(() => {\n    dispatch(addSuccessToast(t('Your query was updated')));\n    dispatch(queryEditorSetTitle(query, query.title));\n  }).\n  catch(() =>\n  dispatch(addDangerToast(t('Your query could not be updated')))).\n\n  then(() => dispatch(updateQueryEditor(query)));\n}\n\nexport function queryEditorSetSql(queryEditor, sql) {\n  return function (dispatch) {\n    // saved query and set tab state use this action\n    dispatch({ type: QUERY_EDITOR_SET_SQL, queryEditor, sql });\n    if (isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE)) {\n      return SupersetClient.put({\n        endpoint: encodeURI(`/tabstateview/${queryEditor.id}`),\n        postPayload: { sql, latest_query_id: queryEditor.latestQueryId } }).\n      catch(() =>\n      dispatch(\n      addDangerToast(\n      t(\n      'An error occurred while storing your query in the backend. To ' +\n      'avoid losing your changes, please save your query using the ' +\n      '\"Save Query\" button.'))));\n\n\n\n\n    }\n    return Promise.resolve();\n  };\n}\n\nexport function queryEditorSetQueryLimit(queryEditor, queryLimit) {\n  return function (dispatch) {\n    const sync = isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE) ?\n    SupersetClient.put({\n      endpoint: encodeURI(`/tabstateview/${queryEditor.id}`),\n      postPayload: { query_limit: queryLimit } }) :\n\n    Promise.resolve();\n\n    return sync.\n    then(() =>\n    dispatch({\n      type: QUERY_EDITOR_SET_QUERY_LIMIT,\n      queryEditor,\n      queryLimit })).\n\n\n    catch(() =>\n    dispatch(\n    addDangerToast(\n    t(\n    'An error occurred while setting the tab title. Please contact your administrator.'))));\n\n\n\n\n  };\n}\n\nexport function queryEditorSetTemplateParams(queryEditor, templateParams) {\n  return function (dispatch) {\n    dispatch({\n      type: QUERY_EDITOR_SET_TEMPLATE_PARAMS,\n      queryEditor,\n      templateParams });\n\n    const sync = isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE) ?\n    SupersetClient.put({\n      endpoint: encodeURI(`/tabstateview/${queryEditor.id}`),\n      postPayload: { template_params: templateParams } }) :\n\n    Promise.resolve();\n\n    return sync.catch(() =>\n    dispatch(\n    addDangerToast(\n    t(\n    'An error occurred while setting the tab template parameters. ' +\n    'Please contact your administrator.'))));\n\n\n\n\n  };\n}\n\nexport function queryEditorSetSelectedText(queryEditor, sql) {\n  return { type: QUERY_EDITOR_SET_SELECTED_TEXT, queryEditor, sql };\n}\n\nexport function mergeTable(table, query) {\n  return { type: MERGE_TABLE, table, query };\n}\n\nfunction getTableMetadata(table, query, dispatch) {\n  return SupersetClient.get({\n    endpoint: encodeURI(\n    `/api/v1/database/${query.dbId}/table/${encodeURIComponent(\n    table.name)\n    }/${encodeURIComponent(table.schema)}/`) }).\n\n\n  then(({ json }) => {\n    const dataPreviewQuery = {\n      id: shortid.generate(),\n      dbId: query.dbId,\n      sql: json.selectStar,\n      tableName: table.name,\n      sqlEditorId: null,\n      tab: '',\n      runAsync: false,\n      ctas: false,\n      isDataPreview: true };\n\n    const newTable = {\n      ...table,\n      ...json,\n      expanded: true,\n      isMetadataLoading: false,\n      dataPreviewQueryId: dataPreviewQuery.id };\n\n    Promise.all([\n    dispatch(mergeTable(newTable, dataPreviewQuery)), // Merge table to tables in state\n    dispatch(runQuery(dataPreviewQuery)) // Run query to get preview data for table\n    ]);\n    return newTable;\n  }).\n  catch(() =>\n  Promise.all([\n  dispatch(\n  mergeTable({\n    ...table,\n    isMetadataLoading: false })),\n\n\n  dispatch(\n  addDangerToast(t('An error occurred while fetching table metadata')))]));\n\n\n\n}\n\nfunction getTableExtendedMetadata(table, query, dispatch) {\n  return SupersetClient.get({\n    endpoint: encodeURI(\n    `/superset/extra_table_metadata/${query.dbId}/` +\n    `${encodeURIComponent(table.name)}/${encodeURIComponent(\n    table.schema)\n    }/`) }).\n\n\n  then(({ json }) => {\n    dispatch(\n    mergeTable({ ...table, ...json, isExtraMetadataLoading: false }));\n\n    return json;\n  }).\n  catch(() =>\n  Promise.all([\n  dispatch(mergeTable({ ...table, isExtraMetadataLoading: false })),\n  dispatch(\n  addDangerToast(t('An error occurred while fetching table metadata')))]));\n\n\n\n}\n\nexport function addTable(query, tableName, schemaName) {\n  return function (dispatch) {\n    const table = {\n      dbId: query.dbId,\n      queryEditorId: query.id,\n      schema: schemaName,\n      name: tableName };\n\n    dispatch(\n    mergeTable({\n      ...table,\n      isMetadataLoading: true,\n      isExtraMetadataLoading: true,\n      expanded: true }));\n\n\n\n    return Promise.all([\n    getTableMetadata(table, query, dispatch),\n    getTableExtendedMetadata(table, query, dispatch)]).\n    then(([newTable, json]) => {\n      const sync = isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE) ?\n      SupersetClient.post({\n        endpoint: encodeURI('/tableschemaview/'),\n        postPayload: { table: { ...newTable, ...json } } }) :\n\n      Promise.resolve({ json: { id: shortid.generate() } });\n\n      return sync.\n      then(({ json: resultJson }) =>\n      dispatch(mergeTable({ ...table, id: resultJson.id }))).\n\n      catch(() =>\n      dispatch(\n      addDangerToast(\n      t(\n      'An error occurred while fetching table metadata. ' +\n      'Please contact your administrator.'))));\n\n\n\n\n    });\n  };\n}\n\nexport function changeDataPreviewId(oldQueryId, newQuery) {\n  return { type: CHANGE_DATA_PREVIEW_ID, oldQueryId, newQuery };\n}\n\nexport function reFetchQueryResults(query) {\n  return function (dispatch) {\n    const newQuery = {\n      id: shortid.generate(),\n      dbId: query.dbId,\n      sql: query.sql,\n      tableName: query.tableName,\n      sqlEditorId: null,\n      tab: '',\n      runAsync: false,\n      ctas: false,\n      queryLimit: query.queryLimit,\n      isDataPreview: query.isDataPreview };\n\n    dispatch(runQuery(newQuery));\n    dispatch(changeDataPreviewId(query.id, newQuery));\n  };\n}\n\nexport function expandTable(table) {\n  return function (dispatch) {\n    const sync = isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE) ?\n    SupersetClient.post({\n      endpoint: encodeURI(`/tableschemaview/${table.id}/expanded`),\n      postPayload: { expanded: true } }) :\n\n    Promise.resolve();\n\n    return sync.\n    then(() => dispatch({ type: EXPAND_TABLE, table })).\n    catch(() =>\n    dispatch(\n    addDangerToast(\n    t(\n    'An error occurred while expanding the table schema. ' +\n    'Please contact your administrator.'))));\n\n\n\n\n  };\n}\n\nexport function collapseTable(table) {\n  return function (dispatch) {\n    const sync = isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE) ?\n    SupersetClient.post({\n      endpoint: encodeURI(`/tableschemaview/${table.id}/expanded`),\n      postPayload: { expanded: false } }) :\n\n    Promise.resolve();\n\n    return sync.\n    then(() => dispatch({ type: COLLAPSE_TABLE, table })).\n    catch(() =>\n    dispatch(\n    addDangerToast(\n    t(\n    'An error occurred while collapsing the table schema. ' +\n    'Please contact your administrator.'))));\n\n\n\n\n  };\n}\n\nexport function removeTable(table) {\n  return function (dispatch) {\n    const sync = isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE) ?\n    SupersetClient.delete({\n      endpoint: encodeURI(`/tableschemaview/${table.id}`) }) :\n\n    Promise.resolve();\n\n    return sync.\n    then(() => dispatch({ type: REMOVE_TABLE, table })).\n    catch(() =>\n    dispatch(\n    addDangerToast(\n    t(\n    'An error occurred while removing the table schema. ' +\n    'Please contact your administrator.'))));\n\n\n\n\n  };\n}\n\nexport function refreshQueries(alteredQueries) {\n  return { type: REFRESH_QUERIES, alteredQueries };\n}\n\nexport function setUserOffline(offline) {\n  return { type: SET_USER_OFFLINE, offline };\n}\n\nexport function persistEditorHeight(queryEditor, northPercent, southPercent) {\n  return {\n    type: QUERY_EDITOR_PERSIST_HEIGHT,\n    queryEditor,\n    northPercent,\n    southPercent };\n\n}\n\nexport function popStoredQuery(urlId) {\n  return function (dispatch) {\n    return SupersetClient.get({ endpoint: `/kv/${urlId}` }).\n    then(({ json }) =>\n    dispatch(\n    addQueryEditor({\n      title: json.title ? json.title : t('Shared query'),\n      dbId: json.dbId ? parseInt(json.dbId, 10) : null,\n      schema: json.schema ? json.schema : null,\n      autorun: json.autorun ? json.autorun : false,\n      sql: json.sql ? json.sql : 'SELECT ...' }))).\n\n\n\n    catch(() => dispatch(addDangerToast(ERR_MSG_CANT_LOAD_QUERY)));\n  };\n}\nexport function popSavedQuery(saveQueryId) {\n  return function (dispatch) {\n    return SupersetClient.get({\n      endpoint: `/savedqueryviewapi/api/get/${saveQueryId}` }).\n\n    then(({ json }) => {\n      const queryEditorProps = {\n        ...convertQueryToClient(json.result),\n        autorun: false };\n\n      return dispatch(addQueryEditor(queryEditorProps));\n    }).\n    catch(() => dispatch(addDangerToast(ERR_MSG_CANT_LOAD_QUERY)));\n  };\n}\nexport function popQuery(queryId) {\n  return function (dispatch) {\n    return SupersetClient.get({\n      endpoint: `/api/v1/query/${queryId}` }).\n\n    then(({ json }) => {\n      const queryData = json.result;\n      const queryEditorProps = {\n        dbId: queryData.database.id,\n        schema: queryData.schema,\n        sql: queryData.sql,\n        title: `Copy of ${queryData.tab_name}`,\n        autorun: false };\n\n      return dispatch(addQueryEditor(queryEditorProps));\n    }).\n    catch(() => dispatch(addDangerToast(ERR_MSG_CANT_LOAD_QUERY)));\n  };\n}\nexport function popDatasourceQuery(datasourceKey, sql) {\n  return function (dispatch) {\n    return SupersetClient.get({\n      endpoint: `/superset/fetch_datasource_metadata?datasourceKey=${datasourceKey}` }).\n\n    then(({ json }) =>\n    dispatch(\n    addQueryEditor({\n      title: `Query ${json.name}`,\n      dbId: json.database.id,\n      schema: json.schema,\n      autorun: sql !== undefined,\n      sql: sql || json.select_star }))).\n\n\n\n    catch(() =>\n    dispatch(addDangerToast(t(\"The datasource couldn't be loaded\"))));\n\n  };\n}\nexport function createDatasourceStarted() {\n  return { type: CREATE_DATASOURCE_STARTED };\n}\nexport function createDatasourceSuccess(data) {\n  const datasource = `${data.table_id}__table`;\n  return { type: CREATE_DATASOURCE_SUCCESS, datasource };\n}\nexport function createDatasourceFailed(err) {\n  return { type: CREATE_DATASOURCE_FAILED, err };\n}\n\nexport function createDatasource(vizOptions) {\n  return (dispatch) => {\n    dispatch(createDatasourceStarted());\n    return SupersetClient.post({\n      endpoint: '/superset/sqllab_viz/',\n      postPayload: { data: vizOptions } }).\n\n    then(({ json }) => {\n      dispatch(createDatasourceSuccess(json));\n\n      return Promise.resolve(json);\n    }).\n    catch(() => {\n      dispatch(\n      createDatasourceFailed(\n      t('An error occurred while creating the data source')));\n\n\n\n      return Promise.reject();\n    });\n  };\n}\n\nexport function createCtasDatasource(vizOptions) {\n  return (dispatch) => {\n    dispatch(createDatasourceStarted());\n    return SupersetClient.post({\n      endpoint: '/superset/get_or_create_table/',\n      postPayload: { data: vizOptions } }).\n\n    then(({ json }) => {\n      dispatch(createDatasourceSuccess(json));\n\n      return json;\n    }).\n    catch(() => {\n      const errorMsg = t('An error occurred while creating the data source');\n      dispatch(createDatasourceFailed(errorMsg));\n      return Promise.reject(new Error(errorMsg));\n    });\n  };\n}\n\nexport function queryEditorSetFunctionNames(queryEditor, dbId) {\n  return function (dispatch) {\n    return SupersetClient.get({\n      endpoint: encodeURI(`/api/v1/database/${dbId}/function_names/`) }).\n\n    then(({ json }) =>\n    dispatch({\n      type: QUERY_EDITOR_SET_FUNCTION_NAMES,\n      queryEditor,\n      functionNames: json.function_names })).\n\n\n    catch(() =>\n    dispatch(\n    addDangerToast(t('An error occurred while fetching function names.'))));\n\n\n  };\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(RESET_STATE, \"RESET_STATE\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(ADD_QUERY_EDITOR, \"ADD_QUERY_EDITOR\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(UPDATE_QUERY_EDITOR, \"UPDATE_QUERY_EDITOR\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(QUERY_EDITOR_SAVED, \"QUERY_EDITOR_SAVED\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(CLONE_QUERY_TO_NEW_TAB, \"CLONE_QUERY_TO_NEW_TAB\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(REMOVE_QUERY_EDITOR, \"REMOVE_QUERY_EDITOR\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(MERGE_TABLE, \"MERGE_TABLE\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(REMOVE_TABLE, \"REMOVE_TABLE\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(END_QUERY, \"END_QUERY\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(REMOVE_QUERY, \"REMOVE_QUERY\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(EXPAND_TABLE, \"EXPAND_TABLE\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(COLLAPSE_TABLE, \"COLLAPSE_TABLE\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(QUERY_EDITOR_SETDB, \"QUERY_EDITOR_SETDB\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(QUERY_EDITOR_SET_SCHEMA, \"QUERY_EDITOR_SET_SCHEMA\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(QUERY_EDITOR_SET_SCHEMA_OPTIONS, \"QUERY_EDITOR_SET_SCHEMA_OPTIONS\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(QUERY_EDITOR_SET_TABLE_OPTIONS, \"QUERY_EDITOR_SET_TABLE_OPTIONS\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(QUERY_EDITOR_SET_TITLE, \"QUERY_EDITOR_SET_TITLE\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(QUERY_EDITOR_SET_AUTORUN, \"QUERY_EDITOR_SET_AUTORUN\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(QUERY_EDITOR_SET_SQL, \"QUERY_EDITOR_SET_SQL\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(QUERY_EDITOR_SET_QUERY_LIMIT, \"QUERY_EDITOR_SET_QUERY_LIMIT\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(QUERY_EDITOR_SET_TEMPLATE_PARAMS, \"QUERY_EDITOR_SET_TEMPLATE_PARAMS\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(QUERY_EDITOR_SET_SELECTED_TEXT, \"QUERY_EDITOR_SET_SELECTED_TEXT\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(QUERY_EDITOR_SET_FUNCTION_NAMES, \"QUERY_EDITOR_SET_FUNCTION_NAMES\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(QUERY_EDITOR_PERSIST_HEIGHT, \"QUERY_EDITOR_PERSIST_HEIGHT\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(QUERY_EDITOR_TOGGLE_LEFT_BAR, \"QUERY_EDITOR_TOGGLE_LEFT_BAR\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(MIGRATE_QUERY_EDITOR, \"MIGRATE_QUERY_EDITOR\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(MIGRATE_TAB_HISTORY, \"MIGRATE_TAB_HISTORY\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(MIGRATE_TABLE, \"MIGRATE_TABLE\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(MIGRATE_QUERY, \"MIGRATE_QUERY\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(SET_DATABASES, \"SET_DATABASES\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(SET_ACTIVE_QUERY_EDITOR, \"SET_ACTIVE_QUERY_EDITOR\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(LOAD_QUERY_EDITOR, \"LOAD_QUERY_EDITOR\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(SET_TABLES, \"SET_TABLES\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(SET_ACTIVE_SOUTHPANE_TAB, \"SET_ACTIVE_SOUTHPANE_TAB\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(REFRESH_QUERIES, \"REFRESH_QUERIES\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(SET_USER_OFFLINE, \"SET_USER_OFFLINE\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(RUN_QUERY, \"RUN_QUERY\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(START_QUERY, \"START_QUERY\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(STOP_QUERY, \"STOP_QUERY\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(REQUEST_QUERY_RESULTS, \"REQUEST_QUERY_RESULTS\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(QUERY_SUCCESS, \"QUERY_SUCCESS\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(QUERY_FAILED, \"QUERY_FAILED\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(CLEAR_QUERY_RESULTS, \"CLEAR_QUERY_RESULTS\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(REMOVE_DATA_PREVIEW, \"REMOVE_DATA_PREVIEW\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(CHANGE_DATA_PREVIEW_ID, \"CHANGE_DATA_PREVIEW_ID\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(START_QUERY_VALIDATION, \"START_QUERY_VALIDATION\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(QUERY_VALIDATION_RETURNED, \"QUERY_VALIDATION_RETURNED\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(QUERY_VALIDATION_FAILED, \"QUERY_VALIDATION_FAILED\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(COST_ESTIMATE_STARTED, \"COST_ESTIMATE_STARTED\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(COST_ESTIMATE_RETURNED, \"COST_ESTIMATE_RETURNED\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(COST_ESTIMATE_FAILED, \"COST_ESTIMATE_FAILED\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(CREATE_DATASOURCE_STARTED, \"CREATE_DATASOURCE_STARTED\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(CREATE_DATASOURCE_SUCCESS, \"CREATE_DATASOURCE_SUCCESS\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(CREATE_DATASOURCE_FAILED, \"CREATE_DATASOURCE_FAILED\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(addInfoToast, \"addInfoToast\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(addSuccessToast, \"addSuccessToast\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(addDangerToast, \"addDangerToast\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(addWarningToast, \"addWarningToast\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(CtasEnum, \"CtasEnum\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(ERR_MSG_CANT_LOAD_QUERY, \"ERR_MSG_CANT_LOAD_QUERY\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(queryClientMapping, \"queryClientMapping\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(queryServerMapping, \"queryServerMapping\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(fieldConverter, \"fieldConverter\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(convertQueryToServer, \"convertQueryToServer\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(convertQueryToClient, \"convertQueryToClient\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(resetState, \"resetState\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(startQueryValidation, \"startQueryValidation\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(queryValidationReturned, \"queryValidationReturned\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(queryValidationFailed, \"queryValidationFailed\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(updateQueryEditor, \"updateQueryEditor\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(scheduleQuery, \"scheduleQuery\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(estimateQueryCost, \"estimateQueryCost\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(startQuery, \"startQuery\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(querySuccess, \"querySuccess\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(queryFailed, \"queryFailed\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(stopQuery, \"stopQuery\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(clearQueryResults, \"clearQueryResults\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(removeDataPreview, \"removeDataPreview\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(requestQueryResults, \"requestQueryResults\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(fetchQueryResults, \"fetchQueryResults\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(runQuery, \"runQuery\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(reRunQuery, \"reRunQuery\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(validateQuery, \"validateQuery\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(postStopQuery, \"postStopQuery\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(setDatabases, \"setDatabases\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(migrateTable, \"migrateTable\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(migrateQuery, \"migrateQuery\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(migrateQueryEditorFromLocalStorage, \"migrateQueryEditorFromLocalStorage\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(addQueryEditor, \"addQueryEditor\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(cloneQueryToNewTab, \"cloneQueryToNewTab\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(setActiveQueryEditor, \"setActiveQueryEditor\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(loadQueryEditor, \"loadQueryEditor\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(setTables, \"setTables\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(switchQueryEditor, \"switchQueryEditor\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(setActiveSouthPaneTab, \"setActiveSouthPaneTab\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(toggleLeftBar, \"toggleLeftBar\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(removeQueryEditor, \"removeQueryEditor\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(removeQuery, \"removeQuery\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(queryEditorSetDb, \"queryEditorSetDb\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(queryEditorSetSchema, \"queryEditorSetSchema\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(queryEditorSetSchemaOptions, \"queryEditorSetSchemaOptions\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(queryEditorSetTableOptions, \"queryEditorSetTableOptions\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(queryEditorSetAutorun, \"queryEditorSetAutorun\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(queryEditorSetTitle, \"queryEditorSetTitle\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(saveQuery, \"saveQuery\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(updateSavedQuery, \"updateSavedQuery\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(queryEditorSetSql, \"queryEditorSetSql\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(queryEditorSetQueryLimit, \"queryEditorSetQueryLimit\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(queryEditorSetTemplateParams, \"queryEditorSetTemplateParams\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(queryEditorSetSelectedText, \"queryEditorSetSelectedText\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(mergeTable, \"mergeTable\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(getTableMetadata, \"getTableMetadata\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(getTableExtendedMetadata, \"getTableExtendedMetadata\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(addTable, \"addTable\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(changeDataPreviewId, \"changeDataPreviewId\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(reFetchQueryResults, \"reFetchQueryResults\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(expandTable, \"expandTable\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(collapseTable, \"collapseTable\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(removeTable, \"removeTable\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(refreshQueries, \"refreshQueries\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(setUserOffline, \"setUserOffline\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(persistEditorHeight, \"persistEditorHeight\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(popStoredQuery, \"popStoredQuery\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(popSavedQuery, \"popSavedQuery\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(popQuery, \"popQuery\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(popDatasourceQuery, \"popDatasourceQuery\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(createDatasourceStarted, \"createDatasourceStarted\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(createDatasourceSuccess, \"createDatasourceSuccess\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(createDatasourceFailed, \"createDatasourceFailed\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(createDatasource, \"createDatasource\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(createCtasDatasource, \"createCtasDatasource\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(queryEditorSetFunctionNames, \"queryEditorSetFunctionNames\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(__signature__, \"__signature__\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(RESET_STATE, \"RESET_STATE\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(ADD_QUERY_EDITOR, \"ADD_QUERY_EDITOR\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(UPDATE_QUERY_EDITOR, \"UPDATE_QUERY_EDITOR\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(QUERY_EDITOR_SAVED, \"QUERY_EDITOR_SAVED\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(CLONE_QUERY_TO_NEW_TAB, \"CLONE_QUERY_TO_NEW_TAB\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(REMOVE_QUERY_EDITOR, \"REMOVE_QUERY_EDITOR\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(MERGE_TABLE, \"MERGE_TABLE\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(REMOVE_TABLE, \"REMOVE_TABLE\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(END_QUERY, \"END_QUERY\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(REMOVE_QUERY, \"REMOVE_QUERY\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(EXPAND_TABLE, \"EXPAND_TABLE\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(COLLAPSE_TABLE, \"COLLAPSE_TABLE\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(QUERY_EDITOR_SETDB, \"QUERY_EDITOR_SETDB\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(QUERY_EDITOR_SET_SCHEMA, \"QUERY_EDITOR_SET_SCHEMA\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(QUERY_EDITOR_SET_SCHEMA_OPTIONS, \"QUERY_EDITOR_SET_SCHEMA_OPTIONS\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(QUERY_EDITOR_SET_TABLE_OPTIONS, \"QUERY_EDITOR_SET_TABLE_OPTIONS\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(QUERY_EDITOR_SET_TITLE, \"QUERY_EDITOR_SET_TITLE\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(QUERY_EDITOR_SET_AUTORUN, \"QUERY_EDITOR_SET_AUTORUN\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(QUERY_EDITOR_SET_SQL, \"QUERY_EDITOR_SET_SQL\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(QUERY_EDITOR_SET_QUERY_LIMIT, \"QUERY_EDITOR_SET_QUERY_LIMIT\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(QUERY_EDITOR_SET_TEMPLATE_PARAMS, \"QUERY_EDITOR_SET_TEMPLATE_PARAMS\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(QUERY_EDITOR_SET_SELECTED_TEXT, \"QUERY_EDITOR_SET_SELECTED_TEXT\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(QUERY_EDITOR_SET_FUNCTION_NAMES, \"QUERY_EDITOR_SET_FUNCTION_NAMES\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(QUERY_EDITOR_PERSIST_HEIGHT, \"QUERY_EDITOR_PERSIST_HEIGHT\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(QUERY_EDITOR_TOGGLE_LEFT_BAR, \"QUERY_EDITOR_TOGGLE_LEFT_BAR\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(MIGRATE_QUERY_EDITOR, \"MIGRATE_QUERY_EDITOR\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(MIGRATE_TAB_HISTORY, \"MIGRATE_TAB_HISTORY\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(MIGRATE_TABLE, \"MIGRATE_TABLE\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(MIGRATE_QUERY, \"MIGRATE_QUERY\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(SET_DATABASES, \"SET_DATABASES\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(SET_ACTIVE_QUERY_EDITOR, \"SET_ACTIVE_QUERY_EDITOR\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(LOAD_QUERY_EDITOR, \"LOAD_QUERY_EDITOR\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(SET_TABLES, \"SET_TABLES\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(SET_ACTIVE_SOUTHPANE_TAB, \"SET_ACTIVE_SOUTHPANE_TAB\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(REFRESH_QUERIES, \"REFRESH_QUERIES\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(SET_USER_OFFLINE, \"SET_USER_OFFLINE\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(RUN_QUERY, \"RUN_QUERY\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(START_QUERY, \"START_QUERY\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(STOP_QUERY, \"STOP_QUERY\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(REQUEST_QUERY_RESULTS, \"REQUEST_QUERY_RESULTS\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(QUERY_SUCCESS, \"QUERY_SUCCESS\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(QUERY_FAILED, \"QUERY_FAILED\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(CLEAR_QUERY_RESULTS, \"CLEAR_QUERY_RESULTS\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(REMOVE_DATA_PREVIEW, \"REMOVE_DATA_PREVIEW\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(CHANGE_DATA_PREVIEW_ID, \"CHANGE_DATA_PREVIEW_ID\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(START_QUERY_VALIDATION, \"START_QUERY_VALIDATION\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(QUERY_VALIDATION_RETURNED, \"QUERY_VALIDATION_RETURNED\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(QUERY_VALIDATION_FAILED, \"QUERY_VALIDATION_FAILED\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(COST_ESTIMATE_STARTED, \"COST_ESTIMATE_STARTED\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(COST_ESTIMATE_RETURNED, \"COST_ESTIMATE_RETURNED\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(COST_ESTIMATE_FAILED, \"COST_ESTIMATE_FAILED\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(CREATE_DATASOURCE_STARTED, \"CREATE_DATASOURCE_STARTED\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(CREATE_DATASOURCE_SUCCESS, \"CREATE_DATASOURCE_SUCCESS\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(CREATE_DATASOURCE_FAILED, \"CREATE_DATASOURCE_FAILED\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(addInfoToast, \"addInfoToast\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(addSuccessToast, \"addSuccessToast\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(addDangerToast, \"addDangerToast\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(addWarningToast, \"addWarningToast\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(CtasEnum, \"CtasEnum\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(ERR_MSG_CANT_LOAD_QUERY, \"ERR_MSG_CANT_LOAD_QUERY\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(queryClientMapping, \"queryClientMapping\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(queryServerMapping, \"queryServerMapping\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(fieldConverter, \"fieldConverter\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(convertQueryToServer, \"convertQueryToServer\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(convertQueryToClient, \"convertQueryToClient\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(resetState, \"resetState\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(startQueryValidation, \"startQueryValidation\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(queryValidationReturned, \"queryValidationReturned\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(queryValidationFailed, \"queryValidationFailed\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(updateQueryEditor, \"updateQueryEditor\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(scheduleQuery, \"scheduleQuery\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(estimateQueryCost, \"estimateQueryCost\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(startQuery, \"startQuery\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(querySuccess, \"querySuccess\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(queryFailed, \"queryFailed\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(stopQuery, \"stopQuery\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(clearQueryResults, \"clearQueryResults\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(removeDataPreview, \"removeDataPreview\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(requestQueryResults, \"requestQueryResults\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(fetchQueryResults, \"fetchQueryResults\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(runQuery, \"runQuery\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(reRunQuery, \"reRunQuery\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(validateQuery, \"validateQuery\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(postStopQuery, \"postStopQuery\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(setDatabases, \"setDatabases\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(migrateTable, \"migrateTable\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(migrateQuery, \"migrateQuery\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(migrateQueryEditorFromLocalStorage, \"migrateQueryEditorFromLocalStorage\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(addQueryEditor, \"addQueryEditor\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(cloneQueryToNewTab, \"cloneQueryToNewTab\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(setActiveQueryEditor, \"setActiveQueryEditor\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(loadQueryEditor, \"loadQueryEditor\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(setTables, \"setTables\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(switchQueryEditor, \"switchQueryEditor\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(setActiveSouthPaneTab, \"setActiveSouthPaneTab\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(toggleLeftBar, \"toggleLeftBar\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(removeQueryEditor, \"removeQueryEditor\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(removeQuery, \"removeQuery\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(queryEditorSetDb, \"queryEditorSetDb\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(queryEditorSetSchema, \"queryEditorSetSchema\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(queryEditorSetSchemaOptions, \"queryEditorSetSchemaOptions\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(queryEditorSetTableOptions, \"queryEditorSetTableOptions\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(queryEditorSetAutorun, \"queryEditorSetAutorun\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(queryEditorSetTitle, \"queryEditorSetTitle\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(saveQuery, \"saveQuery\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(updateSavedQuery, \"updateSavedQuery\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(queryEditorSetSql, \"queryEditorSetSql\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(queryEditorSetQueryLimit, \"queryEditorSetQueryLimit\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(queryEditorSetTemplateParams, \"queryEditorSetTemplateParams\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(queryEditorSetSelectedText, \"queryEditorSetSelectedText\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(mergeTable, \"mergeTable\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(getTableMetadata, \"getTableMetadata\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(getTableExtendedMetadata, \"getTableExtendedMetadata\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(addTable, \"addTable\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(changeDataPreviewId, \"changeDataPreviewId\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(reFetchQueryResults, \"reFetchQueryResults\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(expandTable, \"expandTable\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(collapseTable, \"collapseTable\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(removeTable, \"removeTable\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(refreshQueries, \"refreshQueries\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(setUserOffline, \"setUserOffline\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(persistEditorHeight, \"persistEditorHeight\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(popStoredQuery, \"popStoredQuery\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(popSavedQuery, \"popSavedQuery\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(popQuery, \"popQuery\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(popDatasourceQuery, \"popDatasourceQuery\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(createDatasourceStarted, \"createDatasourceStarted\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(createDatasourceSuccess, \"createDatasourceSuccess\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(createDatasourceFailed, \"createDatasourceFailed\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(createDatasource, \"createDatasource\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(createCtasDatasource, \"createCtasDatasource\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(queryEditorSetFunctionNames, \"queryEditorSetFunctionNames\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js"],"names":["addDangerToast","addInfoToast","addSuccessToast","addWarningToast","RESET_STATE","ADD_QUERY_EDITOR","UPDATE_QUERY_EDITOR","QUERY_EDITOR_SAVED","CLONE_QUERY_TO_NEW_TAB","REMOVE_QUERY_EDITOR","MERGE_TABLE","REMOVE_TABLE","END_QUERY","REMOVE_QUERY","EXPAND_TABLE","COLLAPSE_TABLE","QUERY_EDITOR_SETDB","QUERY_EDITOR_SET_SCHEMA","QUERY_EDITOR_SET_SCHEMA_OPTIONS","QUERY_EDITOR_SET_TABLE_OPTIONS","QUERY_EDITOR_SET_TITLE","QUERY_EDITOR_SET_AUTORUN","QUERY_EDITOR_SET_SQL","QUERY_EDITOR_SET_QUERY_LIMIT","QUERY_EDITOR_SET_TEMPLATE_PARAMS","QUERY_EDITOR_SET_SELECTED_TEXT","QUERY_EDITOR_SET_FUNCTION_NAMES","QUERY_EDITOR_PERSIST_HEIGHT","QUERY_EDITOR_TOGGLE_LEFT_BAR","MIGRATE_QUERY_EDITOR","MIGRATE_TAB_HISTORY","MIGRATE_TABLE","MIGRATE_QUERY","SET_DATABASES","SET_ACTIVE_QUERY_EDITOR","LOAD_QUERY_EDITOR","SET_TABLES","SET_ACTIVE_SOUTHPANE_TAB","REFRESH_QUERIES","SET_USER_OFFLINE","RUN_QUERY","START_QUERY","STOP_QUERY","REQUEST_QUERY_RESULTS","QUERY_SUCCESS","QUERY_FAILED","CLEAR_QUERY_RESULTS","REMOVE_DATA_PREVIEW","CHANGE_DATA_PREVIEW_ID","START_QUERY_VALIDATION","QUERY_VALIDATION_RETURNED","QUERY_VALIDATION_FAILED","COST_ESTIMATE_STARTED","COST_ESTIMATE_RETURNED","COST_ESTIMATE_FAILED","CREATE_DATASOURCE_STARTED","CREATE_DATASOURCE_SUCCESS","CREATE_DATASOURCE_FAILED","CtasEnum","TABLE","VIEW","ERR_MSG_CANT_LOAD_QUERY","t","queryClientMapping","id","db_id","client_id","label","queryServerMapping","invert","fieldConverter","mapKeys","key","mapping","convertQueryToServer","convertQueryToClient","resetState","type","startQueryValidation","Object","query","shortid","queryValidationReturned","queryValidationFailed","updateQueryEditor","scheduleQuery","SupersetClient","endpoint","postPayload","stringify","dispatch","estimateQueryCost","schema","dbId","Promise","templateParams","JSON","getClientErrorObject","message","error","startQuery","progress","startDttm","now","state","cached","querySuccess","sync","isFeatureEnabled","FeatureFlag","encodeURI","results","sqlEditorId","latest_query_id","queryFailed","stopQuery","clearQueryResults","removeDataPreview","requestQueryResults","fetchQueryResults","resultsKey","displayLimit","parseMethod","text","bigIntJson","JSONbig","runQuery","database_id","json","runAsync","sql","sql_editor_id","tab","tmp_table_name","select_as_cta","ctas_method","queryLimit","expand_data","body","headers","COMMON_ERR_MESSAGES","reRunQuery","validateQuery","validate_only","window","search","postStopQuery","setDatabases","migrateTable","table","newTable","oldTable","migrateQuery","queryEditorId","migrateQueryEditorFromLocalStorage","newQueryEditor","oldQueryEditor","oldId","queryEditor","newId","tables","queries","addQueryEditor","cloneQueryToNewTab","getState","sourceQueryEditor","queryEditors","qe","tabHistory","title","maxRow","setActiveQueryEditor","response","loadQueryEditor","setTables","tableSchema","name","expanded","isMetadataLoading","isExtraMetadataLoading","switchQueryEditor","loadedQueryEditor","loaded","selectedText","latestQueryId","autorun","validationResult","errors","completed","hideLeftBar","setActiveSouthPaneTab","toggleLeftBar","hide_left_bar","removeQueryEditor","removeQuery","queryEditorSetDb","queryEditorSetSchema","queryEditorSetSchemaOptions","queryEditorSetTableOptions","queryEditorSetAutorun","queryEditorSetTitle","saveQuery","result","updateSavedQuery","remoteId","queryEditorSetSql","queryEditorSetQueryLimit","query_limit","queryEditorSetTemplateParams","template_params","queryEditorSetSelectedText","mergeTable","getTableMetadata","encodeURIComponent","dataPreviewQuery","tableName","ctas","isDataPreview","dataPreviewQueryId","getTableExtendedMetadata","addTable","resultJson","changeDataPreviewId","reFetchQueryResults","newQuery","expandTable","collapseTable","removeTable","refreshQueries","setUserOffline","persistEditorHeight","popStoredQuery","urlId","parseInt","popSavedQuery","saveQueryId","queryEditorProps","popQuery","queryId","queryData","tab_name","popDatasourceQuery","datasourceKey","createDatasourceStarted","createDatasourceSuccess","datasource","data","table_id","createDatasourceFailed","createDatasource","createCtasDatasource","errorMsg","queryEditorSetFunctionNames","functionNames"],"mappings":"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,gB,gIAiBAE,iB,iIAwBAC,wB,wIA6BAE,4B,4IA2BAE,0B,0IAIAC,U,0HAIPC,gB,gIAgDAO,wB,wIAyBOC,Q,wHA8CAE,mB,mIAIAC,mB,mIAmBAE,W,2HAwBAC,a,6HAwBAC,W,2HAuBAC,c,8HAIAC,c,8HAIAC,mB,mIASAC,c,8HAiBAG,a,6HAeAG,Q,wHAmBAI,kB,kIAqBAE,uB,uIAGAC,uB,uIAIAI,sB,sIAIAC,gB,gIAwBAC,oB,oIAoBAE,2B,ulBA5xCHxP,W,2HACAC,gB,gIACAC,mB,mIACAC,kB,kIACAC,sB,sIACAC,mB,mIACAC,W,2HACAC,Y,4HACAC,S,yHACAC,Y,4HACAC,Y,4HACAC,c,8HACAC,kB,kIACAC,uB,uIACAC,+B,+IAEAC,8B,8IACAC,sB,sIACAC,wB,wIACAC,oB,oIACAC,4B,4IACAC,gC,gJAEAC,8B,8IACAC,+B,+IAEAC,2B,2IACAC,4B,4IACAC,oB,oIACAC,mB,mIACAC,a,6HACAC,a,6HAEAC,a,6HACAC,uB,uIACAC,iB,iIACAC,U,0HACAC,wB,wIACAC,e,+HACAC,gB,gIACAC,S,yHACAC,W,2HACAC,U,0HACAC,qB,qIACAC,a,6HACAC,Y,4HACAC,mB,mIACAC,mB,mIACAC,sB,sIAEAC,sB,sIACAC,yB,yIACAC,uB,uIACAC,qB,qIACAC,sB,sIACAC,oB,oIAEAC,yB,yIACAC,yB,yIACAC,wB,wIAEAxD,Y,4HACAC,e,+HACAF,c,8HACAG,e,+HAEAuD,Q,wHAIPG,uB,uIAKAE,kB,kIAMAK,kB,kIAGAE,c,8HAGAI,oB,oIACAC,oB,oIAEC,U,0HAIA,oB,oIAOA,uB,uIAIA,qB,qIAIA,iB,iIAIA,a,6HAqBA,iB,iIAmCA,U,0HAWA,Y,4HA0BA,W,2HA8BA,S,yHAIA,iB,iIAIA,iB,iIAIA,mB,mIAIA,iB,iIA2BA,Q,wHA4CA,U,0HAOA,a,6HAiCA,a,6HAiBA,Y,4HAIP,Y,4HAyBA,Y,4HAkBO,kC,kJA+CA,c,8HAgCA,kB,kIAqBA,oB,oIA0BA,e,+HAIA,S,yHAgCA,iB,iIAkDA,qB,qIAIA,a,6HA8BA,iB,iIAsBA,W,2HAwBA,gB,gIAuBA,oB,oIAyBA,2B,2IAIA,0B,0IAIA,qB,qIAyBA,mB,mIAyBA,S,yHAqBA,gB,gIAiBA,iB,iIAwBA,wB,wIA6BA,4B,4IA2BA,0B,0IAIA,U,0HAIP,gB,gIAgDA,wB,wIAyBO,Q,wHA8CA,mB,mIAIA,mB,mIAmBA,W,2HAwBA,a,6HAwBA,W,2HAuBA,c,8HAIA,c,8HAIA,mB,mIASA,c,8HAiBA,a,6HAeA,Q,wHAmBA,kB,kIAqBA,uB,uIAGA,uB,uIAIA,sB,sIAIA,gB,gIAwBA,oB,oIAoBA,2B","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport shortid from 'shortid';\nimport JSONbig from 'json-bigint';\nimport { t, SupersetClient } from '@superset-ui/core';\nimport invert from 'lodash/invert';\nimport mapKeys from 'lodash/mapKeys';\nimport { isFeatureEnabled, FeatureFlag } from 'src/featureFlags';\n\nimport { now } from 'src/modules/dates';\nimport {\n  addDangerToast as addDangerToastAction,\n  addInfoToast as addInfoToastAction,\n  addSuccessToast as addSuccessToastAction,\n  addWarningToast as addWarningToastAction,\n} from 'src/components/MessageToasts/actions';\nimport { getClientErrorObject } from 'src/utils/getClientErrorObject';\nimport COMMON_ERR_MESSAGES from 'src/utils/errorMessages';\n\nexport const RESET_STATE = 'RESET_STATE';\nexport const ADD_QUERY_EDITOR = 'ADD_QUERY_EDITOR';\nexport const UPDATE_QUERY_EDITOR = 'UPDATE_QUERY_EDITOR';\nexport const QUERY_EDITOR_SAVED = 'QUERY_EDITOR_SAVED';\nexport const CLONE_QUERY_TO_NEW_TAB = 'CLONE_QUERY_TO_NEW_TAB';\nexport const REMOVE_QUERY_EDITOR = 'REMOVE_QUERY_EDITOR';\nexport const MERGE_TABLE = 'MERGE_TABLE';\nexport const REMOVE_TABLE = 'REMOVE_TABLE';\nexport const END_QUERY = 'END_QUERY';\nexport const REMOVE_QUERY = 'REMOVE_QUERY';\nexport const EXPAND_TABLE = 'EXPAND_TABLE';\nexport const COLLAPSE_TABLE = 'COLLAPSE_TABLE';\nexport const QUERY_EDITOR_SETDB = 'QUERY_EDITOR_SETDB';\nexport const QUERY_EDITOR_SET_SCHEMA = 'QUERY_EDITOR_SET_SCHEMA';\nexport const QUERY_EDITOR_SET_SCHEMA_OPTIONS =\n  'QUERY_EDITOR_SET_SCHEMA_OPTIONS';\nexport const QUERY_EDITOR_SET_TABLE_OPTIONS = 'QUERY_EDITOR_SET_TABLE_OPTIONS';\nexport const QUERY_EDITOR_SET_TITLE = 'QUERY_EDITOR_SET_TITLE';\nexport const QUERY_EDITOR_SET_AUTORUN = 'QUERY_EDITOR_SET_AUTORUN';\nexport const QUERY_EDITOR_SET_SQL = 'QUERY_EDITOR_SET_SQL';\nexport const QUERY_EDITOR_SET_QUERY_LIMIT = 'QUERY_EDITOR_SET_QUERY_LIMIT';\nexport const QUERY_EDITOR_SET_TEMPLATE_PARAMS =\n  'QUERY_EDITOR_SET_TEMPLATE_PARAMS';\nexport const QUERY_EDITOR_SET_SELECTED_TEXT = 'QUERY_EDITOR_SET_SELECTED_TEXT';\nexport const QUERY_EDITOR_SET_FUNCTION_NAMES =\n  'QUERY_EDITOR_SET_FUNCTION_NAMES';\nexport const QUERY_EDITOR_PERSIST_HEIGHT = 'QUERY_EDITOR_PERSIST_HEIGHT';\nexport const QUERY_EDITOR_TOGGLE_LEFT_BAR = 'QUERY_EDITOR_TOGGLE_LEFT_BAR';\nexport const MIGRATE_QUERY_EDITOR = 'MIGRATE_QUERY_EDITOR';\nexport const MIGRATE_TAB_HISTORY = 'MIGRATE_TAB_HISTORY';\nexport const MIGRATE_TABLE = 'MIGRATE_TABLE';\nexport const MIGRATE_QUERY = 'MIGRATE_QUERY';\n\nexport const SET_DATABASES = 'SET_DATABASES';\nexport const SET_ACTIVE_QUERY_EDITOR = 'SET_ACTIVE_QUERY_EDITOR';\nexport const LOAD_QUERY_EDITOR = 'LOAD_QUERY_EDITOR';\nexport const SET_TABLES = 'SET_TABLES';\nexport const SET_ACTIVE_SOUTHPANE_TAB = 'SET_ACTIVE_SOUTHPANE_TAB';\nexport const REFRESH_QUERIES = 'REFRESH_QUERIES';\nexport const SET_USER_OFFLINE = 'SET_USER_OFFLINE';\nexport const RUN_QUERY = 'RUN_QUERY';\nexport const START_QUERY = 'START_QUERY';\nexport const STOP_QUERY = 'STOP_QUERY';\nexport const REQUEST_QUERY_RESULTS = 'REQUEST_QUERY_RESULTS';\nexport const QUERY_SUCCESS = 'QUERY_SUCCESS';\nexport const QUERY_FAILED = 'QUERY_FAILED';\nexport const CLEAR_QUERY_RESULTS = 'CLEAR_QUERY_RESULTS';\nexport const REMOVE_DATA_PREVIEW = 'REMOVE_DATA_PREVIEW';\nexport const CHANGE_DATA_PREVIEW_ID = 'CHANGE_DATA_PREVIEW_ID';\n\nexport const START_QUERY_VALIDATION = 'START_QUERY_VALIDATION';\nexport const QUERY_VALIDATION_RETURNED = 'QUERY_VALIDATION_RETURNED';\nexport const QUERY_VALIDATION_FAILED = 'QUERY_VALIDATION_FAILED';\nexport const COST_ESTIMATE_STARTED = 'COST_ESTIMATE_STARTED';\nexport const COST_ESTIMATE_RETURNED = 'COST_ESTIMATE_RETURNED';\nexport const COST_ESTIMATE_FAILED = 'COST_ESTIMATE_FAILED';\n\nexport const CREATE_DATASOURCE_STARTED = 'CREATE_DATASOURCE_STARTED';\nexport const CREATE_DATASOURCE_SUCCESS = 'CREATE_DATASOURCE_SUCCESS';\nexport const CREATE_DATASOURCE_FAILED = 'CREATE_DATASOURCE_FAILED';\n\nexport const addInfoToast = addInfoToastAction;\nexport const addSuccessToast = addSuccessToastAction;\nexport const addDangerToast = addDangerToastAction;\nexport const addWarningToast = addWarningToastAction;\n\nexport const CtasEnum = {\n  TABLE: 'TABLE',\n  VIEW: 'VIEW',\n};\nconst ERR_MSG_CANT_LOAD_QUERY = t(\"The query couldn't be loaded\");\n\n// a map of SavedQuery field names to the different names used client-side,\n// because for now making the names consistent is too complicated\n// so it might as well only happen in one place\nconst queryClientMapping = {\n  id: 'remoteId',\n  db_id: 'dbId',\n  client_id: 'id',\n  label: 'title',\n};\nconst queryServerMapping = invert(queryClientMapping);\n\n// uses a mapping like those above to convert object key names to another style\nconst fieldConverter = mapping => obj =>\n  mapKeys(obj, (value, key) => (key in mapping ? mapping[key] : key));\n\nconst convertQueryToServer = fieldConverter(queryServerMapping);\nconst convertQueryToClient = fieldConverter(queryClientMapping);\n\nexport function resetState() {\n  return { type: RESET_STATE };\n}\n\nexport function startQueryValidation(query) {\n  Object.assign(query, {\n    id: query.id ? query.id : shortid.generate(),\n  });\n  return { type: START_QUERY_VALIDATION, query };\n}\n\nexport function queryValidationReturned(query, results) {\n  return { type: QUERY_VALIDATION_RETURNED, query, results };\n}\n\nexport function queryValidationFailed(query, message, error) {\n  return { type: QUERY_VALIDATION_FAILED, query, message, error };\n}\n\nexport function updateQueryEditor(alterations) {\n  return { type: UPDATE_QUERY_EDITOR, alterations };\n}\n\nexport function scheduleQuery(query) {\n  return dispatch =>\n    SupersetClient.post({\n      endpoint: '/savedqueryviewapi/api/create',\n      postPayload: query,\n      stringify: false,\n    })\n      .then(() =>\n        dispatch(\n          addSuccessToast(\n            t(\n              'Your query has been scheduled. To see details of your query, navigate to Saved queries',\n            ),\n          ),\n        ),\n      )\n      .catch(() =>\n        dispatch(addDangerToast(t('Your query could not be scheduled'))),\n      );\n}\n\nexport function estimateQueryCost(query) {\n  const { dbId, schema, sql, templateParams } = query;\n  const endpoint =\n    schema === null\n      ? `/superset/estimate_query_cost/${dbId}/`\n      : `/superset/estimate_query_cost/${dbId}/${schema}/`;\n  return dispatch =>\n    Promise.all([\n      dispatch({ type: COST_ESTIMATE_STARTED, query }),\n      SupersetClient.post({\n        endpoint,\n        postPayload: {\n          sql,\n          templateParams: JSON.parse(templateParams || '{}'),\n        },\n      })\n        .then(({ json }) =>\n          dispatch({ type: COST_ESTIMATE_RETURNED, query, json }),\n        )\n        .catch(response =>\n          getClientErrorObject(response).then(error => {\n            const message =\n              error.error ||\n              error.statusText ||\n              t('Failed at retrieving results');\n            return dispatch({\n              type: COST_ESTIMATE_FAILED,\n              query,\n              error: message,\n            });\n          }),\n        ),\n    ]);\n}\n\nexport function startQuery(query) {\n  Object.assign(query, {\n    id: query.id ? query.id : shortid.generate(),\n    progress: 0,\n    startDttm: now(),\n    state: query.runAsync ? 'pending' : 'running',\n    cached: false,\n  });\n  return { type: START_QUERY, query };\n}\n\nexport function querySuccess(query, results) {\n  return function (dispatch) {\n    const sync =\n      !query.isDataPreview &&\n      isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE)\n        ? SupersetClient.put({\n            endpoint: encodeURI(`/tabstateview/${results.query.sqlEditorId}`),\n            postPayload: { latest_query_id: query.id },\n          })\n        : Promise.resolve();\n\n    return sync\n      .then(() => dispatch({ type: QUERY_SUCCESS, query, results }))\n      .catch(() =>\n        dispatch(\n          addDangerToast(\n            t(\n              'An error occurred while storing the latest query id in the backend. ' +\n                'Please contact your administrator if this problem persists.',\n            ),\n          ),\n        ),\n      );\n  };\n}\n\nexport function queryFailed(query, msg, link, errors) {\n  return function (dispatch) {\n    const sync =\n      !query.isDataPreview &&\n      isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE)\n        ? SupersetClient.put({\n            endpoint: encodeURI(`/tabstateview/${query.sqlEditorId}`),\n            postPayload: { latest_query_id: query.id },\n          })\n        : Promise.resolve();\n\n    return (\n      sync\n        .catch(() =>\n          dispatch(\n            addDangerToast(\n              t(\n                'An error occurred while storing the latest query id in the backend. ' +\n                  'Please contact your administrator if this problem persists.',\n              ),\n            ),\n          ),\n        )\n        // We should always show the error message, even if we couldn't sync the\n        // state to the backend\n        .then(() => dispatch({ type: QUERY_FAILED, query, msg, link, errors }))\n    );\n  };\n}\n\nexport function stopQuery(query) {\n  return { type: STOP_QUERY, query };\n}\n\nexport function clearQueryResults(query) {\n  return { type: CLEAR_QUERY_RESULTS, query };\n}\n\nexport function removeDataPreview(table) {\n  return { type: REMOVE_DATA_PREVIEW, table };\n}\n\nexport function requestQueryResults(query) {\n  return { type: REQUEST_QUERY_RESULTS, query };\n}\n\nexport function fetchQueryResults(query, displayLimit) {\n  return function (dispatch) {\n    dispatch(requestQueryResults(query));\n\n    return SupersetClient.get({\n      endpoint: `/superset/results/${query.resultsKey}/?rows=${displayLimit}`,\n      parseMethod: 'text',\n    })\n      .then(({ text = '{}' }) => {\n        const bigIntJson = JSONbig.parse(text);\n        return dispatch(querySuccess(query, bigIntJson));\n      })\n      .catch(response =>\n        getClientErrorObject(response).then(error => {\n          const message =\n            error.error ||\n            error.statusText ||\n            t('Failed at retrieving results');\n\n          return dispatch(\n            queryFailed(query, message, error.link, error.errors),\n          );\n        }),\n      );\n  };\n}\n\nexport function runQuery(query) {\n  return function (dispatch) {\n    dispatch(startQuery(query));\n    const postPayload = {\n      client_id: query.id,\n      database_id: query.dbId,\n      json: true,\n      runAsync: query.runAsync,\n      schema: query.schema,\n      sql: query.sql,\n      sql_editor_id: query.sqlEditorId,\n      tab: query.tab,\n      tmp_table_name: query.tempTable,\n      select_as_cta: query.ctas,\n      ctas_method: query.ctas_method,\n      templateParams: query.templateParams,\n      queryLimit: query.queryLimit,\n      expand_data: true,\n    };\n\n    return SupersetClient.post({\n      endpoint: '/superset/sql_json/',\n      body: JSON.stringify(postPayload),\n      headers: { 'Content-Type': 'application/json' },\n      parseMethod: 'text',\n    })\n      .then(({ text = '{}' }) => {\n        if (!query.runAsync) {\n          const bigIntJson = JSONbig.parse(text);\n          dispatch(querySuccess(query, bigIntJson));\n        }\n      })\n      .catch(response =>\n        getClientErrorObject(response).then(error => {\n          let message = error.error || error.statusText || t('Unknown error');\n          if (message.includes('CSRF token')) {\n            message = t(COMMON_ERR_MESSAGES.SESSION_TIMED_OUT);\n          }\n          dispatch(queryFailed(query, message, error.link, error.errors));\n        }),\n      );\n  };\n}\n\nexport function reRunQuery(query) {\n  // run Query with a new id\n  return function (dispatch) {\n    dispatch(runQuery({ ...query, id: shortid.generate() }));\n  };\n}\n\nexport function validateQuery(query) {\n  return function (dispatch) {\n    dispatch(startQueryValidation(query));\n\n    const postPayload = {\n      client_id: query.id,\n      database_id: query.dbId,\n      json: true,\n      schema: query.schema,\n      sql: query.sql,\n      sql_editor_id: query.sqlEditorId,\n      templateParams: query.templateParams,\n      validate_only: true,\n    };\n\n    return SupersetClient.post({\n      endpoint: `/superset/validate_sql_json/${window.location.search}`,\n      postPayload,\n      stringify: false,\n    })\n      .then(({ json }) => dispatch(queryValidationReturned(query, json)))\n      .catch(response =>\n        getClientErrorObject(response).then(error => {\n          let message = error.error || error.statusText || t('Unknown error');\n          if (message.includes('CSRF token')) {\n            message = t(COMMON_ERR_MESSAGES.SESSION_TIMED_OUT);\n          }\n          dispatch(queryValidationFailed(query, message, error));\n        }),\n      );\n  };\n}\n\nexport function postStopQuery(query) {\n  return function (dispatch) {\n    return SupersetClient.post({\n      endpoint: '/superset/stop_query/',\n      postPayload: { client_id: query.id },\n      stringify: false,\n    })\n      .then(() => dispatch(stopQuery(query)))\n      .then(() => dispatch(addSuccessToast(t('Query was stopped.'))))\n      .catch(() =>\n        dispatch(\n          addDangerToast(`${t('Failed at stopping query. ')}'${query.id}'`),\n        ),\n      );\n  };\n}\n\nexport function setDatabases(databases) {\n  return { type: SET_DATABASES, databases };\n}\n\nfunction migrateTable(table, queryEditorId, dispatch) {\n  return SupersetClient.post({\n    endpoint: encodeURI('/tableschemaview/'),\n    postPayload: { table: { ...table, queryEditorId } },\n  })\n    .then(({ json }) => {\n      const newTable = {\n        ...table,\n        id: json.id,\n        queryEditorId,\n      };\n      return dispatch({ type: MIGRATE_TABLE, oldTable: table, newTable });\n    })\n    .catch(() =>\n      dispatch(\n        addWarningToast(\n          t(\n            'Unable to migrate table schema state to backend. Superset will retry ' +\n              'later. Please contact your administrator if this problem persists.',\n          ),\n        ),\n      ),\n    );\n}\n\nfunction migrateQuery(queryId, queryEditorId, dispatch) {\n  return SupersetClient.post({\n    endpoint: encodeURI(`/tabstateview/${queryEditorId}/migrate_query`),\n    postPayload: { queryId },\n  })\n    .then(() => dispatch({ type: MIGRATE_QUERY, queryId, queryEditorId }))\n    .catch(() =>\n      dispatch(\n        addWarningToast(\n          t(\n            'Unable to migrate query state to backend. Superset will retry later. ' +\n              'Please contact your administrator if this problem persists.',\n          ),\n        ),\n      ),\n    );\n}\n\nexport function migrateQueryEditorFromLocalStorage(\n  queryEditor,\n  tables,\n  queries,\n) {\n  return function (dispatch) {\n    return SupersetClient.post({\n      endpoint: '/tabstateview/',\n      postPayload: { queryEditor },\n    })\n      .then(({ json }) => {\n        const newQueryEditor = {\n          ...queryEditor,\n          id: json.id.toString(),\n        };\n        dispatch({\n          type: MIGRATE_QUERY_EDITOR,\n          oldQueryEditor: queryEditor,\n          newQueryEditor,\n        });\n        dispatch({\n          type: MIGRATE_TAB_HISTORY,\n          oldId: queryEditor.id,\n          newId: newQueryEditor.id,\n        });\n        return Promise.all([\n          ...tables.map(table =>\n            migrateTable(table, newQueryEditor.id, dispatch),\n          ),\n          ...queries.map(query =>\n            migrateQuery(query.id, newQueryEditor.id, dispatch),\n          ),\n        ]);\n      })\n      .catch(() =>\n        dispatch(\n          addWarningToast(\n            t(\n              'Unable to migrate query editor state to backend. Superset will retry ' +\n                'later. Please contact your administrator if this problem persists.',\n            ),\n          ),\n        ),\n      );\n  };\n}\n\nexport function addQueryEditor(queryEditor) {\n  return function (dispatch) {\n    const sync = isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE)\n      ? SupersetClient.post({\n          endpoint: '/tabstateview/',\n          postPayload: { queryEditor },\n        })\n      : Promise.resolve({ json: { id: shortid.generate() } });\n\n    return sync\n      .then(({ json }) => {\n        const newQueryEditor = {\n          ...queryEditor,\n          id: json.id.toString(),\n        };\n        return dispatch({\n          type: ADD_QUERY_EDITOR,\n          queryEditor: newQueryEditor,\n        });\n      })\n      .catch(() =>\n        dispatch(\n          addDangerToast(\n            t(\n              'Unable to add a new tab to the backend. Please contact your administrator.',\n            ),\n          ),\n        ),\n      );\n  };\n}\n\nexport function cloneQueryToNewTab(query, autorun) {\n  return function (dispatch, getState) {\n    const state = getState();\n    const { queryEditors, tabHistory } = state.sqlLab;\n    const sourceQueryEditor = queryEditors.find(\n      qe => qe.id === tabHistory[tabHistory.length - 1],\n    );\n    const queryEditor = {\n      title: t('Copy of %s', sourceQueryEditor.title),\n      dbId: query.dbId ? query.dbId : null,\n      schema: query.schema ? query.schema : null,\n      autorun,\n      sql: query.sql,\n      queryLimit: sourceQueryEditor.queryLimit,\n      maxRow: sourceQueryEditor.maxRow,\n      templateParams: sourceQueryEditor.templateParams,\n    };\n    return dispatch(addQueryEditor(queryEditor));\n  };\n}\n\nexport function setActiveQueryEditor(queryEditor) {\n  return function (dispatch) {\n    const sync = isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE)\n      ? SupersetClient.post({\n          endpoint: encodeURI(`/tabstateview/${queryEditor.id}/activate`),\n        })\n      : Promise.resolve();\n\n    return sync\n      .then(() => dispatch({ type: SET_ACTIVE_QUERY_EDITOR, queryEditor }))\n      .catch(response => {\n        if (response.status !== 404) {\n          return dispatch(\n            addDangerToast(\n              t(\n                'An error occurred while setting the active tab. Please contact ' +\n                  'your administrator.',\n              ),\n            ),\n          );\n        }\n        return dispatch({ type: REMOVE_QUERY_EDITOR, queryEditor });\n      });\n  };\n}\n\nexport function loadQueryEditor(queryEditor) {\n  return { type: LOAD_QUERY_EDITOR, queryEditor };\n}\n\nexport function setTables(tableSchemas) {\n  const tables = tableSchemas\n    .filter(tableSchema => tableSchema.description !== null)\n    .map(tableSchema => {\n      const {\n        columns,\n        selectStar,\n        primaryKey,\n        foreignKeys,\n        indexes,\n        dataPreviewQueryId,\n      } = tableSchema.description;\n      return {\n        dbId: tableSchema.database_id,\n        queryEditorId: tableSchema.tab_state_id.toString(),\n        schema: tableSchema.schema,\n        name: tableSchema.table,\n        expanded: tableSchema.expanded,\n        id: tableSchema.id,\n        dataPreviewQueryId,\n        columns,\n        selectStar,\n        primaryKey,\n        foreignKeys,\n        indexes,\n        isMetadataLoading: false,\n        isExtraMetadataLoading: false,\n      };\n    });\n  return { type: SET_TABLES, tables };\n}\n\nexport function switchQueryEditor(queryEditor, displayLimit) {\n  return function (dispatch) {\n    if (\n      isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE) &&\n      !queryEditor.loaded\n    ) {\n      SupersetClient.get({\n        endpoint: encodeURI(`/tabstateview/${queryEditor.id}`),\n      })\n        .then(({ json }) => {\n          const loadedQueryEditor = {\n            id: json.id.toString(),\n            loaded: true,\n            title: json.label,\n            sql: json.sql,\n            selectedText: null,\n            latestQueryId: json.latest_query ? json.latest_query.id : null,\n            autorun: json.autorun,\n            dbId: json.database_id,\n            templateParams: json.template_params,\n            schema: json.schema,\n            queryLimit: json.query_limit,\n            validationResult: {\n              id: null,\n              errors: [],\n              completed: false,\n            },\n            hideLeftBar: json.hide_left_bar,\n          };\n          dispatch(loadQueryEditor(loadedQueryEditor));\n          dispatch(setTables(json.table_schemas || []));\n          dispatch(setActiveQueryEditor(loadedQueryEditor));\n          if (json.latest_query && json.latest_query.resultsKey) {\n            dispatch(fetchQueryResults(json.latest_query, displayLimit));\n          }\n        })\n        .catch(response => {\n          if (response.status !== 404) {\n            return dispatch(\n              addDangerToast(t('An error occurred while fetching tab state')),\n            );\n          }\n          return dispatch({ type: REMOVE_QUERY_EDITOR, queryEditor });\n        });\n    } else {\n      dispatch(setActiveQueryEditor(queryEditor));\n    }\n  };\n}\n\nexport function setActiveSouthPaneTab(tabId) {\n  return { type: SET_ACTIVE_SOUTHPANE_TAB, tabId };\n}\n\nexport function toggleLeftBar(queryEditor) {\n  const hideLeftBar = !queryEditor.hideLeftBar;\n  return function (dispatch) {\n    const sync = isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE)\n      ? SupersetClient.put({\n          endpoint: encodeURI(`/tabstateview/${queryEditor.id}`),\n          postPayload: { hide_left_bar: hideLeftBar },\n        })\n      : Promise.resolve();\n\n    return sync\n      .then(() =>\n        dispatch({\n          type: QUERY_EDITOR_TOGGLE_LEFT_BAR,\n          queryEditor,\n          hideLeftBar,\n        }),\n      )\n      .catch(() =>\n        dispatch(\n          addDangerToast(\n            t(\n              'An error occurred while hiding the left bar. Please contact your administrator.',\n            ),\n          ),\n        ),\n      );\n  };\n}\n\nexport function removeQueryEditor(queryEditor) {\n  return function (dispatch) {\n    const sync = isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE)\n      ? SupersetClient.delete({\n          endpoint: encodeURI(`/tabstateview/${queryEditor.id}`),\n        })\n      : Promise.resolve();\n\n    return sync\n      .then(() => dispatch({ type: REMOVE_QUERY_EDITOR, queryEditor }))\n      .catch(() =>\n        dispatch(\n          addDangerToast(\n            t(\n              'An error occurred while removing tab. Please contact your administrator.',\n            ),\n          ),\n        ),\n      );\n  };\n}\n\nexport function removeQuery(query) {\n  return function (dispatch) {\n    const sync = isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE)\n      ? SupersetClient.delete({\n          endpoint: encodeURI(\n            `/tabstateview/${query.sqlEditorId}/query/${query.id}`,\n          ),\n        })\n      : Promise.resolve();\n\n    return sync\n      .then(() => dispatch({ type: REMOVE_QUERY, query }))\n      .catch(() =>\n        dispatch(\n          addDangerToast(\n            t(\n              'An error occurred while removing query. Please contact your administrator.',\n            ),\n          ),\n        ),\n      );\n  };\n}\n\nexport function queryEditorSetDb(queryEditor, dbId) {\n  return function (dispatch) {\n    const sync = isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE)\n      ? SupersetClient.put({\n          endpoint: encodeURI(`/tabstateview/${queryEditor.id}`),\n          postPayload: { database_id: dbId },\n        })\n      : Promise.resolve();\n\n    return sync\n      .then(() => dispatch({ type: QUERY_EDITOR_SETDB, queryEditor, dbId }))\n      .catch(() =>\n        dispatch(\n          addDangerToast(\n            t(\n              'An error occurred while setting the tab database ID. Please contact your administrator.',\n            ),\n          ),\n        ),\n      );\n  };\n}\n\nexport function queryEditorSetSchema(queryEditor, schema) {\n  return function (dispatch) {\n    const sync = isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE)\n      ? SupersetClient.put({\n          endpoint: encodeURI(`/tabstateview/${queryEditor.id}`),\n          postPayload: { schema },\n        })\n      : Promise.resolve();\n\n    return sync\n      .then(() =>\n        dispatch({ type: QUERY_EDITOR_SET_SCHEMA, queryEditor, schema }),\n      )\n      .catch(() =>\n        dispatch(\n          addDangerToast(\n            t(\n              'An error occurred while setting the tab schema. Please contact your administrator.',\n            ),\n          ),\n        ),\n      );\n  };\n}\n\nexport function queryEditorSetSchemaOptions(queryEditor, options) {\n  return { type: QUERY_EDITOR_SET_SCHEMA_OPTIONS, queryEditor, options };\n}\n\nexport function queryEditorSetTableOptions(queryEditor, options) {\n  return { type: QUERY_EDITOR_SET_TABLE_OPTIONS, queryEditor, options };\n}\n\nexport function queryEditorSetAutorun(queryEditor, autorun) {\n  return function (dispatch) {\n    const sync = isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE)\n      ? SupersetClient.put({\n          endpoint: encodeURI(`/tabstateview/${queryEditor.id}`),\n          postPayload: { autorun },\n        })\n      : Promise.resolve();\n\n    return sync\n      .then(() =>\n        dispatch({ type: QUERY_EDITOR_SET_AUTORUN, queryEditor, autorun }),\n      )\n      .catch(() =>\n        dispatch(\n          addDangerToast(\n            t(\n              'An error occurred while setting the tab autorun. Please contact your administrator.',\n            ),\n          ),\n        ),\n      );\n  };\n}\n\nexport function queryEditorSetTitle(queryEditor, title) {\n  return function (dispatch) {\n    const sync = isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE)\n      ? SupersetClient.put({\n          endpoint: encodeURI(`/tabstateview/${queryEditor.id}`),\n          postPayload: { label: title },\n        })\n      : Promise.resolve();\n\n    return sync\n      .then(() =>\n        dispatch({ type: QUERY_EDITOR_SET_TITLE, queryEditor, title }),\n      )\n      .catch(() =>\n        dispatch(\n          addDangerToast(\n            t(\n              'An error occurred while setting the tab title. Please contact your administrator.',\n            ),\n          ),\n        ),\n      );\n  };\n}\n\nexport function saveQuery(query) {\n  return dispatch =>\n    SupersetClient.post({\n      endpoint: '/savedqueryviewapi/api/create',\n      postPayload: convertQueryToServer(query),\n      stringify: false,\n    })\n      .then(result => {\n        dispatch({\n          type: QUERY_EDITOR_SAVED,\n          query,\n          result: convertQueryToClient(result.json.item),\n        });\n        dispatch(addSuccessToast(t('Your query was saved')));\n        dispatch(queryEditorSetTitle(query, query.title));\n      })\n      .catch(() =>\n        dispatch(addDangerToast(t('Your query could not be saved'))),\n      );\n}\n\nexport function updateSavedQuery(query) {\n  return dispatch =>\n    SupersetClient.put({\n      endpoint: `/savedqueryviewapi/api/update/${query.remoteId}`,\n      postPayload: convertQueryToServer(query),\n      stringify: false,\n    })\n      .then(() => {\n        dispatch(addSuccessToast(t('Your query was updated')));\n        dispatch(queryEditorSetTitle(query, query.title));\n      })\n      .catch(() =>\n        dispatch(addDangerToast(t('Your query could not be updated'))),\n      )\n      .then(() => dispatch(updateQueryEditor(query)));\n}\n\nexport function queryEditorSetSql(queryEditor, sql) {\n  return function (dispatch) {\n    // saved query and set tab state use this action\n    dispatch({ type: QUERY_EDITOR_SET_SQL, queryEditor, sql });\n    if (isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE)) {\n      return SupersetClient.put({\n        endpoint: encodeURI(`/tabstateview/${queryEditor.id}`),\n        postPayload: { sql, latest_query_id: queryEditor.latestQueryId },\n      }).catch(() =>\n        dispatch(\n          addDangerToast(\n            t(\n              'An error occurred while storing your query in the backend. To ' +\n                'avoid losing your changes, please save your query using the ' +\n                '\"Save Query\" button.',\n            ),\n          ),\n        ),\n      );\n    }\n    return Promise.resolve();\n  };\n}\n\nexport function queryEditorSetQueryLimit(queryEditor, queryLimit) {\n  return function (dispatch) {\n    const sync = isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE)\n      ? SupersetClient.put({\n          endpoint: encodeURI(`/tabstateview/${queryEditor.id}`),\n          postPayload: { query_limit: queryLimit },\n        })\n      : Promise.resolve();\n\n    return sync\n      .then(() =>\n        dispatch({\n          type: QUERY_EDITOR_SET_QUERY_LIMIT,\n          queryEditor,\n          queryLimit,\n        }),\n      )\n      .catch(() =>\n        dispatch(\n          addDangerToast(\n            t(\n              'An error occurred while setting the tab title. Please contact your administrator.',\n            ),\n          ),\n        ),\n      );\n  };\n}\n\nexport function queryEditorSetTemplateParams(queryEditor, templateParams) {\n  return function (dispatch) {\n    dispatch({\n      type: QUERY_EDITOR_SET_TEMPLATE_PARAMS,\n      queryEditor,\n      templateParams,\n    });\n    const sync = isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE)\n      ? SupersetClient.put({\n          endpoint: encodeURI(`/tabstateview/${queryEditor.id}`),\n          postPayload: { template_params: templateParams },\n        })\n      : Promise.resolve();\n\n    return sync.catch(() =>\n      dispatch(\n        addDangerToast(\n          t(\n            'An error occurred while setting the tab template parameters. ' +\n              'Please contact your administrator.',\n          ),\n        ),\n      ),\n    );\n  };\n}\n\nexport function queryEditorSetSelectedText(queryEditor, sql) {\n  return { type: QUERY_EDITOR_SET_SELECTED_TEXT, queryEditor, sql };\n}\n\nexport function mergeTable(table, query) {\n  return { type: MERGE_TABLE, table, query };\n}\n\nfunction getTableMetadata(table, query, dispatch) {\n  return SupersetClient.get({\n    endpoint: encodeURI(\n      `/api/v1/database/${query.dbId}/table/${encodeURIComponent(\n        table.name,\n      )}/${encodeURIComponent(table.schema)}/`,\n    ),\n  })\n    .then(({ json }) => {\n      const dataPreviewQuery = {\n        id: shortid.generate(),\n        dbId: query.dbId,\n        sql: json.selectStar,\n        tableName: table.name,\n        sqlEditorId: null,\n        tab: '',\n        runAsync: false,\n        ctas: false,\n        isDataPreview: true,\n      };\n      const newTable = {\n        ...table,\n        ...json,\n        expanded: true,\n        isMetadataLoading: false,\n        dataPreviewQueryId: dataPreviewQuery.id,\n      };\n      Promise.all([\n        dispatch(mergeTable(newTable, dataPreviewQuery)), // Merge table to tables in state\n        dispatch(runQuery(dataPreviewQuery)), // Run query to get preview data for table\n      ]);\n      return newTable;\n    })\n    .catch(() =>\n      Promise.all([\n        dispatch(\n          mergeTable({\n            ...table,\n            isMetadataLoading: false,\n          }),\n        ),\n        dispatch(\n          addDangerToast(t('An error occurred while fetching table metadata')),\n        ),\n      ]),\n    );\n}\n\nfunction getTableExtendedMetadata(table, query, dispatch) {\n  return SupersetClient.get({\n    endpoint: encodeURI(\n      `/superset/extra_table_metadata/${query.dbId}/` +\n        `${encodeURIComponent(table.name)}/${encodeURIComponent(\n          table.schema,\n        )}/`,\n    ),\n  })\n    .then(({ json }) => {\n      dispatch(\n        mergeTable({ ...table, ...json, isExtraMetadataLoading: false }),\n      );\n      return json;\n    })\n    .catch(() =>\n      Promise.all([\n        dispatch(mergeTable({ ...table, isExtraMetadataLoading: false })),\n        dispatch(\n          addDangerToast(t('An error occurred while fetching table metadata')),\n        ),\n      ]),\n    );\n}\n\nexport function addTable(query, tableName, schemaName) {\n  return function (dispatch) {\n    const table = {\n      dbId: query.dbId,\n      queryEditorId: query.id,\n      schema: schemaName,\n      name: tableName,\n    };\n    dispatch(\n      mergeTable({\n        ...table,\n        isMetadataLoading: true,\n        isExtraMetadataLoading: true,\n        expanded: true,\n      }),\n    );\n\n    return Promise.all([\n      getTableMetadata(table, query, dispatch),\n      getTableExtendedMetadata(table, query, dispatch),\n    ]).then(([newTable, json]) => {\n      const sync = isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE)\n        ? SupersetClient.post({\n            endpoint: encodeURI('/tableschemaview/'),\n            postPayload: { table: { ...newTable, ...json } },\n          })\n        : Promise.resolve({ json: { id: shortid.generate() } });\n\n      return sync\n        .then(({ json: resultJson }) =>\n          dispatch(mergeTable({ ...table, id: resultJson.id })),\n        )\n        .catch(() =>\n          dispatch(\n            addDangerToast(\n              t(\n                'An error occurred while fetching table metadata. ' +\n                  'Please contact your administrator.',\n              ),\n            ),\n          ),\n        );\n    });\n  };\n}\n\nexport function changeDataPreviewId(oldQueryId, newQuery) {\n  return { type: CHANGE_DATA_PREVIEW_ID, oldQueryId, newQuery };\n}\n\nexport function reFetchQueryResults(query) {\n  return function (dispatch) {\n    const newQuery = {\n      id: shortid.generate(),\n      dbId: query.dbId,\n      sql: query.sql,\n      tableName: query.tableName,\n      sqlEditorId: null,\n      tab: '',\n      runAsync: false,\n      ctas: false,\n      queryLimit: query.queryLimit,\n      isDataPreview: query.isDataPreview,\n    };\n    dispatch(runQuery(newQuery));\n    dispatch(changeDataPreviewId(query.id, newQuery));\n  };\n}\n\nexport function expandTable(table) {\n  return function (dispatch) {\n    const sync = isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE)\n      ? SupersetClient.post({\n          endpoint: encodeURI(`/tableschemaview/${table.id}/expanded`),\n          postPayload: { expanded: true },\n        })\n      : Promise.resolve();\n\n    return sync\n      .then(() => dispatch({ type: EXPAND_TABLE, table }))\n      .catch(() =>\n        dispatch(\n          addDangerToast(\n            t(\n              'An error occurred while expanding the table schema. ' +\n                'Please contact your administrator.',\n            ),\n          ),\n        ),\n      );\n  };\n}\n\nexport function collapseTable(table) {\n  return function (dispatch) {\n    const sync = isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE)\n      ? SupersetClient.post({\n          endpoint: encodeURI(`/tableschemaview/${table.id}/expanded`),\n          postPayload: { expanded: false },\n        })\n      : Promise.resolve();\n\n    return sync\n      .then(() => dispatch({ type: COLLAPSE_TABLE, table }))\n      .catch(() =>\n        dispatch(\n          addDangerToast(\n            t(\n              'An error occurred while collapsing the table schema. ' +\n                'Please contact your administrator.',\n            ),\n          ),\n        ),\n      );\n  };\n}\n\nexport function removeTable(table) {\n  return function (dispatch) {\n    const sync = isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE)\n      ? SupersetClient.delete({\n          endpoint: encodeURI(`/tableschemaview/${table.id}`),\n        })\n      : Promise.resolve();\n\n    return sync\n      .then(() => dispatch({ type: REMOVE_TABLE, table }))\n      .catch(() =>\n        dispatch(\n          addDangerToast(\n            t(\n              'An error occurred while removing the table schema. ' +\n                'Please contact your administrator.',\n            ),\n          ),\n        ),\n      );\n  };\n}\n\nexport function refreshQueries(alteredQueries) {\n  return { type: REFRESH_QUERIES, alteredQueries };\n}\n\nexport function setUserOffline(offline) {\n  return { type: SET_USER_OFFLINE, offline };\n}\n\nexport function persistEditorHeight(queryEditor, northPercent, southPercent) {\n  return {\n    type: QUERY_EDITOR_PERSIST_HEIGHT,\n    queryEditor,\n    northPercent,\n    southPercent,\n  };\n}\n\nexport function popStoredQuery(urlId) {\n  return function (dispatch) {\n    return SupersetClient.get({ endpoint: `/kv/${urlId}` })\n      .then(({ json }) =>\n        dispatch(\n          addQueryEditor({\n            title: json.title ? json.title : t('Shared query'),\n            dbId: json.dbId ? parseInt(json.dbId, 10) : null,\n            schema: json.schema ? json.schema : null,\n            autorun: json.autorun ? json.autorun : false,\n            sql: json.sql ? json.sql : 'SELECT ...',\n          }),\n        ),\n      )\n      .catch(() => dispatch(addDangerToast(ERR_MSG_CANT_LOAD_QUERY)));\n  };\n}\nexport function popSavedQuery(saveQueryId) {\n  return function (dispatch) {\n    return SupersetClient.get({\n      endpoint: `/savedqueryviewapi/api/get/${saveQueryId}`,\n    })\n      .then(({ json }) => {\n        const queryEditorProps = {\n          ...convertQueryToClient(json.result),\n          autorun: false,\n        };\n        return dispatch(addQueryEditor(queryEditorProps));\n      })\n      .catch(() => dispatch(addDangerToast(ERR_MSG_CANT_LOAD_QUERY)));\n  };\n}\nexport function popQuery(queryId) {\n  return function (dispatch) {\n    return SupersetClient.get({\n      endpoint: `/api/v1/query/${queryId}`,\n    })\n      .then(({ json }) => {\n        const queryData = json.result;\n        const queryEditorProps = {\n          dbId: queryData.database.id,\n          schema: queryData.schema,\n          sql: queryData.sql,\n          title: `Copy of ${queryData.tab_name}`,\n          autorun: false,\n        };\n        return dispatch(addQueryEditor(queryEditorProps));\n      })\n      .catch(() => dispatch(addDangerToast(ERR_MSG_CANT_LOAD_QUERY)));\n  };\n}\nexport function popDatasourceQuery(datasourceKey, sql) {\n  return function (dispatch) {\n    return SupersetClient.get({\n      endpoint: `/superset/fetch_datasource_metadata?datasourceKey=${datasourceKey}`,\n    })\n      .then(({ json }) =>\n        dispatch(\n          addQueryEditor({\n            title: `Query ${json.name}`,\n            dbId: json.database.id,\n            schema: json.schema,\n            autorun: sql !== undefined,\n            sql: sql || json.select_star,\n          }),\n        ),\n      )\n      .catch(() =>\n        dispatch(addDangerToast(t(\"The datasource couldn't be loaded\"))),\n      );\n  };\n}\nexport function createDatasourceStarted() {\n  return { type: CREATE_DATASOURCE_STARTED };\n}\nexport function createDatasourceSuccess(data) {\n  const datasource = `${data.table_id}__table`;\n  return { type: CREATE_DATASOURCE_SUCCESS, datasource };\n}\nexport function createDatasourceFailed(err) {\n  return { type: CREATE_DATASOURCE_FAILED, err };\n}\n\nexport function createDatasource(vizOptions) {\n  return dispatch => {\n    dispatch(createDatasourceStarted());\n    return SupersetClient.post({\n      endpoint: '/superset/sqllab_viz/',\n      postPayload: { data: vizOptions },\n    })\n      .then(({ json }) => {\n        dispatch(createDatasourceSuccess(json));\n\n        return Promise.resolve(json);\n      })\n      .catch(() => {\n        dispatch(\n          createDatasourceFailed(\n            t('An error occurred while creating the data source'),\n          ),\n        );\n\n        return Promise.reject();\n      });\n  };\n}\n\nexport function createCtasDatasource(vizOptions) {\n  return dispatch => {\n    dispatch(createDatasourceStarted());\n    return SupersetClient.post({\n      endpoint: '/superset/get_or_create_table/',\n      postPayload: { data: vizOptions },\n    })\n      .then(({ json }) => {\n        dispatch(createDatasourceSuccess(json));\n\n        return json;\n      })\n      .catch(() => {\n        const errorMsg = t('An error occurred while creating the data source');\n        dispatch(createDatasourceFailed(errorMsg));\n        return Promise.reject(new Error(errorMsg));\n      });\n  };\n}\n\nexport function queryEditorSetFunctionNames(queryEditor, dbId) {\n  return function (dispatch) {\n    return SupersetClient.get({\n      endpoint: encodeURI(`/api/v1/database/${dbId}/function_names/`),\n    })\n      .then(({ json }) =>\n        dispatch({\n          type: QUERY_EDITOR_SET_FUNCTION_NAMES,\n          queryEditor,\n          functionNames: json.function_names,\n        }),\n      )\n      .catch(() =>\n        dispatch(\n          addDangerToast(t('An error occurred while fetching function names.')),\n        ),\n      );\n  };\n}\n"]},"metadata":{},"sourceType":"module"}