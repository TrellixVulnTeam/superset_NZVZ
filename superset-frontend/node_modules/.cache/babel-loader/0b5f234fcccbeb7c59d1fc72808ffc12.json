{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;};import { t } from '@superset-ui/core';\nimport { jsPDF } from 'jspdf';\nimport html2canvas from 'html2canvas';\nimport { addWarningToast } from 'src/components/MessageToasts/actions';\n/**\n * @remark\n * same as https://github.com/apache/superset/blob/c53bc4ddf9808a8bb6916bbe3cb31935d33a2420/superset-frontend/src/assets/stylesheets/less/variables.less#L34\n */\n//  const GRAY_BACKGROUND_COLOR = '#F5F5F5';\n/**\n * generate a consistent file stem from a description and date\n *\n * @param description title or description of content of file\n * @param date date when file was generated\n */\n//  const generateFileStem = (description: string, date = new Date()) =>\n//    `${kebabCase(description)}-${date.toISOString().replace(/[: ]/g, '-')}`;\n/**\n * Create an event handler for turning an element into an image\n *\n * @param selector css selector of the parent element which should be turned into image\n * @param description name or a short description of what is being printed.\n *   Value will be normalized, and a date as well as a file extension will be added.\n * @param domToImageOptions dom-to-image Options object.\n * @param isExactSelector if false, searches for the closest ancestor that matches selector.\n * @returns event handler\n */\nexport default function downloadAsPdf(selector, isExactSelector = false) {\n  return (event) => {\n    const elementToPrint = isExactSelector ?\n    document.querySelector(selector) :\n    event.currentTarget.closest(selector);\n    if (!elementToPrint) {\n      return addWarningToast(t('Image download failed, please refresh and try again.'));\n    }\n    return html2canvas(document.body).then((canvas) => {\n      const imgData = canvas.toDataURL('image/png');\n      const pdf = new jsPDF();\n      pdf.addImage(imgData, 'JPEG', 0, 0, 400, 400);\n      pdf.save('download.pdf');\n    });\n  };\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(downloadAsPdf, \"downloadAsPdf\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/utils/downLoadAsPdf.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/home/ubuntu/my_plugin/superset/superset-frontend/src/utils/downLoadAsPdf.ts"],"names":[],"mappings":"uSAmBC,SAAS,CAAT,QAAkB,mBAAlB;AACA,SAAS,KAAT,QAAsB,OAAtB;AACA,OAAO,WAAP,MAAwB,aAAxB;AACA,SAAS,eAAT,QAAgC,sCAAhC;AACA;;;AAGG;AACJ;AAEC;;;;;AAKG;AACJ;AACA;AAEC;;;;;;;;;AASG;AACH,eAAc,SAAU,aAAV,CACZ,QADY,EAEZ,eAAe,GAAG,KAFN,EAEW;AAEvB,SAAO,CAAC,KAAD,KAA0B;AAC/B,UAAM,cAAc,GAAG,eAAe;AAClC,IAAA,QAAQ,CAAC,aAAT,CAAuB,QAAvB,CADkC;AAElC,IAAA,KAAK,CAAC,aAAN,CAAoB,OAApB,CAA4B,QAA5B,CAFJ;AAIA,QAAI,CAAC,cAAL,EAAqB;AACnB,aAAO,eAAe,CACpB,CAAC,CAAC,sDAAD,CADmB,CAAtB;AAGD;AAED,WAAO,WAAW,CAAC,QAAQ,CAAC,IAAV,CAAX,CAA2B,IAA3B,CAAgC,CAAA,MAAM,KAAG;AAC7C,YAAM,OAAO,GAAG,MAAM,CAAC,SAAP,CAAiB,WAAjB,CAAhB;AACA,YAAM,GAAG,GAAG,IAAI,KAAJ,EAAZ;AACA,MAAA,GAAG,CAAC,QAAJ,CAAa,OAAb,EAAsB,MAAtB,EAA8B,CAA9B,EAAiC,CAAjC,EAAoC,GAApC,EAAyC,GAAzC;AACA,MAAA,GAAG,CAAC,IAAJ,CAAS,cAAT;AACH,KALO,CAAP;AAMD,GAjBD;AAkBD,C,iLAtBuB,a","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n import { SyntheticEvent } from 'react';\n import { t } from '@superset-ui/core';\n import { jsPDF } from 'jspdf';\n import html2canvas from 'html2canvas';\n import { addWarningToast } from 'src/components/MessageToasts/actions';\n /**\n  * @remark\n  * same as https://github.com/apache/superset/blob/c53bc4ddf9808a8bb6916bbe3cb31935d33a2420/superset-frontend/src/assets/stylesheets/less/variables.less#L34\n  */\n//  const GRAY_BACKGROUND_COLOR = '#F5F5F5';\n \n /**\n  * generate a consistent file stem from a description and date\n  *\n  * @param description title or description of content of file\n  * @param date date when file was generated\n  */\n//  const generateFileStem = (description: string, date = new Date()) =>\n//    `${kebabCase(description)}-${date.toISOString().replace(/[: ]/g, '-')}`;\n \n /**\n  * Create an event handler for turning an element into an image\n  *\n  * @param selector css selector of the parent element which should be turned into image\n  * @param description name or a short description of what is being printed.\n  *   Value will be normalized, and a date as well as a file extension will be added.\n  * @param domToImageOptions dom-to-image Options object.\n  * @param isExactSelector if false, searches for the closest ancestor that matches selector.\n  * @returns event handler\n  */\n export default function downloadAsPdf(\n   selector: string,\n   isExactSelector = false,\n ) {\n   return (event: SyntheticEvent) => {\n     const elementToPrint = isExactSelector\n       ? document.querySelector(selector)\n       : event.currentTarget.closest(selector);\n \n     if (!elementToPrint) {\n       return addWarningToast(\n         t('Image download failed, please refresh and try again.'),\n       );\n     }\n \n     return html2canvas(document.body).then(canvas => {\n        const imgData = canvas.toDataURL('image/png');\n        const pdf = new jsPDF();\n        pdf.addImage(imgData, 'JPEG', 0, 0, 400, 400);\n        pdf.save('download.pdf');\n    });\n   };\n }\n "],"sourceRoot":""},"metadata":{},"sourceType":"module"}