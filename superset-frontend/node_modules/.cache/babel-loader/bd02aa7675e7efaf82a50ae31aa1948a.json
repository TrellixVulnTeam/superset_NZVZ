{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;};(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n/* eslint-disable camelcase */\nimport {\nFILTER_CONFIG_ATTRIBUTES,\nTIME_FILTER_LABELS,\nTIME_FILTER_MAP } from\n'src/explore/constants';\n\nexport default function getFilterConfigsFromFormdata(form_data = {}) {\n  const {\n    date_filter,\n    filter_configs = [],\n    show_druid_time_granularity,\n    show_druid_time_origin,\n    show_sqla_time_column,\n    show_sqla_time_granularity } =\n  form_data;\n  let configs = filter_configs.reduce(\n  ({ columns, labels }, config) => {\n    let defaultValues = config[FILTER_CONFIG_ATTRIBUTES.DEFAULT_VALUE];\n\n    // treat empty string as null (no default value)\n    if (defaultValues === '') {\n      defaultValues = null;\n    }\n\n    // defaultValue could be ; separated values,\n    // could be null or ''\n    if (defaultValues && config[FILTER_CONFIG_ATTRIBUTES.MULTIPLE]) {\n      defaultValues = config.defaultValue.split(';');\n    }\n\n    const updatedColumns = {\n      ...columns,\n      [config.column]: config.vals || defaultValues };\n\n    const updatedLabels = {\n      ...labels,\n      [config.column]: config.label };\n\n\n    return {\n      columns: updatedColumns,\n      labels: updatedLabels };\n\n  },\n  { columns: {}, labels: {} });\n\n\n  if (date_filter) {\n    let updatedColumns = {\n      ...configs.columns,\n      [TIME_FILTER_MAP.time_range]: form_data.time_range };\n\n    const updatedLabels = {\n      ...configs.labels,\n      ...Object.entries(TIME_FILTER_MAP).reduce(\n      (map, [key, value]) => ({\n        ...map,\n        [value]: TIME_FILTER_LABELS[key] }),\n\n      {}) };\n\n\n\n    if (show_sqla_time_granularity) {\n      updatedColumns = {\n        ...updatedColumns,\n        [TIME_FILTER_MAP.time_grain_sqla]: form_data.time_grain_sqla };\n\n    }\n\n    if (show_sqla_time_column) {\n      updatedColumns = {\n        ...updatedColumns,\n        [TIME_FILTER_MAP.granularity_sqla]: form_data.granularity_sqla };\n\n    }\n\n    if (show_druid_time_granularity) {\n      updatedColumns = {\n        ...updatedColumns,\n        [TIME_FILTER_MAP.granularity]: form_data.granularity };\n\n    }\n\n    if (show_druid_time_origin) {\n      updatedColumns = {\n        ...updatedColumns,\n        [TIME_FILTER_MAP.druid_time_origin]: form_data.druid_time_origin };\n\n    }\n\n    configs = {\n      ...configs,\n      columns: updatedColumns,\n      labels: updatedLabels };\n\n  }\n  return configs;\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(getFilterConfigsFromFormdata, \"getFilterConfigsFromFormdata\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/util/getFilterConfigsFromFormdata.js\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(__signature__, \"__signature__\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/util/getFilterConfigsFromFormdata.js\");reactHotLoader.register(getFilterConfigsFromFormdata, \"getFilterConfigsFromFormdata\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/util/getFilterConfigsFromFormdata.js\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/util/getFilterConfigsFromFormdata.js"],"names":["getFilterConfigsFromFormdata","form_data","filter_configs","configs","defaultValues","config","FILTER_CONFIG_ATTRIBUTES","updatedColumns","updatedLabels","columns","labels","TIME_FILTER_MAP","TIME_FILTER_LABELS"],"mappings":"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","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint-disable camelcase */\nimport {\n  FILTER_CONFIG_ATTRIBUTES,\n  TIME_FILTER_LABELS,\n  TIME_FILTER_MAP,\n} from 'src/explore/constants';\n\nexport default function getFilterConfigsFromFormdata(form_data = {}) {\n  const {\n    date_filter,\n    filter_configs = [],\n    show_druid_time_granularity,\n    show_druid_time_origin,\n    show_sqla_time_column,\n    show_sqla_time_granularity,\n  } = form_data;\n  let configs = filter_configs.reduce(\n    ({ columns, labels }, config) => {\n      let defaultValues = config[FILTER_CONFIG_ATTRIBUTES.DEFAULT_VALUE];\n\n      // treat empty string as null (no default value)\n      if (defaultValues === '') {\n        defaultValues = null;\n      }\n\n      // defaultValue could be ; separated values,\n      // could be null or ''\n      if (defaultValues && config[FILTER_CONFIG_ATTRIBUTES.MULTIPLE]) {\n        defaultValues = config.defaultValue.split(';');\n      }\n\n      const updatedColumns = {\n        ...columns,\n        [config.column]: config.vals || defaultValues,\n      };\n      const updatedLabels = {\n        ...labels,\n        [config.column]: config.label,\n      };\n\n      return {\n        columns: updatedColumns,\n        labels: updatedLabels,\n      };\n    },\n    { columns: {}, labels: {} },\n  );\n\n  if (date_filter) {\n    let updatedColumns = {\n      ...configs.columns,\n      [TIME_FILTER_MAP.time_range]: form_data.time_range,\n    };\n    const updatedLabels = {\n      ...configs.labels,\n      ...Object.entries(TIME_FILTER_MAP).reduce(\n        (map, [key, value]) => ({\n          ...map,\n          [value]: TIME_FILTER_LABELS[key],\n        }),\n        {},\n      ),\n    };\n\n    if (show_sqla_time_granularity) {\n      updatedColumns = {\n        ...updatedColumns,\n        [TIME_FILTER_MAP.time_grain_sqla]: form_data.time_grain_sqla,\n      };\n    }\n\n    if (show_sqla_time_column) {\n      updatedColumns = {\n        ...updatedColumns,\n        [TIME_FILTER_MAP.granularity_sqla]: form_data.granularity_sqla,\n      };\n    }\n\n    if (show_druid_time_granularity) {\n      updatedColumns = {\n        ...updatedColumns,\n        [TIME_FILTER_MAP.granularity]: form_data.granularity,\n      };\n    }\n\n    if (show_druid_time_origin) {\n      updatedColumns = {\n        ...updatedColumns,\n        [TIME_FILTER_MAP.druid_time_origin]: form_data.druid_time_origin,\n      };\n    }\n\n    configs = {\n      ...configs,\n      columns: updatedColumns,\n      labels: updatedLabels,\n    };\n  }\n  return configs;\n}\n"]},"metadata":{},"sourceType":"module"}