{"ast":null,"code":"import _extends from \"@babel/runtime-corejs3/helpers/extends\";var _jsxFileName = \"/home/ubuntu/my_plugin/superset/superset-frontend/src/filters/components/GroupBy/GroupByFilterPlugin.tsx\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { ensureIsArray, t, tn } from '@superset-ui/core';\nimport React, { useEffect, useState } from 'react';\nimport { Select } from 'src/components';\nimport { FilterPluginStyle, StyledFormItem, StatusMessage } from '../common';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nexport default function PluginFilterGroupBy(props) {var _formData$groupby, _formData$groupby$, _formData$groupby2;\n  const { data, formData, height, width, setDataMask, setFocusedFilter, unsetFocusedFilter, filterState } = props;\n  const { defaultValue, inputRef, multiSelect } = formData;\n  const [value, setValue] = useState(defaultValue != null ? defaultValue : []);\n  const handleChange = (value) => {\n    const resultValue = ensureIsArray(value);\n    setValue(resultValue);\n    const extraFormData = {};\n    if (resultValue.length) {\n      extraFormData.interactive_groupby = resultValue;\n    }\n    setDataMask({\n      filterState: { value: resultValue.length ? resultValue : null },\n      extraFormData });\n\n  };\n  useEffect(() => {\n    handleChange(filterState.value);\n  }, [JSON.stringify(filterState.value), multiSelect]);\n  useEffect(() => {\n    handleChange(defaultValue != null ? defaultValue : null);\n    // I think after Config Modal update some filter it re-creates default value for all other filters\n    // so we can process it like this `JSON.stringify` or start to use `Immer`\n  }, [JSON.stringify(defaultValue), multiSelect]);\n  const groupby = formData != null && (_formData$groupby = formData.groupby) != null && (_formData$groupby$ = _formData$groupby[0]) != null && _formData$groupby$.length ?\n  formData == null ? void 0 : (_formData$groupby2 = formData.groupby) == null ? void 0 : _formData$groupby2[0] :\n  null;\n  const withData = groupby ?\n  data.filter((dataItem) =>\n  // @ts-ignore\n  groupby.includes(dataItem.column_name)) :\n  data;\n  const columns = data ? withData : [];\n  const placeholderText = columns.length === 0 ?\n  t('No columns') :\n  tn('%s option', '%s options', columns.length, columns.length);\n  const formItemData = {};\n  if (filterState.validateMessage) {\n    formItemData.extra = ___EmotionJSX(StatusMessage, { status: filterState.validateStatus, __self: this, __source: { fileName: _jsxFileName, lineNumber: 61, columnNumber: 31 } },\n    filterState.validateMessage);\n\n  }\n  const options = columns.map((row) => {\n    const { column_name: columnName, verbose_name: verboseName } = row;\n    return {\n      label: verboseName != null ? verboseName : columnName,\n      value: columnName };\n\n  });\n  return ___EmotionJSX(FilterPluginStyle, { height: height, width: width, __self: this, __source: { fileName: _jsxFileName, lineNumber: 72, columnNumber: 13 } },\n  ___EmotionJSX(StyledFormItem, _extends({ validateStatus: filterState.validateStatus }, formItemData, { __self: this, __source: { fileName: _jsxFileName, lineNumber: 73, columnNumber: 7 } }),\n  ___EmotionJSX(Select, { allowClear: true, value: value, placeholder: placeholderText, mode: multiSelect ? 'multiple' : undefined\n    // @ts-ignore\n    , onChange: handleChange, onBlur: unsetFocusedFilter, onFocus: setFocusedFilter, ref: inputRef, options: options, __self: this, __source: { fileName: _jsxFileName, lineNumber: 74, columnNumber: 9 } })));\n\n\n}__signature__(PluginFilterGroupBy, \"useState{[value, setValue](defaultValue ?? [])}\\nuseEffect{}\\nuseEffect{}\");;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(PluginFilterGroupBy, \"PluginFilterGroupBy\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/filters/components/GroupBy/GroupByFilterPlugin.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/home/ubuntu/my_plugin/superset/superset-frontend/src/filters/components/GroupBy/GroupByFilterPlugin.tsx"],"names":[],"mappings":"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","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { ensureIsArray, ExtraFormData, t, tn } from '@superset-ui/core';\nimport React, { useEffect, useState } from 'react';\nimport { FormItemProps } from 'antd/lib/form';\nimport { Select } from 'src/components';\nimport { FilterPluginStyle, StyledFormItem, StatusMessage } from '../common';\nimport { PluginFilterGroupByProps } from './types';\n\nexport default function PluginFilterGroupBy(props: PluginFilterGroupByProps) {\n  const {\n    data,\n    formData,\n    height,\n    width,\n    setDataMask,\n    setFocusedFilter,\n    unsetFocusedFilter,\n    filterState,\n  } = props;\n  const { defaultValue, inputRef, multiSelect } = formData;\n\n  const [value, setValue] = useState<string[]>(defaultValue ?? []);\n\n  const handleChange = (value?: string[] | string | null) => {\n    const resultValue: string[] = ensureIsArray<string>(value);\n    setValue(resultValue);\n    const extraFormData: ExtraFormData = {};\n    if (resultValue.length) {\n      extraFormData.interactive_groupby = resultValue;\n    }\n\n    setDataMask({\n      filterState: { value: resultValue.length ? resultValue : null },\n      extraFormData,\n    });\n  };\n\n  useEffect(() => {\n    handleChange(filterState.value);\n  }, [JSON.stringify(filterState.value), multiSelect]);\n\n  useEffect(() => {\n    handleChange(defaultValue ?? null);\n    // I think after Config Modal update some filter it re-creates default value for all other filters\n    // so we can process it like this `JSON.stringify` or start to use `Immer`\n  }, [JSON.stringify(defaultValue), multiSelect]);\n\n  const groupby = formData?.groupby?.[0]?.length\n    ? formData?.groupby?.[0]\n    : null;\n\n  const withData = groupby\n    ? data.filter(dataItem =>\n        // @ts-ignore\n        groupby.includes(dataItem.column_name),\n      )\n    : data;\n\n  const columns = data ? withData : [];\n\n  const placeholderText =\n    columns.length === 0\n      ? t('No columns')\n      : tn('%s option', '%s options', columns.length, columns.length);\n\n  const formItemData: FormItemProps = {};\n  if (filterState.validateMessage) {\n    formItemData.extra = (\n      <StatusMessage status={filterState.validateStatus}>\n        {filterState.validateMessage}\n      </StatusMessage>\n    );\n  }\n  const options = columns.map(\n    (row: { column_name: string; verbose_name: string | null }) => {\n      const { column_name: columnName, verbose_name: verboseName } = row;\n      return {\n        label: verboseName ?? columnName,\n        value: columnName,\n      };\n    },\n  );\n  return (\n    <FilterPluginStyle height={height} width={width}>\n      <StyledFormItem\n        validateStatus={filterState.validateStatus}\n        {...formItemData}\n      >\n        <Select\n          allowClear\n          value={value}\n          placeholder={placeholderText}\n          mode={multiSelect ? 'multiple' : undefined}\n          // @ts-ignore\n          onChange={handleChange}\n          onBlur={unsetFocusedFilter}\n          onFocus={setFocusedFilter}\n          ref={inputRef}\n          options={options}\n        />\n      </StyledFormItem>\n    </FilterPluginStyle>\n  );\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}