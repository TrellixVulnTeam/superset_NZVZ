{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint-disable camelcase */\nimport {\nADD_FILTER,\nREMOVE_FILTER,\nCHANGE_FILTER,\nUPDATE_DIRECT_PATH_TO_FILTER,\nUPDATE_LAYOUT_COMPONENTS,\nUPDATE_DASHBOARD_FILTERS_SCOPE } from\n'../actions/dashboardFilters';\nimport { HYDRATE_DASHBOARD } from '../actions/hydrate';\nimport { TIME_RANGE } from '../../visualizations/FilterBox/FilterBox';\nimport { DASHBOARD_ROOT_ID } from '../util/constants';\nimport getFilterConfigsFromFormdata from '../util/getFilterConfigsFromFormdata';\nimport { buildActiveFilters } from '../util/activeDashboardFilters';\nimport { getChartIdAndColumnFromFilterKey } from '../util/getDashboardFilterKey';\n\nexport const DASHBOARD_FILTER_SCOPE_GLOBAL = {\n  scope: [DASHBOARD_ROOT_ID],\n  immune: [] };\n\n\nexport const dashboardFilter = {\n  chartId: null,\n  componentId: null,\n  filterName: null,\n  datasourceId: null,\n  directPathToFilter: [],\n  isDateFilter: false,\n  isInstantFilter: true,\n  columns: {},\n  labels: {},\n  scopes: {} };\n\n\nconst CHANGE_FILTER_VALUE_ACTIONS = [ADD_FILTER, REMOVE_FILTER, CHANGE_FILTER];\n\nexport default function dashboardFiltersReducer(dashboardFilters = {}, action) {\n  const actionHandlers = {\n    [ADD_FILTER]() {\n      const { chartId, component, form_data } = action;\n      const { columns, labels } = getFilterConfigsFromFormdata(form_data);\n      const scopes = Object.keys(columns).reduce(\n      (map, column) => ({\n        ...map,\n        [column]: DASHBOARD_FILTER_SCOPE_GLOBAL }),\n\n      {});\n\n      const directPathToFilter = component ?\n      (component.parents || []).slice().concat(component.id) :\n      [];\n\n      const newFilter = {\n        ...dashboardFilter,\n        chartId,\n        componentId: component.id,\n        datasourceId: form_data.datasource,\n        filterName: component.meta.sliceName,\n        directPathToFilter,\n        columns,\n        labels,\n        scopes,\n        isInstantFilter: !!form_data.instant_filtering,\n        isDateFilter: Object.keys(columns).includes(TIME_RANGE) };\n\n\n      return newFilter;\n    },\n\n    [CHANGE_FILTER](state) {\n      const { newSelectedValues, merge } = action;\n      const updatedColumns = Object.keys(newSelectedValues).reduce(\n      (columns, name) => {\n        // override existed column value, or add new column name\n        if (!merge || !(name in columns)) {\n          return {\n            ...columns,\n            [name]: newSelectedValues[name] };\n\n        }\n\n        return {\n          ...columns,\n          [name]: [...columns[name], ...newSelectedValues[name]] };\n\n      },\n      { ...state.columns });\n\n\n      return {\n        ...state,\n        columns: updatedColumns };\n\n    },\n\n    [UPDATE_DIRECT_PATH_TO_FILTER](state) {\n      const { path } = action;\n      return {\n        ...state,\n        directPathToFilter: path };\n\n    } };\n\n\n  if (action.type === UPDATE_LAYOUT_COMPONENTS) {\n    buildActiveFilters({\n      dashboardFilters,\n      components: action.components });\n\n    return dashboardFilters;\n  }\n  if (action.type === UPDATE_DASHBOARD_FILTERS_SCOPE) {\n    const allDashboardFiltersScope = action.scopes;\n    // update filter scope for each filter field\n    const updatedFilters = Object.entries(allDashboardFiltersScope).reduce(\n    (map, entry) => {\n      const [filterKey, { scope, immune }] = entry;\n      const { chartId, column } = getChartIdAndColumnFromFilterKey(filterKey);\n      const scopes = {\n        ...map[chartId].scopes,\n        [column]: {\n          scope,\n          immune } };\n\n\n      return {\n        ...map,\n        [chartId]: {\n          ...map[chartId],\n          scopes } };\n\n\n    },\n    dashboardFilters);\n\n\n    buildActiveFilters({ dashboardFilters: updatedFilters });\n    return updatedFilters;\n  }\n  if (action.type === REMOVE_FILTER) {\n    const { chartId } = action;\n    const { [chartId]: deletedFilter, ...updatedFilters } = dashboardFilters;\n    buildActiveFilters({ dashboardFilters: updatedFilters });\n\n    return updatedFilters;\n  }\n  if (action.type === HYDRATE_DASHBOARD) {\n    return action.data.dashboardFilters;\n  }\n\n  if (action.type in actionHandlers) {\n    const updatedFilters = {\n      ...dashboardFilters,\n      [action.chartId]: actionHandlers[action.type](\n      dashboardFilters[action.chartId]) };\n\n\n    if (CHANGE_FILTER_VALUE_ACTIONS.includes(action.type)) {\n      buildActiveFilters({ dashboardFilters: updatedFilters });\n    }\n\n    return updatedFilters;\n  }\n\n  return dashboardFilters;\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(DASHBOARD_FILTER_SCOPE_GLOBAL, \"DASHBOARD_FILTER_SCOPE_GLOBAL\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/reducers/dashboardFilters.js\");reactHotLoader.register(dashboardFilter, \"dashboardFilter\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/reducers/dashboardFilters.js\");reactHotLoader.register(CHANGE_FILTER_VALUE_ACTIONS, \"CHANGE_FILTER_VALUE_ACTIONS\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/reducers/dashboardFilters.js\");reactHotLoader.register(dashboardFiltersReducer, \"dashboardFiltersReducer\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/reducers/dashboardFilters.js\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/reducers/dashboardFilters.js"],"names":["ADD_FILTER","REMOVE_FILTER","CHANGE_FILTER","UPDATE_DIRECT_PATH_TO_FILTER","UPDATE_LAYOUT_COMPONENTS","UPDATE_DASHBOARD_FILTERS_SCOPE","HYDRATE_DASHBOARD","TIME_RANGE","DASHBOARD_ROOT_ID","getFilterConfigsFromFormdata","buildActiveFilters","getChartIdAndColumnFromFilterKey","DASHBOARD_FILTER_SCOPE_GLOBAL","scope","immune","dashboardFilter","chartId","componentId","filterName","datasourceId","directPathToFilter","isDateFilter","isInstantFilter","columns","labels","scopes","CHANGE_FILTER_VALUE_ACTIONS","dashboardFiltersReducer","dashboardFilters","action","actionHandlers","component","form_data","Object","keys","reduce","map","column","parents","slice","concat","id","newFilter","datasource","meta","sliceName","instant_filtering","includes","state","newSelectedValues","merge","updatedColumns","name","path","type","components","allDashboardFiltersScope","updatedFilters","entries","entry","filterKey","deletedFilter","data"],"mappings":"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","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint-disable camelcase */\nimport {\n  ADD_FILTER,\n  REMOVE_FILTER,\n  CHANGE_FILTER,\n  UPDATE_DIRECT_PATH_TO_FILTER,\n  UPDATE_LAYOUT_COMPONENTS,\n  UPDATE_DASHBOARD_FILTERS_SCOPE,\n} from '../actions/dashboardFilters';\nimport { HYDRATE_DASHBOARD } from '../actions/hydrate';\nimport { TIME_RANGE } from '../../visualizations/FilterBox/FilterBox';\nimport { DASHBOARD_ROOT_ID } from '../util/constants';\nimport getFilterConfigsFromFormdata from '../util/getFilterConfigsFromFormdata';\nimport { buildActiveFilters } from '../util/activeDashboardFilters';\nimport { getChartIdAndColumnFromFilterKey } from '../util/getDashboardFilterKey';\n\nexport const DASHBOARD_FILTER_SCOPE_GLOBAL = {\n  scope: [DASHBOARD_ROOT_ID],\n  immune: [],\n};\n\nexport const dashboardFilter = {\n  chartId: null,\n  componentId: null,\n  filterName: null,\n  datasourceId: null,\n  directPathToFilter: [],\n  isDateFilter: false,\n  isInstantFilter: true,\n  columns: {},\n  labels: {},\n  scopes: {},\n};\n\nconst CHANGE_FILTER_VALUE_ACTIONS = [ADD_FILTER, REMOVE_FILTER, CHANGE_FILTER];\n\nexport default function dashboardFiltersReducer(dashboardFilters = {}, action) {\n  const actionHandlers = {\n    [ADD_FILTER]() {\n      const { chartId, component, form_data } = action;\n      const { columns, labels } = getFilterConfigsFromFormdata(form_data);\n      const scopes = Object.keys(columns).reduce(\n        (map, column) => ({\n          ...map,\n          [column]: DASHBOARD_FILTER_SCOPE_GLOBAL,\n        }),\n        {},\n      );\n      const directPathToFilter = component\n        ? (component.parents || []).slice().concat(component.id)\n        : [];\n\n      const newFilter = {\n        ...dashboardFilter,\n        chartId,\n        componentId: component.id,\n        datasourceId: form_data.datasource,\n        filterName: component.meta.sliceName,\n        directPathToFilter,\n        columns,\n        labels,\n        scopes,\n        isInstantFilter: !!form_data.instant_filtering,\n        isDateFilter: Object.keys(columns).includes(TIME_RANGE),\n      };\n\n      return newFilter;\n    },\n\n    [CHANGE_FILTER](state) {\n      const { newSelectedValues, merge } = action;\n      const updatedColumns = Object.keys(newSelectedValues).reduce(\n        (columns, name) => {\n          // override existed column value, or add new column name\n          if (!merge || !(name in columns)) {\n            return {\n              ...columns,\n              [name]: newSelectedValues[name],\n            };\n          }\n\n          return {\n            ...columns,\n            [name]: [...columns[name], ...newSelectedValues[name]],\n          };\n        },\n        { ...state.columns },\n      );\n\n      return {\n        ...state,\n        columns: updatedColumns,\n      };\n    },\n\n    [UPDATE_DIRECT_PATH_TO_FILTER](state) {\n      const { path } = action;\n      return {\n        ...state,\n        directPathToFilter: path,\n      };\n    },\n  };\n\n  if (action.type === UPDATE_LAYOUT_COMPONENTS) {\n    buildActiveFilters({\n      dashboardFilters,\n      components: action.components,\n    });\n    return dashboardFilters;\n  }\n  if (action.type === UPDATE_DASHBOARD_FILTERS_SCOPE) {\n    const allDashboardFiltersScope = action.scopes;\n    // update filter scope for each filter field\n    const updatedFilters = Object.entries(allDashboardFiltersScope).reduce(\n      (map, entry) => {\n        const [filterKey, { scope, immune }] = entry;\n        const { chartId, column } = getChartIdAndColumnFromFilterKey(filterKey);\n        const scopes = {\n          ...map[chartId].scopes,\n          [column]: {\n            scope,\n            immune,\n          },\n        };\n        return {\n          ...map,\n          [chartId]: {\n            ...map[chartId],\n            scopes,\n          },\n        };\n      },\n      dashboardFilters,\n    );\n\n    buildActiveFilters({ dashboardFilters: updatedFilters });\n    return updatedFilters;\n  }\n  if (action.type === REMOVE_FILTER) {\n    const { chartId } = action;\n    const { [chartId]: deletedFilter, ...updatedFilters } = dashboardFilters;\n    buildActiveFilters({ dashboardFilters: updatedFilters });\n\n    return updatedFilters;\n  }\n  if (action.type === HYDRATE_DASHBOARD) {\n    return action.data.dashboardFilters;\n  }\n\n  if (action.type in actionHandlers) {\n    const updatedFilters = {\n      ...dashboardFilters,\n      [action.chartId]: actionHandlers[action.type](\n        dashboardFilters[action.chartId],\n      ),\n    };\n    if (CHANGE_FILTER_VALUE_ACTIONS.includes(action.type)) {\n      buildActiveFilters({ dashboardFilters: updatedFilters });\n    }\n\n    return updatedFilters;\n  }\n\n  return dashboardFilters;\n}\n"]},"metadata":{},"sourceType":"module"}