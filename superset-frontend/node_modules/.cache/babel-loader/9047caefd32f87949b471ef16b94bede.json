{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint camelcase: 0 */\nimport { ActionCreators as UndoActionCreators } from 'redux-undo';\nimport { ensureIsArray, t, SupersetClient } from '@superset-ui/core';\nimport { addChart, removeChart, refreshChart } from 'src/chart/chartAction';\nimport { chart as initChart } from 'src/chart/chartReducer';\nimport { applyDefaultFormData } from 'src/explore/store';\nimport { getClientErrorObject } from 'src/utils/getClientErrorObject';\nimport { SAVE_TYPE_OVERWRITE } from 'src/dashboard/util/constants';\nimport {\naddSuccessToast,\naddWarningToast,\naddDangerToast } from\n'src/components/MessageToasts/actions';\nimport serializeActiveFilterValues from 'src/dashboard/util/serializeActiveFilterValues';\nimport serializeFilterScopes from 'src/dashboard/util/serializeFilterScopes';\nimport { getActiveFilters } from 'src/dashboard/util/activeDashboardFilters';\nimport { safeStringify } from 'src/utils/safeStringify';\nimport { FeatureFlag, isFeatureEnabled } from 'src/featureFlags';\nimport { UPDATE_COMPONENTS_PARENTS_LIST } from './dashboardLayout';\nimport {\nsetChartConfiguration,\ndashboardInfoChanged,\nSET_CHART_CONFIG_COMPLETE } from\n'./dashboardInfo';\nimport { fetchDatasourceMetadata } from './datasources';\nimport {\naddFilter,\nremoveFilter,\nupdateDirectPathToFilter } from\n'./dashboardFilters';\nimport { SET_FILTER_CONFIG_COMPLETE } from './nativeFilters';\n\nexport const SET_UNSAVED_CHANGES = 'SET_UNSAVED_CHANGES';\nexport function setUnsavedChanges(hasUnsavedChanges) {\n  return { type: SET_UNSAVED_CHANGES, payload: { hasUnsavedChanges } };\n}\n\nexport const ADD_SLICE = 'ADD_SLICE';\nexport function addSlice(slice) {\n  return { type: ADD_SLICE, slice };\n}\n\nexport const REMOVE_SLICE = 'REMOVE_SLICE';\nexport function removeSlice(sliceId) {\n  return { type: REMOVE_SLICE, sliceId };\n}\n\nconst FAVESTAR_BASE_URL = '/superset/favstar/Dashboard';\nexport const TOGGLE_FAVE_STAR = 'TOGGLE_FAVE_STAR';\nexport function toggleFaveStar(isStarred) {\n  return { type: TOGGLE_FAVE_STAR, isStarred };\n}\n\nexport const FETCH_FAVE_STAR = 'FETCH_FAVE_STAR';\nexport function fetchFaveStar(id) {\n  return function fetchFaveStarThunk(dispatch) {\n    return SupersetClient.get({\n      endpoint: `${FAVESTAR_BASE_URL}/${id}/count/` }).\n\n    then(({ json }) => {\n      if (json.count > 0) dispatch(toggleFaveStar(true));\n    }).\n    catch(() =>\n    dispatch(\n    addDangerToast(\n    t(\n    'There was an issue fetching the favorite status of this dashboard.'))));\n\n\n\n\n  };\n}\n\nexport const SAVE_FAVE_STAR = 'SAVE_FAVE_STAR';\nexport function saveFaveStar(id, isStarred) {\n  return function saveFaveStarThunk(dispatch) {\n    const urlSuffix = isStarred ? 'unselect' : 'select';\n    return SupersetClient.get({\n      endpoint: `${FAVESTAR_BASE_URL}/${id}/${urlSuffix}/` }).\n\n    then(() => {\n      dispatch(toggleFaveStar(!isStarred));\n    }).\n    catch(() =>\n    dispatch(\n    addDangerToast(t('There was an issue favoriting this dashboard.'))));\n\n\n  };\n}\n\nexport const TOGGLE_PUBLISHED = 'TOGGLE_PUBLISHED';\nexport function togglePublished(isPublished) {\n  return { type: TOGGLE_PUBLISHED, isPublished };\n}\n\nexport function savePublished(id, isPublished) {\n  return function savePublishedThunk(dispatch) {\n    return SupersetClient.put({\n      endpoint: `/api/v1/dashboard/${id}`,\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        published: isPublished }) }).\n\n\n    then(() => {\n      const nowPublished = isPublished ? 'published' : 'hidden';\n      dispatch(addSuccessToast(t(`This dashboard is now ${nowPublished}`)));\n      dispatch(togglePublished(isPublished));\n    }).\n    catch(() => {\n      dispatch(\n      addDangerToast(\n      t('You do not have permissions to edit this dashboard.')));\n\n\n    });\n  };\n}\n\nexport const TOGGLE_EXPAND_SLICE = 'TOGGLE_EXPAND_SLICE';\nexport function toggleExpandSlice(sliceId) {\n  return { type: TOGGLE_EXPAND_SLICE, sliceId };\n}\n\nexport const UPDATE_CSS = 'UPDATE_CSS';\nexport function updateCss(css) {\n  return { type: UPDATE_CSS, css };\n}\n\nexport const SET_EDIT_MODE = 'SET_EDIT_MODE';\nexport function setEditMode(editMode) {\n  return { type: SET_EDIT_MODE, editMode };\n}\n\nexport const ON_CHANGE = 'ON_CHANGE';\nexport function onChange() {\n  return { type: ON_CHANGE };\n}\n\nexport const ON_SAVE = 'ON_SAVE';\nexport function onSave(lastModifiedTime) {\n  return { type: ON_SAVE, lastModifiedTime };\n}\n\nexport const SET_REFRESH_FREQUENCY = 'SET_REFRESH_FREQUENCY';\nexport function setRefreshFrequency(refreshFrequency, isPersistent = false) {\n  return { type: SET_REFRESH_FREQUENCY, refreshFrequency, isPersistent };\n}\n\nexport function saveDashboardRequestSuccess(lastModifiedTime) {\n  return (dispatch) => {\n    dispatch(onSave(lastModifiedTime));\n    // clear layout undo history\n    dispatch(UndoActionCreators.clearHistory());\n  };\n}\n\nexport function saveDashboardRequest(data, id, saveType) {\n  return (dispatch, getState) => {var _data$metadata, _data$metadata2, _data$metadata3, _data$metadata4, _data$metadata5, _data$metadata6;\n    dispatch({ type: UPDATE_COMPONENTS_PARENTS_LIST });\n\n    const { dashboardFilters, dashboardLayout } = getState();\n    const layout = dashboardLayout.present;\n    Object.values(dashboardFilters).forEach((filter) => {var _layout$componentId;\n      const { chartId } = filter;\n      const componentId = filter.directPathToFilter.slice().pop();\n      const directPathToFilter = (((_layout$componentId = layout[componentId]) == null ? void 0 : _layout$componentId.parents) || []).slice();\n      directPathToFilter.push(componentId);\n      dispatch(updateDirectPathToFilter(chartId, directPathToFilter));\n    });\n    // serialize selected values for each filter field, grouped by filter id\n    const serializedFilters = serializeActiveFilterValues(getActiveFilters());\n    // serialize filter scope for each filter field, grouped by filter id\n    const serializedFilterScopes = serializeFilterScopes(dashboardFilters);\n    const {\n      certified_by,\n      certification_details,\n      css,\n      dashboard_title,\n      owners,\n      roles,\n      slug } =\n    data;\n\n    const hasId = (item) => item.id !== undefined;\n\n    // making sure the data is what the backend expects\n    const cleanedData = {\n      ...data,\n      certified_by: certified_by || '',\n      certification_details:\n      certified_by && certification_details ? certification_details : '',\n      css: css || '',\n      dashboard_title: dashboard_title || t('[ untitled dashboard ]'),\n      owners: ensureIsArray(owners).map((o) => hasId(o) ? o.id : o),\n      roles: !isFeatureEnabled(FeatureFlag.DASHBOARD_RBAC) ?\n      undefined :\n      ensureIsArray(roles).map((r) => hasId(r) ? r.id : r),\n      slug: slug || null,\n      metadata: {\n        ...data.metadata,\n        color_namespace: ((_data$metadata = data.metadata) == null ? void 0 : _data$metadata.color_namespace) || undefined,\n        color_scheme: ((_data$metadata2 = data.metadata) == null ? void 0 : _data$metadata2.color_scheme) || '',\n        expanded_slices: ((_data$metadata3 = data.metadata) == null ? void 0 : _data$metadata3.expanded_slices) || {},\n        label_colors: ((_data$metadata4 = data.metadata) == null ? void 0 : _data$metadata4.label_colors) || {},\n        refresh_frequency: ((_data$metadata5 = data.metadata) == null ? void 0 : _data$metadata5.refresh_frequency) || 0,\n        timed_refresh_immune_slices:\n        ((_data$metadata6 = data.metadata) == null ? void 0 : _data$metadata6.timed_refresh_immune_slices) || [] } };\n\n\n\n    const handleChartConfiguration = () => {\n      const {\n        dashboardInfo: {\n          metadata: { chart_configuration = {} } } } =\n\n      getState();\n      const chartConfiguration = Object.values(chart_configuration).reduce(\n      (prev, next) => {\n        // If chart removed from dashboard - remove it from metadata\n        if (\n        Object.values(layout).find(\n        (layoutItem) => {var _layoutItem$meta;return (layoutItem == null ? void 0 : (_layoutItem$meta = layoutItem.meta) == null ? void 0 : _layoutItem$meta.chartId) === next.id;}))\n\n        {\n          return { ...prev, [next.id]: next };\n        }\n        return prev;\n      },\n      {});\n\n      return chartConfiguration;\n    };\n\n    const onCopySuccess = (response) => {\n      const lastModifiedTime = response.json.last_modified_time;\n      if (lastModifiedTime) {\n        dispatch(saveDashboardRequestSuccess(lastModifiedTime));\n      }\n      if (isFeatureEnabled(FeatureFlag.DASHBOARD_CROSS_FILTERS)) {\n        const chartConfiguration = handleChartConfiguration();\n        dispatch(setChartConfiguration(chartConfiguration));\n      }\n      dispatch(addSuccessToast(t('This dashboard was saved successfully.')));\n      return response;\n    };\n\n    const onUpdateSuccess = (response) => {\n      const updatedDashboard = response.json.result;\n      const lastModifiedTime = response.json.last_modified_time;\n      // synching with the backend transformations of the metadata\n      if (updatedDashboard.json_metadata) {\n        const metadata = JSON.parse(updatedDashboard.json_metadata);\n        dispatch(\n        dashboardInfoChanged({\n          metadata }));\n\n\n        if (metadata.chart_configuration) {\n          dispatch({\n            type: SET_CHART_CONFIG_COMPLETE,\n            chartConfiguration: metadata.chart_configuration });\n\n        }\n        if (metadata.native_filter_configuration) {\n          dispatch({\n            type: SET_FILTER_CONFIG_COMPLETE,\n            filterConfig: metadata.native_filter_configuration });\n\n        }\n      }\n      if (lastModifiedTime) {\n        dispatch(saveDashboardRequestSuccess(lastModifiedTime));\n      }\n      // redirect to the new slug or id\n      window.history.pushState(\n      { event: 'dashboard_properties_changed' },\n      '',\n      `/superset/dashboard/${slug || id}/`);\n\n\n      dispatch(addSuccessToast(t('This dashboard was saved successfully.')));\n      return response;\n    };\n\n    const onError = async (response) => {\n      const { error, message } = await getClientErrorObject(response);\n      let errorText = t('Sorry, an unknown error occured');\n\n      if (error) {\n        errorText = t(\n        'Sorry, there was an error saving this dashboard: %s',\n        error);\n\n      }\n      if (typeof message === 'string' && message === 'Forbidden') {\n        errorText = t('You do not have permission to edit this dashboard');\n      }\n      dispatch(addDangerToast(errorText));\n    };\n\n    if (saveType === SAVE_TYPE_OVERWRITE) {\n      let chartConfiguration = {};\n      if (isFeatureEnabled(FeatureFlag.DASHBOARD_CROSS_FILTERS)) {\n        chartConfiguration = handleChartConfiguration();\n      }\n      const updatedDashboard = {\n        certified_by: cleanedData.certified_by,\n        certification_details: cleanedData.certification_details,\n        css: cleanedData.css,\n        dashboard_title: cleanedData.dashboard_title,\n        slug: cleanedData.slug,\n        owners: cleanedData.owners,\n        roles: cleanedData.roles,\n        json_metadata: safeStringify({\n          ...((cleanedData == null ? void 0 : cleanedData.metadata) || {}),\n          default_filters: safeStringify(serializedFilters),\n          filter_scopes: serializedFilterScopes,\n          chart_configuration: chartConfiguration }) };\n\n\n\n      return SupersetClient.put({\n        endpoint: `/api/v1/dashboard/${id}`,\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(updatedDashboard) }).\n\n      then((response) => onUpdateSuccess(response)).\n      catch((response) => onError(response));\n    }\n    // changing the data as the endpoint requires\n    const copyData = cleanedData;\n    if (copyData.metadata) {\n      delete copyData.metadata;\n    }\n    const finalCopyData = {\n      ...copyData,\n      // the endpoint is expecting the metadata to be flat\n      ...((cleanedData == null ? void 0 : cleanedData.metadata) || {}) };\n\n    return SupersetClient.post({\n      endpoint: `/superset/copy_dash/${id}/`,\n      postPayload: {\n        data: {\n          ...finalCopyData,\n          default_filters: safeStringify(serializedFilters),\n          filter_scopes: safeStringify(serializedFilterScopes) } } }).\n\n\n\n    then((response) => onCopySuccess(response)).\n    catch((response) => onError(response));\n  };\n}\n\nexport function fetchCharts(\nchartList = [],\nforce = false,\ninterval = 0,\ndashboardId)\n{\n  return (dispatch, getState) => {\n    if (!interval) {\n      chartList.forEach((chartKey) =>\n      dispatch(refreshChart(chartKey, force, dashboardId)));\n\n      return;\n    }\n\n    const { metadata: meta } = getState().dashboardInfo;\n    const refreshTime = Math.max(interval, meta.stagger_time || 5000); // default 5 seconds\n    if (typeof meta.stagger_refresh !== 'boolean') {\n      meta.stagger_refresh =\n      meta.stagger_refresh === undefined ?\n      true :\n      meta.stagger_refresh === 'true';\n    }\n    const delay = meta.stagger_refresh ?\n    refreshTime / (chartList.length - 1) :\n    0;\n    chartList.forEach((chartKey, i) => {\n      setTimeout(\n      () => dispatch(refreshChart(chartKey, force, dashboardId)),\n      delay * i);\n\n    });\n  };\n}\n\nconst refreshCharts = (chartList, force, interval, dashboardId, dispatch) =>\nnew Promise((resolve) => {\n  dispatch(fetchCharts(chartList, force, interval, dashboardId));\n  resolve();\n});\n\nexport const ON_REFRESH_SUCCESS = 'ON_REFRESH_SUCCESS';\nexport function onRefreshSuccess() {\n  return { type: ON_REFRESH_SUCCESS };\n}\n\nexport const ON_REFRESH = 'ON_REFRESH';\nexport function onRefresh(\nchartList = [],\nforce = false,\ninterval = 0,\ndashboardId)\n{\n  return (dispatch) => {\n    dispatch({ type: ON_REFRESH });\n    refreshCharts(chartList, force, interval, dashboardId, dispatch).then(() =>\n    dispatch({ type: ON_REFRESH_SUCCESS }));\n\n  };\n}\n\nexport const SHOW_BUILDER_PANE = 'SHOW_BUILDER_PANE';\nexport function showBuilderPane() {\n  return { type: SHOW_BUILDER_PANE };\n}\n\nexport function addSliceToDashboard(id, component) {\n  return (dispatch, getState) => {\n    const { sliceEntities } = getState();\n    const selectedSlice = sliceEntities.slices[id];\n    if (!selectedSlice) {\n      return dispatch(\n      addWarningToast(\n      'Sorry, there is no chart definition associated with the chart trying to be added.'));\n\n\n    }\n    const form_data = {\n      ...selectedSlice.form_data,\n      slice_id: selectedSlice.slice_id };\n\n    const newChart = {\n      ...initChart,\n      id,\n      form_data,\n      formData: applyDefaultFormData(form_data) };\n\n\n    return Promise.all([\n    dispatch(addChart(newChart, id)),\n    dispatch(fetchDatasourceMetadata(form_data.datasource))]).\n    then(() => {\n      dispatch(addSlice(selectedSlice));\n\n      if (selectedSlice && selectedSlice.viz_type === 'filter_box') {\n        dispatch(addFilter(id, component, selectedSlice.form_data));\n      }\n    });\n  };\n}\n\nexport function removeSliceFromDashboard(id) {\n  return (dispatch, getState) => {\n    const sliceEntity = getState().sliceEntities.slices[id];\n    if (sliceEntity && sliceEntity.viz_type === 'filter_box') {\n      dispatch(removeFilter(id));\n    }\n\n    dispatch(removeSlice(id));\n    dispatch(removeChart(id));\n  };\n}\n\nexport const SET_COLOR_SCHEME = 'SET_COLOR_SCHEME';\nexport function setColorScheme(colorScheme) {\n  return { type: SET_COLOR_SCHEME, colorScheme };\n}\n\nexport function setColorSchemeAndUnsavedChanges(colorScheme) {\n  return (dispatch) => {\n    dispatch(setColorScheme(colorScheme));\n    dispatch(setUnsavedChanges(true));\n  };\n}\n\nexport const SET_DIRECT_PATH = 'SET_DIRECT_PATH';\nexport function setDirectPathToChild(path) {\n  return { type: SET_DIRECT_PATH, path };\n}\n\nexport const SET_ACTIVE_TABS = 'SET_ACTIVE_TABS';\nexport function setActiveTabs(tabId, prevTabId) {\n  return { type: SET_ACTIVE_TABS, tabId, prevTabId };\n}\n\nexport const SET_FOCUSED_FILTER_FIELD = 'SET_FOCUSED_FILTER_FIELD';\nexport function setFocusedFilterField(chartId, column) {\n  return { type: SET_FOCUSED_FILTER_FIELD, chartId, column };\n}\n\nexport const UNSET_FOCUSED_FILTER_FIELD = 'UNSET_FOCUSED_FILTER_FIELD';\nexport function unsetFocusedFilterField(chartId, column) {\n  return { type: UNSET_FOCUSED_FILTER_FIELD, chartId, column };\n}\n\nexport const SET_FULL_SIZE_CHART_ID = 'SET_FULL_SIZE_CHART_ID';\nexport function setFullSizeChartId(chartId) {\n  return { type: SET_FULL_SIZE_CHART_ID, chartId };\n}\n\n// Undo history ---------------------------------------------------------------\nexport const SET_MAX_UNDO_HISTORY_EXCEEDED = 'SET_MAX_UNDO_HISTORY_EXCEEDED';\nexport function setMaxUndoHistoryExceeded(maxUndoHistoryExceeded = true) {\n  return {\n    type: SET_MAX_UNDO_HISTORY_EXCEEDED,\n    payload: { maxUndoHistoryExceeded } };\n\n}\n\nexport function maxUndoHistoryToast() {\n  return (dispatch, getState) => {\n    const { dashboardLayout } = getState();\n    const historyLength = dashboardLayout.past.length;\n\n    return dispatch(\n    addWarningToast(\n    `You have used all ${historyLength} undo slots and will not be able to fully undo subsequent actions. You may save your current state to reset the history.`));\n\n\n  };\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(SET_UNSAVED_CHANGES, \"SET_UNSAVED_CHANGES\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/actions/dashboardState.js\");reactHotLoader.register(setUnsavedChanges, \"setUnsavedChanges\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/actions/dashboardState.js\");reactHotLoader.register(ADD_SLICE, \"ADD_SLICE\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/actions/dashboardState.js\");reactHotLoader.register(addSlice, \"addSlice\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/actions/dashboardState.js\");reactHotLoader.register(REMOVE_SLICE, \"REMOVE_SLICE\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/actions/dashboardState.js\");reactHotLoader.register(removeSlice, \"removeSlice\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/actions/dashboardState.js\");reactHotLoader.register(FAVESTAR_BASE_URL, \"FAVESTAR_BASE_URL\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/actions/dashboardState.js\");reactHotLoader.register(TOGGLE_FAVE_STAR, \"TOGGLE_FAVE_STAR\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/actions/dashboardState.js\");reactHotLoader.register(toggleFaveStar, \"toggleFaveStar\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/actions/dashboardState.js\");reactHotLoader.register(FETCH_FAVE_STAR, \"FETCH_FAVE_STAR\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/actions/dashboardState.js\");reactHotLoader.register(fetchFaveStar, \"fetchFaveStar\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/actions/dashboardState.js\");reactHotLoader.register(SAVE_FAVE_STAR, \"SAVE_FAVE_STAR\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/actions/dashboardState.js\");reactHotLoader.register(saveFaveStar, \"saveFaveStar\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/actions/dashboardState.js\");reactHotLoader.register(TOGGLE_PUBLISHED, \"TOGGLE_PUBLISHED\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/actions/dashboardState.js\");reactHotLoader.register(togglePublished, \"togglePublished\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/actions/dashboardState.js\");reactHotLoader.register(savePublished, \"savePublished\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/actions/dashboardState.js\");reactHotLoader.register(TOGGLE_EXPAND_SLICE, \"TOGGLE_EXPAND_SLICE\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/actions/dashboardState.js\");reactHotLoader.register(toggleExpandSlice, \"toggleExpandSlice\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/actions/dashboardState.js\");reactHotLoader.register(UPDATE_CSS, \"UPDATE_CSS\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/actions/dashboardState.js\");reactHotLoader.register(updateCss, \"updateCss\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/actions/dashboardState.js\");reactHotLoader.register(SET_EDIT_MODE, \"SET_EDIT_MODE\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/actions/dashboardState.js\");reactHotLoader.register(setEditMode, \"setEditMode\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/actions/dashboardState.js\");reactHotLoader.register(ON_CHANGE, \"ON_CHANGE\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/actions/dashboardState.js\");reactHotLoader.register(onChange, \"onChange\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/actions/dashboardState.js\");reactHotLoader.register(ON_SAVE, \"ON_SAVE\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/actions/dashboardState.js\");reactHotLoader.register(onSave, \"onSave\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/actions/dashboardState.js\");reactHotLoader.register(SET_REFRESH_FREQUENCY, \"SET_REFRESH_FREQUENCY\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/actions/dashboardState.js\");reactHotLoader.register(setRefreshFrequency, \"setRefreshFrequency\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/actions/dashboardState.js\");reactHotLoader.register(saveDashboardRequestSuccess, \"saveDashboardRequestSuccess\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/actions/dashboardState.js\");reactHotLoader.register(saveDashboardRequest, \"saveDashboardRequest\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/actions/dashboardState.js\");reactHotLoader.register(fetchCharts, \"fetchCharts\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/actions/dashboardState.js\");reactHotLoader.register(refreshCharts, \"refreshCharts\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/actions/dashboardState.js\");reactHotLoader.register(ON_REFRESH_SUCCESS, \"ON_REFRESH_SUCCESS\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/actions/dashboardState.js\");reactHotLoader.register(onRefreshSuccess, \"onRefreshSuccess\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/actions/dashboardState.js\");reactHotLoader.register(ON_REFRESH, \"ON_REFRESH\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/actions/dashboardState.js\");reactHotLoader.register(onRefresh, \"onRefresh\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/actions/dashboardState.js\");reactHotLoader.register(SHOW_BUILDER_PANE, \"SHOW_BUILDER_PANE\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/actions/dashboardState.js\");reactHotLoader.register(showBuilderPane, \"showBuilderPane\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/actions/dashboardState.js\");reactHotLoader.register(addSliceToDashboard, \"addSliceToDashboard\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/actions/dashboardState.js\");reactHotLoader.register(removeSliceFromDashboard, \"removeSliceFromDashboard\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/actions/dashboardState.js\");reactHotLoader.register(SET_COLOR_SCHEME, \"SET_COLOR_SCHEME\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/actions/dashboardState.js\");reactHotLoader.register(setColorScheme, \"setColorScheme\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/actions/dashboardState.js\");reactHotLoader.register(setColorSchemeAndUnsavedChanges, \"setColorSchemeAndUnsavedChanges\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/actions/dashboardState.js\");reactHotLoader.register(SET_DIRECT_PATH, \"SET_DIRECT_PATH\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/actions/dashboardState.js\");reactHotLoader.register(setDirectPathToChild, \"setDirectPathToChild\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/actions/dashboardState.js\");reactHotLoader.register(SET_ACTIVE_TABS, \"SET_ACTIVE_TABS\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/actions/dashboardState.js\");reactHotLoader.register(setActiveTabs, \"setActiveTabs\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/actions/dashboardState.js\");reactHotLoader.register(SET_FOCUSED_FILTER_FIELD, \"SET_FOCUSED_FILTER_FIELD\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/actions/dashboardState.js\");reactHotLoader.register(setFocusedFilterField, \"setFocusedFilterField\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/actions/dashboardState.js\");reactHotLoader.register(UNSET_FOCUSED_FILTER_FIELD, \"UNSET_FOCUSED_FILTER_FIELD\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/actions/dashboardState.js\");reactHotLoader.register(unsetFocusedFilterField, \"unsetFocusedFilterField\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/actions/dashboardState.js\");reactHotLoader.register(SET_FULL_SIZE_CHART_ID, \"SET_FULL_SIZE_CHART_ID\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/actions/dashboardState.js\");reactHotLoader.register(setFullSizeChartId, \"setFullSizeChartId\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/actions/dashboardState.js\");reactHotLoader.register(SET_MAX_UNDO_HISTORY_EXCEEDED, \"SET_MAX_UNDO_HISTORY_EXCEEDED\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/actions/dashboardState.js\");reactHotLoader.register(setMaxUndoHistoryExceeded, \"setMaxUndoHistoryExceeded\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/actions/dashboardState.js\");reactHotLoader.register(maxUndoHistoryToast, \"maxUndoHistoryToast\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/actions/dashboardState.js\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/actions/dashboardState.js"],"names":["ActionCreators","UndoActionCreators","ensureIsArray","t","SupersetClient","addChart","removeChart","refreshChart","chart","initChart","applyDefaultFormData","getClientErrorObject","SAVE_TYPE_OVERWRITE","addSuccessToast","addWarningToast","addDangerToast","serializeActiveFilterValues","serializeFilterScopes","getActiveFilters","safeStringify","FeatureFlag","isFeatureEnabled","UPDATE_COMPONENTS_PARENTS_LIST","setChartConfiguration","dashboardInfoChanged","SET_CHART_CONFIG_COMPLETE","fetchDatasourceMetadata","addFilter","removeFilter","updateDirectPathToFilter","SET_FILTER_CONFIG_COMPLETE","SET_UNSAVED_CHANGES","setUnsavedChanges","hasUnsavedChanges","type","payload","ADD_SLICE","addSlice","slice","REMOVE_SLICE","removeSlice","sliceId","FAVESTAR_BASE_URL","TOGGLE_FAVE_STAR","toggleFaveStar","isStarred","FETCH_FAVE_STAR","fetchFaveStar","id","fetchFaveStarThunk","dispatch","get","endpoint","then","json","count","catch","SAVE_FAVE_STAR","saveFaveStar","saveFaveStarThunk","urlSuffix","TOGGLE_PUBLISHED","togglePublished","isPublished","savePublished","savePublishedThunk","put","headers","body","JSON","stringify","published","nowPublished","TOGGLE_EXPAND_SLICE","toggleExpandSlice","UPDATE_CSS","updateCss","css","SET_EDIT_MODE","setEditMode","editMode","ON_CHANGE","onChange","ON_SAVE","onSave","lastModifiedTime","SET_REFRESH_FREQUENCY","setRefreshFrequency","refreshFrequency","isPersistent","saveDashboardRequestSuccess","clearHistory","saveDashboardRequest","data","saveType","getState","dashboardFilters","dashboardLayout","layout","present","Object","values","forEach","filter","chartId","componentId","directPathToFilter","pop","parents","push","serializedFilters","serializedFilterScopes","certified_by","certification_details","dashboard_title","owners","roles","slug","hasId","item","undefined","cleanedData","map","o","DASHBOARD_RBAC","r","metadata","color_namespace","color_scheme","expanded_slices","label_colors","refresh_frequency","timed_refresh_immune_slices","handleChartConfiguration","dashboardInfo","chart_configuration","chartConfiguration","reduce","prev","next","find","layoutItem","meta","onCopySuccess","response","last_modified_time","DASHBOARD_CROSS_FILTERS","onUpdateSuccess","updatedDashboard","result","json_metadata","parse","native_filter_configuration","filterConfig","window","history","pushState","event","onError","error","message","errorText","default_filters","filter_scopes","copyData","finalCopyData","post","postPayload","fetchCharts","chartList","force","interval","dashboardId","chartKey","refreshTime","Math","max","stagger_time","stagger_refresh","delay","length","i","setTimeout","refreshCharts","Promise","resolve","ON_REFRESH_SUCCESS","onRefreshSuccess","ON_REFRESH","onRefresh","SHOW_BUILDER_PANE","showBuilderPane","addSliceToDashboard","component","sliceEntities","selectedSlice","slices","form_data","slice_id","newChart","formData","all","datasource","viz_type","removeSliceFromDashboard","sliceEntity","SET_COLOR_SCHEME","setColorScheme","colorScheme","setColorSchemeAndUnsavedChanges","SET_DIRECT_PATH","setDirectPathToChild","path","SET_ACTIVE_TABS","setActiveTabs","tabId","prevTabId","SET_FOCUSED_FILTER_FIELD","setFocusedFilterField","column","UNSET_FOCUSED_FILTER_FIELD","unsetFocusedFilterField","SET_FULL_SIZE_CHART_ID","setFullSizeChartId","SET_MAX_UNDO_HISTORY_EXCEEDED","setMaxUndoHistoryExceeded","maxUndoHistoryExceeded","maxUndoHistoryToast","historyLength","past"],"mappings":"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","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint camelcase: 0 */\nimport { ActionCreators as UndoActionCreators } from 'redux-undo';\nimport { ensureIsArray, t, SupersetClient } from '@superset-ui/core';\nimport { addChart, removeChart, refreshChart } from 'src/chart/chartAction';\nimport { chart as initChart } from 'src/chart/chartReducer';\nimport { applyDefaultFormData } from 'src/explore/store';\nimport { getClientErrorObject } from 'src/utils/getClientErrorObject';\nimport { SAVE_TYPE_OVERWRITE } from 'src/dashboard/util/constants';\nimport {\n  addSuccessToast,\n  addWarningToast,\n  addDangerToast,\n} from 'src/components/MessageToasts/actions';\nimport serializeActiveFilterValues from 'src/dashboard/util/serializeActiveFilterValues';\nimport serializeFilterScopes from 'src/dashboard/util/serializeFilterScopes';\nimport { getActiveFilters } from 'src/dashboard/util/activeDashboardFilters';\nimport { safeStringify } from 'src/utils/safeStringify';\nimport { FeatureFlag, isFeatureEnabled } from 'src/featureFlags';\nimport { UPDATE_COMPONENTS_PARENTS_LIST } from './dashboardLayout';\nimport {\n  setChartConfiguration,\n  dashboardInfoChanged,\n  SET_CHART_CONFIG_COMPLETE,\n} from './dashboardInfo';\nimport { fetchDatasourceMetadata } from './datasources';\nimport {\n  addFilter,\n  removeFilter,\n  updateDirectPathToFilter,\n} from './dashboardFilters';\nimport { SET_FILTER_CONFIG_COMPLETE } from './nativeFilters';\n\nexport const SET_UNSAVED_CHANGES = 'SET_UNSAVED_CHANGES';\nexport function setUnsavedChanges(hasUnsavedChanges) {\n  return { type: SET_UNSAVED_CHANGES, payload: { hasUnsavedChanges } };\n}\n\nexport const ADD_SLICE = 'ADD_SLICE';\nexport function addSlice(slice) {\n  return { type: ADD_SLICE, slice };\n}\n\nexport const REMOVE_SLICE = 'REMOVE_SLICE';\nexport function removeSlice(sliceId) {\n  return { type: REMOVE_SLICE, sliceId };\n}\n\nconst FAVESTAR_BASE_URL = '/superset/favstar/Dashboard';\nexport const TOGGLE_FAVE_STAR = 'TOGGLE_FAVE_STAR';\nexport function toggleFaveStar(isStarred) {\n  return { type: TOGGLE_FAVE_STAR, isStarred };\n}\n\nexport const FETCH_FAVE_STAR = 'FETCH_FAVE_STAR';\nexport function fetchFaveStar(id) {\n  return function fetchFaveStarThunk(dispatch) {\n    return SupersetClient.get({\n      endpoint: `${FAVESTAR_BASE_URL}/${id}/count/`,\n    })\n      .then(({ json }) => {\n        if (json.count > 0) dispatch(toggleFaveStar(true));\n      })\n      .catch(() =>\n        dispatch(\n          addDangerToast(\n            t(\n              'There was an issue fetching the favorite status of this dashboard.',\n            ),\n          ),\n        ),\n      );\n  };\n}\n\nexport const SAVE_FAVE_STAR = 'SAVE_FAVE_STAR';\nexport function saveFaveStar(id, isStarred) {\n  return function saveFaveStarThunk(dispatch) {\n    const urlSuffix = isStarred ? 'unselect' : 'select';\n    return SupersetClient.get({\n      endpoint: `${FAVESTAR_BASE_URL}/${id}/${urlSuffix}/`,\n    })\n      .then(() => {\n        dispatch(toggleFaveStar(!isStarred));\n      })\n      .catch(() =>\n        dispatch(\n          addDangerToast(t('There was an issue favoriting this dashboard.')),\n        ),\n      );\n  };\n}\n\nexport const TOGGLE_PUBLISHED = 'TOGGLE_PUBLISHED';\nexport function togglePublished(isPublished) {\n  return { type: TOGGLE_PUBLISHED, isPublished };\n}\n\nexport function savePublished(id, isPublished) {\n  return function savePublishedThunk(dispatch) {\n    return SupersetClient.put({\n      endpoint: `/api/v1/dashboard/${id}`,\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        published: isPublished,\n      }),\n    })\n      .then(() => {\n        const nowPublished = isPublished ? 'published' : 'hidden';\n        dispatch(addSuccessToast(t(`This dashboard is now ${nowPublished}`)));\n        dispatch(togglePublished(isPublished));\n      })\n      .catch(() => {\n        dispatch(\n          addDangerToast(\n            t('You do not have permissions to edit this dashboard.'),\n          ),\n        );\n      });\n  };\n}\n\nexport const TOGGLE_EXPAND_SLICE = 'TOGGLE_EXPAND_SLICE';\nexport function toggleExpandSlice(sliceId) {\n  return { type: TOGGLE_EXPAND_SLICE, sliceId };\n}\n\nexport const UPDATE_CSS = 'UPDATE_CSS';\nexport function updateCss(css) {\n  return { type: UPDATE_CSS, css };\n}\n\nexport const SET_EDIT_MODE = 'SET_EDIT_MODE';\nexport function setEditMode(editMode) {\n  return { type: SET_EDIT_MODE, editMode };\n}\n\nexport const ON_CHANGE = 'ON_CHANGE';\nexport function onChange() {\n  return { type: ON_CHANGE };\n}\n\nexport const ON_SAVE = 'ON_SAVE';\nexport function onSave(lastModifiedTime) {\n  return { type: ON_SAVE, lastModifiedTime };\n}\n\nexport const SET_REFRESH_FREQUENCY = 'SET_REFRESH_FREQUENCY';\nexport function setRefreshFrequency(refreshFrequency, isPersistent = false) {\n  return { type: SET_REFRESH_FREQUENCY, refreshFrequency, isPersistent };\n}\n\nexport function saveDashboardRequestSuccess(lastModifiedTime) {\n  return dispatch => {\n    dispatch(onSave(lastModifiedTime));\n    // clear layout undo history\n    dispatch(UndoActionCreators.clearHistory());\n  };\n}\n\nexport function saveDashboardRequest(data, id, saveType) {\n  return (dispatch, getState) => {\n    dispatch({ type: UPDATE_COMPONENTS_PARENTS_LIST });\n\n    const { dashboardFilters, dashboardLayout } = getState();\n    const layout = dashboardLayout.present;\n    Object.values(dashboardFilters).forEach(filter => {\n      const { chartId } = filter;\n      const componentId = filter.directPathToFilter.slice().pop();\n      const directPathToFilter = (layout[componentId]?.parents || []).slice();\n      directPathToFilter.push(componentId);\n      dispatch(updateDirectPathToFilter(chartId, directPathToFilter));\n    });\n    // serialize selected values for each filter field, grouped by filter id\n    const serializedFilters = serializeActiveFilterValues(getActiveFilters());\n    // serialize filter scope for each filter field, grouped by filter id\n    const serializedFilterScopes = serializeFilterScopes(dashboardFilters);\n    const {\n      certified_by,\n      certification_details,\n      css,\n      dashboard_title,\n      owners,\n      roles,\n      slug,\n    } = data;\n\n    const hasId = item => item.id !== undefined;\n\n    // making sure the data is what the backend expects\n    const cleanedData = {\n      ...data,\n      certified_by: certified_by || '',\n      certification_details:\n        certified_by && certification_details ? certification_details : '',\n      css: css || '',\n      dashboard_title: dashboard_title || t('[ untitled dashboard ]'),\n      owners: ensureIsArray(owners).map(o => (hasId(o) ? o.id : o)),\n      roles: !isFeatureEnabled(FeatureFlag.DASHBOARD_RBAC)\n        ? undefined\n        : ensureIsArray(roles).map(r => (hasId(r) ? r.id : r)),\n      slug: slug || null,\n      metadata: {\n        ...data.metadata,\n        color_namespace: data.metadata?.color_namespace || undefined,\n        color_scheme: data.metadata?.color_scheme || '',\n        expanded_slices: data.metadata?.expanded_slices || {},\n        label_colors: data.metadata?.label_colors || {},\n        refresh_frequency: data.metadata?.refresh_frequency || 0,\n        timed_refresh_immune_slices:\n          data.metadata?.timed_refresh_immune_slices || [],\n      },\n    };\n\n    const handleChartConfiguration = () => {\n      const {\n        dashboardInfo: {\n          metadata: { chart_configuration = {} },\n        },\n      } = getState();\n      const chartConfiguration = Object.values(chart_configuration).reduce(\n        (prev, next) => {\n          // If chart removed from dashboard - remove it from metadata\n          if (\n            Object.values(layout).find(\n              layoutItem => layoutItem?.meta?.chartId === next.id,\n            )\n          ) {\n            return { ...prev, [next.id]: next };\n          }\n          return prev;\n        },\n        {},\n      );\n      return chartConfiguration;\n    };\n\n    const onCopySuccess = response => {\n      const lastModifiedTime = response.json.last_modified_time;\n      if (lastModifiedTime) {\n        dispatch(saveDashboardRequestSuccess(lastModifiedTime));\n      }\n      if (isFeatureEnabled(FeatureFlag.DASHBOARD_CROSS_FILTERS)) {\n        const chartConfiguration = handleChartConfiguration();\n        dispatch(setChartConfiguration(chartConfiguration));\n      }\n      dispatch(addSuccessToast(t('This dashboard was saved successfully.')));\n      return response;\n    };\n\n    const onUpdateSuccess = response => {\n      const updatedDashboard = response.json.result;\n      const lastModifiedTime = response.json.last_modified_time;\n      // synching with the backend transformations of the metadata\n      if (updatedDashboard.json_metadata) {\n        const metadata = JSON.parse(updatedDashboard.json_metadata);\n        dispatch(\n          dashboardInfoChanged({\n            metadata,\n          }),\n        );\n        if (metadata.chart_configuration) {\n          dispatch({\n            type: SET_CHART_CONFIG_COMPLETE,\n            chartConfiguration: metadata.chart_configuration,\n          });\n        }\n        if (metadata.native_filter_configuration) {\n          dispatch({\n            type: SET_FILTER_CONFIG_COMPLETE,\n            filterConfig: metadata.native_filter_configuration,\n          });\n        }\n      }\n      if (lastModifiedTime) {\n        dispatch(saveDashboardRequestSuccess(lastModifiedTime));\n      }\n      // redirect to the new slug or id\n      window.history.pushState(\n        { event: 'dashboard_properties_changed' },\n        '',\n        `/superset/dashboard/${slug || id}/`,\n      );\n\n      dispatch(addSuccessToast(t('This dashboard was saved successfully.')));\n      return response;\n    };\n\n    const onError = async response => {\n      const { error, message } = await getClientErrorObject(response);\n      let errorText = t('Sorry, an unknown error occured');\n\n      if (error) {\n        errorText = t(\n          'Sorry, there was an error saving this dashboard: %s',\n          error,\n        );\n      }\n      if (typeof message === 'string' && message === 'Forbidden') {\n        errorText = t('You do not have permission to edit this dashboard');\n      }\n      dispatch(addDangerToast(errorText));\n    };\n\n    if (saveType === SAVE_TYPE_OVERWRITE) {\n      let chartConfiguration = {};\n      if (isFeatureEnabled(FeatureFlag.DASHBOARD_CROSS_FILTERS)) {\n        chartConfiguration = handleChartConfiguration();\n      }\n      const updatedDashboard = {\n        certified_by: cleanedData.certified_by,\n        certification_details: cleanedData.certification_details,\n        css: cleanedData.css,\n        dashboard_title: cleanedData.dashboard_title,\n        slug: cleanedData.slug,\n        owners: cleanedData.owners,\n        roles: cleanedData.roles,\n        json_metadata: safeStringify({\n          ...(cleanedData?.metadata || {}),\n          default_filters: safeStringify(serializedFilters),\n          filter_scopes: serializedFilterScopes,\n          chart_configuration: chartConfiguration,\n        }),\n      };\n\n      return SupersetClient.put({\n        endpoint: `/api/v1/dashboard/${id}`,\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(updatedDashboard),\n      })\n        .then(response => onUpdateSuccess(response))\n        .catch(response => onError(response));\n    }\n    // changing the data as the endpoint requires\n    const copyData = cleanedData;\n    if (copyData.metadata) {\n      delete copyData.metadata;\n    }\n    const finalCopyData = {\n      ...copyData,\n      // the endpoint is expecting the metadata to be flat\n      ...(cleanedData?.metadata || {}),\n    };\n    return SupersetClient.post({\n      endpoint: `/superset/copy_dash/${id}/`,\n      postPayload: {\n        data: {\n          ...finalCopyData,\n          default_filters: safeStringify(serializedFilters),\n          filter_scopes: safeStringify(serializedFilterScopes),\n        },\n      },\n    })\n      .then(response => onCopySuccess(response))\n      .catch(response => onError(response));\n  };\n}\n\nexport function fetchCharts(\n  chartList = [],\n  force = false,\n  interval = 0,\n  dashboardId,\n) {\n  return (dispatch, getState) => {\n    if (!interval) {\n      chartList.forEach(chartKey =>\n        dispatch(refreshChart(chartKey, force, dashboardId)),\n      );\n      return;\n    }\n\n    const { metadata: meta } = getState().dashboardInfo;\n    const refreshTime = Math.max(interval, meta.stagger_time || 5000); // default 5 seconds\n    if (typeof meta.stagger_refresh !== 'boolean') {\n      meta.stagger_refresh =\n        meta.stagger_refresh === undefined\n          ? true\n          : meta.stagger_refresh === 'true';\n    }\n    const delay = meta.stagger_refresh\n      ? refreshTime / (chartList.length - 1)\n      : 0;\n    chartList.forEach((chartKey, i) => {\n      setTimeout(\n        () => dispatch(refreshChart(chartKey, force, dashboardId)),\n        delay * i,\n      );\n    });\n  };\n}\n\nconst refreshCharts = (chartList, force, interval, dashboardId, dispatch) =>\n  new Promise(resolve => {\n    dispatch(fetchCharts(chartList, force, interval, dashboardId));\n    resolve();\n  });\n\nexport const ON_REFRESH_SUCCESS = 'ON_REFRESH_SUCCESS';\nexport function onRefreshSuccess() {\n  return { type: ON_REFRESH_SUCCESS };\n}\n\nexport const ON_REFRESH = 'ON_REFRESH';\nexport function onRefresh(\n  chartList = [],\n  force = false,\n  interval = 0,\n  dashboardId,\n) {\n  return dispatch => {\n    dispatch({ type: ON_REFRESH });\n    refreshCharts(chartList, force, interval, dashboardId, dispatch).then(() =>\n      dispatch({ type: ON_REFRESH_SUCCESS }),\n    );\n  };\n}\n\nexport const SHOW_BUILDER_PANE = 'SHOW_BUILDER_PANE';\nexport function showBuilderPane() {\n  return { type: SHOW_BUILDER_PANE };\n}\n\nexport function addSliceToDashboard(id, component) {\n  return (dispatch, getState) => {\n    const { sliceEntities } = getState();\n    const selectedSlice = sliceEntities.slices[id];\n    if (!selectedSlice) {\n      return dispatch(\n        addWarningToast(\n          'Sorry, there is no chart definition associated with the chart trying to be added.',\n        ),\n      );\n    }\n    const form_data = {\n      ...selectedSlice.form_data,\n      slice_id: selectedSlice.slice_id,\n    };\n    const newChart = {\n      ...initChart,\n      id,\n      form_data,\n      formData: applyDefaultFormData(form_data),\n    };\n\n    return Promise.all([\n      dispatch(addChart(newChart, id)),\n      dispatch(fetchDatasourceMetadata(form_data.datasource)),\n    ]).then(() => {\n      dispatch(addSlice(selectedSlice));\n\n      if (selectedSlice && selectedSlice.viz_type === 'filter_box') {\n        dispatch(addFilter(id, component, selectedSlice.form_data));\n      }\n    });\n  };\n}\n\nexport function removeSliceFromDashboard(id) {\n  return (dispatch, getState) => {\n    const sliceEntity = getState().sliceEntities.slices[id];\n    if (sliceEntity && sliceEntity.viz_type === 'filter_box') {\n      dispatch(removeFilter(id));\n    }\n\n    dispatch(removeSlice(id));\n    dispatch(removeChart(id));\n  };\n}\n\nexport const SET_COLOR_SCHEME = 'SET_COLOR_SCHEME';\nexport function setColorScheme(colorScheme) {\n  return { type: SET_COLOR_SCHEME, colorScheme };\n}\n\nexport function setColorSchemeAndUnsavedChanges(colorScheme) {\n  return dispatch => {\n    dispatch(setColorScheme(colorScheme));\n    dispatch(setUnsavedChanges(true));\n  };\n}\n\nexport const SET_DIRECT_PATH = 'SET_DIRECT_PATH';\nexport function setDirectPathToChild(path) {\n  return { type: SET_DIRECT_PATH, path };\n}\n\nexport const SET_ACTIVE_TABS = 'SET_ACTIVE_TABS';\nexport function setActiveTabs(tabId, prevTabId) {\n  return { type: SET_ACTIVE_TABS, tabId, prevTabId };\n}\n\nexport const SET_FOCUSED_FILTER_FIELD = 'SET_FOCUSED_FILTER_FIELD';\nexport function setFocusedFilterField(chartId, column) {\n  return { type: SET_FOCUSED_FILTER_FIELD, chartId, column };\n}\n\nexport const UNSET_FOCUSED_FILTER_FIELD = 'UNSET_FOCUSED_FILTER_FIELD';\nexport function unsetFocusedFilterField(chartId, column) {\n  return { type: UNSET_FOCUSED_FILTER_FIELD, chartId, column };\n}\n\nexport const SET_FULL_SIZE_CHART_ID = 'SET_FULL_SIZE_CHART_ID';\nexport function setFullSizeChartId(chartId) {\n  return { type: SET_FULL_SIZE_CHART_ID, chartId };\n}\n\n// Undo history ---------------------------------------------------------------\nexport const SET_MAX_UNDO_HISTORY_EXCEEDED = 'SET_MAX_UNDO_HISTORY_EXCEEDED';\nexport function setMaxUndoHistoryExceeded(maxUndoHistoryExceeded = true) {\n  return {\n    type: SET_MAX_UNDO_HISTORY_EXCEEDED,\n    payload: { maxUndoHistoryExceeded },\n  };\n}\n\nexport function maxUndoHistoryToast() {\n  return (dispatch, getState) => {\n    const { dashboardLayout } = getState();\n    const historyLength = dashboardLayout.past.length;\n\n    return dispatch(\n      addWarningToast(\n        `You have used all ${historyLength} undo slots and will not be able to fully undo subsequent actions. You may save your current state to reset the history.`,\n      ),\n    );\n  };\n}\n"]},"metadata":{},"sourceType":"module"}