{"ast":null,"code":"import _uniqWith from \"lodash/uniqWith\";var _jsxFileName = \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/components/FiltersBadge/index.tsx\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport cx from 'classnames';\nimport Icons from 'src/components/Icons';\nimport { usePrevious } from 'src/common/hooks/usePrevious';\nimport DetailsPanelPopover from './DetailsPanel';\nimport { Pill } from './Styles';\nimport { IndicatorStatus, selectIndicatorsForChart, selectNativeIndicatorsForChart } from './selectors';\nimport { setDirectPathToChild } from '../../actions/dashboardState';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst sortByStatus = (indicators) => {\n  const statuses = [\n  IndicatorStatus.Applied,\n  IndicatorStatus.Unset,\n  IndicatorStatus.Incompatible];\n\n  return indicators.sort((a, b) => statuses.indexOf(a.status) -\n  statuses.indexOf(b.status));\n};\nconst indicatorsInitialState = [];\nexport const FiltersBadge = ({ chartId }) => {var _dashboardInfo$metada, _dashboardInfo$metada4;\n  const dispatch = useDispatch();\n  const datasources = useSelector((state) => state.datasources);\n  const dashboardFilters = useSelector((state) => state.dashboardFilters);\n  const nativeFilters = useSelector((state) => {var _state$nativeFilters;return (_state$nativeFilters = state.nativeFilters) == null ? void 0 : _state$nativeFilters.filters;});\n  const dashboardInfo = useSelector((state) => state.dashboardInfo);\n  const charts = useSelector((state) => state.charts);\n  const present = useSelector((state) => state.dashboardLayout.present);\n  const dataMask = useSelector((state) => state.dataMask);\n  const [nativeIndicators, setNativeIndicators] = useState(indicatorsInitialState);\n  const [dashboardIndicators, setDashboardIndicators] = useState(indicatorsInitialState);\n  const onHighlightFilterSource = useCallback((path) => {\n    dispatch(setDirectPathToChild(path));\n  }, [dispatch]);\n  const chart = charts[chartId];\n  const prevChart = usePrevious(chart);\n  const prevChartStatus = prevChart == null ? void 0 : prevChart.chartStatus;\n  const prevDashboardFilters = usePrevious(dashboardFilters);\n  const prevDatasources = usePrevious(datasources);\n  const showIndicators = (chart == null ? void 0 : chart.chartStatus) && ['rendered', 'success'].includes(chart.chartStatus);\n  useEffect(() => {\n    if (!showIndicators && dashboardIndicators.length > 0) {\n      setDashboardIndicators(indicatorsInitialState);\n    } else\n    if (prevChartStatus !== 'success') {var _chart$queriesRespons, _chart$queriesRespons2, _prevChart$queriesRes, _prevChart$queriesRes2, _chart$queriesRespons3, _chart$queriesRespons4, _prevChart$queriesRes3, _prevChart$queriesRes4;\n      if ((chart == null ? void 0 : (_chart$queriesRespons = chart.queriesResponse) == null ? void 0 : (_chart$queriesRespons2 = _chart$queriesRespons[0]) == null ? void 0 : _chart$queriesRespons2.rejected_filters) !== (\n      prevChart == null ? void 0 : (_prevChart$queriesRes = prevChart.queriesResponse) == null ? void 0 : (_prevChart$queriesRes2 = _prevChart$queriesRes[0]) == null ? void 0 : _prevChart$queriesRes2.rejected_filters) ||\n      (chart == null ? void 0 : (_chart$queriesRespons3 = chart.queriesResponse) == null ? void 0 : (_chart$queriesRespons4 = _chart$queriesRespons3[0]) == null ? void 0 : _chart$queriesRespons4.applied_filters) !== (\n      prevChart == null ? void 0 : (_prevChart$queriesRes3 = prevChart.queriesResponse) == null ? void 0 : (_prevChart$queriesRes4 = _prevChart$queriesRes3[0]) == null ? void 0 : _prevChart$queriesRes4.applied_filters) ||\n      dashboardFilters !== prevDashboardFilters ||\n      datasources !== prevDatasources) {\n        setDashboardIndicators(selectIndicatorsForChart(chartId, dashboardFilters, datasources, chart));\n      }\n    }\n  }, [\n  chart,\n  chartId,\n  dashboardFilters,\n  dashboardIndicators.length,\n  datasources,\n  prevChart == null ? void 0 : prevChart.queriesResponse,\n  prevChartStatus,\n  prevDashboardFilters,\n  prevDatasources,\n  showIndicators]);\n\n  const prevNativeFilters = usePrevious(nativeFilters);\n  const prevDashboardLayout = usePrevious(present);\n  const prevDataMask = usePrevious(dataMask);\n  const prevChartConfig = usePrevious((_dashboardInfo$metada = dashboardInfo.metadata) == null ? void 0 : _dashboardInfo$metada.chart_configuration);\n  useEffect(() => {\n    if (!showIndicators && nativeIndicators.length > 0) {\n      setNativeIndicators(indicatorsInitialState);\n    } else\n    if (prevChartStatus !== 'success') {var _chart$queriesRespons5, _chart$queriesRespons6, _prevChart$queriesRes5, _prevChart$queriesRes6, _chart$queriesRespons7, _chart$queriesRespons8, _prevChart$queriesRes7, _prevChart$queriesRes8, _dashboardInfo$metada2;\n      if ((chart == null ? void 0 : (_chart$queriesRespons5 = chart.queriesResponse) == null ? void 0 : (_chart$queriesRespons6 = _chart$queriesRespons5[0]) == null ? void 0 : _chart$queriesRespons6.rejected_filters) !== (\n      prevChart == null ? void 0 : (_prevChart$queriesRes5 = prevChart.queriesResponse) == null ? void 0 : (_prevChart$queriesRes6 = _prevChart$queriesRes5[0]) == null ? void 0 : _prevChart$queriesRes6.rejected_filters) ||\n      (chart == null ? void 0 : (_chart$queriesRespons7 = chart.queriesResponse) == null ? void 0 : (_chart$queriesRespons8 = _chart$queriesRespons7[0]) == null ? void 0 : _chart$queriesRespons8.applied_filters) !== (\n      prevChart == null ? void 0 : (_prevChart$queriesRes7 = prevChart.queriesResponse) == null ? void 0 : (_prevChart$queriesRes8 = _prevChart$queriesRes7[0]) == null ? void 0 : _prevChart$queriesRes8.applied_filters) ||\n      nativeFilters !== prevNativeFilters ||\n      present !== prevDashboardLayout ||\n      dataMask !== prevDataMask ||\n      prevChartConfig !== ((_dashboardInfo$metada2 = dashboardInfo.metadata) == null ? void 0 : _dashboardInfo$metada2.chart_configuration)) {var _dashboardInfo$metada3;\n        setNativeIndicators(selectNativeIndicatorsForChart(nativeFilters, dataMask, chartId, chart, present, (_dashboardInfo$metada3 = dashboardInfo.metadata) == null ? void 0 : _dashboardInfo$metada3.chart_configuration));\n      }\n    }\n  }, [\n  chart,\n  chartId, (_dashboardInfo$metada4 =\n  dashboardInfo.metadata) == null ? void 0 : _dashboardInfo$metada4.chart_configuration,\n  dataMask,\n  nativeFilters,\n  nativeIndicators.length,\n  present,\n  prevChart == null ? void 0 : prevChart.queriesResponse,\n  prevChartConfig,\n  prevChartStatus,\n  prevDashboardLayout,\n  prevDataMask,\n  prevNativeFilters,\n  showIndicators]);\n\n  const indicators = useMemo(() => _uniqWith(sortByStatus([...dashboardIndicators, ...nativeIndicators]), (ind1, ind2) => ind1.column === ind2.column &&\n  ind1.name === ind2.name && (\n  ind1.status !== IndicatorStatus.Applied ||\n  ind2.status !== IndicatorStatus.Applied)), [dashboardIndicators, nativeIndicators]);\n  const appliedCrossFilterIndicators = useMemo(() => indicators.filter((indicator) => indicator.status === IndicatorStatus.CrossFilterApplied), [indicators]);\n  const appliedIndicators = useMemo(() => indicators.filter((indicator) => indicator.status === IndicatorStatus.Applied), [indicators]);\n  const unsetIndicators = useMemo(() => indicators.filter((indicator) => indicator.status === IndicatorStatus.Unset), [indicators]);\n  const incompatibleIndicators = useMemo(() => indicators.filter((indicator) => indicator.status === IndicatorStatus.Incompatible), [indicators]);\n  if (!appliedCrossFilterIndicators.length &&\n  !appliedIndicators.length &&\n  !incompatibleIndicators.length &&\n  !unsetIndicators.length) {\n    return null;\n  }\n  const isInactive = !appliedCrossFilterIndicators.length &&\n  !appliedIndicators.length &&\n  !incompatibleIndicators.length;\n  return ___EmotionJSX(DetailsPanelPopover, { appliedCrossFilterIndicators: appliedCrossFilterIndicators, appliedIndicators: appliedIndicators, unsetIndicators: unsetIndicators, incompatibleIndicators: incompatibleIndicators, onHighlightFilterSource: onHighlightFilterSource, __self: this, __source: { fileName: _jsxFileName, lineNumber: 138, columnNumber: 13 } },\n  ___EmotionJSX(Pill, { className: cx('filter-counts', !!incompatibleIndicators.length && 'has-incompatible-filters', !!appliedCrossFilterIndicators.length && 'has-cross-filters', isInactive && 'filters-inactive'), __self: this, __source: { fileName: _jsxFileName, lineNumber: 139, columnNumber: 7 } },\n  ___EmotionJSX(Icons.Filter, { iconSize: \"m\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 140, columnNumber: 9 } }),\n  !isInactive && ___EmotionJSX(\"span\", { \"data-test\": \"applied-filter-count\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 141, columnNumber: 26 } },\n  appliedIndicators.length + appliedCrossFilterIndicators.length),\n\n  incompatibleIndicators.length ? ___EmotionJSX(React.Fragment, null,\n  ' ',\n  ___EmotionJSX(Icons.AlertSolid, { __self: this, __source: { fileName: _jsxFileName, lineNumber: 146, columnNumber: 13 } }),\n  ___EmotionJSX(\"span\", { \"data-test\": \"incompatible-filter-count\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 147, columnNumber: 13 } },\n  incompatibleIndicators.length)) :\n\n  null));\n\n\n};__signature__(FiltersBadge, \"useDispatch{dispatch}\\nuseSelector{datasources}\\nuseSelector{dashboardFilters}\\nuseSelector{nativeFilters}\\nuseSelector{dashboardInfo}\\nuseSelector{charts}\\nuseSelector{present}\\nuseSelector{dataMask}\\nuseState{[nativeIndicators, setNativeIndicators](indicatorsInitialState)}\\nuseState{[dashboardIndicators, setDashboardIndicators](indicatorsInitialState)}\\nuseCallback{onHighlightFilterSource}\\nusePrevious{prevChart}\\nusePrevious{prevDashboardFilters}\\nusePrevious{prevDatasources}\\nuseEffect{}\\nusePrevious{prevNativeFilters}\\nusePrevious{prevDashboardLayout}\\nusePrevious{prevDataMask}\\nusePrevious{prevChartConfig}\\nuseEffect{}\\nuseMemo{indicators}\\nuseMemo{appliedCrossFilterIndicators}\\nuseMemo{appliedIndicators}\\nuseMemo{unsetIndicators}\\nuseMemo{incompatibleIndicators}\", () => [useDispatch, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, usePrevious, usePrevious, usePrevious, usePrevious, usePrevious, usePrevious, usePrevious]);const _default = /*#__PURE__*/\nReact.memo(FiltersBadge);export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(sortByStatus, \"sortByStatus\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/components/FiltersBadge/index.tsx\");reactHotLoader.register(indicatorsInitialState, \"indicatorsInitialState\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/components/FiltersBadge/index.tsx\");reactHotLoader.register(FiltersBadge, \"FiltersBadge\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/components/FiltersBadge/index.tsx\");reactHotLoader.register(_default, \"default\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/components/FiltersBadge/index.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/components/FiltersBadge/index.tsx"],"names":[],"mappings":"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","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { uniqWith } from 'lodash';\nimport cx from 'classnames';\nimport Icons from 'src/components/Icons';\nimport { usePrevious } from 'src/common/hooks/usePrevious';\nimport { DataMaskStateWithId } from 'src/dataMask/types';\nimport DetailsPanelPopover from './DetailsPanel';\nimport { Pill } from './Styles';\nimport {\n  Indicator,\n  IndicatorStatus,\n  selectIndicatorsForChart,\n  selectNativeIndicatorsForChart,\n} from './selectors';\nimport { setDirectPathToChild } from '../../actions/dashboardState';\nimport {\n  ChartsState,\n  DashboardInfo,\n  DashboardLayout,\n  RootState,\n} from '../../types';\nimport { Filters } from '../../reducers/types';\n\nexport interface FiltersBadgeProps {\n  chartId: number;\n}\n\nconst sortByStatus = (indicators: Indicator[]): Indicator[] => {\n  const statuses = [\n    IndicatorStatus.Applied,\n    IndicatorStatus.Unset,\n    IndicatorStatus.Incompatible,\n  ];\n  return indicators.sort(\n    (a, b) =>\n      statuses.indexOf(a.status as IndicatorStatus) -\n      statuses.indexOf(b.status as IndicatorStatus),\n  );\n};\n\nconst indicatorsInitialState: Indicator[] = [];\n\nexport const FiltersBadge = ({ chartId }: FiltersBadgeProps) => {\n  const dispatch = useDispatch();\n  const datasources = useSelector<RootState, any>(state => state.datasources);\n  const dashboardFilters = useSelector<RootState, any>(\n    state => state.dashboardFilters,\n  );\n  const nativeFilters = useSelector<RootState, Filters>(\n    state => state.nativeFilters?.filters,\n  );\n  const dashboardInfo = useSelector<RootState, DashboardInfo>(\n    state => state.dashboardInfo,\n  );\n  const charts = useSelector<RootState, ChartsState>(state => state.charts);\n  const present = useSelector<RootState, DashboardLayout>(\n    state => state.dashboardLayout.present,\n  );\n  const dataMask = useSelector<RootState, DataMaskStateWithId>(\n    state => state.dataMask,\n  );\n\n  const [nativeIndicators, setNativeIndicators] = useState<Indicator[]>(\n    indicatorsInitialState,\n  );\n  const [dashboardIndicators, setDashboardIndicators] = useState<Indicator[]>(\n    indicatorsInitialState,\n  );\n\n  const onHighlightFilterSource = useCallback(\n    (path: string[]) => {\n      dispatch(setDirectPathToChild(path));\n    },\n    [dispatch],\n  );\n\n  const chart = charts[chartId];\n  const prevChart = usePrevious(chart);\n  const prevChartStatus = prevChart?.chartStatus;\n  const prevDashboardFilters = usePrevious(dashboardFilters);\n  const prevDatasources = usePrevious(datasources);\n  const showIndicators =\n    chart?.chartStatus && ['rendered', 'success'].includes(chart.chartStatus);\n\n  useEffect(() => {\n    if (!showIndicators && dashboardIndicators.length > 0) {\n      setDashboardIndicators(indicatorsInitialState);\n    } else if (prevChartStatus !== 'success') {\n      if (\n        chart?.queriesResponse?.[0]?.rejected_filters !==\n          prevChart?.queriesResponse?.[0]?.rejected_filters ||\n        chart?.queriesResponse?.[0]?.applied_filters !==\n          prevChart?.queriesResponse?.[0]?.applied_filters ||\n        dashboardFilters !== prevDashboardFilters ||\n        datasources !== prevDatasources\n      ) {\n        setDashboardIndicators(\n          selectIndicatorsForChart(\n            chartId,\n            dashboardFilters,\n            datasources,\n            chart,\n          ),\n        );\n      }\n    }\n  }, [\n    chart,\n    chartId,\n    dashboardFilters,\n    dashboardIndicators.length,\n    datasources,\n    prevChart?.queriesResponse,\n    prevChartStatus,\n    prevDashboardFilters,\n    prevDatasources,\n    showIndicators,\n  ]);\n\n  const prevNativeFilters = usePrevious(nativeFilters);\n  const prevDashboardLayout = usePrevious(present);\n  const prevDataMask = usePrevious(dataMask);\n  const prevChartConfig = usePrevious(\n    dashboardInfo.metadata?.chart_configuration,\n  );\n  useEffect(() => {\n    if (!showIndicators && nativeIndicators.length > 0) {\n      setNativeIndicators(indicatorsInitialState);\n    } else if (prevChartStatus !== 'success') {\n      if (\n        chart?.queriesResponse?.[0]?.rejected_filters !==\n          prevChart?.queriesResponse?.[0]?.rejected_filters ||\n        chart?.queriesResponse?.[0]?.applied_filters !==\n          prevChart?.queriesResponse?.[0]?.applied_filters ||\n        nativeFilters !== prevNativeFilters ||\n        present !== prevDashboardLayout ||\n        dataMask !== prevDataMask ||\n        prevChartConfig !== dashboardInfo.metadata?.chart_configuration\n      ) {\n        setNativeIndicators(\n          selectNativeIndicatorsForChart(\n            nativeFilters,\n            dataMask,\n            chartId,\n            chart,\n            present,\n            dashboardInfo.metadata?.chart_configuration,\n          ),\n        );\n      }\n    }\n  }, [\n    chart,\n    chartId,\n    dashboardInfo.metadata?.chart_configuration,\n    dataMask,\n    nativeFilters,\n    nativeIndicators.length,\n    present,\n    prevChart?.queriesResponse,\n    prevChartConfig,\n    prevChartStatus,\n    prevDashboardLayout,\n    prevDataMask,\n    prevNativeFilters,\n    showIndicators,\n  ]);\n\n  const indicators = useMemo(\n    () =>\n      uniqWith(\n        sortByStatus([...dashboardIndicators, ...nativeIndicators]),\n        (ind1, ind2) =>\n          ind1.column === ind2.column &&\n          ind1.name === ind2.name &&\n          (ind1.status !== IndicatorStatus.Applied ||\n            ind2.status !== IndicatorStatus.Applied),\n      ),\n    [dashboardIndicators, nativeIndicators],\n  );\n\n  const appliedCrossFilterIndicators = useMemo(\n    () =>\n      indicators.filter(\n        indicator => indicator.status === IndicatorStatus.CrossFilterApplied,\n      ),\n    [indicators],\n  );\n  const appliedIndicators = useMemo(\n    () =>\n      indicators.filter(\n        indicator => indicator.status === IndicatorStatus.Applied,\n      ),\n    [indicators],\n  );\n  const unsetIndicators = useMemo(\n    () =>\n      indicators.filter(\n        indicator => indicator.status === IndicatorStatus.Unset,\n      ),\n    [indicators],\n  );\n  const incompatibleIndicators = useMemo(\n    () =>\n      indicators.filter(\n        indicator => indicator.status === IndicatorStatus.Incompatible,\n      ),\n    [indicators],\n  );\n\n  if (\n    !appliedCrossFilterIndicators.length &&\n    !appliedIndicators.length &&\n    !incompatibleIndicators.length &&\n    !unsetIndicators.length\n  ) {\n    return null;\n  }\n\n  const isInactive =\n    !appliedCrossFilterIndicators.length &&\n    !appliedIndicators.length &&\n    !incompatibleIndicators.length;\n\n  return (\n    <DetailsPanelPopover\n      appliedCrossFilterIndicators={appliedCrossFilterIndicators}\n      appliedIndicators={appliedIndicators}\n      unsetIndicators={unsetIndicators}\n      incompatibleIndicators={incompatibleIndicators}\n      onHighlightFilterSource={onHighlightFilterSource}\n    >\n      <Pill\n        className={cx(\n          'filter-counts',\n          !!incompatibleIndicators.length && 'has-incompatible-filters',\n          !!appliedCrossFilterIndicators.length && 'has-cross-filters',\n          isInactive && 'filters-inactive',\n        )}\n      >\n        <Icons.Filter iconSize=\"m\" />\n        {!isInactive && (\n          <span data-test=\"applied-filter-count\">\n            {appliedIndicators.length + appliedCrossFilterIndicators.length}\n          </span>\n        )}\n        {incompatibleIndicators.length ? (\n          <>\n            {' '}\n            <Icons.AlertSolid />\n            <span data-test=\"incompatible-filter-count\">\n              {incompatibleIndicators.length}\n            </span>\n          </>\n        ) : null}\n      </Pill>\n    </DetailsPanelPopover>\n  );\n};\n\nexport default React.memo(FiltersBadge);\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}