{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;};import { utcFormat, timeFormat } from 'd3-time-format';\nimport { utcUtils, localTimeUtils } from '../utils/d3Time';\nimport createTimeFormatter from '../createTimeFormatter';\nexport default function createMultiTimeFormatter({\n  id,\n  label,\n  description,\n  formats = {},\n  useLocalTime = false })\n{\n  const {\n    millisecond = '.%L',\n    second = ':%S',\n    minute = '%I:%M',\n    hour = '%I %p',\n    day = '%a %d',\n    week = '%b %d',\n    month = '%B',\n    year = '%Y' } =\n  formats;\n  const format = useLocalTime ? timeFormat : utcFormat;\n  const formatMillisecond = format(millisecond);\n  const formatSecond = format(second);\n  const formatMinute = format(minute);\n  const formatHour = format(hour);\n  const formatDay = format(day);\n  const formatFirstDayOfWeek = format(week);\n  const formatMonth = format(month);\n  const formatYear = format(year);\n  const {\n    hasMillisecond,\n    hasSecond,\n    hasMinute,\n    hasHour,\n    isNotFirstDayOfMonth,\n    isNotFirstDayOfWeek,\n    isNotFirstMonth } =\n  useLocalTime ? localTimeUtils : utcUtils;\n\n  function multiFormatFunc(date) {\n    if (hasMillisecond(date)) {\n      return formatMillisecond;\n    }\n\n    if (hasSecond(date)) {\n      return formatSecond;\n    }\n\n    if (hasMinute(date)) {\n      return formatMinute;\n    }\n\n    if (hasHour(date)) {\n      return formatHour;\n    }\n\n    if (isNotFirstDayOfMonth(date)) {\n      return isNotFirstDayOfWeek(date) ? formatDay : formatFirstDayOfWeek;\n    }\n\n    if (isNotFirstMonth(date)) {\n      return formatMonth;\n    }\n\n    return formatYear;\n  }\n\n  return createTimeFormatter((date) => multiFormatFunc(date)(date), {\n    id,\n    label,\n    description,\n    useLocalTime });\n\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(createMultiTimeFormatter, \"createMultiTimeFormatter\", \"/home/ubuntu/my_plugin/superset/superset-frontend/node_modules/@encodable/format/esm/time/factories/createMultiTimeFormatter.js\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/home/ubuntu/my_plugin/superset/superset-frontend/node_modules/@encodable/format/esm/time/factories/createMultiTimeFormatter.js"],"names":["utcFormat","timeFormat","utcUtils","localTimeUtils","createTimeFormatter","createMultiTimeFormatter","id","label","description","formats","useLocalTime","millisecond","second","minute","hour","day","week","month","year","format","formatMillisecond","formatSecond","formatMinute","formatHour","formatDay","formatFirstDayOfWeek","formatMonth","formatYear","hasMillisecond","hasSecond","hasMinute","hasHour","isNotFirstDayOfMonth","isNotFirstDayOfWeek","isNotFirstMonth","multiFormatFunc","date"],"mappings":"uSAAA,SAASA,SAAT,EAAoBC,UAApB,QAAsC,gBAAtC;AACA,SAASC,QAAT,EAAmBC,cAAnB,QAAyC,iBAAzC;AACA,OAAOC,mBAAP,MAAgC,wBAAhC;AACA,eAAe,SAASC,wBAAT,CAAkC;AAC/CC,EAAAA,EAD+C;AAE/CC,EAAAA,KAF+C;AAG/CC,EAAAA,WAH+C;AAI/CC,EAAAA,OAAO,GAAG,EAJqC;AAK/CC,EAAAA,YAAY,GAAG,KALgC,EAAlC;AAMZ;AACD,QAAM;AACJC,IAAAA,WAAW,GAAG,KADV;AAEJC,IAAAA,MAAM,GAAG,KAFL;AAGJC,IAAAA,MAAM,GAAG,OAHL;AAIJC,IAAAA,IAAI,GAAG,OAJH;AAKJC,IAAAA,GAAG,GAAG,OALF;AAMJC,IAAAA,IAAI,GAAG,OANH;AAOJC,IAAAA,KAAK,GAAG,IAPJ;AAQJC,IAAAA,IAAI,GAAG,IARH;AASFT,EAAAA,OATJ;AAUA,QAAMU,MAAM,GAAGT,YAAY,GAAGT,UAAH,GAAgBD,SAA3C;AACA,QAAMoB,iBAAiB,GAAGD,MAAM,CAACR,WAAD,CAAhC;AACA,QAAMU,YAAY,GAAGF,MAAM,CAACP,MAAD,CAA3B;AACA,QAAMU,YAAY,GAAGH,MAAM,CAACN,MAAD,CAA3B;AACA,QAAMU,UAAU,GAAGJ,MAAM,CAACL,IAAD,CAAzB;AACA,QAAMU,SAAS,GAAGL,MAAM,CAACJ,GAAD,CAAxB;AACA,QAAMU,oBAAoB,GAAGN,MAAM,CAACH,IAAD,CAAnC;AACA,QAAMU,WAAW,GAAGP,MAAM,CAACF,KAAD,CAA1B;AACA,QAAMU,UAAU,GAAGR,MAAM,CAACD,IAAD,CAAzB;AACA,QAAM;AACJU,IAAAA,cADI;AAEJC,IAAAA,SAFI;AAGJC,IAAAA,SAHI;AAIJC,IAAAA,OAJI;AAKJC,IAAAA,oBALI;AAMJC,IAAAA,mBANI;AAOJC,IAAAA,eAPI;AAQFxB,EAAAA,YAAY,GAAGP,cAAH,GAAoBD,QARpC;;AAUA,WAASiC,eAAT,CAAyBC,IAAzB,EAA+B;AAC7B,QAAIR,cAAc,CAACQ,IAAD,CAAlB,EAA0B;AACxB,aAAOhB,iBAAP;AACD;;AAED,QAAIS,SAAS,CAACO,IAAD,CAAb,EAAqB;AACnB,aAAOf,YAAP;AACD;;AAED,QAAIS,SAAS,CAACM,IAAD,CAAb,EAAqB;AACnB,aAAOd,YAAP;AACD;;AAED,QAAIS,OAAO,CAACK,IAAD,CAAX,EAAmB;AACjB,aAAOb,UAAP;AACD;;AAED,QAAIS,oBAAoB,CAACI,IAAD,CAAxB,EAAgC;AAC9B,aAAOH,mBAAmB,CAACG,IAAD,CAAnB,GAA4BZ,SAA5B,GAAwCC,oBAA/C;AACD;;AAED,QAAIS,eAAe,CAACE,IAAD,CAAnB,EAA2B;AACzB,aAAOV,WAAP;AACD;;AAED,WAAOC,UAAP;AACD;;AAED,SAAOvB,mBAAmB,CAAC,CAAAgC,IAAI,KAAID,eAAe,CAACC,IAAD,CAAf,CAAsBA,IAAtB,CAAT,EAAsC;AAC9D9B,IAAAA,EAD8D;AAE9DC,IAAAA,KAF8D;AAG9DC,IAAAA,WAH8D;AAI9DE,IAAAA,YAJ8D,EAAtC,CAA1B;;AAMD,C,iLAtEuBL,wB","sourcesContent":["import { utcFormat, timeFormat } from 'd3-time-format';\nimport { utcUtils, localTimeUtils } from '../utils/d3Time';\nimport createTimeFormatter from '../createTimeFormatter';\nexport default function createMultiTimeFormatter({\n  id,\n  label,\n  description,\n  formats = {},\n  useLocalTime = false\n}) {\n  const {\n    millisecond = '.%L',\n    second = ':%S',\n    minute = '%I:%M',\n    hour = '%I %p',\n    day = '%a %d',\n    week = '%b %d',\n    month = '%B',\n    year = '%Y'\n  } = formats;\n  const format = useLocalTime ? timeFormat : utcFormat;\n  const formatMillisecond = format(millisecond);\n  const formatSecond = format(second);\n  const formatMinute = format(minute);\n  const formatHour = format(hour);\n  const formatDay = format(day);\n  const formatFirstDayOfWeek = format(week);\n  const formatMonth = format(month);\n  const formatYear = format(year);\n  const {\n    hasMillisecond,\n    hasSecond,\n    hasMinute,\n    hasHour,\n    isNotFirstDayOfMonth,\n    isNotFirstDayOfWeek,\n    isNotFirstMonth\n  } = useLocalTime ? localTimeUtils : utcUtils;\n\n  function multiFormatFunc(date) {\n    if (hasMillisecond(date)) {\n      return formatMillisecond;\n    }\n\n    if (hasSecond(date)) {\n      return formatSecond;\n    }\n\n    if (hasMinute(date)) {\n      return formatMinute;\n    }\n\n    if (hasHour(date)) {\n      return formatHour;\n    }\n\n    if (isNotFirstDayOfMonth(date)) {\n      return isNotFirstDayOfWeek(date) ? formatDay : formatFirstDayOfWeek;\n    }\n\n    if (isNotFirstMonth(date)) {\n      return formatMonth;\n    }\n\n    return formatYear;\n  }\n\n  return createTimeFormatter(date => multiFormatFunc(date)(date), {\n    id,\n    label,\n    description,\n    useLocalTime\n  });\n}"]},"metadata":{},"sourceType":"module"}