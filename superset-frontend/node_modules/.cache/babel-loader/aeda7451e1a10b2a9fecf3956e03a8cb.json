{"ast":null,"code":"import _extends from \"@babel/runtime-corejs3/helpers/extends\";import _isEqual from \"lodash/isEqual\";var _jsxFileName = \"/home/ubuntu/my_plugin/superset/superset-frontend/src/explore/components/controls/DndColumnSelectControl/DndMetricSelect.tsx\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with work for additional information\n * regarding copyright ownership.  The ASF licenses file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { ensureIsArray, FeatureFlag, GenericDataType, isFeatureEnabled, tn } from '@superset-ui/core';\n\nimport { usePrevious } from 'src/common/hooks/usePrevious';\nimport AdhocMetric from 'src/explore/components/controls/MetricControl/AdhocMetric';\nimport AdhocMetricPopoverTrigger from 'src/explore/components/controls/MetricControl/AdhocMetricPopoverTrigger';\nimport MetricDefinitionValue from 'src/explore/components/controls/MetricControl/MetricDefinitionValue';\nimport { isDatasourcePanelDndItem } from 'src/explore/components/DatasourcePanel/types';\nimport { DndItemType } from 'src/explore/components/DndItemType';\nimport DndSelectLabel from 'src/explore/components/controls/DndColumnSelectControl/DndSelectLabel';\nimport { AGGREGATES } from 'src/explore/constants';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst EMPTY_OBJECT = {};\nconst DND_ACCEPTED_TYPES = [DndItemType.Column, DndItemType.Metric];\nconst isDictionaryForAdhocMetric = (value) => value && !(value instanceof AdhocMetric) && value.expressionType;\nconst coerceAdhocMetrics = (value) => {\n  if (!value) {\n    return [];\n  }\n  if (!Array.isArray(value)) {\n    if (isDictionaryForAdhocMetric(value)) {\n      return [new AdhocMetric(value)];\n    }\n    return [value];\n  }\n  return value.map((val) => {\n    if (isDictionaryForAdhocMetric(val)) {\n      return new AdhocMetric(val);\n    }\n    return val;\n  });\n};\nconst getOptionsForSavedMetrics = (savedMetrics, currentMetricValues, currentMetric) => {var _savedMetrics$filter;return (_savedMetrics$filter = savedMetrics == null ? void 0 : savedMetrics.filter((savedMetric) => {var _savedMetric$metric_n;return Array.isArray(currentMetricValues) ?\n    !currentMetricValues.includes((_savedMetric$metric_n = savedMetric.metric_name) != null ? _savedMetric$metric_n : '') ||\n    savedMetric.metric_name === currentMetric :\n    savedMetric;})) != null ? _savedMetrics$filter : [];};\n// TODO: use typeguards to distinguish saved metrics from adhoc metrics\nconst getMetricsMatchingCurrentDataset = (values, columns, savedMetrics, prevColumns, prevSavedMetrics) => {\n  const areSavedMetricsEqual = !prevSavedMetrics || _isEqual(prevSavedMetrics, savedMetrics);\n  const areColsEqual = !prevColumns || _isEqual(prevColumns, columns);\n  if (areColsEqual && areSavedMetricsEqual) {\n    return values;\n  }\n  return values.reduce((acc, metric) => {\n    if ((typeof metric === 'string' || metric.metric_name) && (\n    areSavedMetricsEqual ||\n    savedMetrics != null && savedMetrics.some((savedMetric) => savedMetric.metric_name === metric ||\n    savedMetric.metric_name === metric.metric_name))) {\n      acc.push(metric);\n      return acc;\n    }\n    if (!areColsEqual) {\n      const newCol = columns == null ? void 0 : columns.find((column) => {var _metric$column;return ((_metric$column = metric.column) == null ? void 0 : _metric$column.column_name) === column.column_name;});\n      if (newCol) {\n        acc.push({ ...metric, column: newCol });\n      }\n    } else\n    {\n      acc.push(metric);\n    }\n    return acc;\n  }, []);\n};\nexport const DndMetricSelect = (props) => {\n  const { onChange, multi, columns, savedMetrics } = props;\n  const handleChange = useCallback((opts) => {\n    // if clear out options\n    if (opts === null) {\n      onChange(null);\n      return;\n    }\n    const transformedOpts = ensureIsArray(opts);\n    const optionValues = transformedOpts.\n    map((option) => {\n      // pre-defined metric\n      if (option.metric_name) {\n        return option.metric_name;\n      }\n      return option;\n    }).\n    filter((option) => option);\n    onChange(multi ? optionValues : optionValues[0]);\n  }, [multi, onChange]);\n  const [value, setValue] = useState(coerceAdhocMetrics(props.value));\n  const [droppedItem, setDroppedItem] = useState({});\n  const [newMetricPopoverVisible, setNewMetricPopoverVisible] = useState(false);\n  const prevColumns = usePrevious(columns);\n  const prevSavedMetrics = usePrevious(savedMetrics);\n  useEffect(() => {\n    setValue(coerceAdhocMetrics(props.value));\n  }, [JSON.stringify(props.value)]);\n  useEffect(() => {\n    // Remove selected custom metrics that do not exist in the dataset anymore\n    // Remove selected adhoc metrics that use columns which do not exist in the dataset anymore\n    // Sync adhoc metrics with dataset columns when they are modified by the user\n    if (!props.value) {\n      return;\n    }\n    const propsValues = ensureIsArray(props.value);\n    const matchingMetrics = getMetricsMatchingCurrentDataset(propsValues, columns, savedMetrics, prevColumns, prevSavedMetrics);\n    if (!_isEqual(propsValues, matchingMetrics)) {\n      handleChange(matchingMetrics);\n    }\n  }, [columns, savedMetrics, handleChange]);\n  const canDrop = useCallback((item) => {\n    const isMetricAlreadyInValues = item.type === 'metric' ? value.includes(item.value.metric_name) : false;\n    return !isMetricAlreadyInValues;\n  }, [value]);\n  const onNewMetric = useCallback((newMetric) => {\n    const newValue = props.multi ? [...value, newMetric] : [newMetric];\n    setValue(newValue);\n    handleChange(newValue);\n  }, [handleChange, props.multi, value]);\n  const onMetricEdit = useCallback((changedMetric, oldMetric) => {\n    if (oldMetric instanceof AdhocMetric && oldMetric.equals(changedMetric)) {\n      return;\n    }\n    const newValue = value.map((value) => {\n      if (\n      // compare saved metrics\n      'metric_name' in oldMetric && value === oldMetric.metric_name ||\n      // compare adhoc metrics\n      typeof value.optionName !== 'undefined' ?\n      value.optionName ===\n      oldMetric.optionName :\n      false) {\n        return changedMetric;\n      }\n      return value;\n    });\n    setValue(newValue);\n    handleChange(newValue);\n  }, [handleChange, value]);\n  const onRemoveMetric = useCallback((index) => {\n    if (!Array.isArray(value)) {\n      return;\n    }\n    const valuesCopy = [...value];\n    valuesCopy.splice(index, 1);\n    setValue(valuesCopy);\n    onChange(valuesCopy);\n  }, [onChange, value]);\n  const moveLabel = useCallback((dragIndex, hoverIndex) => {\n    const newValues = [...value];\n    [newValues[hoverIndex], newValues[dragIndex]] = [\n    newValues[dragIndex],\n    newValues[hoverIndex]];\n\n    setValue(newValues);\n  }, [value]);\n  const newSavedMetricOptions = useMemo(() => getOptionsForSavedMetrics(props.savedMetrics, props.value), [props.savedMetrics, props.value]);\n  const getSavedMetricOptionsForMetric = useCallback((index) => {var _props$value;return getOptionsForSavedMetrics(props.savedMetrics, props.value, (_props$value = props.value) == null ? void 0 : _props$value[index]);}, [props.savedMetrics, props.value]);\n  const handleDropLabel = useCallback(() => onChange(multi ? value : value[0]), [multi, onChange, value]);\n  const valueRenderer = useCallback((option, index) => ___EmotionJSX(MetricDefinitionValue, { key: index, index: index, option: option, onMetricEdit: onMetricEdit, onRemoveMetric: onRemoveMetric, columns: props.columns, savedMetrics: props.savedMetrics, savedMetricsOptions: getSavedMetricOptionsForMetric(index), datasourceType: props.datasourceType, onMoveLabel: moveLabel, onDropLabel: handleDropLabel, type: `${DndItemType.AdhocMetricOption}_${props.name}_${props.label}`, multi: multi, __self: this, __source: { fileName: _jsxFileName, lineNumber: 171, columnNumber: 59 } }), [\n  getSavedMetricOptionsForMetric,\n  handleDropLabel,\n  moveLabel,\n  multi,\n  onMetricEdit,\n  onRemoveMetric,\n  props.columns,\n  props.datasourceType,\n  props.label,\n  props.name,\n  props.savedMetrics]);\n\n  const valuesRenderer = useCallback(() => value.map((value, index) => valueRenderer(value, index)), [value, valueRenderer]);\n  const togglePopover = useCallback((visible) => {\n    setNewMetricPopoverVisible(visible);\n  }, []);\n  const closePopover = useCallback(() => {\n    togglePopover(false);\n  }, [togglePopover]);\n  const handleDrop = useCallback((item) => {\n    if (item.type === DndItemType.Metric) {\n      onNewMetric(item.value);\n    }\n    if (item.type === DndItemType.Column) {\n      setDroppedItem(item);\n      togglePopover(true);\n    }\n  }, [onNewMetric, togglePopover]);\n  const handleClickGhostButton = useCallback(() => {\n    setDroppedItem({});\n    togglePopover(true);\n  }, [togglePopover]);\n  const adhocMetric = useMemo(() => {\n    if (isDatasourcePanelDndItem(droppedItem) &&\n    droppedItem.type === DndItemType.Column) {\n      const itemValue = droppedItem.value;\n      const config = {\n        column: itemValue };\n\n      if (isFeatureEnabled(FeatureFlag.UX_BETA)) {\n        if (itemValue.type_generic === GenericDataType.NUMERIC) {\n          config.aggregate = AGGREGATES.SUM;\n        } else\n        if (itemValue.type_generic === GenericDataType.STRING ||\n        itemValue.type_generic === GenericDataType.BOOLEAN ||\n        itemValue.type_generic === GenericDataType.TEMPORAL) {\n          config.aggregate = AGGREGATES.COUNT_DISTINCT;\n        }\n      }\n      return new AdhocMetric(config);\n    }\n    return new AdhocMetric({ isNew: true });\n  }, [droppedItem]);\n  const ghostButtonText = isFeatureEnabled(FeatureFlag.ENABLE_DND_WITH_CLICK_UX) ?\n  tn('Drop a column/metric here or click', 'Drop columns/metrics here or click', multi ? 2 : 1) :\n  tn('Drop column or metric here', 'Drop columns or metrics here', multi ? 2 : 1);\n  return ___EmotionJSX(\"div\", { className: \"metrics-select\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 228, columnNumber: 13 } },\n  ___EmotionJSX(DndSelectLabel, _extends({ onDrop: handleDrop, canDrop: canDrop, valuesRenderer: valuesRenderer, accept: DND_ACCEPTED_TYPES, ghostButtonText: ghostButtonText, displayGhostButton: multi || value.length === 0, onClickGhostButton: isFeatureEnabled(FeatureFlag.ENABLE_DND_WITH_CLICK_UX) ?\n    handleClickGhostButton :\n    undefined }, props, { __self: this, __source: { fileName: _jsxFileName, lineNumber: 229, columnNumber: 7 } })),\n  ___EmotionJSX(AdhocMetricPopoverTrigger, { adhocMetric: adhocMetric, onMetricEdit: onNewMetric, columns: props.columns, savedMetricsOptions: newSavedMetricOptions, savedMetric: EMPTY_OBJECT, datasourceType: props.datasourceType, isControlledComponent: true, visible: newMetricPopoverVisible, togglePopover: togglePopover, closePopover: closePopover, __self: this, __source: { fileName: _jsxFileName, lineNumber: 232, columnNumber: 7 } },\n  ___EmotionJSX(\"div\", { __self: this, __source: { fileName: _jsxFileName, lineNumber: 233, columnNumber: 9 } })));\n\n\n};__signature__(DndMetricSelect, \"useCallback{handleChange}\\nuseState{[value, setValue](coerceAdhocMetrics(props.value))}\\nuseState{[droppedItem, setDroppedItem]({})}\\nuseState{[newMetricPopoverVisible, setNewMetricPopoverVisible](false)}\\nusePrevious{prevColumns}\\nusePrevious{prevSavedMetrics}\\nuseEffect{}\\nuseEffect{}\\nuseCallback{canDrop}\\nuseCallback{onNewMetric}\\nuseCallback{onMetricEdit}\\nuseCallback{onRemoveMetric}\\nuseCallback{moveLabel}\\nuseMemo{newSavedMetricOptions}\\nuseCallback{getSavedMetricOptionsForMetric}\\nuseCallback{handleDropLabel}\\nuseCallback{valueRenderer}\\nuseCallback{valuesRenderer}\\nuseCallback{togglePopover}\\nuseCallback{closePopover}\\nuseCallback{handleDrop}\\nuseCallback{handleClickGhostButton}\\nuseMemo{adhocMetric}\", () => [usePrevious, usePrevious]);;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(EMPTY_OBJECT, \"EMPTY_OBJECT\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/explore/components/controls/DndColumnSelectControl/DndMetricSelect.tsx\");reactHotLoader.register(DND_ACCEPTED_TYPES, \"DND_ACCEPTED_TYPES\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/explore/components/controls/DndColumnSelectControl/DndMetricSelect.tsx\");reactHotLoader.register(isDictionaryForAdhocMetric, \"isDictionaryForAdhocMetric\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/explore/components/controls/DndColumnSelectControl/DndMetricSelect.tsx\");reactHotLoader.register(coerceAdhocMetrics, \"coerceAdhocMetrics\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/explore/components/controls/DndColumnSelectControl/DndMetricSelect.tsx\");reactHotLoader.register(getOptionsForSavedMetrics, \"getOptionsForSavedMetrics\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/explore/components/controls/DndColumnSelectControl/DndMetricSelect.tsx\");reactHotLoader.register(getMetricsMatchingCurrentDataset, \"getMetricsMatchingCurrentDataset\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/explore/components/controls/DndColumnSelectControl/DndMetricSelect.tsx\");reactHotLoader.register(DndMetricSelect, \"DndMetricSelect\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/explore/components/controls/DndColumnSelectControl/DndMetricSelect.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/home/ubuntu/my_plugin/superset/superset-frontend/src/explore/components/controls/DndColumnSelectControl/DndMetricSelect.tsx"],"names":[],"mappings":"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","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with work for additional information\n * regarding copyright ownership.  The ASF licenses file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport {\n  ensureIsArray,\n  FeatureFlag,\n  GenericDataType,\n  isFeatureEnabled,\n  Metric,\n  QueryFormMetric,\n  tn,\n} from '@superset-ui/core';\nimport { ColumnMeta } from '@superset-ui/chart-controls';\nimport { isEqual } from 'lodash';\nimport { usePrevious } from 'src/common/hooks/usePrevious';\nimport AdhocMetric from 'src/explore/components/controls/MetricControl/AdhocMetric';\nimport AdhocMetricPopoverTrigger from 'src/explore/components/controls/MetricControl/AdhocMetricPopoverTrigger';\nimport MetricDefinitionValue from 'src/explore/components/controls/MetricControl/MetricDefinitionValue';\nimport {\n  DatasourcePanelDndItem,\n  isDatasourcePanelDndItem,\n} from 'src/explore/components/DatasourcePanel/types';\nimport { DndItemType } from 'src/explore/components/DndItemType';\nimport DndSelectLabel from 'src/explore/components/controls/DndColumnSelectControl/DndSelectLabel';\nimport { savedMetricType } from 'src/explore/components/controls/MetricControl/types';\nimport { AGGREGATES } from 'src/explore/constants';\n\nconst EMPTY_OBJECT = {};\nconst DND_ACCEPTED_TYPES = [DndItemType.Column, DndItemType.Metric];\n\nconst isDictionaryForAdhocMetric = (value: any) =>\n  value && !(value instanceof AdhocMetric) && value.expressionType;\n\nconst coerceAdhocMetrics = (value: any) => {\n  if (!value) {\n    return [];\n  }\n  if (!Array.isArray(value)) {\n    if (isDictionaryForAdhocMetric(value)) {\n      return [new AdhocMetric(value)];\n    }\n    return [value];\n  }\n  return value.map(val => {\n    if (isDictionaryForAdhocMetric(val)) {\n      return new AdhocMetric(val);\n    }\n    return val;\n  });\n};\n\nconst getOptionsForSavedMetrics = (\n  savedMetrics: savedMetricType[],\n  currentMetricValues: (string | AdhocMetric)[],\n  currentMetric?: string,\n) =>\n  savedMetrics?.filter(savedMetric =>\n    Array.isArray(currentMetricValues)\n      ? !currentMetricValues.includes(savedMetric.metric_name ?? '') ||\n        savedMetric.metric_name === currentMetric\n      : savedMetric,\n  ) ?? [];\n\ntype ValueType = Metric | AdhocMetric | QueryFormMetric;\n\n// TODO: use typeguards to distinguish saved metrics from adhoc metrics\nconst getMetricsMatchingCurrentDataset = (\n  values: ValueType[],\n  columns: ColumnMeta[],\n  savedMetrics: (savedMetricType | Metric)[],\n  prevColumns: ColumnMeta[],\n  prevSavedMetrics: (savedMetricType | Metric)[],\n) => {\n  const areSavedMetricsEqual =\n    !prevSavedMetrics || isEqual(prevSavedMetrics, savedMetrics);\n  const areColsEqual = !prevColumns || isEqual(prevColumns, columns);\n\n  if (areColsEqual && areSavedMetricsEqual) {\n    return values;\n  }\n  return values.reduce((acc: ValueType[], metric) => {\n    if (\n      (typeof metric === 'string' || (metric as Metric).metric_name) &&\n      (areSavedMetricsEqual ||\n        savedMetrics?.some(\n          savedMetric =>\n            savedMetric.metric_name === metric ||\n            savedMetric.metric_name === (metric as Metric).metric_name,\n        ))\n    ) {\n      acc.push(metric);\n      return acc;\n    }\n\n    if (!areColsEqual) {\n      const newCol = columns?.find(\n        column =>\n          (metric as AdhocMetric).column?.column_name === column.column_name,\n      );\n      if (newCol) {\n        acc.push({ ...(metric as AdhocMetric), column: newCol });\n      }\n    } else {\n      acc.push(metric);\n    }\n    return acc;\n  }, []);\n};\n\nexport const DndMetricSelect = (props: any) => {\n  const { onChange, multi, columns, savedMetrics } = props;\n\n  const handleChange = useCallback(\n    opts => {\n      // if clear out options\n      if (opts === null) {\n        onChange(null);\n        return;\n      }\n\n      const transformedOpts = ensureIsArray(opts);\n      const optionValues = transformedOpts\n        .map(option => {\n          // pre-defined metric\n          if (option.metric_name) {\n            return option.metric_name;\n          }\n          return option;\n        })\n        .filter(option => option);\n      onChange(multi ? optionValues : optionValues[0]);\n    },\n    [multi, onChange],\n  );\n\n  const [value, setValue] = useState<ValueType[]>(\n    coerceAdhocMetrics(props.value),\n  );\n  const [droppedItem, setDroppedItem] = useState<\n    DatasourcePanelDndItem | typeof EMPTY_OBJECT\n  >({});\n  const [newMetricPopoverVisible, setNewMetricPopoverVisible] = useState(false);\n  const prevColumns = usePrevious(columns);\n  const prevSavedMetrics = usePrevious(savedMetrics);\n\n  useEffect(() => {\n    setValue(coerceAdhocMetrics(props.value));\n  }, [JSON.stringify(props.value)]);\n\n  useEffect(() => {\n    // Remove selected custom metrics that do not exist in the dataset anymore\n    // Remove selected adhoc metrics that use columns which do not exist in the dataset anymore\n    // Sync adhoc metrics with dataset columns when they are modified by the user\n    if (!props.value) {\n      return;\n    }\n    const propsValues = ensureIsArray(props.value);\n    const matchingMetrics = getMetricsMatchingCurrentDataset(\n      propsValues,\n      columns,\n      savedMetrics,\n      prevColumns,\n      prevSavedMetrics,\n    );\n\n    if (!isEqual(propsValues, matchingMetrics)) {\n      handleChange(matchingMetrics);\n    }\n  }, [columns, savedMetrics, handleChange]);\n\n  const canDrop = useCallback(\n    (item: DatasourcePanelDndItem) => {\n      const isMetricAlreadyInValues =\n        item.type === 'metric' ? value.includes(item.value.metric_name) : false;\n      return !isMetricAlreadyInValues;\n    },\n    [value],\n  );\n\n  const onNewMetric = useCallback(\n    (newMetric: Metric) => {\n      const newValue = props.multi ? [...value, newMetric] : [newMetric];\n      setValue(newValue);\n      handleChange(newValue);\n    },\n    [handleChange, props.multi, value],\n  );\n\n  const onMetricEdit = useCallback(\n    (changedMetric: Metric | AdhocMetric, oldMetric: Metric | AdhocMetric) => {\n      if (oldMetric instanceof AdhocMetric && oldMetric.equals(changedMetric)) {\n        return;\n      }\n      const newValue = value.map(value => {\n        if (\n          // compare saved metrics\n          ('metric_name' in oldMetric && value === oldMetric.metric_name) ||\n          // compare adhoc metrics\n          typeof (value as AdhocMetric).optionName !== 'undefined'\n            ? (value as AdhocMetric).optionName ===\n              (oldMetric as AdhocMetric).optionName\n            : false\n        ) {\n          return changedMetric;\n        }\n        return value;\n      });\n      setValue(newValue);\n      handleChange(newValue);\n    },\n    [handleChange, value],\n  );\n\n  const onRemoveMetric = useCallback(\n    (index: number) => {\n      if (!Array.isArray(value)) {\n        return;\n      }\n      const valuesCopy = [...value];\n      valuesCopy.splice(index, 1);\n      setValue(valuesCopy);\n      onChange(valuesCopy);\n    },\n    [onChange, value],\n  );\n\n  const moveLabel = useCallback(\n    (dragIndex: number, hoverIndex: number) => {\n      const newValues = [...value];\n      [newValues[hoverIndex], newValues[dragIndex]] = [\n        newValues[dragIndex],\n        newValues[hoverIndex],\n      ];\n      setValue(newValues);\n    },\n    [value],\n  );\n\n  const newSavedMetricOptions = useMemo(\n    () => getOptionsForSavedMetrics(props.savedMetrics, props.value),\n    [props.savedMetrics, props.value],\n  );\n\n  const getSavedMetricOptionsForMetric = useCallback(\n    index =>\n      getOptionsForSavedMetrics(\n        props.savedMetrics,\n        props.value,\n        props.value?.[index],\n      ),\n    [props.savedMetrics, props.value],\n  );\n\n  const handleDropLabel = useCallback(\n    () => onChange(multi ? value : value[0]),\n    [multi, onChange, value],\n  );\n\n  const valueRenderer = useCallback(\n    (option: ValueType, index: number) => (\n      <MetricDefinitionValue\n        key={index}\n        index={index}\n        option={option}\n        onMetricEdit={onMetricEdit}\n        onRemoveMetric={onRemoveMetric}\n        columns={props.columns}\n        savedMetrics={props.savedMetrics}\n        savedMetricsOptions={getSavedMetricOptionsForMetric(index)}\n        datasourceType={props.datasourceType}\n        onMoveLabel={moveLabel}\n        onDropLabel={handleDropLabel}\n        type={`${DndItemType.AdhocMetricOption}_${props.name}_${props.label}`}\n        multi={multi}\n      />\n    ),\n    [\n      getSavedMetricOptionsForMetric,\n      handleDropLabel,\n      moveLabel,\n      multi,\n      onMetricEdit,\n      onRemoveMetric,\n      props.columns,\n      props.datasourceType,\n      props.label,\n      props.name,\n      props.savedMetrics,\n    ],\n  );\n\n  const valuesRenderer = useCallback(\n    () => value.map((value, index) => valueRenderer(value, index)),\n    [value, valueRenderer],\n  );\n\n  const togglePopover = useCallback((visible: boolean) => {\n    setNewMetricPopoverVisible(visible);\n  }, []);\n\n  const closePopover = useCallback(() => {\n    togglePopover(false);\n  }, [togglePopover]);\n\n  const handleDrop = useCallback(\n    (item: DatasourcePanelDndItem) => {\n      if (item.type === DndItemType.Metric) {\n        onNewMetric(item.value as Metric);\n      }\n      if (item.type === DndItemType.Column) {\n        setDroppedItem(item);\n        togglePopover(true);\n      }\n    },\n    [onNewMetric, togglePopover],\n  );\n\n  const handleClickGhostButton = useCallback(() => {\n    setDroppedItem({});\n    togglePopover(true);\n  }, [togglePopover]);\n\n  const adhocMetric = useMemo(() => {\n    if (\n      isDatasourcePanelDndItem(droppedItem) &&\n      droppedItem.type === DndItemType.Column\n    ) {\n      const itemValue = droppedItem.value as ColumnMeta;\n      const config: Partial<AdhocMetric> = {\n        column: itemValue,\n      };\n      if (isFeatureEnabled(FeatureFlag.UX_BETA)) {\n        if (itemValue.type_generic === GenericDataType.NUMERIC) {\n          config.aggregate = AGGREGATES.SUM;\n        } else if (\n          itemValue.type_generic === GenericDataType.STRING ||\n          itemValue.type_generic === GenericDataType.BOOLEAN ||\n          itemValue.type_generic === GenericDataType.TEMPORAL\n        ) {\n          config.aggregate = AGGREGATES.COUNT_DISTINCT;\n        }\n      }\n      return new AdhocMetric(config);\n    }\n    return new AdhocMetric({ isNew: true });\n  }, [droppedItem]);\n\n  const ghostButtonText = isFeatureEnabled(FeatureFlag.ENABLE_DND_WITH_CLICK_UX)\n    ? tn(\n        'Drop a column/metric here or click',\n        'Drop columns/metrics here or click',\n        multi ? 2 : 1,\n      )\n    : tn(\n        'Drop column or metric here',\n        'Drop columns or metrics here',\n        multi ? 2 : 1,\n      );\n\n  return (\n    <div className=\"metrics-select\">\n      <DndSelectLabel\n        onDrop={handleDrop}\n        canDrop={canDrop}\n        valuesRenderer={valuesRenderer}\n        accept={DND_ACCEPTED_TYPES}\n        ghostButtonText={ghostButtonText}\n        displayGhostButton={multi || value.length === 0}\n        onClickGhostButton={\n          isFeatureEnabled(FeatureFlag.ENABLE_DND_WITH_CLICK_UX)\n            ? handleClickGhostButton\n            : undefined\n        }\n        {...props}\n      />\n      <AdhocMetricPopoverTrigger\n        adhocMetric={adhocMetric}\n        onMetricEdit={onNewMetric}\n        columns={props.columns}\n        savedMetricsOptions={newSavedMetricOptions}\n        savedMetric={EMPTY_OBJECT as savedMetricType}\n        datasourceType={props.datasourceType}\n        isControlledComponent\n        visible={newMetricPopoverVisible}\n        togglePopover={togglePopover}\n        closePopover={closePopover}\n      >\n        <div />\n      </AdhocMetricPopoverTrigger>\n    </div>\n  );\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}