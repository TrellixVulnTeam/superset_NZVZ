{"ast":null,"code":"import _extends from \"@babel/runtime-corejs3/helpers/extends\";var _jsxFileName = \"/home/ubuntu/my_plugin/superset/superset-frontend/src/explore/components/controls/FilterControl/AdhocFilterEditPopoverSimpleTabContent/index.tsx\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useEffect, useState } from 'react';\nimport { Select } from 'src/components';\nimport { t, SupersetClient, styled } from '@superset-ui/core';\nimport { Operators, OPERATORS_OPTIONS, TABLE_ONLY_OPERATORS, DRUID_ONLY_OPERATORS, HAVING_OPERATORS, MULTI_OPERATORS, CUSTOM_OPERATORS, DISABLE_INPUT_OPERATORS, OPERATOR_ENUM_TO_OPERATOR_TYPE } from 'src/explore/constants';\nimport FilterDefinitionOption from 'src/explore/components/controls/MetricControl/FilterDefinitionOption';\nimport { EXPRESSION_TYPES, CLAUSES } from 'src/explore/components/controls/FilterControl/AdhocFilter';\nimport { Input } from 'src/common/components';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst StyledInput = styled(Input)`\n  margin-bottom: ${({ theme }) => theme.gridUnit * 4}px;\n`;\nconst SelectWithLabel = styled(Select)`\n  .ant-select-selector::after {\n    content: ${({ labelText }) => labelText || '\\\\A0'};\n    display: inline-block;\n    white-space: nowrap;\n    color: ${({ theme }) => theme.colors.grayscale.light1};\n    width: max-content;\n  }\n`;\nexport const useSimpleTabFilterProps = (props) => {\n  const isOperatorRelevant = (operator, subject) => {var _props$datasource$col;\n    const column = (_props$datasource$col = props.datasource.columns) == null ? void 0 : _props$datasource$col.find((col) => col.column_name === subject);\n    const isColumnBoolean = !!column && (column.type === 'BOOL' || column.type === 'BOOLEAN');\n    const isColumnNumber = !!column && (column.type === 'INT' || column.type === 'INTEGER');\n    const isColumnFunction = !!column && !!column.expression;\n    if (operator && CUSTOM_OPERATORS.has(operator)) {\n      const { partitionColumn } = props;\n      return partitionColumn && subject && subject === partitionColumn;\n    }\n    if (operator === Operators.IS_TRUE || operator === Operators.IS_FALSE) {\n      return isColumnBoolean || isColumnNumber || isColumnFunction;\n    }\n    if (isColumnBoolean) {\n      return operator === Operators.IS_NULL || operator === Operators.IS_NOT_NULL;\n    }\n    return !(props.datasource.type === 'druid' &&\n    TABLE_ONLY_OPERATORS.indexOf(operator) >= 0 ||\n    props.datasource.type === 'table' &&\n    DRUID_ONLY_OPERATORS.indexOf(operator) >= 0 ||\n    props.adhocFilter.clause === CLAUSES.HAVING &&\n    HAVING_OPERATORS.indexOf(operator) === -1);\n  };\n  const onSubjectChange = (id) => {\n    const option = props.options.find((option) => 'column_name' in option && option.column_name === id ||\n    'optionName' in option && option.optionName === id);\n    let subject = '';\n    let clause;\n    // infer the new clause based on what subject was selected.\n    if (option && 'column_name' in option) {\n      subject = option.column_name;\n      clause = CLAUSES.WHERE;\n    } else\n    if (option && 'saved_metric_name' in option) {\n      subject = option.saved_metric_name;\n      clause = CLAUSES.HAVING;\n    } else\n    if (option && option.label) {\n      subject = option.label;\n      clause = CLAUSES.HAVING;\n    }\n    const { operator, operatorId } = props.adhocFilter;\n    props.onChange(props.adhocFilter.duplicateWith({\n      subject,\n      clause,\n      operator: operator && operatorId && isOperatorRelevant(operatorId, subject) ?\n      OPERATOR_ENUM_TO_OPERATOR_TYPE[operatorId].operation :\n      null,\n      expressionType: EXPRESSION_TYPES.SIMPLE,\n      operatorId }));\n\n  };\n  const onOperatorChange = (operatorId) => {\n    const currentComparator = props.adhocFilter.comparator;\n    let newComparator;\n    // convert between list of comparators and individual comparators\n    // (e.g. `in ('North America', 'Africa')` to `== 'North America'`)\n    if (MULTI_OPERATORS.has(operatorId)) {\n      newComparator = Array.isArray(currentComparator) ?\n      currentComparator :\n      [currentComparator].filter((element) => element);\n    } else\n    {\n      newComparator = Array.isArray(currentComparator) ?\n      currentComparator[0] :\n      currentComparator;\n    }\n    if (operatorId === Operators.IS_TRUE || operatorId === Operators.IS_FALSE) {\n      newComparator = Operators.IS_TRUE === operatorId;\n    }\n    if (operatorId && CUSTOM_OPERATORS.has(operatorId)) {\n      props.onChange(props.adhocFilter.duplicateWith({\n        subject: props.adhocFilter.subject,\n        clause: CLAUSES.WHERE,\n        operatorId,\n        operator: OPERATOR_ENUM_TO_OPERATOR_TYPE[operatorId].operation,\n        expressionType: EXPRESSION_TYPES.SQL,\n        datasource: props.datasource }));\n\n    } else\n    {\n      props.onChange(props.adhocFilter.duplicateWith({\n        operatorId,\n        operator: OPERATOR_ENUM_TO_OPERATOR_TYPE[operatorId].operation,\n        comparator: newComparator,\n        expressionType: EXPRESSION_TYPES.SIMPLE }));\n\n    }\n  };\n  const onComparatorChange = (comparator) => {\n    props.onChange(props.adhocFilter.duplicateWith({\n      comparator,\n      expressionType: EXPRESSION_TYPES.SIMPLE }));\n\n  };\n  return {\n    onSubjectChange,\n    onOperatorChange,\n    onComparatorChange,\n    isOperatorRelevant };\n\n};\nconst AdhocFilterEditPopoverSimpleTabContent = (props) => {var _props$operators, _props$operators2;\n  const { onSubjectChange, onOperatorChange, isOperatorRelevant, onComparatorChange } = useSimpleTabFilterProps(props);\n  const [suggestions, setSuggestions] = useState([]);\n  const [comparator, setComparator] = useState(props.adhocFilter.comparator);\n  const [loadingComparatorSuggestions, setLoadingComparatorSuggestions] = useState(false);\n  const onInputComparatorChange = (event) => {\n    onComparatorChange(event.target.value);\n  };\n  const renderSubjectOptionLabel = (option) => ___EmotionJSX(FilterDefinitionOption, { option: option, __self: this, __source: { fileName: _jsxFileName, lineNumber: 148, columnNumber: 51 } });\n  const getOptionsRemaining = () => {var _ref;\n    // if select is multi/value is array, we show the options not selected\n    const valuesFromSuggestionsLength = Array.isArray(comparator) ?\n    comparator.filter((v) => suggestions.includes(v)).length :\n    0;\n    return (_ref = (suggestions == null ? void 0 : suggestions.length) - valuesFromSuggestionsLength) != null ? _ref : 0;\n  };\n  const createSuggestionsPlaceholder = () => {\n    const optionsRemaining = getOptionsRemaining();\n    const placeholder = t('%s option(s)', optionsRemaining);\n    return optionsRemaining ? placeholder : '';\n  };\n  const handleSubjectChange = (subject) => {\n    setComparator(undefined);\n    onSubjectChange(subject);\n  };\n  let columns = props.options;\n  const { subject, operator, operatorId } = props.adhocFilter;\n  const subjectSelectProps = {\n    ariaLabel: t('Select subject'),\n    value: subject != null ? subject : undefined,\n    onChange: handleSubjectChange,\n    notFoundContent: t('No such column found. To filter on a metric, try the Custom SQL tab.'),\n    autoFocus: !subject,\n    placeholder: '' };\n\n  if (props.datasource.type === 'druid') {\n    subjectSelectProps.placeholder = t('%s column(s) and metric(s)', columns.length);\n  } else\n  {\n    // we cannot support simple ad-hoc filters for metrics because we don't know what type\n    // the value should be cast to (without knowing the output type of the aggregate, which\n    // becomes a rather complicated problem)\n    subjectSelectProps.placeholder =\n    props.adhocFilter.clause === CLAUSES.WHERE ?\n    t('%s column(s)', columns.length) :\n    t('To filter on a metric, use Custom SQL tab.');\n    columns = props.options.filter((option) => 'column_name' in option && option.column_name);\n  }\n  const operatorSelectProps = {\n    placeholder: t('%s operator(s)', ((_props$operators = props.operators) != null ? _props$operators : OPERATORS_OPTIONS).filter((op) => isOperatorRelevant(op, subject)).length),\n    value: operatorId,\n    onChange: onOperatorChange,\n    autoFocus: !!subjectSelectProps.value && !operator,\n    ariaLabel: t('Select operator') };\n\n  const shouldFocusComparator = !!subjectSelectProps.value && !!operatorSelectProps.value;\n  const comparatorSelectProps = {\n    allowClear: true,\n    allowNewOptions: true,\n    ariaLabel: t('Comparator option'),\n    mode: MULTI_OPERATORS.has(operatorId) ?\n    'multiple' :\n    'single',\n    loading: loadingComparatorSuggestions,\n    value: comparator,\n    onChange: onComparatorChange,\n    notFoundContent: t('Type a value here'),\n    disabled: DISABLE_INPUT_OPERATORS.includes(operatorId),\n    placeholder: createSuggestionsPlaceholder(),\n    autoFocus: shouldFocusComparator };\n\n  const labelText = comparator && comparator.length > 0 && createSuggestionsPlaceholder();\n  useEffect(() => {\n    const refreshComparatorSuggestions = () => {\n      const { datasource } = props;\n      const col = props.adhocFilter.subject;\n      const having = props.adhocFilter.clause === CLAUSES.HAVING;\n      if (col && datasource && datasource.filter_select && !having) {\n        const controller = new AbortController();\n        const { signal } = controller;\n        if (loadingComparatorSuggestions) {\n          controller.abort();\n        }\n        setLoadingComparatorSuggestions(true);\n        SupersetClient.get({\n          signal,\n          endpoint: `/superset/filter/${datasource.type}/${datasource.id}/${col}/` }).\n\n        then(({ json }) => {\n          setSuggestions(json);\n          setLoadingComparatorSuggestions(false);\n        }).\n        catch(() => {\n          setSuggestions([]);\n          setLoadingComparatorSuggestions(false);\n        });\n      }\n    };\n    refreshComparatorSuggestions();\n  }, [props.adhocFilter.subject]);\n  useEffect(() => {\n    setComparator(props.adhocFilter.comparator);\n  }, [props.adhocFilter.comparator]);\n  return ___EmotionJSX(React.Fragment, null,\n  ___EmotionJSX(Select, _extends({ css: (theme) => ({\n      marginTop: theme.gridUnit * 4,\n      marginBottom: theme.gridUnit * 4 }),\n    options: columns.map((column) => ({\n      value: 'column_name' in column && column.column_name ||\n      'optionName' in column && column.optionName ||\n      '',\n      label: 'saved_metric_name' in column && column.saved_metric_name ||\n      'column_name' in column && column.column_name ||\n      'label' in column && column.label,\n      key: 'id' in column && column.id ||\n      'optionName' in column && column.optionName ||\n      undefined,\n      customLabel: renderSubjectOptionLabel(column) })) },\n  subjectSelectProps, { __self: this, __source: { fileName: _jsxFileName, lineNumber: 244, columnNumber: 7 } })),\n  ___EmotionJSX(Select, _extends({ css: (theme) => ({ marginBottom: theme.gridUnit * 4 }), options: ((_props$operators2 = props.operators) != null ? _props$operators2 : OPERATORS_OPTIONS).\n    filter((op) => isOperatorRelevant(op, subject)).\n    map((option) => ({\n      value: option,\n      label: OPERATOR_ENUM_TO_OPERATOR_TYPE[option].display,\n      key: option })) },\n  operatorSelectProps, { __self: this, __source: { fileName: _jsxFileName, lineNumber: 259, columnNumber: 7 } })),\n  MULTI_OPERATORS.has(operatorId) || suggestions.length > 0 ? ___EmotionJSX(SelectWithLabel, _extends({ labelText: labelText, options: suggestions.map((suggestion) => ({\n      value: suggestion,\n      label: String(suggestion) })) },\n  comparatorSelectProps, { __self: this, __source: { fileName: _jsxFileName, lineNumber: 266, columnNumber: 69 } })) : ___EmotionJSX(StyledInput, { \"data-test\": \"adhoc-filter-simple-value\", name: \"filter-value\", ref: (ref) => {\n      if (ref && shouldFocusComparator) {\n        ref.focus();\n      }\n    }, onChange: onInputComparatorChange, value: comparator, placeholder: t('Filter value (case sensitive)'), disabled: DISABLE_INPUT_OPERATORS.includes(operatorId), __self: this, __source: { fileName: _jsxFileName, lineNumber: 269, columnNumber: 51 } }));\n\n};__signature__(AdhocFilterEditPopoverSimpleTabContent, \"useSimpleTabFilterProps{{ onSubjectChange, onOperatorChange, isOperatorRelevant, onComparatorChange, }}\\nuseState{[suggestions, setSuggestions]([])}\\nuseState{[comparator, setComparator](props.adhocFilter.comparator)}\\nuseState{[loadingComparatorSuggestions, setLoadingComparatorSuggestions,](false)}\\nuseEffect{}\\nuseEffect{}\", () => [useSimpleTabFilterProps]);const _default =\nAdhocFilterEditPopoverSimpleTabContent;export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(StyledInput, \"StyledInput\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/explore/components/controls/FilterControl/AdhocFilterEditPopoverSimpleTabContent/index.tsx\");reactHotLoader.register(SelectWithLabel, \"SelectWithLabel\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/explore/components/controls/FilterControl/AdhocFilterEditPopoverSimpleTabContent/index.tsx\");reactHotLoader.register(useSimpleTabFilterProps, \"useSimpleTabFilterProps\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/explore/components/controls/FilterControl/AdhocFilterEditPopoverSimpleTabContent/index.tsx\");reactHotLoader.register(AdhocFilterEditPopoverSimpleTabContent, \"AdhocFilterEditPopoverSimpleTabContent\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/explore/components/controls/FilterControl/AdhocFilterEditPopoverSimpleTabContent/index.tsx\");reactHotLoader.register(_default, \"default\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/explore/components/controls/FilterControl/AdhocFilterEditPopoverSimpleTabContent/index.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/home/ubuntu/my_plugin/superset/superset-frontend/src/explore/components/controls/FilterControl/AdhocFilterEditPopoverSimpleTabContent/index.tsx"],"names":[],"mappings":"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","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useEffect, useState } from 'react';\nimport { Select } from 'src/components';\nimport { t, SupersetClient, styled } from '@superset-ui/core';\nimport {\n  Operators,\n  OPERATORS_OPTIONS,\n  TABLE_ONLY_OPERATORS,\n  DRUID_ONLY_OPERATORS,\n  HAVING_OPERATORS,\n  MULTI_OPERATORS,\n  CUSTOM_OPERATORS,\n  DISABLE_INPUT_OPERATORS,\n  AGGREGATES,\n  OPERATOR_ENUM_TO_OPERATOR_TYPE,\n} from 'src/explore/constants';\nimport FilterDefinitionOption from 'src/explore/components/controls/MetricControl/FilterDefinitionOption';\nimport AdhocFilter, {\n  EXPRESSION_TYPES,\n  CLAUSES,\n} from 'src/explore/components/controls/FilterControl/AdhocFilter';\nimport { Input } from 'src/common/components';\n\nconst StyledInput = styled(Input)`\n  margin-bottom: ${({ theme }) => theme.gridUnit * 4}px;\n`;\n\nconst SelectWithLabel = styled(Select)<{ labelText: string }>`\n  .ant-select-selector::after {\n    content: ${({ labelText }) => labelText || '\\\\A0'};\n    display: inline-block;\n    white-space: nowrap;\n    color: ${({ theme }) => theme.colors.grayscale.light1};\n    width: max-content;\n  }\n`;\n\nexport interface SimpleColumnType {\n  id: number;\n  column_name: string;\n  expression?: string;\n  type: string;\n  optionName?: string;\n  filterBy?: string;\n  value?: string;\n}\n\nexport interface SimpleExpressionType {\n  expressionType: keyof typeof EXPRESSION_TYPES;\n  column: SimpleColumnType;\n  aggregate: keyof typeof AGGREGATES;\n  label: string;\n}\nexport interface SQLExpressionType {\n  expressionType: keyof typeof EXPRESSION_TYPES;\n  sqlExpression: string;\n  label: string;\n}\n\nexport interface MetricColumnType {\n  saved_metric_name: string;\n}\n\nexport type ColumnType =\n  | SimpleColumnType\n  | SimpleExpressionType\n  | SQLExpressionType\n  | MetricColumnType;\n\nexport interface Props {\n  adhocFilter: AdhocFilter;\n  onChange: (filter: AdhocFilter) => void;\n  options: ColumnType[];\n  datasource: {\n    id: string;\n    columns: SimpleColumnType[];\n    type: string;\n    filter_select: boolean;\n  };\n  partitionColumn: string;\n  operators?: Operators[];\n}\nexport const useSimpleTabFilterProps = (props: Props) => {\n  const isOperatorRelevant = (operator: Operators, subject: string) => {\n    const column = props.datasource.columns?.find(\n      col => col.column_name === subject,\n    );\n    const isColumnBoolean =\n      !!column && (column.type === 'BOOL' || column.type === 'BOOLEAN');\n    const isColumnNumber =\n      !!column && (column.type === 'INT' || column.type === 'INTEGER');\n    const isColumnFunction = !!column && !!column.expression;\n\n    if (operator && CUSTOM_OPERATORS.has(operator)) {\n      const { partitionColumn } = props;\n      return partitionColumn && subject && subject === partitionColumn;\n    }\n    if (operator === Operators.IS_TRUE || operator === Operators.IS_FALSE) {\n      return isColumnBoolean || isColumnNumber || isColumnFunction;\n    }\n    if (isColumnBoolean) {\n      return (\n        operator === Operators.IS_NULL || operator === Operators.IS_NOT_NULL\n      );\n    }\n    return !(\n      (props.datasource.type === 'druid' &&\n        TABLE_ONLY_OPERATORS.indexOf(operator) >= 0) ||\n      (props.datasource.type === 'table' &&\n        DRUID_ONLY_OPERATORS.indexOf(operator) >= 0) ||\n      (props.adhocFilter.clause === CLAUSES.HAVING &&\n        HAVING_OPERATORS.indexOf(operator) === -1)\n    );\n  };\n  const onSubjectChange = (id: string) => {\n    const option = props.options.find(\n      option =>\n        ('column_name' in option && option.column_name === id) ||\n        ('optionName' in option && option.optionName === id),\n    );\n\n    let subject = '';\n    let clause;\n    // infer the new clause based on what subject was selected.\n    if (option && 'column_name' in option) {\n      subject = option.column_name;\n      clause = CLAUSES.WHERE;\n    } else if (option && 'saved_metric_name' in option) {\n      subject = option.saved_metric_name;\n      clause = CLAUSES.HAVING;\n    } else if (option && option.label) {\n      subject = option.label;\n      clause = CLAUSES.HAVING;\n    }\n    const { operator, operatorId } = props.adhocFilter;\n    props.onChange(\n      props.adhocFilter.duplicateWith({\n        subject,\n        clause,\n        operator:\n          operator && operatorId && isOperatorRelevant(operatorId, subject)\n            ? OPERATOR_ENUM_TO_OPERATOR_TYPE[operatorId].operation\n            : null,\n        expressionType: EXPRESSION_TYPES.SIMPLE,\n        operatorId,\n      }),\n    );\n  };\n  const onOperatorChange = (operatorId: Operators) => {\n    const currentComparator = props.adhocFilter.comparator;\n    let newComparator;\n    // convert between list of comparators and individual comparators\n    // (e.g. `in ('North America', 'Africa')` to `== 'North America'`)\n    if (MULTI_OPERATORS.has(operatorId)) {\n      newComparator = Array.isArray(currentComparator)\n        ? currentComparator\n        : [currentComparator].filter(element => element);\n    } else {\n      newComparator = Array.isArray(currentComparator)\n        ? currentComparator[0]\n        : currentComparator;\n    }\n    if (operatorId === Operators.IS_TRUE || operatorId === Operators.IS_FALSE) {\n      newComparator = Operators.IS_TRUE === operatorId;\n    }\n    if (operatorId && CUSTOM_OPERATORS.has(operatorId)) {\n      props.onChange(\n        props.adhocFilter.duplicateWith({\n          subject: props.adhocFilter.subject,\n          clause: CLAUSES.WHERE,\n          operatorId,\n          operator: OPERATOR_ENUM_TO_OPERATOR_TYPE[operatorId].operation,\n          expressionType: EXPRESSION_TYPES.SQL,\n          datasource: props.datasource,\n        }),\n      );\n    } else {\n      props.onChange(\n        props.adhocFilter.duplicateWith({\n          operatorId,\n          operator: OPERATOR_ENUM_TO_OPERATOR_TYPE[operatorId].operation,\n          comparator: newComparator,\n          expressionType: EXPRESSION_TYPES.SIMPLE,\n        }),\n      );\n    }\n  };\n  const onComparatorChange = (comparator: string) => {\n    props.onChange(\n      props.adhocFilter.duplicateWith({\n        comparator,\n        expressionType: EXPRESSION_TYPES.SIMPLE,\n      }),\n    );\n  };\n  return {\n    onSubjectChange,\n    onOperatorChange,\n    onComparatorChange,\n    isOperatorRelevant,\n  };\n};\n\nconst AdhocFilterEditPopoverSimpleTabContent: React.FC<Props> = props => {\n  const {\n    onSubjectChange,\n    onOperatorChange,\n    isOperatorRelevant,\n    onComparatorChange,\n  } = useSimpleTabFilterProps(props);\n  const [suggestions, setSuggestions] = useState<Record<string, any>>([]);\n  const [comparator, setComparator] = useState(props.adhocFilter.comparator);\n  const [\n    loadingComparatorSuggestions,\n    setLoadingComparatorSuggestions,\n  ] = useState(false);\n\n  const onInputComparatorChange = (\n    event: React.ChangeEvent<HTMLInputElement>,\n  ) => {\n    onComparatorChange(event.target.value);\n  };\n\n  const renderSubjectOptionLabel = (option: ColumnType) => (\n    <FilterDefinitionOption option={option} />\n  );\n\n  const getOptionsRemaining = () => {\n    // if select is multi/value is array, we show the options not selected\n    const valuesFromSuggestionsLength = Array.isArray(comparator)\n      ? comparator.filter(v => suggestions.includes(v)).length\n      : 0;\n    return suggestions?.length - valuesFromSuggestionsLength ?? 0;\n  };\n  const createSuggestionsPlaceholder = () => {\n    const optionsRemaining = getOptionsRemaining();\n    const placeholder = t('%s option(s)', optionsRemaining);\n    return optionsRemaining ? placeholder : '';\n  };\n\n  const handleSubjectChange = (subject: string) => {\n    setComparator(undefined);\n    onSubjectChange(subject);\n  };\n\n  let columns = props.options;\n  const { subject, operator, operatorId } = props.adhocFilter;\n\n  const subjectSelectProps = {\n    ariaLabel: t('Select subject'),\n    value: subject ?? undefined,\n    onChange: handleSubjectChange,\n    notFoundContent: t(\n      'No such column found. To filter on a metric, try the Custom SQL tab.',\n    ),\n    autoFocus: !subject,\n    placeholder: '',\n  };\n\n  if (props.datasource.type === 'druid') {\n    subjectSelectProps.placeholder = t(\n      '%s column(s) and metric(s)',\n      columns.length,\n    );\n  } else {\n    // we cannot support simple ad-hoc filters for metrics because we don't know what type\n    // the value should be cast to (without knowing the output type of the aggregate, which\n    // becomes a rather complicated problem)\n    subjectSelectProps.placeholder =\n      props.adhocFilter.clause === CLAUSES.WHERE\n        ? t('%s column(s)', columns.length)\n        : t('To filter on a metric, use Custom SQL tab.');\n    columns = props.options.filter(\n      option => 'column_name' in option && option.column_name,\n    );\n  }\n\n  const operatorSelectProps = {\n    placeholder: t(\n      '%s operator(s)',\n      (props.operators ?? OPERATORS_OPTIONS).filter(op =>\n        isOperatorRelevant(op, subject),\n      ).length,\n    ),\n    value: operatorId,\n    onChange: onOperatorChange,\n    autoFocus: !!subjectSelectProps.value && !operator,\n    ariaLabel: t('Select operator'),\n  };\n\n  const shouldFocusComparator =\n    !!subjectSelectProps.value && !!operatorSelectProps.value;\n\n  const comparatorSelectProps = {\n    allowClear: true,\n    allowNewOptions: true,\n    ariaLabel: t('Comparator option'),\n    mode: MULTI_OPERATORS.has(operatorId)\n      ? ('multiple' as const)\n      : ('single' as const),\n    loading: loadingComparatorSuggestions,\n    value: comparator,\n    onChange: onComparatorChange,\n    notFoundContent: t('Type a value here'),\n    disabled: DISABLE_INPUT_OPERATORS.includes(operatorId),\n    placeholder: createSuggestionsPlaceholder(),\n    autoFocus: shouldFocusComparator,\n  };\n\n  const labelText =\n    comparator && comparator.length > 0 && createSuggestionsPlaceholder();\n\n  useEffect(() => {\n    const refreshComparatorSuggestions = () => {\n      const { datasource } = props;\n      const col = props.adhocFilter.subject;\n      const having = props.adhocFilter.clause === CLAUSES.HAVING;\n\n      if (col && datasource && datasource.filter_select && !having) {\n        const controller = new AbortController();\n        const { signal } = controller;\n        if (loadingComparatorSuggestions) {\n          controller.abort();\n        }\n        setLoadingComparatorSuggestions(true);\n        SupersetClient.get({\n          signal,\n          endpoint: `/superset/filter/${datasource.type}/${datasource.id}/${col}/`,\n        })\n          .then(({ json }) => {\n            setSuggestions(json);\n            setLoadingComparatorSuggestions(false);\n          })\n          .catch(() => {\n            setSuggestions([]);\n            setLoadingComparatorSuggestions(false);\n          });\n      }\n    };\n    refreshComparatorSuggestions();\n  }, [props.adhocFilter.subject]);\n\n  useEffect(() => {\n    setComparator(props.adhocFilter.comparator);\n  }, [props.adhocFilter.comparator]);\n\n  return (\n    <>\n      <Select\n        css={theme => ({\n          marginTop: theme.gridUnit * 4,\n          marginBottom: theme.gridUnit * 4,\n        })}\n        options={columns.map(column => ({\n          value:\n            ('column_name' in column && column.column_name) ||\n            ('optionName' in column && column.optionName) ||\n            '',\n          label:\n            ('saved_metric_name' in column && column.saved_metric_name) ||\n            ('column_name' in column && column.column_name) ||\n            ('label' in column && column.label),\n          key:\n            ('id' in column && column.id) ||\n            ('optionName' in column && column.optionName) ||\n            undefined,\n          customLabel: renderSubjectOptionLabel(column),\n        }))}\n        {...subjectSelectProps}\n      />\n      <Select\n        css={theme => ({ marginBottom: theme.gridUnit * 4 })}\n        options={(props.operators ?? OPERATORS_OPTIONS)\n          .filter(op => isOperatorRelevant(op, subject))\n          .map(option => ({\n            value: option,\n            label: OPERATOR_ENUM_TO_OPERATOR_TYPE[option].display,\n            key: option,\n          }))}\n        {...operatorSelectProps}\n      />\n      {MULTI_OPERATORS.has(operatorId) || suggestions.length > 0 ? (\n        <SelectWithLabel\n          labelText={labelText}\n          options={suggestions.map((suggestion: string) => ({\n            value: suggestion,\n            label: String(suggestion),\n          }))}\n          {...comparatorSelectProps}\n        />\n      ) : (\n        <StyledInput\n          data-test=\"adhoc-filter-simple-value\"\n          name=\"filter-value\"\n          ref={ref => {\n            if (ref && shouldFocusComparator) {\n              ref.focus();\n            }\n          }}\n          onChange={onInputComparatorChange}\n          value={comparator}\n          placeholder={t('Filter value (case sensitive)')}\n          disabled={DISABLE_INPUT_OPERATORS.includes(operatorId)}\n        />\n      )}\n    </>\n  );\n};\n\nexport default AdhocFilterEditPopoverSimpleTabContent;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}