{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;};(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n/* eslint-disable camelcase */\nimport {\nADD_FILTER,\nREMOVE_FILTER,\nCHANGE_FILTER,\nUPDATE_DIRECT_PATH_TO_FILTER,\nUPDATE_LAYOUT_COMPONENTS,\nUPDATE_DASHBOARD_FILTERS_SCOPE } from\n'../actions/dashboardFilters';\nimport { HYDRATE_DASHBOARD } from '../actions/hydrate';\nimport { TIME_RANGE } from '../../visualizations/FilterBox/FilterBox';\nimport { DASHBOARD_ROOT_ID } from '../util/constants';\nimport getFilterConfigsFromFormdata from '../util/getFilterConfigsFromFormdata';\nimport { buildActiveFilters } from '../util/activeDashboardFilters';\nimport { getChartIdAndColumnFromFilterKey } from '../util/getDashboardFilterKey';\n\nexport const DASHBOARD_FILTER_SCOPE_GLOBAL = {\n  scope: [DASHBOARD_ROOT_ID],\n  immune: [] };\n\n\nexport const dashboardFilter = {\n  chartId: null,\n  componentId: null,\n  filterName: null,\n  datasourceId: null,\n  directPathToFilter: [],\n  isDateFilter: false,\n  isInstantFilter: true,\n  columns: {},\n  labels: {},\n  scopes: {} };\n\n\nconst CHANGE_FILTER_VALUE_ACTIONS = [ADD_FILTER, REMOVE_FILTER, CHANGE_FILTER];\n\nexport default function dashboardFiltersReducer(dashboardFilters = {}, action) {\n  const actionHandlers = {\n    [ADD_FILTER]() {\n      const { chartId, component, form_data } = action;\n      const { columns, labels } = getFilterConfigsFromFormdata(form_data);\n      const scopes = Object.keys(columns).reduce(\n      (map, column) => ({\n        ...map,\n        [column]: DASHBOARD_FILTER_SCOPE_GLOBAL }),\n\n      {});\n\n      const directPathToFilter = component ?\n      (component.parents || []).slice().concat(component.id) :\n      [];\n\n      const newFilter = {\n        ...dashboardFilter,\n        chartId,\n        componentId: component.id,\n        datasourceId: form_data.datasource,\n        filterName: component.meta.sliceName,\n        directPathToFilter,\n        columns,\n        labels,\n        scopes,\n        isInstantFilter: !!form_data.instant_filtering,\n        isDateFilter: Object.keys(columns).includes(TIME_RANGE) };\n\n\n      return newFilter;\n    },\n\n    [CHANGE_FILTER](state) {\n      const { newSelectedValues, merge } = action;\n      const updatedColumns = Object.keys(newSelectedValues).reduce(\n      (columns, name) => {\n        // override existed column value, or add new column name\n        if (!merge || !(name in columns)) {\n          return {\n            ...columns,\n            [name]: newSelectedValues[name] };\n\n        }\n\n        return {\n          ...columns,\n          [name]: [...columns[name], ...newSelectedValues[name]] };\n\n      },\n      { ...state.columns });\n\n\n      return {\n        ...state,\n        columns: updatedColumns };\n\n    },\n\n    [UPDATE_DIRECT_PATH_TO_FILTER](state) {\n      const { path } = action;\n      return {\n        ...state,\n        directPathToFilter: path };\n\n    } };\n\n\n  if (action.type === UPDATE_LAYOUT_COMPONENTS) {\n    buildActiveFilters({\n      dashboardFilters,\n      components: action.components });\n\n    return dashboardFilters;\n  }\n  if (action.type === UPDATE_DASHBOARD_FILTERS_SCOPE) {\n    const allDashboardFiltersScope = action.scopes;\n    // update filter scope for each filter field\n    const updatedFilters = Object.entries(allDashboardFiltersScope).reduce(\n    (map, entry) => {\n      const [filterKey, { scope, immune }] = entry;\n      const { chartId, column } = getChartIdAndColumnFromFilterKey(filterKey);\n      const scopes = {\n        ...map[chartId].scopes,\n        [column]: {\n          scope,\n          immune } };\n\n\n      return {\n        ...map,\n        [chartId]: {\n          ...map[chartId],\n          scopes } };\n\n\n    },\n    dashboardFilters);\n\n\n    buildActiveFilters({ dashboardFilters: updatedFilters });\n    return updatedFilters;\n  }\n  if (action.type === REMOVE_FILTER) {\n    const { chartId } = action;\n    const { [chartId]: deletedFilter, ...updatedFilters } = dashboardFilters;\n    buildActiveFilters({ dashboardFilters: updatedFilters });\n\n    return updatedFilters;\n  }\n  if (action.type === HYDRATE_DASHBOARD) {\n    return action.data.dashboardFilters;\n  }\n\n  if (action.type in actionHandlers) {\n    const updatedFilters = {\n      ...dashboardFilters,\n      [action.chartId]: actionHandlers[action.type](\n      dashboardFilters[action.chartId]) };\n\n\n    if (CHANGE_FILTER_VALUE_ACTIONS.includes(action.type)) {\n      buildActiveFilters({ dashboardFilters: updatedFilters });\n    }\n\n    return updatedFilters;\n  }\n\n  return dashboardFilters;\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(DASHBOARD_FILTER_SCOPE_GLOBAL, \"DASHBOARD_FILTER_SCOPE_GLOBAL\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/reducers/dashboardFilters.js\");reactHotLoader.register(dashboardFilter, \"dashboardFilter\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/reducers/dashboardFilters.js\");reactHotLoader.register(CHANGE_FILTER_VALUE_ACTIONS, \"CHANGE_FILTER_VALUE_ACTIONS\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/reducers/dashboardFilters.js\");reactHotLoader.register(dashboardFiltersReducer, \"dashboardFiltersReducer\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/reducers/dashboardFilters.js\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(__signature__, \"__signature__\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/reducers/dashboardFilters.js\");reactHotLoader.register(DASHBOARD_FILTER_SCOPE_GLOBAL, \"DASHBOARD_FILTER_SCOPE_GLOBAL\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/reducers/dashboardFilters.js\");reactHotLoader.register(dashboardFilter, \"dashboardFilter\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/reducers/dashboardFilters.js\");reactHotLoader.register(CHANGE_FILTER_VALUE_ACTIONS, \"CHANGE_FILTER_VALUE_ACTIONS\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/reducers/dashboardFilters.js\");reactHotLoader.register(dashboardFiltersReducer, \"dashboardFiltersReducer\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/reducers/dashboardFilters.js\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/reducers/dashboardFilters.js"],"names":["DASHBOARD_FILTER_SCOPE_GLOBAL","scope","immune","dashboardFilter","chartId","componentId","filterName","datasourceId","directPathToFilter","isDateFilter","isInstantFilter","columns","labels","scopes","CHANGE_FILTER_VALUE_ACTIONS","dashboardFiltersReducer","dashboardFilters","actionHandlers","getFilterConfigsFromFormdata","component","newFilter","form_data","Object","updatedColumns","name","newSelectedValues","state","action","buildActiveFilters","components","allDashboardFiltersScope","updatedFilters","getChartIdAndColumnFromFilterKey","map"],"mappings":"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","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint-disable camelcase */\nimport {\n  ADD_FILTER,\n  REMOVE_FILTER,\n  CHANGE_FILTER,\n  UPDATE_DIRECT_PATH_TO_FILTER,\n  UPDATE_LAYOUT_COMPONENTS,\n  UPDATE_DASHBOARD_FILTERS_SCOPE,\n} from '../actions/dashboardFilters';\nimport { HYDRATE_DASHBOARD } from '../actions/hydrate';\nimport { TIME_RANGE } from '../../visualizations/FilterBox/FilterBox';\nimport { DASHBOARD_ROOT_ID } from '../util/constants';\nimport getFilterConfigsFromFormdata from '../util/getFilterConfigsFromFormdata';\nimport { buildActiveFilters } from '../util/activeDashboardFilters';\nimport { getChartIdAndColumnFromFilterKey } from '../util/getDashboardFilterKey';\n\nexport const DASHBOARD_FILTER_SCOPE_GLOBAL = {\n  scope: [DASHBOARD_ROOT_ID],\n  immune: [],\n};\n\nexport const dashboardFilter = {\n  chartId: null,\n  componentId: null,\n  filterName: null,\n  datasourceId: null,\n  directPathToFilter: [],\n  isDateFilter: false,\n  isInstantFilter: true,\n  columns: {},\n  labels: {},\n  scopes: {},\n};\n\nconst CHANGE_FILTER_VALUE_ACTIONS = [ADD_FILTER, REMOVE_FILTER, CHANGE_FILTER];\n\nexport default function dashboardFiltersReducer(dashboardFilters = {}, action) {\n  const actionHandlers = {\n    [ADD_FILTER]() {\n      const { chartId, component, form_data } = action;\n      const { columns, labels } = getFilterConfigsFromFormdata(form_data);\n      const scopes = Object.keys(columns).reduce(\n        (map, column) => ({\n          ...map,\n          [column]: DASHBOARD_FILTER_SCOPE_GLOBAL,\n        }),\n        {},\n      );\n      const directPathToFilter = component\n        ? (component.parents || []).slice().concat(component.id)\n        : [];\n\n      const newFilter = {\n        ...dashboardFilter,\n        chartId,\n        componentId: component.id,\n        datasourceId: form_data.datasource,\n        filterName: component.meta.sliceName,\n        directPathToFilter,\n        columns,\n        labels,\n        scopes,\n        isInstantFilter: !!form_data.instant_filtering,\n        isDateFilter: Object.keys(columns).includes(TIME_RANGE),\n      };\n\n      return newFilter;\n    },\n\n    [CHANGE_FILTER](state) {\n      const { newSelectedValues, merge } = action;\n      const updatedColumns = Object.keys(newSelectedValues).reduce(\n        (columns, name) => {\n          // override existed column value, or add new column name\n          if (!merge || !(name in columns)) {\n            return {\n              ...columns,\n              [name]: newSelectedValues[name],\n            };\n          }\n\n          return {\n            ...columns,\n            [name]: [...columns[name], ...newSelectedValues[name]],\n          };\n        },\n        { ...state.columns },\n      );\n\n      return {\n        ...state,\n        columns: updatedColumns,\n      };\n    },\n\n    [UPDATE_DIRECT_PATH_TO_FILTER](state) {\n      const { path } = action;\n      return {\n        ...state,\n        directPathToFilter: path,\n      };\n    },\n  };\n\n  if (action.type === UPDATE_LAYOUT_COMPONENTS) {\n    buildActiveFilters({\n      dashboardFilters,\n      components: action.components,\n    });\n    return dashboardFilters;\n  }\n  if (action.type === UPDATE_DASHBOARD_FILTERS_SCOPE) {\n    const allDashboardFiltersScope = action.scopes;\n    // update filter scope for each filter field\n    const updatedFilters = Object.entries(allDashboardFiltersScope).reduce(\n      (map, entry) => {\n        const [filterKey, { scope, immune }] = entry;\n        const { chartId, column } = getChartIdAndColumnFromFilterKey(filterKey);\n        const scopes = {\n          ...map[chartId].scopes,\n          [column]: {\n            scope,\n            immune,\n          },\n        };\n        return {\n          ...map,\n          [chartId]: {\n            ...map[chartId],\n            scopes,\n          },\n        };\n      },\n      dashboardFilters,\n    );\n\n    buildActiveFilters({ dashboardFilters: updatedFilters });\n    return updatedFilters;\n  }\n  if (action.type === REMOVE_FILTER) {\n    const { chartId } = action;\n    const { [chartId]: deletedFilter, ...updatedFilters } = dashboardFilters;\n    buildActiveFilters({ dashboardFilters: updatedFilters });\n\n    return updatedFilters;\n  }\n  if (action.type === HYDRATE_DASHBOARD) {\n    return action.data.dashboardFilters;\n  }\n\n  if (action.type in actionHandlers) {\n    const updatedFilters = {\n      ...dashboardFilters,\n      [action.chartId]: actionHandlers[action.type](\n        dashboardFilters[action.chartId],\n      ),\n    };\n    if (CHANGE_FILTER_VALUE_ACTIONS.includes(action.type)) {\n      buildActiveFilters({ dashboardFilters: updatedFilters });\n    }\n\n    return updatedFilters;\n  }\n\n  return dashboardFilters;\n}\n"]},"metadata":{},"sourceType":"module"}