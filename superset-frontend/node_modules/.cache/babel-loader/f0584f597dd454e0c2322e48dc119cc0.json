{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;};import _isEmpty from \"lodash/isEmpty\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport { t } from '@superset-ui/core';\n\nimport { DASHBOARD_ROOT_ID } from './constants';\nimport { CHART_TYPE, DASHBOARD_ROOT_TYPE, TAB_TYPE } from './componentTypes';\n\nconst FILTER_SCOPE_CONTAINER_TYPES = [TAB_TYPE, DASHBOARD_ROOT_TYPE];\n\nfunction traverse({\n  currentNode = {},\n  components = {},\n  filterFields = [],\n  selectedChartId })\n{\n  if (!currentNode) {\n    return null;\n  }\n\n  const { type } = currentNode;\n  if (\n  CHART_TYPE === type &&\n  currentNode &&\n  currentNode.meta &&\n  currentNode.meta.chartId)\n  {\n    const chartNode = {\n      value: currentNode.meta.chartId,\n      label:\n      currentNode.meta.sliceName || `${type} ${currentNode.meta.chartId}`,\n      type,\n      showCheckbox: selectedChartId !== currentNode.meta.chartId };\n\n\n    return {\n      ...chartNode,\n      children: filterFields.map((filterField) => ({\n        value: `${currentNode.meta.chartId}:${filterField}`,\n        label: `${chartNode.label}`,\n        type: 'filter_box',\n        showCheckbox: false })) };\n\n\n  }\n\n  let children = [];\n  if (currentNode.children && currentNode.children.length) {\n    currentNode.children.forEach((child) => {\n      const childNodeTree = traverse({\n        currentNode: components[child],\n        components,\n        filterFields,\n        selectedChartId });\n\n\n      const childType = components[child].type;\n      if (FILTER_SCOPE_CONTAINER_TYPES.includes(childType)) {\n        children.push(childNodeTree);\n      } else {\n        children = children.concat(childNodeTree);\n      }\n    });\n  }\n\n  if (FILTER_SCOPE_CONTAINER_TYPES.includes(type)) {\n    let label = null;\n    if (type === DASHBOARD_ROOT_TYPE) {\n      label = t('All charts');\n    } else {\n      label =\n      currentNode.meta && currentNode.meta.text ?\n      currentNode.meta.text :\n      `${type} ${currentNode.id}`;\n    }\n\n    return {\n      value: currentNode.id,\n      label,\n      type,\n      children };\n\n  }\n\n  return children;\n}\n\nexport default function getFilterScopeNodesTree({\n  components = {},\n  filterFields = [],\n  selectedChartId })\n{\n  if (_isEmpty(components)) {\n    return [];\n  }\n\n  const root = traverse({\n    currentNode: components[DASHBOARD_ROOT_ID],\n    components,\n    filterFields,\n    selectedChartId });\n\n  return [\n  {\n    ...root }];\n\n\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(FILTER_SCOPE_CONTAINER_TYPES, \"FILTER_SCOPE_CONTAINER_TYPES\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/util/getFilterScopeNodesTree.js\");reactHotLoader.register(traverse, \"traverse\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/util/getFilterScopeNodesTree.js\");reactHotLoader.register(getFilterScopeNodesTree, \"getFilterScopeNodesTree\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/util/getFilterScopeNodesTree.js\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(__signature__, \"__signature__\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/util/getFilterScopeNodesTree.js\");reactHotLoader.register(FILTER_SCOPE_CONTAINER_TYPES, \"FILTER_SCOPE_CONTAINER_TYPES\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/util/getFilterScopeNodesTree.js\");reactHotLoader.register(traverse, \"traverse\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/util/getFilterScopeNodesTree.js\");reactHotLoader.register(getFilterScopeNodesTree, \"getFilterScopeNodesTree\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/util/getFilterScopeNodesTree.js\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/util/getFilterScopeNodesTree.js"],"names":["FILTER_SCOPE_CONTAINER_TYPES","traverse","currentNode","components","filterFields","CHART_TYPE","chartNode","value","label","type","chartId","showCheckbox","selectedChartId","children","filterField","childNodeTree","childType","t","id","getFilterScopeNodesTree","root"],"mappings":"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","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { isEmpty } from 'lodash';\nimport { t } from '@superset-ui/core';\n\nimport { DASHBOARD_ROOT_ID } from './constants';\nimport { CHART_TYPE, DASHBOARD_ROOT_TYPE, TAB_TYPE } from './componentTypes';\n\nconst FILTER_SCOPE_CONTAINER_TYPES = [TAB_TYPE, DASHBOARD_ROOT_TYPE];\n\nfunction traverse({\n  currentNode = {},\n  components = {},\n  filterFields = [],\n  selectedChartId,\n}) {\n  if (!currentNode) {\n    return null;\n  }\n\n  const { type } = currentNode;\n  if (\n    CHART_TYPE === type &&\n    currentNode &&\n    currentNode.meta &&\n    currentNode.meta.chartId\n  ) {\n    const chartNode = {\n      value: currentNode.meta.chartId,\n      label:\n        currentNode.meta.sliceName || `${type} ${currentNode.meta.chartId}`,\n      type,\n      showCheckbox: selectedChartId !== currentNode.meta.chartId,\n    };\n\n    return {\n      ...chartNode,\n      children: filterFields.map(filterField => ({\n        value: `${currentNode.meta.chartId}:${filterField}`,\n        label: `${chartNode.label}`,\n        type: 'filter_box',\n        showCheckbox: false,\n      })),\n    };\n  }\n\n  let children = [];\n  if (currentNode.children && currentNode.children.length) {\n    currentNode.children.forEach(child => {\n      const childNodeTree = traverse({\n        currentNode: components[child],\n        components,\n        filterFields,\n        selectedChartId,\n      });\n\n      const childType = components[child].type;\n      if (FILTER_SCOPE_CONTAINER_TYPES.includes(childType)) {\n        children.push(childNodeTree);\n      } else {\n        children = children.concat(childNodeTree);\n      }\n    });\n  }\n\n  if (FILTER_SCOPE_CONTAINER_TYPES.includes(type)) {\n    let label = null;\n    if (type === DASHBOARD_ROOT_TYPE) {\n      label = t('All charts');\n    } else {\n      label =\n        currentNode.meta && currentNode.meta.text\n          ? currentNode.meta.text\n          : `${type} ${currentNode.id}`;\n    }\n\n    return {\n      value: currentNode.id,\n      label,\n      type,\n      children,\n    };\n  }\n\n  return children;\n}\n\nexport default function getFilterScopeNodesTree({\n  components = {},\n  filterFields = [],\n  selectedChartId,\n}) {\n  if (isEmpty(components)) {\n    return [];\n  }\n\n  const root = traverse({\n    currentNode: components[DASHBOARD_ROOT_ID],\n    components,\n    filterFields,\n    selectedChartId,\n  });\n  return [\n    {\n      ...root,\n    },\n  ];\n}\n"]},"metadata":{},"sourceType":"module"}