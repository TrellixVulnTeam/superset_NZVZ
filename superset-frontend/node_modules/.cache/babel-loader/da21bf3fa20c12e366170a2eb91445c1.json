{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/my_plugin/superset/superset-frontend/src/views/CRUD/data/database/DatabaseModal/index.tsx\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();import _URLSearchParams from \"@babel/runtime-corejs3/core-js-stable/url-search-params\";var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { t, FeatureFlag, isFeatureEnabled } from '@superset-ui/core';\nimport React, { useEffect, useState, useReducer } from 'react';\nimport Tabs from 'src/components/Tabs';\nimport { Select } from 'src/common/components';\nimport Alert from 'src/components/Alert';\nimport Modal from 'src/components/Modal';\nimport Button from 'src/components/Button';\nimport IconButton from 'src/components/IconButton';\nimport InfoTooltip from 'src/components/InfoTooltip';\nimport withToasts from 'src/components/MessageToasts/withToasts';\nimport { testDatabaseConnection, useSingleViewResource, useAvailableDatabases, useDatabaseValidation, getDatabaseImages, getConnectionAlert } from 'src/views/CRUD/hooks';\nimport { useCommonConf } from 'src/views/CRUD/data/database/state';\nimport { CONFIGURATION_METHOD } from 'src/views/CRUD/data/database/types';\nimport Loading from 'src/components/Loading';\nimport ExtraOptions from './ExtraOptions';\nimport SqlAlchemyForm from './SqlAlchemyForm';\nimport DatabaseConnectionForm from './DatabaseConnectionForm';\nimport { antDErrorAlertStyles, antDAlertStyles, StyledAlertMargin, antDModalNoPaddingStyles, antDModalStyles, antDTabsStyles, buttonLinkStyles, alchemyButtonLinkStyles, TabHeader, formHelperStyles, formStyles, StyledAlignment, SelectDatabaseStyles, infoTooltip, StyledFooterButton, StyledStickyHeader } from './styles';\nimport ModalHeader, { DOCUMENTATION_LINK } from './ModalHeader';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst engineSpecificAlertMapping = {\n  gsheets: {\n    message: 'Why do I need to create a database?',\n    description: 'To begin using your Google Sheets, you need to create a database first. ' +\n    'Databases are used as a way to identify ' +\n    'your data so that it can be queried and visualized. This ' +\n    'database will hold all of your individual Google Sheets ' +\n    'you choose to connect here.' } };\n\n\nconst errorAlertMapping = {\n  CONNECTION_MISSING_PARAMETERS_ERROR: {\n    message: 'Missing Required Fields',\n    description: 'Please complete all required fields.' },\n\n  CONNECTION_INVALID_HOSTNAME_ERROR: {\n    message: 'Could not verify the host',\n    description: 'The host is invalid. Please verify that this field is entered correctly.' },\n\n  CONNECTION_PORT_CLOSED_ERROR: {\n    message: 'Port is closed',\n    description: 'Please verify that port is open to connect.' },\n\n  CONNECTION_INVALID_PORT_ERROR: {\n    message: 'Invalid Port Number',\n    description: 'The port must be a whole number less than or equal to 65535.' },\n\n  CONNECTION_ACCESS_DENIED_ERROR: {\n    message: 'Invalid account information',\n    description: 'Either the username or password is incorrect.' },\n\n  CONNECTION_INVALID_PASSWORD_ERROR: {\n    message: 'Invalid account information',\n    description: 'Either the username or password is incorrect.' },\n\n  INVALID_PAYLOAD_SCHEMA_ERROR: {\n    message: 'Incorrect Fields',\n    description: 'Please make sure all fields are filled out correctly' },\n\n  TABLE_DOES_NOT_EXIST_ERROR: {\n    message: 'URL could not be identified',\n    description: 'The URL could not be identified. Please check for typos and make sure that \"Type of google sheet allowed\" selection matches the input' } };\n\n\nvar ActionType;\n(function (ActionType) {\n  ActionType[ActionType[\"configMethodChange\"] = 0] = \"configMethodChange\";\n  ActionType[ActionType[\"dbSelected\"] = 1] = \"dbSelected\";\n  ActionType[ActionType[\"editorChange\"] = 2] = \"editorChange\";\n  ActionType[ActionType[\"fetched\"] = 3] = \"fetched\";\n  ActionType[ActionType[\"inputChange\"] = 4] = \"inputChange\";\n  ActionType[ActionType[\"parametersChange\"] = 5] = \"parametersChange\";\n  ActionType[ActionType[\"reset\"] = 6] = \"reset\";\n  ActionType[ActionType[\"textChange\"] = 7] = \"textChange\";\n  ActionType[ActionType[\"extraInputChange\"] = 8] = \"extraInputChange\";\n  ActionType[ActionType[\"extraEditorChange\"] = 9] = \"extraEditorChange\";\n  ActionType[ActionType[\"addTableCatalogSheet\"] = 10] = \"addTableCatalogSheet\";\n  ActionType[ActionType[\"removeTableCatalogSheet\"] = 11] = \"removeTableCatalogSheet\";\n  ActionType[ActionType[\"queryChange\"] = 12] = \"queryChange\";\n})(ActionType || (ActionType = {}));\nfunction dbReducer(state, action) {var _action$payload$type, _trimmedState$catalog2, _action$payload, _action$payload$param;\n  const trimmedState = {\n    ...(state || {}) };\n\n  let query = {};\n  let query_input = '';\n  let deserializeExtraJSON = {};\n  let extra_json;\n  switch (action.type) {\n    case ActionType.extraEditorChange:\n      return {\n        ...trimmedState,\n        extra_json: {\n          ...trimmedState.extra_json,\n          [action.payload.name]: action.payload.json } };\n\n\n    case ActionType.extraInputChange:\n      if (action.payload.name === 'schema_cache_timeout' ||\n      action.payload.name === 'table_cache_timeout') {var _trimmedState$extra_j;\n        return {\n          ...trimmedState,\n          extra_json: {\n            ...trimmedState.extra_json,\n            metadata_cache_timeout: {\n              ...((_trimmedState$extra_j = trimmedState.extra_json) == null ? void 0 : _trimmedState$extra_j.metadata_cache_timeout),\n              [action.payload.name]: action.payload.value } } };\n\n\n\n      }\n      if (action.payload.name === 'schemas_allowed_for_csv_upload') {\n        return {\n          ...trimmedState,\n          extra_json: {\n            ...trimmedState.extra_json,\n            schemas_allowed_for_csv_upload: (action.payload.value || '').split(',') } };\n\n\n      }\n      return {\n        ...trimmedState,\n        extra_json: {\n          ...trimmedState.extra_json,\n          [action.payload.name]: action.payload.type === 'checkbox' ?\n          action.payload.checked :\n          action.payload.value } };\n\n\n    case ActionType.inputChange:\n      if (action.payload.type === 'checkbox') {\n        return {\n          ...trimmedState,\n          [action.payload.name]: action.payload.checked };\n\n      }\n      return {\n        ...trimmedState,\n        [action.payload.name]: action.payload.value };\n\n    case ActionType.parametersChange:\n      if (trimmedState.catalog !== undefined && (_action$payload$type =\n      action.payload.type) != null && _action$payload$type.startsWith('catalog')) {var _action$payload$type2, _trimmedState$catalog;\n        // Formatting wrapping google sheets table catalog\n        const idx = (_action$payload$type2 = action.payload.type) == null ? void 0 : _action$payload$type2.split('-')[1];\n        const catalogToUpdate = (trimmedState == null ? void 0 : trimmedState.catalog[idx]) || {};\n        catalogToUpdate[action.payload.name] = action.payload.value;\n        const paramatersCatalog = {};\n        // eslint-disable-next-line array-callback-return\n        (_trimmedState$catalog = trimmedState.catalog) == null ? void 0 : _trimmedState$catalog.map((item) => {\n          paramatersCatalog[item.name] = item.value;\n        });\n        return {\n          ...trimmedState,\n          parameters: {\n            ...trimmedState.parameters,\n            catalog: paramatersCatalog } };\n\n\n      }\n      return {\n        ...trimmedState,\n        parameters: {\n          ...trimmedState.parameters,\n          [action.payload.name]: action.payload.value } };\n\n\n    case ActionType.addTableCatalogSheet:\n      if (trimmedState.catalog !== undefined) {\n        return {\n          ...trimmedState,\n          catalog: [...trimmedState.catalog, { name: '', value: '' }] };\n\n      }\n      return {\n        ...trimmedState,\n        catalog: [{ name: '', value: '' }] };\n\n    case ActionType.removeTableCatalogSheet:\n      (_trimmedState$catalog2 = trimmedState.catalog) == null ? void 0 : _trimmedState$catalog2.splice(action.payload.indexToDelete, 1);\n      return {\n        ...trimmedState };\n\n    case ActionType.editorChange:\n      return {\n        ...trimmedState,\n        [action.payload.name]: action.payload.json };\n\n    case ActionType.queryChange:\n      return {\n        ...trimmedState,\n        parameters: {\n          ...trimmedState.parameters,\n          query: Object.fromEntries(new _URLSearchParams(action.payload.value)) },\n\n        query_input: action.payload.value };\n\n    case ActionType.textChange:\n      return {\n        ...trimmedState,\n        [action.payload.name]: action.payload.value };\n\n    case ActionType.fetched:\n      // convert all the keys in this payload into strings\n      if (action.payload.extra) {var _extra_json, _extra_json2, _extra_json3;\n        extra_json = {\n          ...JSON.parse(action.payload.extra || '') };\n\n        deserializeExtraJSON = {\n          ...JSON.parse(action.payload.extra || ''),\n          metadata_params: JSON.stringify((_extra_json = extra_json) == null ? void 0 : _extra_json.metadata_params),\n          engine_params: JSON.stringify((_extra_json2 = extra_json) == null ? void 0 : _extra_json2.engine_params),\n          schemas_allowed_for_csv_upload: (_extra_json3 = extra_json) == null ? void 0 : _extra_json3.schemas_allowed_for_csv_upload };\n\n      }\n      // convert query to a string and store in query_input\n      query = ((_action$payload = action.payload) == null ? void 0 : (_action$payload$param = _action$payload.parameters) == null ? void 0 : _action$payload$param.query) || {};\n      query_input = Object.entries(query).\n      map(([key, value]) => `${key}=${value}`).\n      join('&');\n      if (action.payload.encrypted_extra &&\n      action.payload.configuration_method ===\n      CONFIGURATION_METHOD.DYNAMIC_FORM) {var _extra_json4, _extra_json4$engine_p;\n        const engineParamsCatalog = Object.keys(((_extra_json4 = extra_json) == null ? void 0 : (_extra_json4$engine_p = _extra_json4.engine_params) == null ? void 0 : _extra_json4$engine_p.catalog) || {}).map((e) => {var _extra_json5, _extra_json5$engine_p;return {\n            name: e,\n            value: (_extra_json5 = extra_json) == null ? void 0 : (_extra_json5$engine_p = _extra_json5.engine_params) == null ? void 0 : _extra_json5$engine_p.catalog[e] };});\n\n        return {\n          ...action.payload,\n          engine: action.payload.backend || trimmedState.engine,\n          configuration_method: action.payload.configuration_method,\n          extra_json: deserializeExtraJSON,\n          catalog: engineParamsCatalog,\n          parameters: action.payload.parameters,\n          query_input };\n\n      }\n      return {\n        ...action.payload,\n        encrypted_extra: action.payload.encrypted_extra || '',\n        engine: action.payload.backend || trimmedState.engine,\n        configuration_method: action.payload.configuration_method,\n        extra_json: deserializeExtraJSON,\n        parameters: action.payload.parameters,\n        query_input };\n\n    case ActionType.dbSelected:\n      return {\n        ...action.payload };\n\n    case ActionType.configMethodChange:\n      return {\n        ...action.payload };\n\n    case ActionType.reset:\n    default:\n      return null;}\n\n}\nconst DEFAULT_TAB_KEY = '1';\nconst serializeExtra = (extraJson) => JSON.stringify({\n  ...extraJson,\n  metadata_params: JSON.parse((extraJson == null ? void 0 : extraJson.metadata_params) || '{}'),\n  engine_params: JSON.parse((extraJson == null ? void 0 : extraJson.engine_params) || '{}'),\n  schemas_allowed_for_csv_upload: ((extraJson == null ? void 0 : extraJson.schemas_allowed_for_csv_upload) || []).filter((schema) => schema !== '') });\n\nconst DatabaseModal = ({ addDangerToast, addSuccessToast, onDatabaseAdd, onHide, show, databaseId }) => {var _availableDbs$databas3;\n  const [db, setDB] = useReducer(dbReducer, null);\n  const [tabKey, setTabKey] = useState(DEFAULT_TAB_KEY);\n  const [availableDbs, getAvailableDbs] = useAvailableDatabases();\n  const [validationErrors, getValidation, setValidationErrors] = useDatabaseValidation();\n  const [hasConnectedDb, setHasConnectedDb] = useState(false);\n  const [dbName, setDbName] = useState('');\n  const [editNewDb, setEditNewDb] = useState(false);\n  const [isLoading, setLoading] = useState(false);\n  const conf = useCommonConf();\n  const dbImages = getDatabaseImages();\n  const connectionAlert = getConnectionAlert();\n  const isEditMode = !!databaseId;\n  const sslForced = isFeatureEnabled(FeatureFlag.FORCE_DATABASE_CONNECTIONS_SSL);\n  const hasAlert = connectionAlert || !!(db != null && db.engine && engineSpecificAlertMapping[db.engine]);\n  const useSqlAlchemyForm = (db == null ? void 0 : db.configuration_method) === CONFIGURATION_METHOD.SQLALCHEMY_URI;\n  const useTabLayout = isEditMode || useSqlAlchemyForm;\n  // Database fetch logic\n  const { state: { loading: dbLoading, resource: dbFetched, error: dbErrors }, fetchResource, createResource, updateResource, clearError } = useSingleViewResource('database', t('database'), addDangerToast);\n  const isDynamic = (engine) => {var _availableDbs$databas, _availableDbs$databas2;return (availableDbs == null ? void 0 : (_availableDbs$databas = availableDbs.databases) == null ? void 0 : (_availableDbs$databas2 = _availableDbs$databas.find((DB) => DB.backend === engine || DB.engine === engine)) == null ? void 0 : _availableDbs$databas2.parameters) !== undefined;};\n  const showDBError = validationErrors || dbErrors;\n  const isEmpty = (data) => data && Object.keys(data).length === 0;\n  const dbModel = (availableDbs == null ? void 0 : (_availableDbs$databas3 = availableDbs.databases) == null ? void 0 : _availableDbs$databas3.find((available) =>\n  // TODO: we need a centralized engine in one place\n  available.engine === (isEditMode ? db == null ? void 0 : db.backend : db == null ? void 0 : db.engine))) || {};\n  // Test Connection logic\n  const testConnection = () => {var _db$database_name;\n    if (!(db != null && db.sqlalchemy_uri)) {\n      addDangerToast(t('Please enter a SQLAlchemy URI to test'));\n      return;\n    }\n    const connection = {\n      sqlalchemy_uri: (db == null ? void 0 : db.sqlalchemy_uri) || '',\n      database_name: (db == null ? void 0 : (_db$database_name = db.database_name) == null ? void 0 : _db$database_name.trim()) || undefined,\n      impersonate_user: (db == null ? void 0 : db.impersonate_user) || undefined,\n      extra: serializeExtra(db == null ? void 0 : db.extra_json) || undefined,\n      encrypted_extra: (db == null ? void 0 : db.encrypted_extra) || '',\n      server_cert: (db == null ? void 0 : db.server_cert) || undefined };\n\n    testDatabaseConnection(connection, addDangerToast, addSuccessToast);\n  };\n  const onClose = () => {\n    setDB({ type: ActionType.reset });\n    setHasConnectedDb(false);\n    setValidationErrors(null); // reset validation errors on close\n    clearError();\n    setEditNewDb(false);\n    onHide();\n  };\n  const onSave = async () => {var _dbToUpdate$parameter5;\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { id, ...update } = db || {};\n    // Clone DB object\n    const dbToUpdate = JSON.parse(JSON.stringify(update));\n    if (dbToUpdate.configuration_method === CONFIGURATION_METHOD.DYNAMIC_FORM) {\n      // Validate DB before saving\n      await getValidation(dbToUpdate, true);\n      if (validationErrors && !isEmpty(validationErrors)) {\n        return;\n      }\n      const parameters_schema = isEditMode ?\n      dbToUpdate.parameters_schema.properties :\n      dbModel == null ? void 0 : dbModel.parameters.properties;\n      const additionalEncryptedExtra = JSON.parse(dbToUpdate.encrypted_extra || '{}');\n      const paramConfigArray = Object.keys(parameters_schema || {});\n      paramConfigArray.forEach((paramConfig) => {var _dbToUpdate$parameter;\n        /*\n         * Parameters that are annotated with the `x-encrypted-extra` properties should be moved to\n         * `encrypted_extra`, so that they are stored encrypted in the backend when the database is\n         * created or edited.\n         */\n        if (parameters_schema[paramConfig]['x-encrypted-extra'] && (_dbToUpdate$parameter =\n        dbToUpdate.parameters) != null && _dbToUpdate$parameter[paramConfig]) {var _dbToUpdate$parameter2;\n          if (typeof ((_dbToUpdate$parameter2 = dbToUpdate.parameters) == null ? void 0 : _dbToUpdate$parameter2[paramConfig]) === 'object') {var _dbToUpdate$parameter3;\n            // add new encrypted extra to encrypted_extra object\n            additionalEncryptedExtra[paramConfig] = (_dbToUpdate$parameter3 =\n            dbToUpdate.parameters) == null ? void 0 : _dbToUpdate$parameter3[paramConfig];\n            // The backend expects `encrypted_extra` as a string for historical reasons.\n            dbToUpdate.parameters[paramConfig] = JSON.stringify(dbToUpdate.parameters[paramConfig]);\n          } else\n          {var _dbToUpdate$parameter4;\n            additionalEncryptedExtra[paramConfig] = JSON.parse(((_dbToUpdate$parameter4 = dbToUpdate.parameters) == null ? void 0 : _dbToUpdate$parameter4[paramConfig]) || '{}');\n          }\n        }\n      });\n      // cast the new encrypted extra object into a string\n      dbToUpdate.encrypted_extra = JSON.stringify(additionalEncryptedExtra);\n      // this needs to be added by default to gsheets\n      if (dbToUpdate.engine === 'gsheets') {\n        dbToUpdate.impersonate_user = true;\n      }\n    }\n    if (dbToUpdate != null && (_dbToUpdate$parameter5 = dbToUpdate.parameters) != null && _dbToUpdate$parameter5.catalog) {\n      // need to stringify gsheets catalog to allow it to be seralized\n      dbToUpdate.extra_json = {\n        engine_params: JSON.stringify({\n          catalog: dbToUpdate.parameters.catalog }) };\n\n\n    }\n    if (dbToUpdate != null && dbToUpdate.extra_json) {\n      // convert extra_json to back to string\n      dbToUpdate.extra = serializeExtra(dbToUpdate == null ? void 0 : dbToUpdate.extra_json);\n    }\n    if (db != null && db.id) {\n      setLoading(true);\n      const result = await updateResource(db.id, dbToUpdate, dbToUpdate.configuration_method === CONFIGURATION_METHOD.DYNAMIC_FORM);\n      if (result) {\n        if (onDatabaseAdd) {\n          onDatabaseAdd();\n        }\n        if (!editNewDb) {\n          onClose();\n        }\n      }\n    } else\n    if (db) {\n      // Create\n      setLoading(true);\n      const dbId = await createResource(dbToUpdate, dbToUpdate.configuration_method === CONFIGURATION_METHOD.DYNAMIC_FORM);\n      if (dbId) {\n        setHasConnectedDb(true);\n        if (onDatabaseAdd) {\n          onDatabaseAdd();\n        }\n        if (useTabLayout) {\n          // tab layout only has one step\n          // so it should close immediately on save\n          onClose();\n        }\n      }\n    }\n    setEditNewDb(false);\n    setLoading(false);\n  };\n  const onChange = (type, payload) => {\n    setDB({ type, payload });\n  };\n  // Initialize\n  const fetchDB = () => {\n    if (isEditMode && databaseId) {\n      if (!dbLoading) {\n        fetchResource(databaseId).catch((e) => addDangerToast(t('Sorry there was an error fetching database information: %s', e.message)));\n      }\n    }\n  };\n  const setDatabaseModel = (database_name) => {\n    if (database_name === 'Other') {\n      // Allow users to connect to DB via legacy SQLA form\n      setDB({\n        type: ActionType.dbSelected,\n        payload: {\n          database_name,\n          configuration_method: CONFIGURATION_METHOD.SQLALCHEMY_URI,\n          engine: undefined } });\n\n\n    } else\n    {\n      const selectedDbModel = availableDbs == null ? void 0 : availableDbs.databases.filter((db) => db.name === database_name)[0];\n      const { engine, parameters } = selectedDbModel;\n      const isDynamic = parameters !== undefined;\n      setDB({\n        type: ActionType.dbSelected,\n        payload: {\n          database_name,\n          engine,\n          configuration_method: isDynamic ?\n          CONFIGURATION_METHOD.DYNAMIC_FORM :\n          CONFIGURATION_METHOD.SQLALCHEMY_URI,\n          paramProperties: parameters == null ? void 0 : parameters.properties } });\n\n\n    }\n    setDB({ type: ActionType.addTableCatalogSheet });\n  };\n  const renderAvailableSelector = () => {var _ref, _connectionAlert$ADD_;return ___EmotionJSX(\"div\", { className: \"available\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 460, columnNumber: 44 } },\n    ___EmotionJSX(\"h4\", { className: \"available-label\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 461, columnNumber: 7 } }, \"Or choose from a list of other databases we support:\"),\n\n\n    ___EmotionJSX(\"div\", { className: \"control-label\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 464, columnNumber: 7 } }, \"Supported databases\"),\n    ___EmotionJSX(Select, { className: \"available-select\", onChange: setDatabaseModel, placeholder: \"Choose a database...\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 465, columnNumber: 7 } }, (_ref =\n    [...((availableDbs == null ? void 0 : availableDbs.databases) || [])]) == null ? void 0 : _ref.\n    sort((a, b) => a.name.localeCompare(b.name)).\n    map((database) => ___EmotionJSX(Select.Option, { value: database.name, key: database.name, __self: this, __source: { fileName: _jsxFileName, lineNumber: 468, columnNumber: 33 } },\n    database.name)),\n\n\n    ___EmotionJSX(Select.Option, { value: \"Other\", key: \"Other\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 472, columnNumber: 9 } }, \"Other\")),\n\n\n\n    ___EmotionJSX(Alert, { showIcon: true, closable: false, css: (theme) => antDAlertStyles(theme), type: \"info\", message: (connectionAlert == null ? void 0 : (_connectionAlert$ADD_ = connectionAlert.ADD_DATABASE) == null ? void 0 : _connectionAlert$ADD_.message) ||\n      t('Want to add a new database?'), description: connectionAlert != null && connectionAlert.ADD_DATABASE ? ___EmotionJSX(React.Fragment, null, \"Any databases that allow connections via SQL Alchemy URIs can be added.\",\n\n      ' ',\n      ___EmotionJSX(\"a\", { href: connectionAlert == null ? void 0 : connectionAlert.ADD_DATABASE.contact_link, target: \"_blank\", rel: \"noopener noreferrer\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 480, columnNumber: 15 } },\n      connectionAlert == null ? void 0 : connectionAlert.ADD_DATABASE.contact_description_link),\n      ' ',\n      connectionAlert == null ? void 0 : connectionAlert.ADD_DATABASE.description) :\n      ___EmotionJSX(React.Fragment, null, \"Any databases that allow connections via SQL Alchemy URIs can be added. Learn about how to connect a database driver\",\n\n      ' ',\n      ___EmotionJSX(\"a\", { href: DOCUMENTATION_LINK, target: \"_blank\", rel: \"noopener noreferrer\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 487, columnNumber: 15 } }, \"here\"), \".\"), __self: this, __source: { fileName: _jsxFileName, lineNumber: 476, columnNumber: 7 } }));};\n\n\n\n\n\n  const renderPreferredSelector = () => {var _availableDbs$databas4;return ___EmotionJSX(\"div\", { className: \"preferred\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 493, columnNumber: 44 } },\n    availableDbs == null ? void 0 : (_availableDbs$databas4 = availableDbs.databases) == null ? void 0 : _availableDbs$databas4.\n    filter((db) => db.preferred).\n    map((database) => ___EmotionJSX(IconButton, { className: \"preferred-item\", onClick: () => setDatabaseModel(database.name), buttonText: database.name, icon: dbImages == null ? void 0 : dbImages[database.engine], __self: this, __source: { fileName: _jsxFileName, lineNumber: 496, columnNumber: 33 } })));};\n\n  const handleBackButtonOnFinish = () => {\n    if (dbFetched) {\n      fetchResource(dbFetched.id);\n    }\n    setEditNewDb(true);\n  };\n  const handleBackButtonOnConnect = () => {\n    if (editNewDb) {\n      setHasConnectedDb(false);\n    }\n    setDB({ type: ActionType.reset });\n  };\n  const renderModalFooter = () => {\n    if (db) {\n      // if db show back + connenct\n      if (!hasConnectedDb || editNewDb) {\n        return ___EmotionJSX(React.Fragment, null,\n        ___EmotionJSX(StyledFooterButton, { key: \"back\", onClick: handleBackButtonOnConnect, __self: this, __source: { fileName: _jsxFileName, lineNumber: 515, columnNumber: 13 } }, \"Back\"),\n\n\n        ___EmotionJSX(StyledFooterButton, { key: \"submit\", buttonStyle: \"primary\", onClick: onSave, __self: this, __source: { fileName: _jsxFileName, lineNumber: 518, columnNumber: 13 } }, \"Connect\"));\n\n\n\n      }\n      return ___EmotionJSX(React.Fragment, null,\n      ___EmotionJSX(StyledFooterButton, { key: \"back\", onClick: handleBackButtonOnFinish, __self: this, __source: { fileName: _jsxFileName, lineNumber: 524, columnNumber: 11 } }, \"Back\"),\n\n\n      ___EmotionJSX(StyledFooterButton, { key: \"submit\", buttonStyle: \"primary\", onClick: onSave, \"data-test\": \"modal-confirm-button\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 527, columnNumber: 11 } }, \"Finish\"));\n\n\n\n    }\n    return [];\n  };\n  const renderEditModalFooter = () => ___EmotionJSX(React.Fragment, null,\n  ___EmotionJSX(StyledFooterButton, { key: \"close\", onClick: onClose, __self: this, __source: { fileName: _jsxFileName, lineNumber: 535, columnNumber: 7 } }, \"Close\"),\n\n\n  ___EmotionJSX(StyledFooterButton, { key: \"submit\", buttonStyle: \"primary\", onClick: onSave, __self: this, __source: { fileName: _jsxFileName, lineNumber: 538, columnNumber: 7 } }, \"Finish\"));\n\n\n\n  useEffect(() => {\n    if (show) {\n      setTabKey(DEFAULT_TAB_KEY);\n      getAvailableDbs();\n      setLoading(true);\n    }\n    if (databaseId && show) {\n      fetchDB();\n    }\n  }, [show, databaseId]);\n  useEffect(() => {\n    if (dbFetched) {\n      setDB({\n        type: ActionType.fetched,\n        payload: dbFetched });\n\n      // keep a copy of the name separate for display purposes\n      // because it shouldn't change when the form is updated\n      setDbName(dbFetched.database_name);\n    }\n  }, [dbFetched]);\n  useEffect(() => {\n    if (isLoading) {\n      setLoading(false);\n    }\n  }, [availableDbs]);\n  const tabChange = (key) => {\n    setTabKey(key);\n  };\n  const renderStepTwoAlert = () => {var _connectionAlert$REGI, _engineSpecificAlertM, _connectionAlert$DEFA, _engineSpecificAlertM2, _connectionAlert$DEFA2;\n    const { hostname } = window.location;\n    let ipAlert = (connectionAlert == null ? void 0 : (_connectionAlert$REGI = connectionAlert.REGIONAL_IPS) == null ? void 0 : _connectionAlert$REGI.default) || '';\n    const regionalIPs = (connectionAlert == null ? void 0 : connectionAlert.REGIONAL_IPS) || {};\n    Object.entries(regionalIPs).forEach(([ipRegion, ipRange]) => {\n      const regex = new RegExp(ipRegion);\n      if (hostname.match(regex)) {\n        ipAlert = ipRange;\n      }\n    });\n    return (db == null ? void 0 : db.engine) && ___EmotionJSX(StyledAlertMargin, { __self: this, __source: { fileName: _jsxFileName, lineNumber: 581, columnNumber: 32 } },\n    ___EmotionJSX(Alert, { closable: false, css: (theme) => antDAlertStyles(theme), type: \"info\", showIcon: true, message: ((_engineSpecificAlertM = engineSpecificAlertMapping[db.engine]) == null ? void 0 : _engineSpecificAlertM.message) || (\n      connectionAlert == null ? void 0 : (_connectionAlert$DEFA = connectionAlert.DEFAULT) == null ? void 0 : _connectionAlert$DEFA.message), description: ((_engineSpecificAlertM2 = engineSpecificAlertMapping[db.engine]) == null ? void 0 : _engineSpecificAlertM2.description) ||\n      (connectionAlert == null ? void 0 : (_connectionAlert$DEFA2 = connectionAlert.DEFAULT) == null ? void 0 : _connectionAlert$DEFA2.description) + ipAlert, __self: this, __source: { fileName: _jsxFileName, lineNumber: 582, columnNumber: 11 } }));\n\n  };\n  const errorAlert = () => {\n    if (isEmpty(dbErrors) ||\n    isEmpty(validationErrors) &&\n    !((validationErrors == null ? void 0 : validationErrors.error_type) in errorAlertMapping)) {\n      return ___EmotionJSX(React.Fragment, null);\n    }\n    if (validationErrors) {var _errorAlertMapping$va, _errorAlertMapping$va2;\n      return ___EmotionJSX(Alert, { type: \"error\", css: (theme) => antDErrorAlertStyles(theme), message: ((_errorAlertMapping$va = errorAlertMapping[validationErrors == null ? void 0 : validationErrors.error_type]) == null ? void 0 : _errorAlertMapping$va.message) || (\n        validationErrors == null ? void 0 : validationErrors.error_type), description: ((_errorAlertMapping$va2 = errorAlertMapping[validationErrors == null ? void 0 : validationErrors.error_type]) == null ? void 0 : _errorAlertMapping$va2.description) ||\n        JSON.stringify(validationErrors), showIcon: true, closable: false, __self: this, __source: { fileName: _jsxFileName, lineNumber: 594, columnNumber: 21 } });\n    }\n    const message = typeof dbErrors === 'object' ? Object.values(dbErrors) : [];\n    return ___EmotionJSX(Alert, { type: \"error\", css: (theme) => antDErrorAlertStyles(theme), message: \"Database Creation Error\", description: (message == null ? void 0 : message[0]) || dbErrors, __self: this, __source: { fileName: _jsxFileName, lineNumber: 599, columnNumber: 17 } });\n  };\n  const renderFinishState = () => {\n    if (!editNewDb) {\n      return ___EmotionJSX(ExtraOptions, { db: db, onInputChange: ({ target }) => onChange(ActionType.inputChange, {\n          type: target.type,\n          name: target.name,\n          checked: target.checked,\n          value: target.value }),\n        onTextChange: ({ target }) => onChange(ActionType.textChange, {\n          name: target.name,\n          value: target.value }),\n        onEditorChange: (payload) => onChange(ActionType.editorChange, payload), onExtraInputChange: ({ target }) => {\n          onChange(ActionType.extraInputChange, {\n            type: target.type,\n            name: target.name,\n            checked: target.checked,\n            value: target.value });\n\n        }, onExtraEditorChange: (payload) => onChange(ActionType.extraEditorChange, payload), __self: this, __source: { fileName: _jsxFileName, lineNumber: 603, columnNumber: 21 } });\n    }\n    return ___EmotionJSX(DatabaseConnectionForm, { isEditMode: true, sslForced: sslForced, dbModel: dbModel, db: db, onParametersChange: ({ target }) => onChange(ActionType.parametersChange, {\n        type: target.type,\n        name: target.name,\n        checked: target.checked,\n        value: target.value }),\n      onChange: ({ target }) => onChange(ActionType.textChange, {\n        name: target.name,\n        value: target.value }),\n      onQueryChange: ({ target }) => onChange(ActionType.queryChange, {\n        name: target.name,\n        value: target.value }),\n      onAddTableCatalog: () => setDB({ type: ActionType.addTableCatalogSheet }), onRemoveTableCatalog: (idx) => setDB({\n        type: ActionType.removeTableCatalogSheet,\n        payload: { indexToDelete: idx } }),\n      getValidation: () => getValidation(db), validationErrors: validationErrors, __self: this, __source: { fileName: _jsxFileName, lineNumber: 620, columnNumber: 17 } });\n  };\n  return useTabLayout ? ___EmotionJSX(Modal, { css: (theme) => [\n    antDTabsStyles,\n    antDModalNoPaddingStyles,\n    antDModalStyles(theme),\n    formHelperStyles(theme),\n    formStyles(theme)],\n    name: \"database\", \"data-test\": \"database-modal\", onHandledPrimaryAction: onSave, onHide: onClose, primaryButtonName: isEditMode ? t('Save') : t('Connect'), width: \"500px\", centered: true, show: show, title: ___EmotionJSX(\"h4\", { __self: this, __source: { fileName: _jsxFileName, lineNumber: 642, columnNumber: 204 } }, isEditMode ? t('Edit database') : t('Connect a database')), footer: isEditMode ? renderEditModalFooter() : renderModalFooter(), __self: this, __source: { fileName: _jsxFileName, lineNumber: 636, columnNumber: 28 } },\n  ___EmotionJSX(StyledStickyHeader, { __self: this, __source: { fileName: _jsxFileName, lineNumber: 643, columnNumber: 7 } },\n  ___EmotionJSX(TabHeader, { __self: this, __source: { fileName: _jsxFileName, lineNumber: 644, columnNumber: 9 } },\n  ___EmotionJSX(ModalHeader, { isLoading: isLoading, isEditMode: isEditMode, useSqlAlchemyForm: useSqlAlchemyForm, hasConnectedDb: hasConnectedDb, db: db, dbName: dbName, dbModel: dbModel, __self: this, __source: { fileName: _jsxFileName, lineNumber: 645, columnNumber: 11 } }))),\n\n\n  ___EmotionJSX(Tabs, { defaultActiveKey: DEFAULT_TAB_KEY, activeKey: tabKey, onTabClick: tabChange, animated: { inkBar: true, tabPane: true }, __self: this, __source: { fileName: _jsxFileName, lineNumber: 648, columnNumber: 7 } },\n  ___EmotionJSX(Tabs.TabPane, { tab: ___EmotionJSX(\"span\", { __self: this, __source: { fileName: _jsxFileName, lineNumber: 649, columnNumber: 28 } }, t('Basic')), key: \"1\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 649, columnNumber: 9 } },\n  useSqlAlchemyForm ? ___EmotionJSX(StyledAlignment, { __self: this, __source: { fileName: _jsxFileName, lineNumber: 650, columnNumber: 33 } },\n  ___EmotionJSX(SqlAlchemyForm, { db: db, onInputChange: ({ target }) => onChange(ActionType.inputChange, {\n      type: target.type,\n      name: target.name,\n      checked: target.checked,\n      value: target.value }),\n    conf: conf, testConnection: testConnection, isEditMode: isEditMode, __self: this, __source: { fileName: _jsxFileName, lineNumber: 651, columnNumber: 15 } }),\n  isDynamic((db == null ? void 0 : db.backend) || (db == null ? void 0 : db.engine)) && !isEditMode && ___EmotionJSX(\"div\", { css: (theme) => infoTooltip(theme), __self: this, __source: { fileName: _jsxFileName, lineNumber: 657, columnNumber: 72 } },\n  ___EmotionJSX(Button, { buttonStyle: \"link\", onClick: () => setDB({\n      type: ActionType.configMethodChange,\n      payload: {\n        database_name: db == null ? void 0 : db.database_name,\n        configuration_method: CONFIGURATION_METHOD.DYNAMIC_FORM,\n        engine: db == null ? void 0 : db.engine } }),\n\n    css: (theme) => alchemyButtonLinkStyles(theme), __self: this, __source: { fileName: _jsxFileName, lineNumber: 658, columnNumber: 19 } }, \"Connect this database using the dynamic form instead\"),\n\n\n  ___EmotionJSX(InfoTooltip, { tooltip: t('Click this link to switch to an alternate form that exposes only the required fields needed to connect this database.'), viewBox: \"0 -6 24 24\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 668, columnNumber: 19 } }))) :\n\n  ___EmotionJSX(DatabaseConnectionForm, { isEditMode: true, sslForced: sslForced, dbModel: dbModel, db: db, onParametersChange: ({ target }) => onChange(ActionType.parametersChange, {\n      type: target.type,\n      name: target.name,\n      checked: target.checked,\n      value: target.value }),\n    onChange: ({ target }) => onChange(ActionType.textChange, {\n      name: target.name,\n      value: target.value }),\n    onQueryChange: ({ target }) => onChange(ActionType.queryChange, {\n      name: target.name,\n      value: target.value }),\n    onAddTableCatalog: () => setDB({ type: ActionType.addTableCatalogSheet }), onRemoveTableCatalog: (idx) => setDB({\n      type: ActionType.removeTableCatalogSheet,\n      payload: { indexToDelete: idx } }),\n    getValidation: () => getValidation(db), validationErrors: validationErrors, __self: this, __source: { fileName: _jsxFileName, lineNumber: 670, columnNumber: 36 } }),\n  !isEditMode && ___EmotionJSX(StyledAlertMargin, { __self: this, __source: { fileName: _jsxFileName, lineNumber: 685, columnNumber: 28 } },\n  ___EmotionJSX(Alert, { closable: false, css: (theme) => antDAlertStyles(theme), message: \"Additional fields may be required\", showIcon: true, description: ___EmotionJSX(React.Fragment, null, \"Select databases require additional fields to be completed in the Advanced tab to successfully connect the database. Learn what requirements your databases has\",\n\n\n    ' ',\n    ___EmotionJSX(\"a\", { href: DOCUMENTATION_LINK, target: \"_blank\", rel: \"noopener noreferrer\", className: \"additional-fields-alert-description\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 690, columnNumber: 21 } }, \"here\"), \".\"),\n\n\n\n    type: \"info\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 686, columnNumber: 15 } }))),\n\n\n  ___EmotionJSX(Tabs.TabPane, { tab: ___EmotionJSX(\"span\", { __self: this, __source: { fileName: _jsxFileName, lineNumber: 697, columnNumber: 28 } }, t('Advanced')), key: \"2\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 697, columnNumber: 9 } },\n  ___EmotionJSX(ExtraOptions, { db: db, onInputChange: ({ target }) => onChange(ActionType.inputChange, {\n      type: target.type,\n      name: target.name,\n      checked: target.checked,\n      value: target.value }),\n    onTextChange: ({ target }) => onChange(ActionType.textChange, {\n      name: target.name,\n      value: target.value }),\n    onEditorChange: (payload) => onChange(ActionType.editorChange, payload), onExtraInputChange: ({ target }) => {\n      onChange(ActionType.extraInputChange, {\n        type: target.type,\n        name: target.name,\n        checked: target.checked,\n        value: target.value });\n\n    }, onExtraEditorChange: (payload) => {\n      onChange(ActionType.extraEditorChange, payload);\n    }, __self: this, __source: { fileName: _jsxFileName, lineNumber: 698, columnNumber: 11 } }),\n  showDBError && errorAlert()))) :\n\n\n  ___EmotionJSX(Modal, { css: (theme) => [\n    antDModalNoPaddingStyles,\n    antDModalStyles(theme),\n    formHelperStyles(theme),\n    formStyles(theme)],\n    name: \"database\", onHandledPrimaryAction: onSave, onHide: onClose, primaryButtonName: hasConnectedDb ? t('Finish') : t('Connect'), width: \"500px\", centered: true, show: show, title: ___EmotionJSX(\"h4\", { __self: this, __source: { fileName: _jsxFileName, lineNumber: 724, columnNumber: 183 } }, t('Connect a database')), footer: renderModalFooter(), __self: this, __source: { fileName: _jsxFileName, lineNumber: 719, columnNumber: 18 } },\n  hasConnectedDb ? ___EmotionJSX(React.Fragment, null,\n  ___EmotionJSX(ModalHeader, { isLoading: isLoading, isEditMode: isEditMode, useSqlAlchemyForm: useSqlAlchemyForm, hasConnectedDb: hasConnectedDb, db: db, dbName: dbName, dbModel: dbModel, editNewDb: editNewDb, __self: this, __source: { fileName: _jsxFileName, lineNumber: 726, columnNumber: 11 } }),\n  renderFinishState()) :\n  ___EmotionJSX(React.Fragment, null,\n\n  !isLoading && (\n  !db ? ___EmotionJSX(SelectDatabaseStyles, { __self: this, __source: { fileName: _jsxFileName, lineNumber: 731, columnNumber: 25 } },\n  ___EmotionJSX(ModalHeader, { isLoading: isLoading, isEditMode: isEditMode, useSqlAlchemyForm: useSqlAlchemyForm, hasConnectedDb: hasConnectedDb, db: db, dbName: dbName, dbModel: dbModel, __self: this, __source: { fileName: _jsxFileName, lineNumber: 732, columnNumber: 17 } }),\n  renderPreferredSelector(),\n  renderAvailableSelector()) :\n  ___EmotionJSX(React.Fragment, null,\n  ___EmotionJSX(ModalHeader, { isLoading: isLoading, isEditMode: isEditMode, useSqlAlchemyForm: useSqlAlchemyForm, hasConnectedDb: hasConnectedDb, db: db, dbName: dbName, dbModel: dbModel, __self: this, __source: { fileName: _jsxFileName, lineNumber: 736, columnNumber: 17 } }),\n  hasAlert && renderStepTwoAlert(),\n  ___EmotionJSX(DatabaseConnectionForm, { db: db, sslForced: sslForced, dbModel: dbModel, onAddTableCatalog: () => {\n      setDB({ type: ActionType.addTableCatalogSheet });\n    }, onQueryChange: ({ target }) => onChange(ActionType.queryChange, {\n      name: target.name,\n      value: target.value }),\n    onRemoveTableCatalog: (idx) => {\n      setDB({\n        type: ActionType.removeTableCatalogSheet,\n        payload: { indexToDelete: idx } });\n\n    }, onParametersChange: ({ target }) => onChange(ActionType.parametersChange, {\n      type: target.type,\n      name: target.name,\n      checked: target.checked,\n      value: target.value }),\n    onChange: ({ target }) => onChange(ActionType.textChange, {\n      name: target.name,\n      value: target.value }),\n    getValidation: () => getValidation(db), validationErrors: validationErrors, __self: this, __source: { fileName: _jsxFileName, lineNumber: 738, columnNumber: 17 } }),\n  ___EmotionJSX(\"div\", { css: (theme) => infoTooltip(theme), __self: this, __source: { fileName: _jsxFileName, lineNumber: 757, columnNumber: 17 } },\n  ___EmotionJSX(Button, { \"data-test\": \"sqla-connect-btn\", buttonStyle: \"link\", onClick: () => setDB({\n      type: ActionType.configMethodChange,\n      payload: {\n        engine: db.engine,\n        configuration_method: CONFIGURATION_METHOD.SQLALCHEMY_URI,\n        database_name: db.database_name } }),\n\n    css: buttonLinkStyles, __self: this, __source: { fileName: _jsxFileName, lineNumber: 758, columnNumber: 19 } }, \"Connect this database with a SQLAlchemy URI string instead\"),\n\n\n  ___EmotionJSX(InfoTooltip, { tooltip: t('Click this link to switch to an alternate form that allows you to input the SQLAlchemy URL for this database manually.'), viewBox: \"0 -6 24 24\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 768, columnNumber: 19 } })),\n\n\n  showDBError && errorAlert()))),\n\n\n  isLoading && ___EmotionJSX(Loading, { __self: this, __source: { fileName: _jsxFileName, lineNumber: 774, columnNumber: 21 } }));\n\n};__signature__(DatabaseModal, \"useReducer{[db, setDB](null)}\\nuseState{[tabKey, setTabKey](DEFAULT_TAB_KEY)}\\nuseAvailableDatabases{[availableDbs, getAvailableDbs]}\\nuseDatabaseValidation{[validationErrors, getValidation, setValidationErrors,]}\\nuseState{[hasConnectedDb, setHasConnectedDb](false)}\\nuseState{[dbName, setDbName]('')}\\nuseState{[editNewDb, setEditNewDb](false)}\\nuseState{[isLoading, setLoading](false)}\\nuseCommonConf{conf}\\nuseSingleViewResource{{ state: { loading: dbLoading, resource: dbFetched, error: dbErrors }, fetchResource, createResource, updateResource, clearError, }}\\nuseEffect{}\\nuseEffect{}\\nuseEffect{}\", () => [useAvailableDatabases, useDatabaseValidation, useCommonConf, useSingleViewResource]);const _default =\nwithToasts(DatabaseModal);export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(engineSpecificAlertMapping, \"engineSpecificAlertMapping\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/views/CRUD/data/database/DatabaseModal/index.tsx\");reactHotLoader.register(errorAlertMapping, \"errorAlertMapping\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/views/CRUD/data/database/DatabaseModal/index.tsx\");reactHotLoader.register(ActionType, \"ActionType\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/views/CRUD/data/database/DatabaseModal/index.tsx\");reactHotLoader.register(dbReducer, \"dbReducer\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/views/CRUD/data/database/DatabaseModal/index.tsx\");reactHotLoader.register(DEFAULT_TAB_KEY, \"DEFAULT_TAB_KEY\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/views/CRUD/data/database/DatabaseModal/index.tsx\");reactHotLoader.register(serializeExtra, \"serializeExtra\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/views/CRUD/data/database/DatabaseModal/index.tsx\");reactHotLoader.register(DatabaseModal, \"DatabaseModal\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/views/CRUD/data/database/DatabaseModal/index.tsx\");reactHotLoader.register(_default, \"default\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/views/CRUD/data/database/DatabaseModal/index.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/home/ubuntu/my_plugin/superset/superset-frontend/src/views/CRUD/data/database/DatabaseModal/index.tsx"],"names":[],"mappings":"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","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport {\n  t,\n  SupersetTheme,\n  FeatureFlag,\n  isFeatureEnabled,\n} from '@superset-ui/core';\nimport React, {\n  FunctionComponent,\n  useEffect,\n  useState,\n  useReducer,\n  Reducer,\n} from 'react';\nimport Tabs from 'src/components/Tabs';\nimport { Select } from 'src/common/components';\nimport Alert from 'src/components/Alert';\nimport Modal from 'src/components/Modal';\nimport Button from 'src/components/Button';\nimport IconButton from 'src/components/IconButton';\nimport InfoTooltip from 'src/components/InfoTooltip';\nimport withToasts from 'src/components/MessageToasts/withToasts';\nimport {\n  testDatabaseConnection,\n  useSingleViewResource,\n  useAvailableDatabases,\n  useDatabaseValidation,\n  getDatabaseImages,\n  getConnectionAlert,\n} from 'src/views/CRUD/hooks';\nimport { useCommonConf } from 'src/views/CRUD/data/database/state';\nimport {\n  DatabaseObject,\n  DatabaseForm,\n  CONFIGURATION_METHOD,\n  CatalogObject,\n} from 'src/views/CRUD/data/database/types';\nimport Loading from 'src/components/Loading';\nimport ExtraOptions from './ExtraOptions';\nimport SqlAlchemyForm from './SqlAlchemyForm';\nimport DatabaseConnectionForm from './DatabaseConnectionForm';\nimport {\n  antDErrorAlertStyles,\n  antDAlertStyles,\n  StyledAlertMargin,\n  antDModalNoPaddingStyles,\n  antDModalStyles,\n  antDTabsStyles,\n  buttonLinkStyles,\n  alchemyButtonLinkStyles,\n  TabHeader,\n  formHelperStyles,\n  formStyles,\n  StyledAlignment,\n  SelectDatabaseStyles,\n  infoTooltip,\n  StyledFooterButton,\n  StyledStickyHeader,\n} from './styles';\nimport ModalHeader, { DOCUMENTATION_LINK } from './ModalHeader';\n\nconst engineSpecificAlertMapping = {\n  gsheets: {\n    message: 'Why do I need to create a database?',\n    description:\n      'To begin using your Google Sheets, you need to create a database first. ' +\n      'Databases are used as a way to identify ' +\n      'your data so that it can be queried and visualized. This ' +\n      'database will hold all of your individual Google Sheets ' +\n      'you choose to connect here.',\n  },\n};\n\nconst errorAlertMapping = {\n  CONNECTION_MISSING_PARAMETERS_ERROR: {\n    message: 'Missing Required Fields',\n    description: 'Please complete all required fields.',\n  },\n  CONNECTION_INVALID_HOSTNAME_ERROR: {\n    message: 'Could not verify the host',\n    description:\n      'The host is invalid. Please verify that this field is entered correctly.',\n  },\n  CONNECTION_PORT_CLOSED_ERROR: {\n    message: 'Port is closed',\n    description: 'Please verify that port is open to connect.',\n  },\n  CONNECTION_INVALID_PORT_ERROR: {\n    message: 'Invalid Port Number',\n    description: 'The port must be a whole number less than or equal to 65535.',\n  },\n  CONNECTION_ACCESS_DENIED_ERROR: {\n    message: 'Invalid account information',\n    description: 'Either the username or password is incorrect.',\n  },\n  CONNECTION_INVALID_PASSWORD_ERROR: {\n    message: 'Invalid account information',\n    description: 'Either the username or password is incorrect.',\n  },\n  INVALID_PAYLOAD_SCHEMA_ERROR: {\n    message: 'Incorrect Fields',\n    description: 'Please make sure all fields are filled out correctly',\n  },\n  TABLE_DOES_NOT_EXIST_ERROR: {\n    message: 'URL could not be identified',\n    description:\n      'The URL could not be identified. Please check for typos and make sure that \"Type of google sheet allowed\" selection matches the input',\n  },\n};\ninterface DatabaseModalProps {\n  addDangerToast: (msg: string) => void;\n  addSuccessToast: (msg: string) => void;\n  onDatabaseAdd?: (database?: DatabaseObject) => void; // TODO: should we add a separate function for edit?\n  onHide: () => void;\n  show: boolean;\n  databaseId: number | undefined; // If included, will go into edit mode\n}\n\nenum ActionType {\n  configMethodChange,\n  dbSelected,\n  editorChange,\n  fetched,\n  inputChange,\n  parametersChange,\n  reset,\n  textChange,\n  extraInputChange,\n  extraEditorChange,\n  addTableCatalogSheet,\n  removeTableCatalogSheet,\n  queryChange,\n}\n\ninterface DBReducerPayloadType {\n  target?: string;\n  name: string;\n  json?: {};\n  type?: string;\n  checked?: boolean;\n  value?: string;\n}\n\ntype DBReducerActionType =\n  | {\n      type:\n        | ActionType.extraEditorChange\n        | ActionType.extraInputChange\n        | ActionType.textChange\n        | ActionType.queryChange\n        | ActionType.inputChange\n        | ActionType.editorChange\n        | ActionType.parametersChange;\n      payload: DBReducerPayloadType;\n    }\n  | {\n      type: ActionType.fetched;\n      payload: Partial<DatabaseObject>;\n    }\n  | {\n      type: ActionType.dbSelected;\n      payload: {\n        database_name?: string;\n        engine?: string;\n        configuration_method: CONFIGURATION_METHOD;\n        paramProperties?: Record<string, any>;\n      };\n    }\n  | {\n      type: ActionType.reset | ActionType.addTableCatalogSheet;\n    }\n  | {\n      type: ActionType.removeTableCatalogSheet;\n      payload: {\n        indexToDelete: number;\n      };\n    }\n  | {\n      type: ActionType.configMethodChange;\n      payload: {\n        database_name?: string;\n        engine?: string;\n        configuration_method: CONFIGURATION_METHOD;\n      };\n    };\n\nfunction dbReducer(\n  state: Partial<DatabaseObject> | null,\n  action: DBReducerActionType,\n): Partial<DatabaseObject> | null {\n  const trimmedState = {\n    ...(state || {}),\n  };\n  let query = {};\n  let query_input = '';\n  let deserializeExtraJSON = {};\n  let extra_json: DatabaseObject['extra_json'];\n\n  switch (action.type) {\n    case ActionType.extraEditorChange:\n      return {\n        ...trimmedState,\n        extra_json: {\n          ...trimmedState.extra_json,\n          [action.payload.name]: action.payload.json,\n        },\n      };\n    case ActionType.extraInputChange:\n      if (\n        action.payload.name === 'schema_cache_timeout' ||\n        action.payload.name === 'table_cache_timeout'\n      ) {\n        return {\n          ...trimmedState,\n          extra_json: {\n            ...trimmedState.extra_json,\n            metadata_cache_timeout: {\n              ...trimmedState.extra_json?.metadata_cache_timeout,\n              [action.payload.name]: action.payload.value,\n            },\n          },\n        };\n      }\n      if (action.payload.name === 'schemas_allowed_for_csv_upload') {\n        return {\n          ...trimmedState,\n          extra_json: {\n            ...trimmedState.extra_json,\n            schemas_allowed_for_csv_upload: (action.payload.value || '').split(\n              ',',\n            ),\n          },\n        };\n      }\n      return {\n        ...trimmedState,\n        extra_json: {\n          ...trimmedState.extra_json,\n          [action.payload.name]:\n            action.payload.type === 'checkbox'\n              ? action.payload.checked\n              : action.payload.value,\n        },\n      };\n    case ActionType.inputChange:\n      if (action.payload.type === 'checkbox') {\n        return {\n          ...trimmedState,\n          [action.payload.name]: action.payload.checked,\n        };\n      }\n      return {\n        ...trimmedState,\n        [action.payload.name]: action.payload.value,\n      };\n    case ActionType.parametersChange:\n      if (\n        trimmedState.catalog !== undefined &&\n        action.payload.type?.startsWith('catalog')\n      ) {\n        // Formatting wrapping google sheets table catalog\n        const idx = action.payload.type?.split('-')[1];\n        const catalogToUpdate = trimmedState?.catalog[idx] || {};\n        catalogToUpdate[action.payload.name] = action.payload.value;\n\n        const paramatersCatalog = {};\n        // eslint-disable-next-line array-callback-return\n        trimmedState.catalog?.map((item: CatalogObject) => {\n          paramatersCatalog[item.name] = item.value;\n        });\n\n        return {\n          ...trimmedState,\n          parameters: {\n            ...trimmedState.parameters,\n            catalog: paramatersCatalog,\n          },\n        };\n      }\n      return {\n        ...trimmedState,\n        parameters: {\n          ...trimmedState.parameters,\n          [action.payload.name]: action.payload.value,\n        },\n      };\n    case ActionType.addTableCatalogSheet:\n      if (trimmedState.catalog !== undefined) {\n        return {\n          ...trimmedState,\n          catalog: [...trimmedState.catalog, { name: '', value: '' }],\n        };\n      }\n      return {\n        ...trimmedState,\n        catalog: [{ name: '', value: '' }],\n      };\n    case ActionType.removeTableCatalogSheet:\n      trimmedState.catalog?.splice(action.payload.indexToDelete, 1);\n      return {\n        ...trimmedState,\n      };\n    case ActionType.editorChange:\n      return {\n        ...trimmedState,\n        [action.payload.name]: action.payload.json,\n      };\n    case ActionType.queryChange:\n      return {\n        ...trimmedState,\n        parameters: {\n          ...trimmedState.parameters,\n          query: Object.fromEntries(new URLSearchParams(action.payload.value)),\n        },\n        query_input: action.payload.value,\n      };\n    case ActionType.textChange:\n      return {\n        ...trimmedState,\n        [action.payload.name]: action.payload.value,\n      };\n    case ActionType.fetched:\n      // convert all the keys in this payload into strings\n      if (action.payload.extra) {\n        extra_json = {\n          ...JSON.parse(action.payload.extra || ''),\n        } as DatabaseObject['extra_json'];\n\n        deserializeExtraJSON = {\n          ...JSON.parse(action.payload.extra || ''),\n          metadata_params: JSON.stringify(extra_json?.metadata_params),\n          engine_params: JSON.stringify(extra_json?.engine_params),\n          schemas_allowed_for_csv_upload:\n            extra_json?.schemas_allowed_for_csv_upload,\n        };\n      }\n\n      // convert query to a string and store in query_input\n      query = action.payload?.parameters?.query || {};\n      query_input = Object.entries(query)\n        .map(([key, value]) => `${key}=${value}`)\n        .join('&');\n\n      if (\n        action.payload.encrypted_extra &&\n        action.payload.configuration_method ===\n          CONFIGURATION_METHOD.DYNAMIC_FORM\n      ) {\n        const engineParamsCatalog = Object.keys(\n          extra_json?.engine_params?.catalog || {},\n        ).map(e => ({\n          name: e,\n          value: extra_json?.engine_params?.catalog[e],\n        }));\n        return {\n          ...action.payload,\n          engine: action.payload.backend || trimmedState.engine,\n          configuration_method: action.payload.configuration_method,\n          extra_json: deserializeExtraJSON,\n          catalog: engineParamsCatalog,\n          parameters: action.payload.parameters,\n          query_input,\n        };\n      }\n\n      return {\n        ...action.payload,\n        encrypted_extra: action.payload.encrypted_extra || '',\n        engine: action.payload.backend || trimmedState.engine,\n        configuration_method: action.payload.configuration_method,\n        extra_json: deserializeExtraJSON,\n        parameters: action.payload.parameters,\n        query_input,\n      };\n\n    case ActionType.dbSelected:\n      return {\n        ...action.payload,\n      };\n    case ActionType.configMethodChange:\n      return {\n        ...action.payload,\n      };\n    case ActionType.reset:\n    default:\n      return null;\n  }\n}\n\nconst DEFAULT_TAB_KEY = '1';\n\nconst serializeExtra = (extraJson: DatabaseObject['extra_json']) =>\n  JSON.stringify({\n    ...extraJson,\n    metadata_params: JSON.parse((extraJson?.metadata_params as string) || '{}'),\n    engine_params: JSON.parse(\n      ((extraJson?.engine_params as unknown) as string) || '{}',\n    ),\n    schemas_allowed_for_csv_upload: (\n      extraJson?.schemas_allowed_for_csv_upload || []\n    ).filter(schema => schema !== ''),\n  });\n\nconst DatabaseModal: FunctionComponent<DatabaseModalProps> = ({\n  addDangerToast,\n  addSuccessToast,\n  onDatabaseAdd,\n  onHide,\n  show,\n  databaseId,\n}) => {\n  const [db, setDB] = useReducer<\n    Reducer<Partial<DatabaseObject> | null, DBReducerActionType>\n  >(dbReducer, null);\n  const [tabKey, setTabKey] = useState<string>(DEFAULT_TAB_KEY);\n  const [availableDbs, getAvailableDbs] = useAvailableDatabases();\n  const [\n    validationErrors,\n    getValidation,\n    setValidationErrors,\n  ] = useDatabaseValidation();\n  const [hasConnectedDb, setHasConnectedDb] = useState<boolean>(false);\n  const [dbName, setDbName] = useState('');\n  const [editNewDb, setEditNewDb] = useState<boolean>(false);\n  const [isLoading, setLoading] = useState<boolean>(false);\n  const conf = useCommonConf();\n  const dbImages = getDatabaseImages();\n  const connectionAlert = getConnectionAlert();\n  const isEditMode = !!databaseId;\n  const sslForced = isFeatureEnabled(\n    FeatureFlag.FORCE_DATABASE_CONNECTIONS_SSL,\n  );\n  const hasAlert =\n    connectionAlert || !!(db?.engine && engineSpecificAlertMapping[db.engine]);\n  const useSqlAlchemyForm =\n    db?.configuration_method === CONFIGURATION_METHOD.SQLALCHEMY_URI;\n  const useTabLayout = isEditMode || useSqlAlchemyForm;\n  // Database fetch logic\n  const {\n    state: { loading: dbLoading, resource: dbFetched, error: dbErrors },\n    fetchResource,\n    createResource,\n    updateResource,\n    clearError,\n  } = useSingleViewResource<DatabaseObject>(\n    'database',\n    t('database'),\n    addDangerToast,\n  );\n  const isDynamic = (engine: string | undefined) =>\n    availableDbs?.databases?.find(\n      (DB: DatabaseObject) => DB.backend === engine || DB.engine === engine,\n    )?.parameters !== undefined;\n  const showDBError = validationErrors || dbErrors;\n  const isEmpty = (data?: Object | null) =>\n    data && Object.keys(data).length === 0;\n\n  const dbModel: DatabaseForm =\n    availableDbs?.databases?.find(\n      (available: { engine: string | undefined }) =>\n        // TODO: we need a centralized engine in one place\n        available.engine === (isEditMode ? db?.backend : db?.engine),\n    ) || {};\n\n  // Test Connection logic\n  const testConnection = () => {\n    if (!db?.sqlalchemy_uri) {\n      addDangerToast(t('Please enter a SQLAlchemy URI to test'));\n      return;\n    }\n\n    const connection = {\n      sqlalchemy_uri: db?.sqlalchemy_uri || '',\n      database_name: db?.database_name?.trim() || undefined,\n      impersonate_user: db?.impersonate_user || undefined,\n      extra: serializeExtra(db?.extra_json) || undefined,\n      encrypted_extra: db?.encrypted_extra || '',\n      server_cert: db?.server_cert || undefined,\n    };\n    testDatabaseConnection(connection, addDangerToast, addSuccessToast);\n  };\n\n  const onClose = () => {\n    setDB({ type: ActionType.reset });\n    setHasConnectedDb(false);\n    setValidationErrors(null); // reset validation errors on close\n    clearError();\n    setEditNewDb(false);\n    onHide();\n  };\n  const onSave = async () => {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { id, ...update } = db || {};\n    // Clone DB object\n    const dbToUpdate = JSON.parse(JSON.stringify(update));\n\n    if (dbToUpdate.configuration_method === CONFIGURATION_METHOD.DYNAMIC_FORM) {\n      // Validate DB before saving\n      await getValidation(dbToUpdate, true);\n      if (validationErrors && !isEmpty(validationErrors)) {\n        return;\n      }\n      const parameters_schema = isEditMode\n        ? dbToUpdate.parameters_schema.properties\n        : dbModel?.parameters.properties;\n      const additionalEncryptedExtra = JSON.parse(\n        dbToUpdate.encrypted_extra || '{}',\n      );\n      const paramConfigArray = Object.keys(parameters_schema || {});\n\n      paramConfigArray.forEach(paramConfig => {\n        /*\n         * Parameters that are annotated with the `x-encrypted-extra` properties should be moved to\n         * `encrypted_extra`, so that they are stored encrypted in the backend when the database is\n         * created or edited.\n         */\n        if (\n          parameters_schema[paramConfig]['x-encrypted-extra'] &&\n          dbToUpdate.parameters?.[paramConfig]\n        ) {\n          if (typeof dbToUpdate.parameters?.[paramConfig] === 'object') {\n            // add new encrypted extra to encrypted_extra object\n            additionalEncryptedExtra[paramConfig] =\n              dbToUpdate.parameters?.[paramConfig];\n            // The backend expects `encrypted_extra` as a string for historical reasons.\n            dbToUpdate.parameters[paramConfig] = JSON.stringify(\n              dbToUpdate.parameters[paramConfig],\n            );\n          } else {\n            additionalEncryptedExtra[paramConfig] = JSON.parse(\n              dbToUpdate.parameters?.[paramConfig] || '{}',\n            );\n          }\n        }\n      });\n      // cast the new encrypted extra object into a string\n      dbToUpdate.encrypted_extra = JSON.stringify(additionalEncryptedExtra);\n      // this needs to be added by default to gsheets\n      if (dbToUpdate.engine === 'gsheets') {\n        dbToUpdate.impersonate_user = true;\n      }\n    }\n\n    if (dbToUpdate?.parameters?.catalog) {\n      // need to stringify gsheets catalog to allow it to be seralized\n      dbToUpdate.extra_json = {\n        engine_params: JSON.stringify({\n          catalog: dbToUpdate.parameters.catalog,\n        }),\n      };\n    }\n\n    if (dbToUpdate?.extra_json) {\n      // convert extra_json to back to string\n      dbToUpdate.extra = serializeExtra(dbToUpdate?.extra_json);\n    }\n\n    if (db?.id) {\n      setLoading(true);\n      const result = await updateResource(\n        db.id as number,\n        dbToUpdate as DatabaseObject,\n        dbToUpdate.configuration_method === CONFIGURATION_METHOD.DYNAMIC_FORM, // onShow toast on SQLA Forms\n      );\n      if (result) {\n        if (onDatabaseAdd) {\n          onDatabaseAdd();\n        }\n        if (!editNewDb) {\n          onClose();\n        }\n      }\n    } else if (db) {\n      // Create\n      setLoading(true);\n      const dbId = await createResource(\n        dbToUpdate as DatabaseObject,\n        dbToUpdate.configuration_method === CONFIGURATION_METHOD.DYNAMIC_FORM, // onShow toast on SQLA Forms\n      );\n      if (dbId) {\n        setHasConnectedDb(true);\n        if (onDatabaseAdd) {\n          onDatabaseAdd();\n        }\n        if (useTabLayout) {\n          // tab layout only has one step\n          // so it should close immediately on save\n          onClose();\n        }\n      }\n    }\n    setEditNewDb(false);\n    setLoading(false);\n  };\n\n  const onChange = (type: any, payload: any) => {\n    setDB({ type, payload } as DBReducerActionType);\n  };\n\n  // Initialize\n  const fetchDB = () => {\n    if (isEditMode && databaseId) {\n      if (!dbLoading) {\n        fetchResource(databaseId).catch(e =>\n          addDangerToast(\n            t(\n              'Sorry there was an error fetching database information: %s',\n              e.message,\n            ),\n          ),\n        );\n      }\n    }\n  };\n\n  const setDatabaseModel = (database_name: string) => {\n    if (database_name === 'Other') {\n      // Allow users to connect to DB via legacy SQLA form\n      setDB({\n        type: ActionType.dbSelected,\n        payload: {\n          database_name,\n          configuration_method: CONFIGURATION_METHOD.SQLALCHEMY_URI,\n          engine: undefined,\n        },\n      });\n    } else {\n      const selectedDbModel = availableDbs?.databases.filter(\n        (db: DatabaseObject) => db.name === database_name,\n      )[0];\n      const { engine, parameters } = selectedDbModel;\n      const isDynamic = parameters !== undefined;\n      setDB({\n        type: ActionType.dbSelected,\n        payload: {\n          database_name,\n          engine,\n          configuration_method: isDynamic\n            ? CONFIGURATION_METHOD.DYNAMIC_FORM\n            : CONFIGURATION_METHOD.SQLALCHEMY_URI,\n          paramProperties: parameters?.properties,\n        },\n      });\n    }\n\n    setDB({ type: ActionType.addTableCatalogSheet });\n  };\n\n  const renderAvailableSelector = () => (\n    <div className=\"available\">\n      <h4 className=\"available-label\">\n        Or choose from a list of other databases we support:\n      </h4>\n      <div className=\"control-label\">Supported databases</div>\n      <Select\n        className=\"available-select\"\n        onChange={setDatabaseModel}\n        placeholder=\"Choose a database...\"\n      >\n        {[...(availableDbs?.databases || [])]\n          ?.sort((a: DatabaseForm, b: DatabaseForm) =>\n            a.name.localeCompare(b.name),\n          )\n          .map((database: DatabaseForm) => (\n            <Select.Option value={database.name} key={database.name}>\n              {database.name}\n            </Select.Option>\n          ))}\n        {/* Allow users to connect to DB via legacy SQLA form */}\n        <Select.Option value=\"Other\" key=\"Other\">\n          Other\n        </Select.Option>\n      </Select>\n      <Alert\n        showIcon\n        closable={false}\n        css={(theme: SupersetTheme) => antDAlertStyles(theme)}\n        type=\"info\"\n        message={\n          connectionAlert?.ADD_DATABASE?.message ||\n          t('Want to add a new database?')\n        }\n        description={\n          connectionAlert?.ADD_DATABASE ? (\n            <>\n              Any databases that allow connections via SQL Alchemy URIs can be\n              added.{' '}\n              <a\n                href={connectionAlert?.ADD_DATABASE.contact_link}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                {connectionAlert?.ADD_DATABASE.contact_description_link}\n              </a>{' '}\n              {connectionAlert?.ADD_DATABASE.description}\n            </>\n          ) : (\n            <>\n              Any databases that allow connections via SQL Alchemy URIs can be\n              added. Learn about how to connect a database driver{' '}\n              <a\n                href={DOCUMENTATION_LINK}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                here\n              </a>\n              .\n            </>\n          )\n        }\n      />\n    </div>\n  );\n\n  const renderPreferredSelector = () => (\n    <div className=\"preferred\">\n      {availableDbs?.databases\n        ?.filter((db: DatabaseForm) => db.preferred)\n        .map((database: DatabaseForm) => (\n          <IconButton\n            className=\"preferred-item\"\n            onClick={() => setDatabaseModel(database.name)}\n            buttonText={database.name}\n            icon={dbImages?.[database.engine]}\n          />\n        ))}\n    </div>\n  );\n\n  const handleBackButtonOnFinish = () => {\n    if (dbFetched) {\n      fetchResource(dbFetched.id as number);\n    }\n    setEditNewDb(true);\n  };\n\n  const handleBackButtonOnConnect = () => {\n    if (editNewDb) {\n      setHasConnectedDb(false);\n    }\n    setDB({ type: ActionType.reset });\n  };\n\n  const renderModalFooter = () => {\n    if (db) {\n      // if db show back + connenct\n      if (!hasConnectedDb || editNewDb) {\n        return (\n          <>\n            <StyledFooterButton key=\"back\" onClick={handleBackButtonOnConnect}>\n              Back\n            </StyledFooterButton>\n            <StyledFooterButton\n              key=\"submit\"\n              buttonStyle=\"primary\"\n              onClick={onSave}\n            >\n              Connect\n            </StyledFooterButton>\n          </>\n        );\n      }\n\n      return (\n        <>\n          <StyledFooterButton key=\"back\" onClick={handleBackButtonOnFinish}>\n            Back\n          </StyledFooterButton>\n          <StyledFooterButton\n            key=\"submit\"\n            buttonStyle=\"primary\"\n            onClick={onSave}\n            data-test=\"modal-confirm-button\"\n          >\n            Finish\n          </StyledFooterButton>\n        </>\n      );\n    }\n    return [];\n  };\n\n  const renderEditModalFooter = () => (\n    <>\n      <StyledFooterButton key=\"close\" onClick={onClose}>\n        Close\n      </StyledFooterButton>\n      <StyledFooterButton key=\"submit\" buttonStyle=\"primary\" onClick={onSave}>\n        Finish\n      </StyledFooterButton>\n    </>\n  );\n  useEffect(() => {\n    if (show) {\n      setTabKey(DEFAULT_TAB_KEY);\n      getAvailableDbs();\n      setLoading(true);\n    }\n    if (databaseId && show) {\n      fetchDB();\n    }\n  }, [show, databaseId]);\n\n  useEffect(() => {\n    if (dbFetched) {\n      setDB({\n        type: ActionType.fetched,\n        payload: dbFetched,\n      });\n      // keep a copy of the name separate for display purposes\n      // because it shouldn't change when the form is updated\n      setDbName(dbFetched.database_name);\n    }\n  }, [dbFetched]);\n\n  useEffect(() => {\n    if (isLoading) {\n      setLoading(false);\n    }\n  }, [availableDbs]);\n\n  const tabChange = (key: string) => {\n    setTabKey(key);\n  };\n\n  const renderStepTwoAlert = () => {\n    const { hostname } = window.location;\n    let ipAlert = connectionAlert?.REGIONAL_IPS?.default || '';\n    const regionalIPs = connectionAlert?.REGIONAL_IPS || {};\n    Object.entries(regionalIPs).forEach(([ipRegion, ipRange]) => {\n      const regex = new RegExp(ipRegion);\n      if (hostname.match(regex)) {\n        ipAlert = ipRange;\n      }\n    });\n    return (\n      db?.engine && (\n        <StyledAlertMargin>\n          <Alert\n            closable={false}\n            css={(theme: SupersetTheme) => antDAlertStyles(theme)}\n            type=\"info\"\n            showIcon\n            message={\n              engineSpecificAlertMapping[db.engine]?.message ||\n              connectionAlert?.DEFAULT?.message\n            }\n            description={\n              engineSpecificAlertMapping[db.engine]?.description ||\n              connectionAlert?.DEFAULT?.description + ipAlert\n            }\n          />\n        </StyledAlertMargin>\n      )\n    );\n  };\n\n  const errorAlert = () => {\n    if (\n      isEmpty(dbErrors) ||\n      (isEmpty(validationErrors) &&\n        !(validationErrors?.error_type in errorAlertMapping))\n    ) {\n      return <></>;\n    }\n\n    if (validationErrors) {\n      return (\n        <Alert\n          type=\"error\"\n          css={(theme: SupersetTheme) => antDErrorAlertStyles(theme)}\n          message={\n            errorAlertMapping[validationErrors?.error_type]?.message ||\n            validationErrors?.error_type\n          }\n          description={\n            errorAlertMapping[validationErrors?.error_type]?.description ||\n            JSON.stringify(validationErrors)\n          }\n          showIcon\n          closable={false}\n        />\n      );\n    }\n    const message: Array<string> =\n      typeof dbErrors === 'object' ? Object.values(dbErrors) : [];\n    return (\n      <Alert\n        type=\"error\"\n        css={(theme: SupersetTheme) => antDErrorAlertStyles(theme)}\n        message=\"Database Creation Error\"\n        description={message?.[0] || dbErrors}\n      />\n    );\n  };\n\n  const renderFinishState = () => {\n    if (!editNewDb) {\n      return (\n        <ExtraOptions\n          db={db as DatabaseObject}\n          onInputChange={({ target }: { target: HTMLInputElement }) =>\n            onChange(ActionType.inputChange, {\n              type: target.type,\n              name: target.name,\n              checked: target.checked,\n              value: target.value,\n            })\n          }\n          onTextChange={({ target }: { target: HTMLTextAreaElement }) =>\n            onChange(ActionType.textChange, {\n              name: target.name,\n              value: target.value,\n            })\n          }\n          onEditorChange={(payload: { name: string; json: any }) =>\n            onChange(ActionType.editorChange, payload)\n          }\n          onExtraInputChange={({ target }: { target: HTMLInputElement }) => {\n            onChange(ActionType.extraInputChange, {\n              type: target.type,\n              name: target.name,\n              checked: target.checked,\n              value: target.value,\n            });\n          }}\n          onExtraEditorChange={(payload: { name: string; json: any }) =>\n            onChange(ActionType.extraEditorChange, payload)\n          }\n        />\n      );\n    }\n    return (\n      <DatabaseConnectionForm\n        isEditMode\n        sslForced={sslForced}\n        dbModel={dbModel}\n        db={db as DatabaseObject}\n        onParametersChange={({ target }: { target: HTMLInputElement }) =>\n          onChange(ActionType.parametersChange, {\n            type: target.type,\n            name: target.name,\n            checked: target.checked,\n            value: target.value,\n          })\n        }\n        onChange={({ target }: { target: HTMLInputElement }) =>\n          onChange(ActionType.textChange, {\n            name: target.name,\n            value: target.value,\n          })\n        }\n        onQueryChange={({ target }: { target: HTMLInputElement }) =>\n          onChange(ActionType.queryChange, {\n            name: target.name,\n            value: target.value,\n          })\n        }\n        onAddTableCatalog={() =>\n          setDB({ type: ActionType.addTableCatalogSheet })\n        }\n        onRemoveTableCatalog={(idx: number) =>\n          setDB({\n            type: ActionType.removeTableCatalogSheet,\n            payload: { indexToDelete: idx },\n          })\n        }\n        getValidation={() => getValidation(db)}\n        validationErrors={validationErrors}\n      />\n    );\n  };\n\n  return useTabLayout ? (\n    <Modal\n      css={(theme: SupersetTheme) => [\n        antDTabsStyles,\n        antDModalNoPaddingStyles,\n        antDModalStyles(theme),\n        formHelperStyles(theme),\n        formStyles(theme),\n      ]}\n      name=\"database\"\n      data-test=\"database-modal\"\n      onHandledPrimaryAction={onSave}\n      onHide={onClose}\n      primaryButtonName={isEditMode ? t('Save') : t('Connect')}\n      width=\"500px\"\n      centered\n      show={show}\n      title={\n        <h4>{isEditMode ? t('Edit database') : t('Connect a database')}</h4>\n      }\n      footer={isEditMode ? renderEditModalFooter() : renderModalFooter()}\n    >\n      <StyledStickyHeader>\n        <TabHeader>\n          <ModalHeader\n            isLoading={isLoading}\n            isEditMode={isEditMode}\n            useSqlAlchemyForm={useSqlAlchemyForm}\n            hasConnectedDb={hasConnectedDb}\n            db={db}\n            dbName={dbName}\n            dbModel={dbModel}\n          />\n        </TabHeader>\n      </StyledStickyHeader>\n      <Tabs\n        defaultActiveKey={DEFAULT_TAB_KEY}\n        activeKey={tabKey}\n        onTabClick={tabChange}\n        animated={{ inkBar: true, tabPane: true }}\n      >\n        <Tabs.TabPane tab={<span>{t('Basic')}</span>} key=\"1\">\n          {useSqlAlchemyForm ? (\n            <StyledAlignment>\n              <SqlAlchemyForm\n                db={db as DatabaseObject}\n                onInputChange={({ target }: { target: HTMLInputElement }) =>\n                  onChange(ActionType.inputChange, {\n                    type: target.type,\n                    name: target.name,\n                    checked: target.checked,\n                    value: target.value,\n                  })\n                }\n                conf={conf}\n                testConnection={testConnection}\n                isEditMode={isEditMode}\n              />\n              {isDynamic(db?.backend || db?.engine) && !isEditMode && (\n                <div css={(theme: SupersetTheme) => infoTooltip(theme)}>\n                  <Button\n                    buttonStyle=\"link\"\n                    onClick={() =>\n                      setDB({\n                        type: ActionType.configMethodChange,\n                        payload: {\n                          database_name: db?.database_name,\n                          configuration_method:\n                            CONFIGURATION_METHOD.DYNAMIC_FORM,\n                          engine: db?.engine,\n                        },\n                      })\n                    }\n                    css={theme => alchemyButtonLinkStyles(theme)}\n                  >\n                    Connect this database using the dynamic form instead\n                  </Button>\n                  <InfoTooltip\n                    tooltip={t(\n                      'Click this link to switch to an alternate form that exposes only the required fields needed to connect this database.',\n                    )}\n                    viewBox=\"0 -6 24 24\"\n                  />\n                </div>\n              )}\n            </StyledAlignment>\n          ) : (\n            <DatabaseConnectionForm\n              isEditMode\n              sslForced={sslForced}\n              dbModel={dbModel}\n              db={db as DatabaseObject}\n              onParametersChange={({ target }: { target: HTMLInputElement }) =>\n                onChange(ActionType.parametersChange, {\n                  type: target.type,\n                  name: target.name,\n                  checked: target.checked,\n                  value: target.value,\n                })\n              }\n              onChange={({ target }: { target: HTMLInputElement }) =>\n                onChange(ActionType.textChange, {\n                  name: target.name,\n                  value: target.value,\n                })\n              }\n              onQueryChange={({ target }: { target: HTMLInputElement }) =>\n                onChange(ActionType.queryChange, {\n                  name: target.name,\n                  value: target.value,\n                })\n              }\n              onAddTableCatalog={() =>\n                setDB({ type: ActionType.addTableCatalogSheet })\n              }\n              onRemoveTableCatalog={(idx: number) =>\n                setDB({\n                  type: ActionType.removeTableCatalogSheet,\n                  payload: { indexToDelete: idx },\n                })\n              }\n              getValidation={() => getValidation(db)}\n              validationErrors={validationErrors}\n            />\n          )}\n          {!isEditMode && (\n            <StyledAlertMargin>\n              <Alert\n                closable={false}\n                css={(theme: SupersetTheme) => antDAlertStyles(theme)}\n                message=\"Additional fields may be required\"\n                showIcon\n                description={\n                  <>\n                    Select databases require additional fields to be completed\n                    in the Advanced tab to successfully connect the database.\n                    Learn what requirements your databases has{' '}\n                    <a\n                      href={DOCUMENTATION_LINK}\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                      className=\"additional-fields-alert-description\"\n                    >\n                      here\n                    </a>\n                    .\n                  </>\n                }\n                type=\"info\"\n              />\n            </StyledAlertMargin>\n          )}\n        </Tabs.TabPane>\n        <Tabs.TabPane tab={<span>{t('Advanced')}</span>} key=\"2\">\n          <ExtraOptions\n            db={db as DatabaseObject}\n            onInputChange={({ target }: { target: HTMLInputElement }) =>\n              onChange(ActionType.inputChange, {\n                type: target.type,\n                name: target.name,\n                checked: target.checked,\n                value: target.value,\n              })\n            }\n            onTextChange={({ target }: { target: HTMLTextAreaElement }) =>\n              onChange(ActionType.textChange, {\n                name: target.name,\n                value: target.value,\n              })\n            }\n            onEditorChange={(payload: { name: string; json: any }) =>\n              onChange(ActionType.editorChange, payload)\n            }\n            onExtraInputChange={({ target }: { target: HTMLInputElement }) => {\n              onChange(ActionType.extraInputChange, {\n                type: target.type,\n                name: target.name,\n                checked: target.checked,\n                value: target.value,\n              });\n            }}\n            onExtraEditorChange={(payload: { name: string; json: any }) => {\n              onChange(ActionType.extraEditorChange, payload);\n            }}\n          />\n          {showDBError && errorAlert()}\n        </Tabs.TabPane>\n      </Tabs>\n    </Modal>\n  ) : (\n    <Modal\n      css={(theme: SupersetTheme) => [\n        antDModalNoPaddingStyles,\n        antDModalStyles(theme),\n        formHelperStyles(theme),\n        formStyles(theme),\n      ]}\n      name=\"database\"\n      onHandledPrimaryAction={onSave}\n      onHide={onClose}\n      primaryButtonName={hasConnectedDb ? t('Finish') : t('Connect')}\n      width=\"500px\"\n      centered\n      show={show}\n      title={<h4>{t('Connect a database')}</h4>}\n      footer={renderModalFooter()}\n    >\n      {hasConnectedDb ? (\n        <>\n          <ModalHeader\n            isLoading={isLoading}\n            isEditMode={isEditMode}\n            useSqlAlchemyForm={useSqlAlchemyForm}\n            hasConnectedDb={hasConnectedDb}\n            db={db}\n            dbName={dbName}\n            dbModel={dbModel}\n            editNewDb={editNewDb}\n          />\n          {renderFinishState()}\n        </>\n      ) : (\n        <>\n          {/* Dyanmic Form Step 1 */}\n          {!isLoading &&\n            (!db ? (\n              <SelectDatabaseStyles>\n                <ModalHeader\n                  isLoading={isLoading}\n                  isEditMode={isEditMode}\n                  useSqlAlchemyForm={useSqlAlchemyForm}\n                  hasConnectedDb={hasConnectedDb}\n                  db={db}\n                  dbName={dbName}\n                  dbModel={dbModel}\n                />\n                {renderPreferredSelector()}\n                {renderAvailableSelector()}\n              </SelectDatabaseStyles>\n            ) : (\n              <>\n                <ModalHeader\n                  isLoading={isLoading}\n                  isEditMode={isEditMode}\n                  useSqlAlchemyForm={useSqlAlchemyForm}\n                  hasConnectedDb={hasConnectedDb}\n                  db={db}\n                  dbName={dbName}\n                  dbModel={dbModel}\n                />\n                {hasAlert && renderStepTwoAlert()}\n                <DatabaseConnectionForm\n                  db={db}\n                  sslForced={sslForced}\n                  dbModel={dbModel}\n                  onAddTableCatalog={() => {\n                    setDB({ type: ActionType.addTableCatalogSheet });\n                  }}\n                  onQueryChange={({ target }: { target: HTMLInputElement }) =>\n                    onChange(ActionType.queryChange, {\n                      name: target.name,\n                      value: target.value,\n                    })\n                  }\n                  onRemoveTableCatalog={(idx: number) => {\n                    setDB({\n                      type: ActionType.removeTableCatalogSheet,\n                      payload: { indexToDelete: idx },\n                    });\n                  }}\n                  onParametersChange={({\n                    target,\n                  }: {\n                    target: HTMLInputElement;\n                  }) =>\n                    onChange(ActionType.parametersChange, {\n                      type: target.type,\n                      name: target.name,\n                      checked: target.checked,\n                      value: target.value,\n                    })\n                  }\n                  onChange={({ target }: { target: HTMLInputElement }) =>\n                    onChange(ActionType.textChange, {\n                      name: target.name,\n                      value: target.value,\n                    })\n                  }\n                  getValidation={() => getValidation(db)}\n                  validationErrors={validationErrors}\n                />\n                <div css={(theme: SupersetTheme) => infoTooltip(theme)}>\n                  <Button\n                    data-test=\"sqla-connect-btn\"\n                    buttonStyle=\"link\"\n                    onClick={() =>\n                      setDB({\n                        type: ActionType.configMethodChange,\n                        payload: {\n                          engine: db.engine,\n                          configuration_method:\n                            CONFIGURATION_METHOD.SQLALCHEMY_URI,\n                          database_name: db.database_name,\n                        },\n                      })\n                    }\n                    css={buttonLinkStyles}\n                  >\n                    Connect this database with a SQLAlchemy URI string instead\n                  </Button>\n                  <InfoTooltip\n                    tooltip={t(\n                      'Click this link to switch to an alternate form that allows you to input the SQLAlchemy URL for this database manually.',\n                    )}\n                    viewBox=\"0 -6 24 24\"\n                  />\n                </div>\n                {/* Step 2 */}\n                {showDBError && errorAlert()}\n              </>\n            ))}\n        </>\n      )}\n      {isLoading && <Loading />}\n    </Modal>\n  );\n};\n\nexport default withToasts(DatabaseModal);\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}