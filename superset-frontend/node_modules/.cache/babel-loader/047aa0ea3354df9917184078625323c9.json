{"ast":null,"code":"import _extends from \"@babel/runtime-corejs3/helpers/extends\";import _isEqual from \"lodash/isEqual\";var _jsxFileName = \"/home/ubuntu/my_plugin/superset/superset-frontend/src/explore/components/controls/MetricControl/MetricsControl.jsx\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { ensureIsArray, t, useTheme } from '@superset-ui/core';\n\nimport ControlHeader from 'src/explore/components/ControlHeader';\nimport Icons from 'src/components/Icons';\nimport {\nAddIconButton,\nAddControlLabel,\nHeaderContainer,\nLabelsContainer } from\n'src/explore/components/controls/OptionControls';\nimport { usePrevious } from 'src/common/hooks/usePrevious';\nimport columnType from './columnType';\nimport MetricDefinitionValue from './MetricDefinitionValue';\nimport AdhocMetric from './AdhocMetric';\nimport savedMetricType from './savedMetricType';\nimport adhocMetricType from './adhocMetricType';\nimport AdhocMetricPopoverTrigger from './AdhocMetricPopoverTrigger';import { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nconst propTypes = {\n  name: PropTypes.string.isRequired,\n  onChange: PropTypes.func,\n  value: PropTypes.oneOfType([\n  PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, adhocMetricType])),\n  PropTypes.oneOfType([PropTypes.string, adhocMetricType])]),\n\n  columns: PropTypes.arrayOf(columnType),\n  savedMetrics: PropTypes.arrayOf(savedMetricType),\n  isLoading: PropTypes.bool,\n  multi: PropTypes.bool,\n  clearable: PropTypes.bool,\n  datasourceType: PropTypes.string };\n\n\nconst defaultProps = {\n  onChange: () => {},\n  clearable: true,\n  savedMetrics: [],\n  columns: [] };\n\n\nfunction getOptionsForSavedMetrics(\nsavedMetrics,\ncurrentMetricValues,\ncurrentMetric)\n{var _savedMetrics$filter;\n  return (_savedMetrics$filter =\n  savedMetrics == null ? void 0 : savedMetrics.filter((savedMetric) =>\n  Array.isArray(currentMetricValues) ?\n  !currentMetricValues.includes(savedMetric.metric_name) ||\n  savedMetric.metric_name === currentMetric :\n  savedMetric)) != null ? _savedMetrics$filter :\n  [];\n\n}\n\nfunction isDictionaryForAdhocMetric(value) {\n  return value && !(value instanceof AdhocMetric) && value.expressionType;\n}\n\n// adhoc metrics are stored as dictionaries in URL params. We convert them back into the\n// AdhocMetric class for typechecking, consistency and instance method access.\nfunction coerceAdhocMetrics(value) {\n  if (!value) {\n    return [];\n  }\n  if (!Array.isArray(value)) {\n    if (isDictionaryForAdhocMetric(value)) {\n      return [new AdhocMetric(value)];\n    }\n    return [value];\n  }\n  return value.map((val) => {\n    if (isDictionaryForAdhocMetric(val)) {\n      return new AdhocMetric(val);\n    }\n    return val;\n  });\n}\n\nconst emptySavedMetric = { metric_name: '', expression: '' };\n\n// TODO: use typeguards to distinguish saved metrics from adhoc metrics\nconst getMetricsMatchingCurrentDataset = (value, columns, savedMetrics) =>\nensureIsArray(value).filter((metric) => {\n  if (typeof metric === 'string' || metric.metric_name) {\n    return savedMetrics == null ? void 0 : savedMetrics.some(\n    (savedMetric) =>\n    savedMetric.metric_name === metric ||\n    savedMetric.metric_name === metric.metric_name);\n\n  }\n  return columns == null ? void 0 : columns.some(\n  (column) =>\n  !metric.column || metric.column.column_name === column.column_name);\n\n});\n\nconst MetricsControl = ({\n  onChange,\n  multi,\n  value: propsValue,\n  columns,\n  savedMetrics,\n  datasource,\n  datasourceType,\n  ...props }) =>\n{\n  const [value, setValue] = useState(coerceAdhocMetrics(propsValue));\n  const theme = useTheme();\n  const prevColumns = usePrevious(columns);\n  const prevSavedMetrics = usePrevious(savedMetrics);\n\n  const handleChange = useCallback(\n  (opts) => {\n    // if clear out options\n    if (opts === null) {\n      onChange(null);\n      return;\n    }\n\n    const transformedOpts = ensureIsArray(opts);\n    const optionValues = transformedOpts.\n    map((option) => {\n      // pre-defined metric\n      if (option.metric_name) {\n        return option.metric_name;\n      }\n      return option;\n    }).\n    filter((option) => option);\n    onChange(multi ? optionValues : optionValues[0]);\n  },\n  [multi, onChange]);\n\n\n  const onNewMetric = useCallback(\n  (newMetric) => {\n    const newValue = [...value, newMetric];\n    setValue(newValue);\n    handleChange(newValue);\n  },\n  [handleChange, value]);\n\n\n  const onMetricEdit = useCallback(\n  (changedMetric, oldMetric) => {\n    const newValue = value.map((val) => {\n      if (\n      // compare saved metrics\n      val === oldMetric.metric_name ||\n      // compare adhoc metrics\n      typeof val.optionName !== 'undefined' ?\n      val.optionName === oldMetric.optionName :\n      false)\n      {\n        return changedMetric;\n      }\n      return val;\n    });\n    setValue(newValue);\n    handleChange(newValue);\n  },\n  [handleChange, value]);\n\n\n  const onRemoveMetric = useCallback(\n  (index) => {\n    if (!Array.isArray(value)) {\n      return;\n    }\n    const valuesCopy = [...value];\n    valuesCopy.splice(index, 1);\n    setValue(valuesCopy);\n    handleChange(valuesCopy);\n  },\n  [handleChange, value]);\n\n\n  const moveLabel = useCallback(\n  (dragIndex, hoverIndex) => {\n    const newValues = [...value];\n    [newValues[hoverIndex], newValues[dragIndex]] = [\n    newValues[dragIndex],\n    newValues[hoverIndex]];\n\n    setValue(newValues);\n  },\n  [value]);\n\n\n  const isAddNewMetricDisabled = useCallback(() => !multi && value.length > 0, [\n  multi,\n  value.length]);\n\n\n  const savedMetricOptions = useMemo(\n  () => getOptionsForSavedMetrics(savedMetrics, propsValue, null),\n  [propsValue, savedMetrics]);\n\n\n  const newAdhocMetric = useMemo(() => new AdhocMetric({ isNew: true }), [\n  value]);\n\n  const addNewMetricPopoverTrigger = useCallback(\n  (trigger) => {\n    if (isAddNewMetricDisabled()) {\n      return trigger;\n    }\n    return (\n      ___EmotionJSX(AdhocMetricPopoverTrigger, {\n        adhocMetric: newAdhocMetric,\n        onMetricEdit: onNewMetric,\n        columns: columns,\n        savedMetricsOptions: savedMetricOptions,\n        datasource: datasource,\n        savedMetric: emptySavedMetric,\n        datasourceType: datasourceType, __self: this, __source: { fileName: _jsxFileName, lineNumber: 230, columnNumber: 9 } },\n\n      trigger));\n\n\n  },\n  [\n  columns,\n  datasource,\n  datasourceType,\n  isAddNewMetricDisabled,\n  newAdhocMetric,\n  onNewMetric,\n  savedMetricOptions]);\n\n\n\n  useEffect(() => {\n    // Remove selected custom metrics that do not exist in the dataset anymore\n    // Remove selected adhoc metrics that use columns which do not exist in the dataset anymore\n    if (\n    propsValue && (\n    !_isEqual(prevColumns, columns) ||\n    !_isEqual(prevSavedMetrics, savedMetrics)))\n    {\n      const matchingMetrics = getMetricsMatchingCurrentDataset(\n      propsValue,\n      columns,\n      savedMetrics);\n\n      if (!_isEqual(matchingMetrics, propsValue)) {\n        handleChange(matchingMetrics);\n      }\n    }\n  }, [columns, handleChange, savedMetrics]);\n\n  useEffect(() => {\n    setValue(coerceAdhocMetrics(propsValue));\n  }, [propsValue]);\n\n  const onDropLabel = useCallback(() => handleChange(value), [\n  handleChange,\n  value]);\n\n\n  const valueRenderer = useCallback(\n  (option, index) =>\n  ___EmotionJSX(MetricDefinitionValue, {\n    key: index,\n    index: index,\n    option: option,\n    onMetricEdit: onMetricEdit,\n    onRemoveMetric: onRemoveMetric,\n    columns: columns,\n    datasource: datasource,\n    savedMetrics: savedMetrics,\n    savedMetricsOptions: getOptionsForSavedMetrics(\n    savedMetrics,\n    value,\n    value == null ? void 0 : value[index]),\n\n    datasourceType: datasourceType,\n    onMoveLabel: moveLabel,\n    onDropLabel: onDropLabel,\n    multi: multi, __self: this, __source: { fileName: _jsxFileName, lineNumber: 284, columnNumber: 7 } }),\n\n\n  [\n  columns,\n  datasource,\n  datasourceType,\n  moveLabel,\n  multi,\n  onDropLabel,\n  onMetricEdit,\n  onRemoveMetric,\n  savedMetrics,\n  value]);\n\n\n\n  return (\n    ___EmotionJSX(\"div\", { className: \"metrics-select\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 319, columnNumber: 5 } },\n    ___EmotionJSX(HeaderContainer, { __self: this, __source: { fileName: _jsxFileName, lineNumber: 320, columnNumber: 7 } },\n    ___EmotionJSX(ControlHeader, _extends({}, props, { __self: this, __source: { fileName: _jsxFileName, lineNumber: 321, columnNumber: 9 } })),\n    addNewMetricPopoverTrigger(\n    ___EmotionJSX(AddIconButton, {\n      disabled: isAddNewMetricDisabled(),\n      \"data-test\": \"add-metric-button\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 323, columnNumber: 11 } },\n\n    ___EmotionJSX(Icons.PlusLarge, {\n      iconSize: \"s\",\n      iconColor: theme.colors.grayscale.light5, __self: this, __source: { fileName: _jsxFileName, lineNumber: 327, columnNumber: 13 } })))),\n\n\n\n\n    ___EmotionJSX(LabelsContainer, { __self: this, __source: { fileName: _jsxFileName, lineNumber: 334, columnNumber: 7 } },\n    value.length > 0 ?\n    value.map((value, index) => valueRenderer(value, index)) :\n    addNewMetricPopoverTrigger(\n    ___EmotionJSX(AddControlLabel, { __self: this, __source: { fileName: _jsxFileName, lineNumber: 338, columnNumber: 15 } },\n    ___EmotionJSX(Icons.PlusSmall, { iconColor: theme.colors.grayscale.light1, __self: this, __source: { fileName: _jsxFileName, lineNumber: 339, columnNumber: 17 } }),\n    t('Add metric'))))));\n\n\n\n\n\n};__signature__(MetricsControl, \"useState{[value, setValue](coerceAdhocMetrics(propsValue))}\\nuseTheme{theme}\\nusePrevious{prevColumns}\\nusePrevious{prevSavedMetrics}\\nuseCallback{handleChange}\\nuseCallback{onNewMetric}\\nuseCallback{onMetricEdit}\\nuseCallback{onRemoveMetric}\\nuseCallback{moveLabel}\\nuseCallback{isAddNewMetricDisabled}\\nuseMemo{savedMetricOptions}\\nuseMemo{newAdhocMetric}\\nuseCallback{addNewMetricPopoverTrigger}\\nuseEffect{}\\nuseEffect{}\\nuseCallback{onDropLabel}\\nuseCallback{valueRenderer}\", () => [useTheme, usePrevious, usePrevious]);\n\nMetricsControl.propTypes = propTypes;\nMetricsControl.defaultProps = defaultProps;const _default =\n\nMetricsControl;export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(propTypes, \"propTypes\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/explore/components/controls/MetricControl/MetricsControl.jsx\");reactHotLoader.register(defaultProps, \"defaultProps\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/explore/components/controls/MetricControl/MetricsControl.jsx\");reactHotLoader.register(getOptionsForSavedMetrics, \"getOptionsForSavedMetrics\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/explore/components/controls/MetricControl/MetricsControl.jsx\");reactHotLoader.register(isDictionaryForAdhocMetric, \"isDictionaryForAdhocMetric\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/explore/components/controls/MetricControl/MetricsControl.jsx\");reactHotLoader.register(coerceAdhocMetrics, \"coerceAdhocMetrics\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/explore/components/controls/MetricControl/MetricsControl.jsx\");reactHotLoader.register(emptySavedMetric, \"emptySavedMetric\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/explore/components/controls/MetricControl/MetricsControl.jsx\");reactHotLoader.register(getMetricsMatchingCurrentDataset, \"getMetricsMatchingCurrentDataset\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/explore/components/controls/MetricControl/MetricsControl.jsx\");reactHotLoader.register(MetricsControl, \"MetricsControl\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/explore/components/controls/MetricControl/MetricsControl.jsx\");reactHotLoader.register(_default, \"default\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/explore/components/controls/MetricControl/MetricsControl.jsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/home/ubuntu/my_plugin/superset/superset-frontend/src/explore/components/controls/MetricControl/MetricsControl.jsx"],"names":["React","useCallback","useEffect","useMemo","useState","PropTypes","ensureIsArray","t","useTheme","ControlHeader","Icons","AddIconButton","AddControlLabel","HeaderContainer","LabelsContainer","usePrevious","columnType","MetricDefinitionValue","AdhocMetric","savedMetricType","adhocMetricType","AdhocMetricPopoverTrigger","propTypes","name","string","isRequired","onChange","func","value","oneOfType","arrayOf","columns","savedMetrics","isLoading","bool","multi","clearable","datasourceType","defaultProps","getOptionsForSavedMetrics","currentMetricValues","currentMetric","filter","savedMetric","Array","isArray","includes","metric_name","isDictionaryForAdhocMetric","expressionType","coerceAdhocMetrics","map","val","emptySavedMetric","expression","getMetricsMatchingCurrentDataset","metric","some","column","column_name","MetricsControl","propsValue","datasource","props","setValue","theme","prevColumns","prevSavedMetrics","handleChange","opts","transformedOpts","optionValues","option","onNewMetric","newMetric","newValue","onMetricEdit","changedMetric","oldMetric","optionName","onRemoveMetric","index","valuesCopy","splice","moveLabel","dragIndex","hoverIndex","newValues","isAddNewMetricDisabled","length","savedMetricOptions","newAdhocMetric","isNew","addNewMetricPopoverTrigger","trigger","matchingMetrics","onDropLabel","valueRenderer","colors","grayscale","light5","light1"],"mappings":"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","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { ensureIsArray, t, useTheme } from '@superset-ui/core';\nimport { isEqual } from 'lodash';\nimport ControlHeader from 'src/explore/components/ControlHeader';\nimport Icons from 'src/components/Icons';\nimport {\n  AddIconButton,\n  AddControlLabel,\n  HeaderContainer,\n  LabelsContainer,\n} from 'src/explore/components/controls/OptionControls';\nimport { usePrevious } from 'src/common/hooks/usePrevious';\nimport columnType from './columnType';\nimport MetricDefinitionValue from './MetricDefinitionValue';\nimport AdhocMetric from './AdhocMetric';\nimport savedMetricType from './savedMetricType';\nimport adhocMetricType from './adhocMetricType';\nimport AdhocMetricPopoverTrigger from './AdhocMetricPopoverTrigger';\n\nconst propTypes = {\n  name: PropTypes.string.isRequired,\n  onChange: PropTypes.func,\n  value: PropTypes.oneOfType([\n    PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, adhocMetricType])),\n    PropTypes.oneOfType([PropTypes.string, adhocMetricType]),\n  ]),\n  columns: PropTypes.arrayOf(columnType),\n  savedMetrics: PropTypes.arrayOf(savedMetricType),\n  isLoading: PropTypes.bool,\n  multi: PropTypes.bool,\n  clearable: PropTypes.bool,\n  datasourceType: PropTypes.string,\n};\n\nconst defaultProps = {\n  onChange: () => {},\n  clearable: true,\n  savedMetrics: [],\n  columns: [],\n};\n\nfunction getOptionsForSavedMetrics(\n  savedMetrics,\n  currentMetricValues,\n  currentMetric,\n) {\n  return (\n    savedMetrics?.filter(savedMetric =>\n      Array.isArray(currentMetricValues)\n        ? !currentMetricValues.includes(savedMetric.metric_name) ||\n          savedMetric.metric_name === currentMetric\n        : savedMetric,\n    ) ?? []\n  );\n}\n\nfunction isDictionaryForAdhocMetric(value) {\n  return value && !(value instanceof AdhocMetric) && value.expressionType;\n}\n\n// adhoc metrics are stored as dictionaries in URL params. We convert them back into the\n// AdhocMetric class for typechecking, consistency and instance method access.\nfunction coerceAdhocMetrics(value) {\n  if (!value) {\n    return [];\n  }\n  if (!Array.isArray(value)) {\n    if (isDictionaryForAdhocMetric(value)) {\n      return [new AdhocMetric(value)];\n    }\n    return [value];\n  }\n  return value.map(val => {\n    if (isDictionaryForAdhocMetric(val)) {\n      return new AdhocMetric(val);\n    }\n    return val;\n  });\n}\n\nconst emptySavedMetric = { metric_name: '', expression: '' };\n\n// TODO: use typeguards to distinguish saved metrics from adhoc metrics\nconst getMetricsMatchingCurrentDataset = (value, columns, savedMetrics) =>\n  ensureIsArray(value).filter(metric => {\n    if (typeof metric === 'string' || metric.metric_name) {\n      return savedMetrics?.some(\n        savedMetric =>\n          savedMetric.metric_name === metric ||\n          savedMetric.metric_name === metric.metric_name,\n      );\n    }\n    return columns?.some(\n      column =>\n        !metric.column || metric.column.column_name === column.column_name,\n    );\n  });\n\nconst MetricsControl = ({\n  onChange,\n  multi,\n  value: propsValue,\n  columns,\n  savedMetrics,\n  datasource,\n  datasourceType,\n  ...props\n}) => {\n  const [value, setValue] = useState(coerceAdhocMetrics(propsValue));\n  const theme = useTheme();\n  const prevColumns = usePrevious(columns);\n  const prevSavedMetrics = usePrevious(savedMetrics);\n\n  const handleChange = useCallback(\n    opts => {\n      // if clear out options\n      if (opts === null) {\n        onChange(null);\n        return;\n      }\n\n      const transformedOpts = ensureIsArray(opts);\n      const optionValues = transformedOpts\n        .map(option => {\n          // pre-defined metric\n          if (option.metric_name) {\n            return option.metric_name;\n          }\n          return option;\n        })\n        .filter(option => option);\n      onChange(multi ? optionValues : optionValues[0]);\n    },\n    [multi, onChange],\n  );\n\n  const onNewMetric = useCallback(\n    newMetric => {\n      const newValue = [...value, newMetric];\n      setValue(newValue);\n      handleChange(newValue);\n    },\n    [handleChange, value],\n  );\n\n  const onMetricEdit = useCallback(\n    (changedMetric, oldMetric) => {\n      const newValue = value.map(val => {\n        if (\n          // compare saved metrics\n          val === oldMetric.metric_name ||\n          // compare adhoc metrics\n          typeof val.optionName !== 'undefined'\n            ? val.optionName === oldMetric.optionName\n            : false\n        ) {\n          return changedMetric;\n        }\n        return val;\n      });\n      setValue(newValue);\n      handleChange(newValue);\n    },\n    [handleChange, value],\n  );\n\n  const onRemoveMetric = useCallback(\n    index => {\n      if (!Array.isArray(value)) {\n        return;\n      }\n      const valuesCopy = [...value];\n      valuesCopy.splice(index, 1);\n      setValue(valuesCopy);\n      handleChange(valuesCopy);\n    },\n    [handleChange, value],\n  );\n\n  const moveLabel = useCallback(\n    (dragIndex, hoverIndex) => {\n      const newValues = [...value];\n      [newValues[hoverIndex], newValues[dragIndex]] = [\n        newValues[dragIndex],\n        newValues[hoverIndex],\n      ];\n      setValue(newValues);\n    },\n    [value],\n  );\n\n  const isAddNewMetricDisabled = useCallback(() => !multi && value.length > 0, [\n    multi,\n    value.length,\n  ]);\n\n  const savedMetricOptions = useMemo(\n    () => getOptionsForSavedMetrics(savedMetrics, propsValue, null),\n    [propsValue, savedMetrics],\n  );\n\n  const newAdhocMetric = useMemo(() => new AdhocMetric({ isNew: true }), [\n    value,\n  ]);\n  const addNewMetricPopoverTrigger = useCallback(\n    trigger => {\n      if (isAddNewMetricDisabled()) {\n        return trigger;\n      }\n      return (\n        <AdhocMetricPopoverTrigger\n          adhocMetric={newAdhocMetric}\n          onMetricEdit={onNewMetric}\n          columns={columns}\n          savedMetricsOptions={savedMetricOptions}\n          datasource={datasource}\n          savedMetric={emptySavedMetric}\n          datasourceType={datasourceType}\n        >\n          {trigger}\n        </AdhocMetricPopoverTrigger>\n      );\n    },\n    [\n      columns,\n      datasource,\n      datasourceType,\n      isAddNewMetricDisabled,\n      newAdhocMetric,\n      onNewMetric,\n      savedMetricOptions,\n    ],\n  );\n\n  useEffect(() => {\n    // Remove selected custom metrics that do not exist in the dataset anymore\n    // Remove selected adhoc metrics that use columns which do not exist in the dataset anymore\n    if (\n      propsValue &&\n      (!isEqual(prevColumns, columns) ||\n        !isEqual(prevSavedMetrics, savedMetrics))\n    ) {\n      const matchingMetrics = getMetricsMatchingCurrentDataset(\n        propsValue,\n        columns,\n        savedMetrics,\n      );\n      if (!isEqual(matchingMetrics, propsValue)) {\n        handleChange(matchingMetrics);\n      }\n    }\n  }, [columns, handleChange, savedMetrics]);\n\n  useEffect(() => {\n    setValue(coerceAdhocMetrics(propsValue));\n  }, [propsValue]);\n\n  const onDropLabel = useCallback(() => handleChange(value), [\n    handleChange,\n    value,\n  ]);\n\n  const valueRenderer = useCallback(\n    (option, index) => (\n      <MetricDefinitionValue\n        key={index}\n        index={index}\n        option={option}\n        onMetricEdit={onMetricEdit}\n        onRemoveMetric={onRemoveMetric}\n        columns={columns}\n        datasource={datasource}\n        savedMetrics={savedMetrics}\n        savedMetricsOptions={getOptionsForSavedMetrics(\n          savedMetrics,\n          value,\n          value?.[index],\n        )}\n        datasourceType={datasourceType}\n        onMoveLabel={moveLabel}\n        onDropLabel={onDropLabel}\n        multi={multi}\n      />\n    ),\n    [\n      columns,\n      datasource,\n      datasourceType,\n      moveLabel,\n      multi,\n      onDropLabel,\n      onMetricEdit,\n      onRemoveMetric,\n      savedMetrics,\n      value,\n    ],\n  );\n\n  return (\n    <div className=\"metrics-select\">\n      <HeaderContainer>\n        <ControlHeader {...props} />\n        {addNewMetricPopoverTrigger(\n          <AddIconButton\n            disabled={isAddNewMetricDisabled()}\n            data-test=\"add-metric-button\"\n          >\n            <Icons.PlusLarge\n              iconSize=\"s\"\n              iconColor={theme.colors.grayscale.light5}\n            />\n          </AddIconButton>,\n        )}\n      </HeaderContainer>\n      <LabelsContainer>\n        {value.length > 0\n          ? value.map((value, index) => valueRenderer(value, index))\n          : addNewMetricPopoverTrigger(\n              <AddControlLabel>\n                <Icons.PlusSmall iconColor={theme.colors.grayscale.light1} />\n                {t('Add metric')}\n              </AddControlLabel>,\n            )}\n      </LabelsContainer>\n    </div>\n  );\n};\n\nMetricsControl.propTypes = propTypes;\nMetricsControl.defaultProps = defaultProps;\n\nexport default MetricsControl;\n"]},"metadata":{},"sourceType":"module"}