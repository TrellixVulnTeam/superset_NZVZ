{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;};(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport findParentId from './findParentId';\nimport { GRID_MIN_COLUMN_COUNT, GRID_COLUMN_COUNT } from './constants';\nimport {\nROW_TYPE,\nCOLUMN_TYPE,\nMARKDOWN_TYPE,\nCHART_TYPE } from\n'./componentTypes';\n\nfunction getTotalChildWidth({ id, components }) {\n  const component = components[id];\n  if (!component) return 0;\n\n  let width = 0;\n\n  (component.children || []).forEach((childId) => {\n    const child = components[childId] || {};\n    width += (child.meta || {}).width || 0;\n  });\n\n  return width;\n}\n\nexport default function getDetailedComponentWidth({\n  // pass either an id, or a component\n  id,\n  component: passedComponent,\n  components = {} })\n{\n  const result = {\n    width: undefined,\n    occupiedWidth: undefined,\n    minimumWidth: undefined };\n\n\n  const component = passedComponent || components[id];\n  if (!component) return result;\n\n  // note these remain as undefined if the component has no defined width\n  result.width = (component.meta || {}).width;\n  result.occupiedWidth = result.width;\n\n  if (component.type === ROW_TYPE) {\n    // not all rows have width 12, e\n    result.width =\n    getDetailedComponentWidth({\n      id: findParentId({\n        childId: component.id,\n        layout: components }),\n\n      components }).\n    width || GRID_COLUMN_COUNT;\n    result.occupiedWidth = getTotalChildWidth({ id: component.id, components });\n    result.minimumWidth = result.occupiedWidth || GRID_MIN_COLUMN_COUNT;\n  } else if (component.type === COLUMN_TYPE) {\n    // find the width of the largest child, only rows count\n    result.minimumWidth = GRID_MIN_COLUMN_COUNT;\n    result.occupiedWidth = 0;\n    (component.children || []).forEach((childId) => {\n      // rows don't have widths, so find the width of its children\n      if (components[childId].type === ROW_TYPE) {\n        result.minimumWidth = Math.max(\n        result.minimumWidth,\n        getTotalChildWidth({ id: childId, components }));\n\n      }\n    });\n  } else if (\n  component.type === MARKDOWN_TYPE ||\n  component.type === CHART_TYPE)\n  {\n    result.minimumWidth = GRID_MIN_COLUMN_COUNT;\n  }\n\n  return result;\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(getTotalChildWidth, \"getTotalChildWidth\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/util/getDetailedComponentWidth.js\");reactHotLoader.register(getDetailedComponentWidth, \"getDetailedComponentWidth\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/util/getDetailedComponentWidth.js\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(__signature__, \"__signature__\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/util/getDetailedComponentWidth.js\");reactHotLoader.register(getTotalChildWidth, \"getTotalChildWidth\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/util/getDetailedComponentWidth.js\");reactHotLoader.register(getDetailedComponentWidth, \"getDetailedComponentWidth\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/util/getDetailedComponentWidth.js\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/util/getDetailedComponentWidth.js"],"names":["getTotalChildWidth","component","components","width","child","getDetailedComponentWidth","result","occupiedWidth","minimumWidth","passedComponent","id","findParentId","childId","layout"],"mappings":"+kBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAA,YAAA,MAAA,gBAAA;AACA,SAAA,qBAAA,EAAA,iBAAA,QAAA,aAAA;AACA;AAAA,QAAA;AAAA,WAAA;AAAA,aAAA;AAAA,UAAA;AAAA,kBAAA;;AAOA,SAAA,kBAAA,CAA4B,EAAA,EAAA,EAA5B,UAA4B,EAA5B,EAAgD;AAC9C,QAAMC,SAAS,GAAGC,UAAU,CAA5B,EAA4B,CAA5B;AACA,MAAI,CAAJ,SAAA,EAAgB,OAAA,CAAA;;AAEhB,MAAIC,KAAK,GAAT,CAAA;;AAEA,GAACF,SAAS,CAATA,QAAAA,IAAD,EAAA,EAAA,OAAA,CAAmC,CAAA,OAAA,KAAW;AAC5C,UAAMG,KAAK,GAAGF,UAAU,CAAVA,OAAU,CAAVA,IAAd,EAAA;AACAC,IAAAA,KAAK,IAAI,CAACC,KAAK,CAALA,IAAAA,IAAD,EAAA,EAAA,KAAA,IAATD,CAAAA;AAFF,GAAA;;AAKA,SAAA,KAAA;AACD;;AAED,eAAe,SAAA,yBAAA,CAAmC;AAChD;AADgD,EAAA,EAAA;AAGhDF,EAAAA,SAAS,EAHuC,eAAA;AAIhDC,EAAAA,UAAU,GAJG,EAAmC,EAAnC;AAKZ;AACD,QAAMI,MAAM,GAAG;AACbH,IAAAA,KAAK,EADQ,SAAA;AAEbI,IAAAA,aAAa,EAFA,SAAA;AAGbC,IAAAA,YAAY,EAHd,SAAe,EAAf;;;AAMA,QAAMP,SAAS,GAAGQ,eAAe,IAAIP,UAAU,CAA/C,EAA+C,CAA/C;AACA,MAAI,CAAJ,SAAA,EAAgB,OAAA,MAAA;;AAEhB;AACAI,EAAAA,MAAM,CAANA,KAAAA,GAAe,CAACL,SAAS,CAATA,IAAAA,IAAD,EAAA,EAAfK,KAAAA;AACAA,EAAAA,MAAM,CAANA,aAAAA,GAAuBA,MAAM,CAA7BA,KAAAA;;AAEA,MAAIL,SAAS,CAATA,IAAAA,KAAJ,QAAA,EAAiC;AAC/B;AACAK,IAAAA,MAAM,CAANA,KAAAA;AACED,IAAAA,yBAAyB,CAAC;AACxBK,MAAAA,EAAE,EAAEC,YAAY,CAAC;AACfC,QAAAA,OAAO,EAAEX,SAAS,CADH,EAAA;AAEfY,QAAAA,MAAM,EAHgB,UACP,EAAD,CADQ;;AAA1BR,MAAAA,UAA0B,EAAD,CAAzBA;AAAAA,IAAAA,KAAAA,IADFC,iBAAAA;AAQAA,IAAAA,MAAM,CAANA,aAAAA,GAAuBN,kBAAkB,CAAC,EAAEU,EAAE,EAAET,SAAS,CAAf,EAAA,EAA1CK,UAA0C,EAAD,CAAzCA;AACAA,IAAAA,MAAM,CAANA,YAAAA,GAAsBA,MAAM,CAANA,aAAAA,IAAtBA,qBAAAA;AAXF,GAAA,MAYO,IAAIL,SAAS,CAATA,IAAAA,KAAJ,WAAA,EAAoC;AACzC;AACAK,IAAAA,MAAM,CAANA,YAAAA,GAAAA,qBAAAA;AACAA,IAAAA,MAAM,CAANA,aAAAA,GAAAA,CAAAA;AACA,KAACL,SAAS,CAATA,QAAAA,IAAD,EAAA,EAAA,OAAA,CAAmC,CAAA,OAAA,KAAW;AAC5C;AACA,UAAIC,UAAU,CAAVA,OAAU,CAAVA,CAAAA,IAAAA,KAAJ,QAAA,EAA2C;AACzCI,QAAAA,MAAM,CAANA,YAAAA,GAAsB,IAAI,CAAJ,GAAA;AACpBA,QAAAA,MAAM,CADc,YAAA;AAEpBN,QAAAA,kBAAkB,CAAC,EAAEU,EAAE,EAAJ,OAAA,EAFrBJ,UAEqB,EAAD,CAFE,CAAtBA;;AAID;AAPH,KAAA;AAJK,GAAA,MAaA;AACLL,EAAAA,SAAS,CAATA,IAAAA,KAAAA,aAAAA;AACAA,EAAAA,SAAS,CAATA,IAAAA,KAFK,UAAA;AAGL;AACAK,IAAAA,MAAM,CAANA,YAAAA,GAAAA,qBAAAA;AACD;;AAED,SAAA,MAAA;kLAjEON,kB,qJAceK,yB,2nBAdxB,kB,qJAce,yB","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport findParentId from './findParentId';\nimport { GRID_MIN_COLUMN_COUNT, GRID_COLUMN_COUNT } from './constants';\nimport {\n  ROW_TYPE,\n  COLUMN_TYPE,\n  MARKDOWN_TYPE,\n  CHART_TYPE,\n} from './componentTypes';\n\nfunction getTotalChildWidth({ id, components }) {\n  const component = components[id];\n  if (!component) return 0;\n\n  let width = 0;\n\n  (component.children || []).forEach(childId => {\n    const child = components[childId] || {};\n    width += (child.meta || {}).width || 0;\n  });\n\n  return width;\n}\n\nexport default function getDetailedComponentWidth({\n  // pass either an id, or a component\n  id,\n  component: passedComponent,\n  components = {},\n}) {\n  const result = {\n    width: undefined,\n    occupiedWidth: undefined,\n    minimumWidth: undefined,\n  };\n\n  const component = passedComponent || components[id];\n  if (!component) return result;\n\n  // note these remain as undefined if the component has no defined width\n  result.width = (component.meta || {}).width;\n  result.occupiedWidth = result.width;\n\n  if (component.type === ROW_TYPE) {\n    // not all rows have width 12, e\n    result.width =\n      getDetailedComponentWidth({\n        id: findParentId({\n          childId: component.id,\n          layout: components,\n        }),\n        components,\n      }).width || GRID_COLUMN_COUNT;\n    result.occupiedWidth = getTotalChildWidth({ id: component.id, components });\n    result.minimumWidth = result.occupiedWidth || GRID_MIN_COLUMN_COUNT;\n  } else if (component.type === COLUMN_TYPE) {\n    // find the width of the largest child, only rows count\n    result.minimumWidth = GRID_MIN_COLUMN_COUNT;\n    result.occupiedWidth = 0;\n    (component.children || []).forEach(childId => {\n      // rows don't have widths, so find the width of its children\n      if (components[childId].type === ROW_TYPE) {\n        result.minimumWidth = Math.max(\n          result.minimumWidth,\n          getTotalChildWidth({ id: childId, components }),\n        );\n      }\n    });\n  } else if (\n    component.type === MARKDOWN_TYPE ||\n    component.type === CHART_TYPE\n  ) {\n    result.minimumWidth = GRID_MIN_COLUMN_COUNT;\n  }\n\n  return result;\n}\n"]},"metadata":{},"sourceType":"module"}