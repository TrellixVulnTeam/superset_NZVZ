{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Find Option value that matches a possibly string value.\n *\n * Translate possible string values to `OptionType` objects, fallback to value\n * itself if cannot be found in the options list.\n *\n * Always returns an array.\n */\nexport function findValue(value, options = [], valueKey = 'value') {\n  if (value === null || value === undefined || value === '') {\n    return [];\n  }\n  const isGroup = Array.isArray((options[0] || {}).options);\n  const flatOptions = isGroup ?\n  options.flatMap((x) => x.options || []) :\n  options;\n  const find = (val) => {\n    const realVal = (value || {}).hasOwnProperty(valueKey) ?\n    val[valueKey] :\n    val;\n    return flatOptions.find((x) => x === realVal || x[valueKey] === realVal) || val;\n  };\n  // If value is a single string, must return an Array so `cleanValue` won't be\n  // empty: https://github.com/JedWatson/react-select/blob/32ad5c040bdd96cd1ca71010c2558842d684629c/packages/react-select/src/utils.js#L64\n  return (Array.isArray(value) ? value : [value]).map(find);\n}\nexport function hasOption(search, options) {\n  const searchOption = search.trim().toLowerCase();\n  return options.find((opt) => {\n    const { label, value } = opt;\n    const labelText = String(label);\n    const valueText = String(value);\n    return valueText.toLowerCase() === searchOption ||\n    labelText.toLowerCase() === searchOption;\n  });\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(findValue, \"findValue\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/components/Select/utils.ts\");reactHotLoader.register(hasOption, \"hasOption\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/components/Select/utils.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/home/ubuntu/my_plugin/superset/superset-frontend/src/components/Select/utils.ts"],"names":[],"mappings":"wSA2BA;;;;;;;AAOG;AACH,OAAM,SAAU,SAAV,CACJ,KADI,EAEJ,OAAA,GAAoE,EAFhE,EAGJ,QAAQ,GAAG,OAHP,EAGc;AAElB,MAAI,KAAK,KAAK,IAAV,IAAkB,KAAK,KAAK,SAA5B,IAAyC,KAAK,KAAK,EAAvD,EAA2D;AACzD,WAAO,EAAP;AACD;AACD,QAAM,OAAO,GAAG,KAAK,CAAC,OAAN,CAAc,CAAC,OAAO,CAAC,CAAD,CAAP,IAAc,EAAf,EAAmB,OAAjC,CAAhB;AACA,QAAM,WAAW,GAAG,OAAO;AACtB,EAAA,OAA0C,CAAC,OAA3C,CAAmD,CAAA,CAAC,KAAI,CAAC,CAAC,OAAF,IAAa,EAArE,CADsB;AAEtB,EAAA,OAFL;AAIA,QAAM,IAAI,GAAG,CAAC,GAAD,KAAoB;AAC/B,UAAM,OAAO,GAAG,CAAC,KAAK,IAAI,EAAV,EAAc,cAAd,CAA6B,QAA7B;AACZ,IAAA,GAAG,CAAC,QAAD,CADS;AAEZ,IAAA,GAFJ;AAGA,WACE,WAAW,CAAC,IAAZ,CAAiB,CAAA,CAAC,KAAI,CAAC,KAAK,OAAN,IAAiB,CAAC,CAAC,QAAD,CAAD,KAAgB,OAAvD,KAAmE,GADrE;AAGD,GAPD;AASA;AACA;AACA,SAAO,CAAC,KAAK,CAAC,OAAN,CAAc,KAAd,IAAuB,KAAvB,GAA+B,CAAC,KAAD,CAAhC,EAAyC,GAAzC,CAA6C,IAA7C,CAAP;AACD;AAED,OAAM,SAAU,SAAV,CAAoB,MAApB,EAAoC,OAApC,EAA4D;AAChE,QAAM,YAAY,GAAG,MAAM,CAAC,IAAP,GAAc,WAAd,EAArB;AACA,SAAO,OAAO,CAAC,IAAR,CAAa,CAAA,GAAG,KAAG;AACxB,UAAM,EAAE,KAAF,EAAS,KAAT,KAAmB,GAAzB;AACA,UAAM,SAAS,GAAG,MAAM,CAAC,KAAD,CAAxB;AACA,UAAM,SAAS,GAAG,MAAM,CAAC,KAAD,CAAxB;AACA,WACE,SAAS,CAAC,WAAV,OAA4B,YAA5B;AACA,IAAA,SAAS,CAAC,WAAV,OAA4B,YAF9B;AAID,GARM,CAAP;AASD,C,iLAtCe,S,2HA2BA,S","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport {\n  OptionTypeBase,\n  ValueType,\n  OptionsType,\n  GroupedOptionsType,\n} from 'react-select';\n\nimport { OptionsType as AntdOptionsType } from './Select';\n\n/**\n * Find Option value that matches a possibly string value.\n *\n * Translate possible string values to `OptionType` objects, fallback to value\n * itself if cannot be found in the options list.\n *\n * Always returns an array.\n */\nexport function findValue<OptionType extends OptionTypeBase>(\n  value: ValueType<OptionType> | string,\n  options: GroupedOptionsType<OptionType> | OptionsType<OptionType> = [],\n  valueKey = 'value',\n): OptionType[] {\n  if (value === null || value === undefined || value === '') {\n    return [];\n  }\n  const isGroup = Array.isArray((options[0] || {}).options);\n  const flatOptions = isGroup\n    ? (options as GroupedOptionsType<OptionType>).flatMap(x => x.options || [])\n    : (options as OptionsType<OptionType>);\n\n  const find = (val: OptionType) => {\n    const realVal = (value || {}).hasOwnProperty(valueKey)\n      ? val[valueKey]\n      : val;\n    return (\n      flatOptions.find(x => x === realVal || x[valueKey] === realVal) || val\n    );\n  };\n\n  // If value is a single string, must return an Array so `cleanValue` won't be\n  // empty: https://github.com/JedWatson/react-select/blob/32ad5c040bdd96cd1ca71010c2558842d684629c/packages/react-select/src/utils.js#L64\n  return (Array.isArray(value) ? value : [value]).map(find);\n}\n\nexport function hasOption(search: string, options: AntdOptionsType) {\n  const searchOption = search.trim().toLowerCase();\n  return options.find(opt => {\n    const { label, value } = opt;\n    const labelText = String(label);\n    const valueText = String(value);\n    return (\n      valueText.toLowerCase() === searchOption ||\n      labelText.toLowerCase() === searchOption\n    );\n  });\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}