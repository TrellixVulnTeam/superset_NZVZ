{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/components/nativeFilters/FiltersConfigModal/FiltersConfigForm/ColumnSelect.tsx\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useCallback, useState, useMemo, useEffect } from 'react';\nimport { ensureIsArray, SupersetClient, t } from '@superset-ui/core';\nimport { useChangeEffect } from 'src/common/hooks/useChangeEffect';\nimport { Select } from 'src/components';\nimport { useToasts } from 'src/components/MessageToasts/withToasts';\nimport { getClientErrorObject } from 'src/utils/getClientErrorObject';\nimport { cacheWrapper } from 'src/utils/cacheWrapper';\nimport { doesColumnMatchFilterType } from './utils';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst localCache = new Map();\nconst cachedSupersetGet = cacheWrapper(SupersetClient.get, localCache, ({ endpoint }) => endpoint || '');\n/** Special purpose AsyncSelect that selects a column from a dataset */\n// eslint-disable-next-line import/prefer-default-export\nexport function ColumnSelect({ allowClear = false, filterValues = () => true, form, formField = 'column', filterId, datasetId, value, onChange, mode }) {var _form$getFieldValue;\n  const [columns, setColumns] = useState();\n  const { addDangerToast } = useToasts();\n  const resetColumnField = useCallback(() => {\n    form.setFields([\n    { name: ['filters', filterId, formField], touched: false, value: null }]);\n\n  }, [form, filterId, formField]);\n  const options = useMemo(() => ensureIsArray(columns).\n  filter(filterValues).\n  map((col) => col.column_name).\n  sort((a, b) => a.localeCompare(b)).\n  map((column) => ({ label: column, value: column })), [columns, filterValues]);\n  const currentFilterType = (_form$getFieldValue = form.getFieldValue('filters')) == null ? void 0 : _form$getFieldValue[filterId].\n  filterType;\n  const currentColumn = useMemo(() => columns == null ? void 0 : columns.find((column) => column.column_name === value), [columns, value]);\n  useEffect(() => {\n    if (currentColumn &&\n    !doesColumnMatchFilterType(currentFilterType, currentColumn)) {\n      resetColumnField();\n    }\n  }, [currentColumn, currentFilterType, resetColumnField]);\n  useChangeEffect(datasetId, (previous) => {\n    if (previous != null) {\n      resetColumnField();\n    }\n    if (datasetId != null) {\n      cachedSupersetGet({\n        endpoint: `/api/v1/dataset/${datasetId}` }).\n      then(({ json: { result } }) => {\n        const lookupValue = Array.isArray(value) ? value : [value];\n        const valueExists = result.columns.some((column) => lookupValue == null ? void 0 : lookupValue.includes(column.column_name));\n        if (!valueExists) {\n          resetColumnField();\n        }\n        setColumns(result.columns);\n      }, async (badResponse) => {\n        const { error, message } = await getClientErrorObject(badResponse);\n        let errorText = message || error || t('An error has occurred');\n        if (message === 'Forbidden') {\n          errorText = t('You do not have permission to edit this dashboard');\n        }\n        addDangerToast(errorText);\n      });\n    }\n  });\n  return ___EmotionJSX(Select, { mode: mode, value: mode === 'multiple' ? value || [] : value, ariaLabel: t('Column select'), onChange: onChange, options: options, placeholder: t('Select a column'), notFoundContent: t('No compatible columns found'), showSearch: true, allowClear: allowClear, __self: this, __source: { fileName: _jsxFileName, lineNumber: 77, columnNumber: 13 } });\n}__signature__(ColumnSelect, \"useState{[columns, setColumns]}\\nuseToasts{{ addDangerToast }}\\nuseCallback{resetColumnField}\\nuseMemo{options}\\nuseMemo{currentColumn}\\nuseEffect{}\\nuseChangeEffect{}\", () => [useToasts, useChangeEffect]);;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(localCache, \"localCache\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/components/nativeFilters/FiltersConfigModal/FiltersConfigForm/ColumnSelect.tsx\");reactHotLoader.register(cachedSupersetGet, \"cachedSupersetGet\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/components/nativeFilters/FiltersConfigModal/FiltersConfigForm/ColumnSelect.tsx\");reactHotLoader.register(ColumnSelect, \"ColumnSelect\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/components/nativeFilters/FiltersConfigModal/FiltersConfigForm/ColumnSelect.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/components/nativeFilters/FiltersConfigModal/FiltersConfigForm/ColumnSelect.tsx"],"names":[],"mappings":"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","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useCallback, useState, useMemo, useEffect } from 'react';\nimport { FormInstance } from 'antd/lib/form';\nimport { Column, ensureIsArray, SupersetClient, t } from '@superset-ui/core';\nimport { useChangeEffect } from 'src/common/hooks/useChangeEffect';\nimport { Select } from 'src/components';\nimport { useToasts } from 'src/components/MessageToasts/withToasts';\nimport { getClientErrorObject } from 'src/utils/getClientErrorObject';\nimport { cacheWrapper } from 'src/utils/cacheWrapper';\nimport { NativeFiltersForm } from '../types';\nimport { doesColumnMatchFilterType } from './utils';\n\ninterface ColumnSelectProps {\n  allowClear?: boolean;\n  filterValues?: (column: Column) => boolean;\n  form: FormInstance<NativeFiltersForm>;\n  formField?: string;\n  filterId: string;\n  datasetId?: number;\n  value?: string | string[];\n  onChange?: (value: string) => void;\n  mode?: 'multiple';\n}\n\nconst localCache = new Map<string, any>();\n\nconst cachedSupersetGet = cacheWrapper(\n  SupersetClient.get,\n  localCache,\n  ({ endpoint }) => endpoint || '',\n);\n\n/** Special purpose AsyncSelect that selects a column from a dataset */\n// eslint-disable-next-line import/prefer-default-export\nexport function ColumnSelect({\n  allowClear = false,\n  filterValues = () => true,\n  form,\n  formField = 'column',\n  filterId,\n  datasetId,\n  value,\n  onChange,\n  mode,\n}: ColumnSelectProps) {\n  const [columns, setColumns] = useState<Column[]>();\n  const { addDangerToast } = useToasts();\n  const resetColumnField = useCallback(() => {\n    form.setFields([\n      { name: ['filters', filterId, formField], touched: false, value: null },\n    ]);\n  }, [form, filterId, formField]);\n\n  const options = useMemo(\n    () =>\n      ensureIsArray(columns)\n        .filter(filterValues)\n        .map((col: Column) => col.column_name)\n        .sort((a: string, b: string) => a.localeCompare(b))\n        .map((column: string) => ({ label: column, value: column })),\n    [columns, filterValues],\n  );\n\n  const currentFilterType = form.getFieldValue('filters')?.[filterId]\n    .filterType;\n  const currentColumn = useMemo(\n    () => columns?.find(column => column.column_name === value),\n    [columns, value],\n  );\n\n  useEffect(() => {\n    if (\n      currentColumn &&\n      !doesColumnMatchFilterType(currentFilterType, currentColumn)\n    ) {\n      resetColumnField();\n    }\n  }, [currentColumn, currentFilterType, resetColumnField]);\n\n  useChangeEffect(datasetId, previous => {\n    if (previous != null) {\n      resetColumnField();\n    }\n    if (datasetId != null) {\n      cachedSupersetGet({\n        endpoint: `/api/v1/dataset/${datasetId}`,\n      }).then(\n        ({ json: { result } }) => {\n          const lookupValue = Array.isArray(value) ? value : [value];\n          const valueExists = result.columns.some((column: Column) =>\n            lookupValue?.includes(column.column_name),\n          );\n          if (!valueExists) {\n            resetColumnField();\n          }\n          setColumns(result.columns);\n        },\n        async badResponse => {\n          const { error, message } = await getClientErrorObject(badResponse);\n          let errorText = message || error || t('An error has occurred');\n          if (message === 'Forbidden') {\n            errorText = t('You do not have permission to edit this dashboard');\n          }\n          addDangerToast(errorText);\n        },\n      );\n    }\n  });\n\n  return (\n    <Select\n      mode={mode}\n      value={mode === 'multiple' ? value || [] : value}\n      ariaLabel={t('Column select')}\n      onChange={onChange}\n      options={options}\n      placeholder={t('Select a column')}\n      notFoundContent={t('No compatible columns found')}\n      showSearch\n      allowClear={allowClear}\n    />\n  );\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}