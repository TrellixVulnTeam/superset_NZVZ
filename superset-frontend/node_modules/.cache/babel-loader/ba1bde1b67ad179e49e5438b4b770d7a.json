{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/components/PropertiesModal/index.tsx\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { Form, Row, Col, Input } from 'src/common/components';\nimport { FormItem } from 'src/components/Form';\nimport jsonStringify from 'json-stringify-pretty-compact';\nimport Button from 'src/components/Button';\nimport { Select } from 'src/components';\nimport rison from 'rison';\nimport { styled, t, SupersetClient, getCategoricalSchemeRegistry, ensureIsArray } from '@superset-ui/core';\nimport Modal from 'src/components/Modal';\nimport { JsonEditor } from 'src/components/AsyncAceEditor';\nimport ColorSchemeControlWrapper from 'src/dashboard/components/ColorSchemeControlWrapper';\nimport { getClientErrorObject } from 'src/utils/getClientErrorObject';\nimport withToasts from 'src/components/MessageToasts/withToasts';\nimport { FeatureFlag, isFeatureEnabled } from 'src/featureFlags';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst StyledFormItem = styled(FormItem)`\n  margin-bottom: 0;\n`;\nconst StyledJsonEditor = styled(JsonEditor)`\n  border-radius: ${({ theme }) => theme.borderRadius}px;\n  border: 1px solid ${({ theme }) => theme.colors.secondary.light2};\n`;\nconst PropertiesModal = ({ addSuccessToast, colorScheme: currentColorScheme, dashboardId, dashboardInfo: currentDashboardInfo, dashboardTitle, onHide = () => {}, onlyApply = false, onSubmit = () => {}, show = false }) => {\n  const [form] = Form.useForm();\n  const [isLoading, setIsLoading] = useState(false);\n  const [isAdvancedOpen, setIsAdvancedOpen] = useState(false);\n  const [colorScheme, setColorScheme] = useState(currentColorScheme);\n  const [jsonMetadata, setJsonMetadata] = useState('');\n  const [dashboardInfo, setDashboardInfo] = useState();\n  const [owners, setOwners] = useState([]);\n  const [roles, setRoles] = useState([]);\n  const saveLabel = onlyApply ? t('Apply') : t('Save');\n  const handleErrorResponse = async (response) => {\n    const { error, statusText, message } = await getClientErrorObject(response);\n    let errorText = error || statusText || t('An error has occurred');\n    if (typeof message === 'object' && 'json_metadata' in message) {\n      errorText = message.json_metadata;\n    } else\n    if (typeof message === 'string') {\n      errorText = message;\n      if (message === 'Forbidden') {\n        errorText = t('You do not have permission to edit this dashboard');\n      }\n    }\n    Modal.error({\n      title: 'Error',\n      content: errorText,\n      okButtonProps: { danger: true, className: 'btn-danger' } });\n\n  };\n  const loadAccessOptions = useCallback((accessType = 'owners', input = '', page, pageSize) => {\n    const query = rison.encode({\n      filter: input,\n      page,\n      page_size: pageSize });\n\n    return SupersetClient.get({\n      endpoint: `/api/v1/dashboard/related/${accessType}?q=${query}` }).\n    then((response) => ({\n      data: response.json.result.map((item) => ({\n        value: item.value,\n        label: item.text })),\n\n      totalCount: response.json.count }));\n\n  }, []);\n  const handleDashboardData = useCallback((dashboardData) => {\n    const { id, dashboard_title, slug, certified_by, certification_details, owners, roles, metadata } = dashboardData;\n    const dashboardInfo = {\n      id,\n      title: dashboard_title,\n      slug: slug || '',\n      certifiedBy: certified_by || '',\n      certificationDetails: certification_details || '' };\n\n    form.setFieldsValue(dashboardInfo);\n    setDashboardInfo(dashboardInfo);\n    setOwners(owners);\n    setRoles(roles);\n    setColorScheme(metadata.color_scheme);\n    // temporary fix to remove positions from dashboards' metadata\n    if (metadata != null && metadata.positions) {\n      delete metadata.positions;\n    }\n    setJsonMetadata(metadata ? jsonStringify(metadata) : '');\n  }, [form]);\n  const fetchDashboardDetails = useCallback(() => {\n    setIsLoading(true);\n    // We fetch the dashboard details because not all code\n    // that renders this component have all the values we need.\n    // At some point when we have a more consistent frontend\n    // datamodel, the dashboard could probably just be passed as a prop.\n    SupersetClient.get({\n      endpoint: `/api/v1/dashboard/${dashboardId}` }).\n    then((response) => {var _dashboard$json_metad;\n      const dashboard = response.json.result;\n      const jsonMetadataObj = (_dashboard$json_metad = dashboard.json_metadata) != null && _dashboard$json_metad.length ?\n      JSON.parse(dashboard.json_metadata) :\n      {};\n      handleDashboardData({\n        ...dashboard,\n        metadata: jsonMetadataObj });\n\n      setIsLoading(false);\n    }, handleErrorResponse);\n  }, [dashboardId, handleDashboardData]);\n  const getJsonMetadata = () => {\n    try {\n      const jsonMetadataObj = jsonMetadata != null && jsonMetadata.length ?\n      JSON.parse(jsonMetadata) :\n      {};\n      return jsonMetadataObj;\n    }\n    catch (_) {\n      return {};\n    }\n  };\n  const handleOnChangeOwners = (owners) => {\n    const parsedOwners = ensureIsArray(owners).map((o) => ({\n      id: o.value,\n      full_name: o.label }));\n\n    setOwners(parsedOwners);\n  };\n  const handleOnChangeRoles = (roles) => {\n    const parsedRoles = ensureIsArray(roles).map((r) => ({\n      id: r.value,\n      name: r.label }));\n\n    setRoles(parsedRoles);\n  };\n  const handleOwnersSelectValue = () => {\n    const parsedOwners = (owners || []).map((owner) => ({\n      value: owner.id,\n      label: owner.full_name || `${owner.first_name} ${owner.last_name}` }));\n\n    return parsedOwners;\n  };\n  const handleRolesSelectValue = () => {\n    const parsedRoles = (roles || []).map((role) => ({\n      value: role.id,\n      label: `${role.name}` }));\n\n    return parsedRoles;\n  };\n  const onColorSchemeChange = (colorScheme, { updateMetadata = true } = {}) => {\n    // check that color_scheme is valid\n    const colorChoices = getCategoricalSchemeRegistry().keys();\n    const jsonMetadataObj = getJsonMetadata();\n    // only fire if the color_scheme is present and invalid\n    if (colorScheme && !colorChoices.includes(colorScheme)) {\n      Modal.error({\n        title: 'Error',\n        content: t('A valid color scheme is required'),\n        okButtonProps: { danger: true, className: 'btn-danger' } });\n\n      throw new Error('A valid color scheme is required');\n    }\n    // update metadata to match selection\n    if (updateMetadata) {\n      jsonMetadataObj.color_scheme = colorScheme;\n      jsonMetadataObj.label_colors = jsonMetadataObj.label_colors || {};\n      setJsonMetadata(jsonStringify(jsonMetadataObj));\n    }\n    setColorScheme(colorScheme);\n  };\n  const onFinish = () => {\n    const { title, slug, certifiedBy, certificationDetails } = form.getFieldsValue();\n    let currentColorScheme = colorScheme;\n    let colorNamespace = '';\n    // color scheme in json metadata has precedence over selection\n    if (jsonMetadata != null && jsonMetadata.length) {\n      const metadata = JSON.parse(jsonMetadata);\n      currentColorScheme = (metadata == null ? void 0 : metadata.color_scheme) || colorScheme;\n      colorNamespace = (metadata == null ? void 0 : metadata.color_namespace) || '';\n    }\n    onColorSchemeChange(currentColorScheme, {\n      updateMetadata: false });\n\n    const moreOnSubmitProps = {};\n    const morePutProps = {};\n    if (isFeatureEnabled(FeatureFlag.DASHBOARD_RBAC)) {\n      moreOnSubmitProps.roles = roles;\n      morePutProps.roles = (roles || []).map((r) => r.id);\n    }\n    const onSubmitProps = {\n      id: dashboardId,\n      title,\n      slug,\n      jsonMetadata,\n      owners,\n      colorScheme: currentColorScheme,\n      colorNamespace,\n      certifiedBy,\n      certificationDetails,\n      ...moreOnSubmitProps };\n\n    if (onlyApply) {\n      onSubmit(onSubmitProps);\n      onHide();\n    } else\n    {\n      SupersetClient.put({\n        endpoint: `/api/v1/dashboard/${dashboardId}`,\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          dashboard_title: title,\n          slug: slug || null,\n          json_metadata: jsonMetadata || null,\n          owners: (owners || []).map((o) => o.id),\n          certified_by: certifiedBy || null,\n          certification_details: certifiedBy && certificationDetails ? certificationDetails : null,\n          ...morePutProps }) }).\n\n      then(() => {\n        addSuccessToast(t('The dashboard has been saved'));\n        onSubmit(onSubmitProps);\n        onHide();\n      }, handleErrorResponse);\n    }\n  };\n  const getRowsWithoutRoles = () => {\n    const jsonMetadataObj = getJsonMetadata();\n    const hasCustomLabelColors = !!Object.keys((jsonMetadataObj == null ? void 0 : jsonMetadataObj.label_colors) || {}).length;\n    return ___EmotionJSX(Row, { gutter: 16, __self: this, __source: { fileName: _jsxFileName, lineNumber: 242, columnNumber: 17 } },\n    ___EmotionJSX(Col, { xs: 24, md: 12, __self: this, __source: { fileName: _jsxFileName, lineNumber: 243, columnNumber: 9 } },\n    ___EmotionJSX(\"h3\", { style: { marginTop: '1em' }, __self: this, __source: { fileName: _jsxFileName, lineNumber: 244, columnNumber: 11 } }, t('Access')),\n    ___EmotionJSX(StyledFormItem, { label: t('Owners'), __self: this, __source: { fileName: _jsxFileName, lineNumber: 245, columnNumber: 11 } },\n    ___EmotionJSX(Select, { allowClear: true, ariaLabel: t('Owners'), disabled: isLoading, mode: \"multiple\", onChange: handleOnChangeOwners, options: (input, page, pageSize) => loadAccessOptions('owners', input, page, pageSize), value: handleOwnersSelectValue(), __self: this, __source: { fileName: _jsxFileName, lineNumber: 246, columnNumber: 13 } })),\n\n    ___EmotionJSX(\"p\", { className: \"help-block\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 248, columnNumber: 11 } },\n    t('Owners is a list of users who can alter the dashboard. Searchable by name or username.'))),\n\n\n    ___EmotionJSX(Col, { xs: 24, md: 12, __self: this, __source: { fileName: _jsxFileName, lineNumber: 252, columnNumber: 9 } },\n    ___EmotionJSX(\"h3\", { style: { marginTop: '1em' }, __self: this, __source: { fileName: _jsxFileName, lineNumber: 253, columnNumber: 11 } }, t('Colors')),\n    ___EmotionJSX(ColorSchemeControlWrapper, { hasCustomLabelColors: hasCustomLabelColors, onChange: onColorSchemeChange, colorScheme: colorScheme, labelMargin: 4, __self: this, __source: { fileName: _jsxFileName, lineNumber: 254, columnNumber: 11 } })));\n\n\n  };\n  const getRowsWithRoles = () => {\n    const jsonMetadataObj = getJsonMetadata();\n    const hasCustomLabelColors = !!Object.keys((jsonMetadataObj == null ? void 0 : jsonMetadataObj.label_colors) || {}).length;\n    return ___EmotionJSX(React.Fragment, null,\n    ___EmotionJSX(Row, { __self: this, __source: { fileName: _jsxFileName, lineNumber: 262, columnNumber: 9 } },\n    ___EmotionJSX(Col, { xs: 24, md: 24, __self: this, __source: { fileName: _jsxFileName, lineNumber: 263, columnNumber: 11 } },\n    ___EmotionJSX(\"h3\", { style: { marginTop: '1em' }, __self: this, __source: { fileName: _jsxFileName, lineNumber: 264, columnNumber: 13 } }, t('Access')))),\n\n\n    ___EmotionJSX(Row, { gutter: 16, __self: this, __source: { fileName: _jsxFileName, lineNumber: 267, columnNumber: 9 } },\n    ___EmotionJSX(Col, { xs: 24, md: 12, __self: this, __source: { fileName: _jsxFileName, lineNumber: 268, columnNumber: 11 } },\n    ___EmotionJSX(StyledFormItem, { label: t('Owners'), __self: this, __source: { fileName: _jsxFileName, lineNumber: 269, columnNumber: 13 } },\n    ___EmotionJSX(Select, { allowClear: true, ariaLabel: t('Owners'), disabled: isLoading, mode: \"multiple\", onChange: handleOnChangeOwners, options: (input, page, pageSize) => loadAccessOptions('owners', input, page, pageSize), value: handleOwnersSelectValue(), __self: this, __source: { fileName: _jsxFileName, lineNumber: 270, columnNumber: 15 } })),\n\n    ___EmotionJSX(\"p\", { className: \"help-block\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 272, columnNumber: 13 } },\n    t('Owners is a list of users who can alter the dashboard. Searchable by name or username.'))),\n\n\n    ___EmotionJSX(Col, { xs: 24, md: 12, __self: this, __source: { fileName: _jsxFileName, lineNumber: 276, columnNumber: 11 } },\n    ___EmotionJSX(StyledFormItem, { label: t('Roles'), __self: this, __source: { fileName: _jsxFileName, lineNumber: 277, columnNumber: 13 } },\n    ___EmotionJSX(Select, { allowClear: true, ariaLabel: t('Roles'), disabled: isLoading, mode: \"multiple\", onChange: handleOnChangeRoles, options: (input, page, pageSize) => loadAccessOptions('roles', input, page, pageSize), value: handleRolesSelectValue(), __self: this, __source: { fileName: _jsxFileName, lineNumber: 278, columnNumber: 15 } })),\n\n    ___EmotionJSX(\"p\", { className: \"help-block\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 280, columnNumber: 13 } },\n    t('Roles is a list which defines access to the dashboard. Granting a role access to a dashboard will bypass dataset level checks. If no roles are defined, then the dashboard is available to all roles.')))),\n\n\n\n    ___EmotionJSX(Row, { __self: this, __source: { fileName: _jsxFileName, lineNumber: 285, columnNumber: 9 } },\n    ___EmotionJSX(Col, { xs: 24, md: 12, __self: this, __source: { fileName: _jsxFileName, lineNumber: 286, columnNumber: 11 } },\n    ___EmotionJSX(ColorSchemeControlWrapper, { hasCustomLabelColors: hasCustomLabelColors, onChange: onColorSchemeChange, colorScheme: colorScheme, labelMargin: 4, __self: this, __source: { fileName: _jsxFileName, lineNumber: 287, columnNumber: 13 } }))));\n\n\n\n  };\n  useEffect(() => {\n    if (show) {\n      if (!currentDashboardInfo) {\n        fetchDashboardDetails();\n      } else\n      {\n        handleDashboardData(currentDashboardInfo);\n      }\n    }\n    JsonEditor.preload();\n  }, [currentDashboardInfo, fetchDashboardDetails, handleDashboardData, show]);\n  useEffect(() => {\n    // the title can be changed inline in the dashboard, this catches it\n    if (dashboardTitle &&\n    dashboardInfo &&\n    dashboardInfo.title !== dashboardTitle) {\n      form.setFieldsValue({\n        ...dashboardInfo,\n        title: dashboardTitle });\n\n    }\n  }, [dashboardInfo, dashboardTitle, form]);\n  return ___EmotionJSX(Modal, { show: show, onHide: onHide, title: t('Dashboard properties'), footer: ___EmotionJSX(React.Fragment, null,\n    ___EmotionJSX(Button, { htmlType: \"button\", buttonSize: \"small\", onClick: onHide, \"data-test\": \"properties-modal-cancel-button\", cta: true, __self: this, __source: { fileName: _jsxFileName, lineNumber: 315, columnNumber: 11 } },\n    t('Cancel')),\n\n    ___EmotionJSX(Button, { onClick: form.submit, buttonSize: \"small\", buttonStyle: \"primary\", className: \"m-r-5\", cta: true, __self: this, __source: { fileName: _jsxFileName, lineNumber: 318, columnNumber: 11 } },\n    saveLabel)),\n\n    responsive: true, __self: this, __source: { fileName: _jsxFileName, lineNumber: 314, columnNumber: 13 } },\n  ___EmotionJSX(Form, { form: form, onFinish: onFinish, \"data-test\": \"dashboard-edit-properties-form\", layout: \"vertical\", initialValues: dashboardInfo, __self: this, __source: { fileName: _jsxFileName, lineNumber: 322, columnNumber: 7 } },\n  ___EmotionJSX(Row, { __self: this, __source: { fileName: _jsxFileName, lineNumber: 323, columnNumber: 9 } },\n  ___EmotionJSX(Col, { xs: 24, md: 24, __self: this, __source: { fileName: _jsxFileName, lineNumber: 324, columnNumber: 11 } },\n  ___EmotionJSX(\"h3\", { __self: this, __source: { fileName: _jsxFileName, lineNumber: 325, columnNumber: 13 } }, t('Basic information')))),\n\n\n  ___EmotionJSX(Row, { gutter: 16, __self: this, __source: { fileName: _jsxFileName, lineNumber: 328, columnNumber: 9 } },\n  ___EmotionJSX(Col, { xs: 24, md: 12, __self: this, __source: { fileName: _jsxFileName, lineNumber: 329, columnNumber: 11 } },\n  ___EmotionJSX(FormItem, { label: t('Title'), name: \"title\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 330, columnNumber: 13 } },\n  ___EmotionJSX(Input, { \"data-test\": \"dashboard-title-input\", type: \"text\", disabled: isLoading, __self: this, __source: { fileName: _jsxFileName, lineNumber: 331, columnNumber: 15 } }))),\n\n\n  ___EmotionJSX(Col, { xs: 24, md: 12, __self: this, __source: { fileName: _jsxFileName, lineNumber: 334, columnNumber: 11 } },\n  ___EmotionJSX(StyledFormItem, { label: t('URL slug'), name: \"slug\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 335, columnNumber: 13 } },\n  ___EmotionJSX(Input, { type: \"text\", disabled: isLoading, __self: this, __source: { fileName: _jsxFileName, lineNumber: 336, columnNumber: 15 } })),\n\n  ___EmotionJSX(\"p\", { className: \"help-block\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 338, columnNumber: 13 } },\n  t('A readable URL for your dashboard')))),\n\n\n\n  isFeatureEnabled(FeatureFlag.DASHBOARD_RBAC) ?\n  getRowsWithRoles() :\n  getRowsWithoutRoles(),\n  ___EmotionJSX(Row, { __self: this, __source: { fileName: _jsxFileName, lineNumber: 346, columnNumber: 9 } },\n  ___EmotionJSX(Col, { xs: 24, md: 24, __self: this, __source: { fileName: _jsxFileName, lineNumber: 347, columnNumber: 11 } },\n  ___EmotionJSX(\"h3\", { __self: this, __source: { fileName: _jsxFileName, lineNumber: 348, columnNumber: 13 } }, t('Certification')))),\n\n\n  ___EmotionJSX(Row, { gutter: 16, __self: this, __source: { fileName: _jsxFileName, lineNumber: 351, columnNumber: 9 } },\n  ___EmotionJSX(Col, { xs: 24, md: 12, __self: this, __source: { fileName: _jsxFileName, lineNumber: 352, columnNumber: 11 } },\n  ___EmotionJSX(StyledFormItem, { label: t('Certified by'), name: \"certifiedBy\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 353, columnNumber: 13 } },\n  ___EmotionJSX(Input, { type: \"text\", disabled: isLoading, __self: this, __source: { fileName: _jsxFileName, lineNumber: 354, columnNumber: 15 } })),\n\n  ___EmotionJSX(\"p\", { className: \"help-block\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 356, columnNumber: 13 } },\n  t('Person or group that has certified this dashboard.'))),\n\n\n  ___EmotionJSX(Col, { xs: 24, md: 12, __self: this, __source: { fileName: _jsxFileName, lineNumber: 360, columnNumber: 11 } },\n  ___EmotionJSX(StyledFormItem, { label: t('Certification details'), name: \"certificationDetails\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 361, columnNumber: 13 } },\n  ___EmotionJSX(Input, { type: \"text\", disabled: isLoading, __self: this, __source: { fileName: _jsxFileName, lineNumber: 362, columnNumber: 15 } })),\n\n  ___EmotionJSX(\"p\", { className: \"help-block\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 364, columnNumber: 13 } },\n  t('Any additional detail to show in the certification tooltip.')))),\n\n\n\n  ___EmotionJSX(Row, { __self: this, __source: { fileName: _jsxFileName, lineNumber: 369, columnNumber: 9 } },\n  ___EmotionJSX(Col, { xs: 24, md: 24, __self: this, __source: { fileName: _jsxFileName, lineNumber: 370, columnNumber: 11 } },\n  ___EmotionJSX(\"h3\", { style: { marginTop: '1em' }, __self: this, __source: { fileName: _jsxFileName, lineNumber: 371, columnNumber: 13 } },\n  ___EmotionJSX(Button, { buttonStyle: \"link\", onClick: () => setIsAdvancedOpen(!isAdvancedOpen), __self: this, __source: { fileName: _jsxFileName, lineNumber: 372, columnNumber: 15 } },\n  ___EmotionJSX(\"i\", { className: `fa fa-angle-${isAdvancedOpen ? 'down' : 'right'}`, style: { minWidth: '1em' }, __self: this, __source: { fileName: _jsxFileName, lineNumber: 373, columnNumber: 17 } }),\n  t('Advanced'))),\n\n\n  isAdvancedOpen && ___EmotionJSX(React.Fragment, null,\n  ___EmotionJSX(StyledFormItem, { label: t('JSON metadata'), __self: this, __source: { fileName: _jsxFileName, lineNumber: 378, columnNumber: 17 } },\n  ___EmotionJSX(StyledJsonEditor, { showLoadingForImport: true, name: \"json_metadata\", value: jsonMetadata, onChange: setJsonMetadata, tabSize: 2, width: \"100%\", height: \"200px\", wrapEnabled: true, __self: this, __source: { fileName: _jsxFileName, lineNumber: 379, columnNumber: 19 } })),\n\n  ___EmotionJSX(\"p\", { className: \"help-block\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 381, columnNumber: 17 } },\n  t('This JSON object is generated dynamically when clicking the save or overwrite button in the dashboard view. It is exposed here for reference and for power users who may want to alter specific parameters.')))))));\n\n\n\n\n\n\n};__signature__(PropertiesModal, \"useForm{[form]}\\nuseState{[isLoading, setIsLoading](false)}\\nuseState{[isAdvancedOpen, setIsAdvancedOpen](false)}\\nuseState{[colorScheme, setColorScheme](currentColorScheme)}\\nuseState{[jsonMetadata, setJsonMetadata]('')}\\nuseState{[dashboardInfo, setDashboardInfo]}\\nuseState{[owners, setOwners]([])}\\nuseState{[roles, setRoles]([])}\\nuseCallback{loadAccessOptions}\\nuseCallback{handleDashboardData}\\nuseCallback{fetchDashboardDetails}\\nuseEffect{}\\nuseEffect{}\");const _default =\nwithToasts(PropertiesModal);export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(StyledFormItem, \"StyledFormItem\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/components/PropertiesModal/index.tsx\");reactHotLoader.register(StyledJsonEditor, \"StyledJsonEditor\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/components/PropertiesModal/index.tsx\");reactHotLoader.register(PropertiesModal, \"PropertiesModal\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/components/PropertiesModal/index.tsx\");reactHotLoader.register(_default, \"default\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/components/PropertiesModal/index.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/components/PropertiesModal/index.tsx"],"names":[],"mappings":"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","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { Form, Row, Col, Input } from 'src/common/components';\nimport { FormItem } from 'src/components/Form';\nimport jsonStringify from 'json-stringify-pretty-compact';\nimport Button from 'src/components/Button';\nimport { Select } from 'src/components';\nimport rison from 'rison';\nimport {\n  styled,\n  t,\n  SupersetClient,\n  getCategoricalSchemeRegistry,\n  ensureIsArray,\n} from '@superset-ui/core';\n\nimport Modal from 'src/components/Modal';\nimport { JsonEditor } from 'src/components/AsyncAceEditor';\n\nimport ColorSchemeControlWrapper from 'src/dashboard/components/ColorSchemeControlWrapper';\nimport { getClientErrorObject } from 'src/utils/getClientErrorObject';\nimport withToasts from 'src/components/MessageToasts/withToasts';\nimport { FeatureFlag, isFeatureEnabled } from 'src/featureFlags';\n\nconst StyledFormItem = styled(FormItem)`\n  margin-bottom: 0;\n`;\n\nconst StyledJsonEditor = styled(JsonEditor)`\n  border-radius: ${({ theme }) => theme.borderRadius}px;\n  border: 1px solid ${({ theme }) => theme.colors.secondary.light2};\n`;\n\ntype PropertiesModalProps = {\n  dashboardId: number;\n  dashboardTitle?: string;\n  dashboardInfo?: Record<string, any>;\n  show?: boolean;\n  onHide?: () => void;\n  colorScheme?: string;\n  setColorSchemeAndUnsavedChanges?: () => void;\n  onSubmit?: (params: Record<string, any>) => void;\n  addSuccessToast: (message: string) => void;\n  onlyApply?: boolean;\n};\n\ntype Roles = { id: number; name: string }[];\ntype Owners = {\n  id: number;\n  full_name?: string;\n  first_name?: string;\n  last_name?: string;\n}[];\ntype DashboardInfo = {\n  id: number;\n  title: string;\n  slug: string;\n  certifiedBy: string;\n  certificationDetails: string;\n};\n\nconst PropertiesModal = ({\n  addSuccessToast,\n  colorScheme: currentColorScheme,\n  dashboardId,\n  dashboardInfo: currentDashboardInfo,\n  dashboardTitle,\n  onHide = () => {},\n  onlyApply = false,\n  onSubmit = () => {},\n  show = false,\n}: PropertiesModalProps) => {\n  const [form] = Form.useForm();\n  const [isLoading, setIsLoading] = useState(false);\n  const [isAdvancedOpen, setIsAdvancedOpen] = useState(false);\n  const [colorScheme, setColorScheme] = useState(currentColorScheme);\n  const [jsonMetadata, setJsonMetadata] = useState('');\n  const [dashboardInfo, setDashboardInfo] = useState<DashboardInfo>();\n  const [owners, setOwners] = useState<Owners>([]);\n  const [roles, setRoles] = useState<Roles>([]);\n  const saveLabel = onlyApply ? t('Apply') : t('Save');\n\n  const handleErrorResponse = async (response: Response) => {\n    const { error, statusText, message } = await getClientErrorObject(response);\n    let errorText = error || statusText || t('An error has occurred');\n    if (typeof message === 'object' && 'json_metadata' in message) {\n      errorText = (message as { json_metadata: string }).json_metadata;\n    } else if (typeof message === 'string') {\n      errorText = message;\n\n      if (message === 'Forbidden') {\n        errorText = t('You do not have permission to edit this dashboard');\n      }\n    }\n\n    Modal.error({\n      title: 'Error',\n      content: errorText,\n      okButtonProps: { danger: true, className: 'btn-danger' },\n    });\n  };\n\n  const loadAccessOptions = useCallback(\n    (accessType = 'owners', input = '', page: number, pageSize: number) => {\n      const query = rison.encode({\n        filter: input,\n        page,\n        page_size: pageSize,\n      });\n      return SupersetClient.get({\n        endpoint: `/api/v1/dashboard/related/${accessType}?q=${query}`,\n      }).then(response => ({\n        data: response.json.result.map(\n          (item: { value: number; text: string }) => ({\n            value: item.value,\n            label: item.text,\n          }),\n        ),\n        totalCount: response.json.count,\n      }));\n    },\n    [],\n  );\n\n  const handleDashboardData = useCallback(\n    dashboardData => {\n      const {\n        id,\n        dashboard_title,\n        slug,\n        certified_by,\n        certification_details,\n        owners,\n        roles,\n        metadata,\n      } = dashboardData;\n      const dashboardInfo = {\n        id,\n        title: dashboard_title,\n        slug: slug || '',\n        certifiedBy: certified_by || '',\n        certificationDetails: certification_details || '',\n      };\n\n      form.setFieldsValue(dashboardInfo);\n      setDashboardInfo(dashboardInfo);\n      setOwners(owners);\n      setRoles(roles);\n      setColorScheme(metadata.color_scheme);\n\n      // temporary fix to remove positions from dashboards' metadata\n      if (metadata?.positions) {\n        delete metadata.positions;\n      }\n      setJsonMetadata(metadata ? jsonStringify(metadata) : '');\n    },\n    [form],\n  );\n\n  const fetchDashboardDetails = useCallback(() => {\n    setIsLoading(true);\n    // We fetch the dashboard details because not all code\n    // that renders this component have all the values we need.\n    // At some point when we have a more consistent frontend\n    // datamodel, the dashboard could probably just be passed as a prop.\n    SupersetClient.get({\n      endpoint: `/api/v1/dashboard/${dashboardId}`,\n    }).then(response => {\n      const dashboard = response.json.result;\n      const jsonMetadataObj = dashboard.json_metadata?.length\n        ? JSON.parse(dashboard.json_metadata)\n        : {};\n\n      handleDashboardData({\n        ...dashboard,\n        metadata: jsonMetadataObj,\n      });\n\n      setIsLoading(false);\n    }, handleErrorResponse);\n  }, [dashboardId, handleDashboardData]);\n\n  const getJsonMetadata = () => {\n    try {\n      const jsonMetadataObj = jsonMetadata?.length\n        ? JSON.parse(jsonMetadata)\n        : {};\n      return jsonMetadataObj;\n    } catch (_) {\n      return {};\n    }\n  };\n\n  const handleOnChangeOwners = (owners: { value: number; label: string }[]) => {\n    const parsedOwners: Owners = ensureIsArray(owners).map(o => ({\n      id: o.value,\n      full_name: o.label,\n    }));\n    setOwners(parsedOwners);\n  };\n\n  const handleOnChangeRoles = (roles: { value: number; label: string }[]) => {\n    const parsedRoles: Roles = ensureIsArray(roles).map(r => ({\n      id: r.value,\n      name: r.label,\n    }));\n    setRoles(parsedRoles);\n  };\n\n  const handleOwnersSelectValue = () => {\n    const parsedOwners = (owners || []).map(\n      (owner: {\n        id: number;\n        first_name?: string;\n        last_name?: string;\n        full_name?: string;\n      }) => ({\n        value: owner.id,\n        label: owner.full_name || `${owner.first_name} ${owner.last_name}`,\n      }),\n    );\n    return parsedOwners;\n  };\n\n  const handleRolesSelectValue = () => {\n    const parsedRoles = (roles || []).map(\n      (role: { id: number; name: string }) => ({\n        value: role.id,\n        label: `${role.name}`,\n      }),\n    );\n    return parsedRoles;\n  };\n\n  const onColorSchemeChange = (\n    colorScheme?: string,\n    { updateMetadata = true } = {},\n  ) => {\n    // check that color_scheme is valid\n    const colorChoices = getCategoricalSchemeRegistry().keys();\n    const jsonMetadataObj = getJsonMetadata();\n\n    // only fire if the color_scheme is present and invalid\n    if (colorScheme && !colorChoices.includes(colorScheme)) {\n      Modal.error({\n        title: 'Error',\n        content: t('A valid color scheme is required'),\n        okButtonProps: { danger: true, className: 'btn-danger' },\n      });\n      throw new Error('A valid color scheme is required');\n    }\n\n    // update metadata to match selection\n    if (updateMetadata) {\n      jsonMetadataObj.color_scheme = colorScheme;\n      jsonMetadataObj.label_colors = jsonMetadataObj.label_colors || {};\n\n      setJsonMetadata(jsonStringify(jsonMetadataObj));\n    }\n    setColorScheme(colorScheme);\n  };\n\n  const onFinish = () => {\n    const {\n      title,\n      slug,\n      certifiedBy,\n      certificationDetails,\n    } = form.getFieldsValue();\n    let currentColorScheme = colorScheme;\n    let colorNamespace = '';\n\n    // color scheme in json metadata has precedence over selection\n    if (jsonMetadata?.length) {\n      const metadata = JSON.parse(jsonMetadata);\n      currentColorScheme = metadata?.color_scheme || colorScheme;\n      colorNamespace = metadata?.color_namespace || '';\n    }\n\n    onColorSchemeChange(currentColorScheme, {\n      updateMetadata: false,\n    });\n\n    const moreOnSubmitProps: { roles?: Roles } = {};\n    const morePutProps: { roles?: number[] } = {};\n    if (isFeatureEnabled(FeatureFlag.DASHBOARD_RBAC)) {\n      moreOnSubmitProps.roles = roles;\n      morePutProps.roles = (roles || []).map(r => r.id);\n    }\n    const onSubmitProps = {\n      id: dashboardId,\n      title,\n      slug,\n      jsonMetadata,\n      owners,\n      colorScheme: currentColorScheme,\n      colorNamespace,\n      certifiedBy,\n      certificationDetails,\n      ...moreOnSubmitProps,\n    };\n    if (onlyApply) {\n      onSubmit(onSubmitProps);\n      onHide();\n    } else {\n      SupersetClient.put({\n        endpoint: `/api/v1/dashboard/${dashboardId}`,\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          dashboard_title: title,\n          slug: slug || null,\n          json_metadata: jsonMetadata || null,\n          owners: (owners || []).map(o => o.id),\n          certified_by: certifiedBy || null,\n          certification_details:\n            certifiedBy && certificationDetails ? certificationDetails : null,\n          ...morePutProps,\n        }),\n      }).then(() => {\n        addSuccessToast(t('The dashboard has been saved'));\n        onSubmit(onSubmitProps);\n        onHide();\n      }, handleErrorResponse);\n    }\n  };\n\n  const getRowsWithoutRoles = () => {\n    const jsonMetadataObj = getJsonMetadata();\n    const hasCustomLabelColors = !!Object.keys(\n      jsonMetadataObj?.label_colors || {},\n    ).length;\n\n    return (\n      <Row gutter={16}>\n        <Col xs={24} md={12}>\n          <h3 style={{ marginTop: '1em' }}>{t('Access')}</h3>\n          <StyledFormItem label={t('Owners')}>\n            <Select\n              allowClear\n              ariaLabel={t('Owners')}\n              disabled={isLoading}\n              mode=\"multiple\"\n              onChange={handleOnChangeOwners}\n              options={(input, page, pageSize) =>\n                loadAccessOptions('owners', input, page, pageSize)\n              }\n              value={handleOwnersSelectValue()}\n            />\n          </StyledFormItem>\n          <p className=\"help-block\">\n            {t(\n              'Owners is a list of users who can alter the dashboard. Searchable by name or username.',\n            )}\n          </p>\n        </Col>\n        <Col xs={24} md={12}>\n          <h3 style={{ marginTop: '1em' }}>{t('Colors')}</h3>\n          <ColorSchemeControlWrapper\n            hasCustomLabelColors={hasCustomLabelColors}\n            onChange={onColorSchemeChange}\n            colorScheme={colorScheme}\n            labelMargin={4}\n          />\n        </Col>\n      </Row>\n    );\n  };\n\n  const getRowsWithRoles = () => {\n    const jsonMetadataObj = getJsonMetadata();\n    const hasCustomLabelColors = !!Object.keys(\n      jsonMetadataObj?.label_colors || {},\n    ).length;\n\n    return (\n      <>\n        <Row>\n          <Col xs={24} md={24}>\n            <h3 style={{ marginTop: '1em' }}>{t('Access')}</h3>\n          </Col>\n        </Row>\n        <Row gutter={16}>\n          <Col xs={24} md={12}>\n            <StyledFormItem label={t('Owners')}>\n              <Select\n                allowClear\n                ariaLabel={t('Owners')}\n                disabled={isLoading}\n                mode=\"multiple\"\n                onChange={handleOnChangeOwners}\n                options={(input, page, pageSize) =>\n                  loadAccessOptions('owners', input, page, pageSize)\n                }\n                value={handleOwnersSelectValue()}\n              />\n            </StyledFormItem>\n            <p className=\"help-block\">\n              {t(\n                'Owners is a list of users who can alter the dashboard. Searchable by name or username.',\n              )}\n            </p>\n          </Col>\n          <Col xs={24} md={12}>\n            <StyledFormItem label={t('Roles')}>\n              <Select\n                allowClear\n                ariaLabel={t('Roles')}\n                disabled={isLoading}\n                mode=\"multiple\"\n                onChange={handleOnChangeRoles}\n                options={(input, page, pageSize) =>\n                  loadAccessOptions('roles', input, page, pageSize)\n                }\n                value={handleRolesSelectValue()}\n              />\n            </StyledFormItem>\n            <p className=\"help-block\">\n              {t(\n                'Roles is a list which defines access to the dashboard. Granting a role access to a dashboard will bypass dataset level checks. If no roles are defined, then the dashboard is available to all roles.',\n              )}\n            </p>\n          </Col>\n        </Row>\n        <Row>\n          <Col xs={24} md={12}>\n            <ColorSchemeControlWrapper\n              hasCustomLabelColors={hasCustomLabelColors}\n              onChange={onColorSchemeChange}\n              colorScheme={colorScheme}\n              labelMargin={4}\n            />\n          </Col>\n        </Row>\n      </>\n    );\n  };\n\n  useEffect(() => {\n    if (show) {\n      if (!currentDashboardInfo) {\n        fetchDashboardDetails();\n      } else {\n        handleDashboardData(currentDashboardInfo);\n      }\n    }\n\n    JsonEditor.preload();\n  }, [currentDashboardInfo, fetchDashboardDetails, handleDashboardData, show]);\n\n  useEffect(() => {\n    // the title can be changed inline in the dashboard, this catches it\n    if (\n      dashboardTitle &&\n      dashboardInfo &&\n      dashboardInfo.title !== dashboardTitle\n    ) {\n      form.setFieldsValue({\n        ...dashboardInfo,\n        title: dashboardTitle,\n      });\n    }\n  }, [dashboardInfo, dashboardTitle, form]);\n\n  return (\n    <Modal\n      show={show}\n      onHide={onHide}\n      title={t('Dashboard properties')}\n      footer={\n        <>\n          <Button\n            htmlType=\"button\"\n            buttonSize=\"small\"\n            onClick={onHide}\n            data-test=\"properties-modal-cancel-button\"\n            cta\n          >\n            {t('Cancel')}\n          </Button>\n          <Button\n            onClick={form.submit}\n            buttonSize=\"small\"\n            buttonStyle=\"primary\"\n            className=\"m-r-5\"\n            cta\n          >\n            {saveLabel}\n          </Button>\n        </>\n      }\n      responsive\n    >\n      <Form\n        form={form}\n        onFinish={onFinish}\n        data-test=\"dashboard-edit-properties-form\"\n        layout=\"vertical\"\n        initialValues={dashboardInfo}\n      >\n        <Row>\n          <Col xs={24} md={24}>\n            <h3>{t('Basic information')}</h3>\n          </Col>\n        </Row>\n        <Row gutter={16}>\n          <Col xs={24} md={12}>\n            <FormItem label={t('Title')} name=\"title\">\n              <Input\n                data-test=\"dashboard-title-input\"\n                type=\"text\"\n                disabled={isLoading}\n              />\n            </FormItem>\n          </Col>\n          <Col xs={24} md={12}>\n            <StyledFormItem label={t('URL slug')} name=\"slug\">\n              <Input type=\"text\" disabled={isLoading} />\n            </StyledFormItem>\n            <p className=\"help-block\">\n              {t('A readable URL for your dashboard')}\n            </p>\n          </Col>\n        </Row>\n        {isFeatureEnabled(FeatureFlag.DASHBOARD_RBAC)\n          ? getRowsWithRoles()\n          : getRowsWithoutRoles()}\n        <Row>\n          <Col xs={24} md={24}>\n            <h3>{t('Certification')}</h3>\n          </Col>\n        </Row>\n        <Row gutter={16}>\n          <Col xs={24} md={12}>\n            <StyledFormItem label={t('Certified by')} name=\"certifiedBy\">\n              <Input type=\"text\" disabled={isLoading} />\n            </StyledFormItem>\n            <p className=\"help-block\">\n              {t('Person or group that has certified this dashboard.')}\n            </p>\n          </Col>\n          <Col xs={24} md={12}>\n            <StyledFormItem\n              label={t('Certification details')}\n              name=\"certificationDetails\"\n            >\n              <Input type=\"text\" disabled={isLoading} />\n            </StyledFormItem>\n            <p className=\"help-block\">\n              {t('Any additional detail to show in the certification tooltip.')}\n            </p>\n          </Col>\n        </Row>\n        <Row>\n          <Col xs={24} md={24}>\n            <h3 style={{ marginTop: '1em' }}>\n              <Button\n                buttonStyle=\"link\"\n                onClick={() => setIsAdvancedOpen(!isAdvancedOpen)}\n              >\n                <i\n                  className={`fa fa-angle-${isAdvancedOpen ? 'down' : 'right'}`}\n                  style={{ minWidth: '1em' }}\n                />\n                {t('Advanced')}\n              </Button>\n            </h3>\n            {isAdvancedOpen && (\n              <>\n                <StyledFormItem label={t('JSON metadata')}>\n                  <StyledJsonEditor\n                    showLoadingForImport\n                    name=\"json_metadata\"\n                    value={jsonMetadata}\n                    onChange={setJsonMetadata}\n                    tabSize={2}\n                    width=\"100%\"\n                    height=\"200px\"\n                    wrapEnabled\n                  />\n                </StyledFormItem>\n                <p className=\"help-block\">\n                  {t(\n                    'This JSON object is generated dynamically when clicking the save or overwrite button in the dashboard view. It is exposed here for reference and for power users who may want to alter specific parameters.',\n                  )}\n                </p>\n              </>\n            )}\n          </Col>\n        </Row>\n      </Form>\n    </Modal>\n  );\n};\n\nexport default withToasts(PropertiesModal);\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}