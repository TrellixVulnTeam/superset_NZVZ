{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;};(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nfunction extractTypes(metadata) {\n  return Object.keys(metadata).reduce((prev, key) => {\n    const result = prev;\n    result[key] = key;\n    return result;\n  }, {});\n}\n\nexport const ANNOTATION_TYPES_METADATA = {\n  FORMULA: {\n    value: 'FORMULA',\n    label: 'Formula' },\n\n  EVENT: {\n    value: 'EVENT',\n    label: 'Event',\n    supportNativeSource: true },\n\n  INTERVAL: {\n    value: 'INTERVAL',\n    label: 'Interval',\n    supportNativeSource: true },\n\n  TIME_SERIES: {\n    value: 'TIME_SERIES',\n    label: 'Time series' } };\n\n\n\nexport const ANNOTATION_TYPES = extractTypes(ANNOTATION_TYPES_METADATA);\n\nexport const DEFAULT_ANNOTATION_TYPE = ANNOTATION_TYPES.FORMULA;\n\nexport const ANNOTATION_SOURCE_TYPES_METADATA = {\n  NATIVE: {\n    value: 'NATIVE',\n    label: 'Superset annotation' } };\n\n\n\nexport const ANNOTATION_SOURCE_TYPES = extractTypes(\nANNOTATION_SOURCE_TYPES_METADATA);\n\n\nexport function requiresQuery(annotationSourceType) {\n  return !!annotationSourceType;\n}\n\nconst NATIVE_COLUMN_NAMES = {\n  timeColumn: 'start_dttm',\n  intervalEndColumn: 'end_dttm',\n  titleColumn: 'short_descr',\n  descriptionColumns: ['long_descr'] };\n\n\nexport function applyNativeColumns(annotation) {\n  if (annotation.sourceType === ANNOTATION_SOURCE_TYPES.NATIVE) {\n    return { ...annotation, ...NATIVE_COLUMN_NAMES };\n  }\n  return annotation;\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(extractTypes, \"extractTypes\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/modules/AnnotationTypes.js\");reactHotLoader.register(ANNOTATION_TYPES_METADATA, \"ANNOTATION_TYPES_METADATA\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/modules/AnnotationTypes.js\");reactHotLoader.register(ANNOTATION_TYPES, \"ANNOTATION_TYPES\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/modules/AnnotationTypes.js\");reactHotLoader.register(DEFAULT_ANNOTATION_TYPE, \"DEFAULT_ANNOTATION_TYPE\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/modules/AnnotationTypes.js\");reactHotLoader.register(ANNOTATION_SOURCE_TYPES_METADATA, \"ANNOTATION_SOURCE_TYPES_METADATA\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/modules/AnnotationTypes.js\");reactHotLoader.register(ANNOTATION_SOURCE_TYPES, \"ANNOTATION_SOURCE_TYPES\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/modules/AnnotationTypes.js\");reactHotLoader.register(requiresQuery, \"requiresQuery\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/modules/AnnotationTypes.js\");reactHotLoader.register(NATIVE_COLUMN_NAMES, \"NATIVE_COLUMN_NAMES\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/modules/AnnotationTypes.js\");reactHotLoader.register(applyNativeColumns, \"applyNativeColumns\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/modules/AnnotationTypes.js\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(__signature__, \"__signature__\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/modules/AnnotationTypes.js\");reactHotLoader.register(extractTypes, \"extractTypes\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/modules/AnnotationTypes.js\");reactHotLoader.register(ANNOTATION_TYPES_METADATA, \"ANNOTATION_TYPES_METADATA\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/modules/AnnotationTypes.js\");reactHotLoader.register(ANNOTATION_TYPES, \"ANNOTATION_TYPES\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/modules/AnnotationTypes.js\");reactHotLoader.register(DEFAULT_ANNOTATION_TYPE, \"DEFAULT_ANNOTATION_TYPE\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/modules/AnnotationTypes.js\");reactHotLoader.register(ANNOTATION_SOURCE_TYPES_METADATA, \"ANNOTATION_SOURCE_TYPES_METADATA\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/modules/AnnotationTypes.js\");reactHotLoader.register(ANNOTATION_SOURCE_TYPES, \"ANNOTATION_SOURCE_TYPES\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/modules/AnnotationTypes.js\");reactHotLoader.register(requiresQuery, \"requiresQuery\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/modules/AnnotationTypes.js\");reactHotLoader.register(NATIVE_COLUMN_NAMES, \"NATIVE_COLUMN_NAMES\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/modules/AnnotationTypes.js\");reactHotLoader.register(applyNativeColumns, \"applyNativeColumns\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/modules/AnnotationTypes.js\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/home/ubuntu/my_plugin/superset/superset-frontend/src/modules/AnnotationTypes.js"],"names":["extractTypes","result","ANNOTATION_TYPES_METADATA","FORMULA","value","label","EVENT","supportNativeSource","INTERVAL","TIME_SERIES","ANNOTATION_TYPES","DEFAULT_ANNOTATION_TYPE","ANNOTATION_SOURCE_TYPES_METADATA","NATIVE","ANNOTATION_SOURCE_TYPES","requiresQuery","NATIVE_COLUMN_NAMES","timeColumn","intervalEndColumn","titleColumn","descriptionColumns","applyNativeColumns","annotation"],"mappings":"+kBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAA,YAAA,CAAA,QAAA,EAAgC;AAC9B,SAAO,MAAM,CAAN,IAAA,CAAA,QAAA,EAAA,MAAA,CAA6B,CAAA,IAAA,EAAA,GAAA,KAAe;AACjD,UAAMC,MAAM,GAAZ,IAAA;AACAA,IAAAA,MAAM,CAANA,GAAM,CAANA,GAAAA,GAAAA;AACA,WAAA,MAAA;AAHK,GAAA,EAAP,EAAO,CAAP;AAKD;;AAED,OAAO,MAAMC,yBAAyB,GAAG;AACvCC,EAAAA,OAAO,EAAE;AACPC,IAAAA,KAAK,EADE,SAAA;AAEPC,IAAAA,KAAK,EAHgC,SAC9B,EAD8B;;AAKvCC,EAAAA,KAAK,EAAE;AACLF,IAAAA,KAAK,EADA,OAAA;AAELC,IAAAA,KAAK,EAFA,OAAA;AAGLE,IAAAA,mBAAmB,EARkB,IAKhC,EALgC;;AAUvCC,EAAAA,QAAQ,EAAE;AACRJ,IAAAA,KAAK,EADG,UAAA;AAERC,IAAAA,KAAK,EAFG,UAAA;AAGRE,IAAAA,mBAAmB,EAbkB,IAU7B,EAV6B;;AAevCE,EAAAA,WAAW,EAAE;AACXL,IAAAA,KAAK,EADM,aAAA;AAEXC,IAAAA,KAAK,EAjBF,aAeQ,EAf0B,EAAlC;;;;AAqBP,OAAO,MAAMK,gBAAgB,GAAGV,YAAY,CAArC,yBAAqC,CAArC;;AAEP,OAAO,MAAMW,uBAAuB,GAAGD,gBAAgB,CAAhD,OAAA;;AAEP,OAAO,MAAME,gCAAgC,GAAG;AAC9CC,EAAAA,MAAM,EAAE;AACNT,IAAAA,KAAK,EADC,QAAA;AAENC,IAAAA,KAAK,EAHF,qBACG,EADsC,EAAzC;;;;AAOP,OAAO,MAAMS,uBAAuB,GAAGd,YAAY;AAA5C,gCAA4C,CAA5C;;;AAIP,OAAO,SAAA,aAAA,CAAA,oBAAA,EAA6C;AAClD,SAAO,CAAC,CAAR,oBAAA;AACD;;AAED,MAAMgB,mBAAmB,GAAG;AAC1BC,EAAAA,UAAU,EADgB,YAAA;AAE1BC,EAAAA,iBAAiB,EAFS,UAAA;AAG1BC,EAAAA,WAAW,EAHe,aAAA;AAI1BC,EAAAA,kBAAkB,EAAE,CAJtB,YAIsB,CAJM,EAA5B;;;AAOA,OAAO,SAAA,kBAAA,CAAA,UAAA,EAAwC;AAC7C,MAAIE,UAAU,CAAVA,UAAAA,KAA0BR,uBAAuB,CAArD,MAAA,EAA8D;AAC5D,WAAO,EAAE,GAAF,UAAA,EAAiB,GAAxB,mBAAO,EAAP;AACD;AACD,SAAA,UAAA;kLA3DOd,Y,8HAQIE,yB,2IAqBAQ,gB,kIAEAC,uB,yIAEAC,gC,kJAOAE,uB,yIAIGC,a,+HAIVC,mB,qIAOUK,kB,klBAvDhB,Y,8HAQanB,yB,2IAqBAQ,gB,kIAEAC,uB,yIAEAC,gC,kJAOAE,uB,yIAIN,a,+HAIDE,mB,qIAOC,kB","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nfunction extractTypes(metadata) {\n  return Object.keys(metadata).reduce((prev, key) => {\n    const result = prev;\n    result[key] = key;\n    return result;\n  }, {});\n}\n\nexport const ANNOTATION_TYPES_METADATA = {\n  FORMULA: {\n    value: 'FORMULA',\n    label: 'Formula',\n  },\n  EVENT: {\n    value: 'EVENT',\n    label: 'Event',\n    supportNativeSource: true,\n  },\n  INTERVAL: {\n    value: 'INTERVAL',\n    label: 'Interval',\n    supportNativeSource: true,\n  },\n  TIME_SERIES: {\n    value: 'TIME_SERIES',\n    label: 'Time series',\n  },\n};\n\nexport const ANNOTATION_TYPES = extractTypes(ANNOTATION_TYPES_METADATA);\n\nexport const DEFAULT_ANNOTATION_TYPE = ANNOTATION_TYPES.FORMULA;\n\nexport const ANNOTATION_SOURCE_TYPES_METADATA = {\n  NATIVE: {\n    value: 'NATIVE',\n    label: 'Superset annotation',\n  },\n};\n\nexport const ANNOTATION_SOURCE_TYPES = extractTypes(\n  ANNOTATION_SOURCE_TYPES_METADATA,\n);\n\nexport function requiresQuery(annotationSourceType) {\n  return !!annotationSourceType;\n}\n\nconst NATIVE_COLUMN_NAMES = {\n  timeColumn: 'start_dttm',\n  intervalEndColumn: 'end_dttm',\n  titleColumn: 'short_descr',\n  descriptionColumns: ['long_descr'],\n};\n\nexport function applyNativeColumns(annotation) {\n  if (annotation.sourceType === ANNOTATION_SOURCE_TYPES.NATIVE) {\n    return { ...annotation, ...NATIVE_COLUMN_NAMES };\n  }\n  return annotation;\n}\n"]},"metadata":{},"sourceType":"module"}