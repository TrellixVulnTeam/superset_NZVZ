{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;};export default function createTimeRangeFormatter(formatFunc, metadata) {\n  const format = (value) => formatFunc(value);\n\n  if (typeof metadata !== 'undefined') {\n    const {\n      id,\n      label,\n      description,\n      useLocalTime } =\n    metadata;\n    format.id = id;\n    format.label = label;\n    format.description = description;\n    format.useLocalTime = useLocalTime;\n  }\n\n  return format;\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(createTimeRangeFormatter, \"createTimeRangeFormatter\", \"/home/ubuntu/my_plugin/superset/superset-frontend/node_modules/@encodable/format/esm/timeRange/createTimeRangeFormatter.js\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/home/ubuntu/my_plugin/superset/superset-frontend/node_modules/@encodable/format/esm/timeRange/createTimeRangeFormatter.js"],"names":["createTimeRangeFormatter","formatFunc","metadata","format","value","id","label","description","useLocalTime"],"mappings":"uSAAA,eAAe,SAASA,wBAAT,CAAkCC,UAAlC,EAA8CC,QAA9C,EAAwD;AACrE,QAAMC,MAAM,GAAG,CAAAC,KAAK,KAAIH,UAAU,CAACG,KAAD,CAAlC;;AAEA,MAAI,OAAOF,QAAP,KAAoB,WAAxB,EAAqC;AACnC,UAAM;AACJG,MAAAA,EADI;AAEJC,MAAAA,KAFI;AAGJC,MAAAA,WAHI;AAIJC,MAAAA,YAJI;AAKFN,IAAAA,QALJ;AAMAC,IAAAA,MAAM,CAACE,EAAP,GAAYA,EAAZ;AACAF,IAAAA,MAAM,CAACG,KAAP,GAAeA,KAAf;AACAH,IAAAA,MAAM,CAACI,WAAP,GAAqBA,WAArB;AACAJ,IAAAA,MAAM,CAACK,YAAP,GAAsBA,YAAtB;AACD;;AAED,SAAOL,MAAP;AACD,C,iLAjBuBH,wB","sourcesContent":["export default function createTimeRangeFormatter(formatFunc, metadata) {\n  const format = value => formatFunc(value);\n\n  if (typeof metadata !== 'undefined') {\n    const {\n      id,\n      label,\n      description,\n      useLocalTime\n    } = metadata;\n    format.id = id;\n    format.label = label;\n    format.description = description;\n    format.useLocalTime = useLocalTime;\n  }\n\n  return format;\n}"]},"metadata":{},"sourceType":"module"}