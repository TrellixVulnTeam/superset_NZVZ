{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/my_plugin/superset/superset-frontend/src/explore/components/controls/DndColumnSelectControl/ColumnSelectPopoverTrigger.tsx\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useCallback, useMemo, useState } from 'react';\nimport Popover from 'src/components/Popover';\nimport { ExplorePopoverContent } from 'src/explore/components/ExploreContentPopover';\nimport ColumnSelectPopover from './ColumnSelectPopover';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst ColumnSelectPopoverTrigger = ({ columns, editedColumn, onColumnEdit, isControlledComponent, children, ...props }) => {\n  const [popoverVisible, setPopoverVisible] = useState(false);\n  const togglePopover = useCallback((visible) => {\n    setPopoverVisible(visible);\n  }, []);\n  const closePopover = useCallback(() => {\n    setPopoverVisible(false);\n  }, []);\n  const { visible, handleTogglePopover, handleClosePopover } = isControlledComponent ?\n  {\n    visible: props.visible,\n    handleTogglePopover: props.togglePopover,\n    handleClosePopover: props.closePopover } :\n\n  {\n    visible: popoverVisible,\n    handleTogglePopover: togglePopover,\n    handleClosePopover: closePopover };\n\n  const overlayContent = useMemo(() => ___EmotionJSX(ExplorePopoverContent, { __self: this, __source: { fileName: _jsxFileName, lineNumber: 42, columnNumber: 43 } },\n  ___EmotionJSX(ColumnSelectPopover, { editedColumn: editedColumn, columns: columns, onClose: handleClosePopover, onChange: onColumnEdit, __self: this, __source: { fileName: _jsxFileName, lineNumber: 43, columnNumber: 9 } })),\n  [columns, editedColumn, handleClosePopover, onColumnEdit]);\n  return ___EmotionJSX(Popover, { placement: \"right\", trigger: \"click\", content: overlayContent, defaultVisible: visible, visible: visible, onVisibleChange: handleTogglePopover, destroyTooltipOnHide: true, __self: this, __source: { fileName: _jsxFileName, lineNumber: 45, columnNumber: 13 } },\n  children);\n\n};__signature__(ColumnSelectPopoverTrigger, \"useState{[popoverVisible, setPopoverVisible](false)}\\nuseCallback{togglePopover}\\nuseCallback{closePopover}\\nuseMemo{overlayContent}\");const _default =\nColumnSelectPopoverTrigger;export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(ColumnSelectPopoverTrigger, \"ColumnSelectPopoverTrigger\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/explore/components/controls/DndColumnSelectControl/ColumnSelectPopoverTrigger.tsx\");reactHotLoader.register(_default, \"default\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/explore/components/controls/DndColumnSelectControl/ColumnSelectPopoverTrigger.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/home/ubuntu/my_plugin/superset/superset-frontend/src/explore/components/controls/DndColumnSelectControl/ColumnSelectPopoverTrigger.tsx"],"names":[],"mappings":"qcAAA;;;;;;;;;;;;;;;;;AAiBG;AACH,OAAO,KAAP,IAAgB,WAAhB,EAA6B,OAA7B,EAAsC,QAAtC,QAAsD,OAAtD;AAEA,OAAO,OAAP,MAAoB,wBAApB;AACA,SAAS,qBAAT,QAAsC,8CAAtC;AACA,OAAO,mBAAP,MAAgC,uBAAhC,C;AAaA,MAAM,0BAA0B,GAAG,CAAC,EAClC,OADkC,EAElC,YAFkC,EAGlC,YAHkC,EAIlC,qBAJkC,EAKlC,QALkC,EAMlC,GAAG,KAN+B,EAAD,KAOG;AACpC,QAAM,CAAC,cAAD,EAAiB,iBAAjB,IAAsC,QAAQ,CAAC,KAAD,CAApD;AAEA,QAAM,aAAa,GAAG,WAAW,CAAC,CAAC,OAAD,KAAqB;AACrD,IAAA,iBAAiB,CAAC,OAAD,CAAjB;AACD,GAFgC,EAE9B,EAF8B,CAAjC;AAIA,QAAM,YAAY,GAAG,WAAW,CAAC,MAAK;AACpC,IAAA,iBAAiB,CAAC,KAAD,CAAjB;AACD,GAF+B,EAE7B,EAF6B,CAAhC;AAIA,QAAM,EACJ,OADI,EAEJ,mBAFI,EAGJ,kBAHI,KAIF,qBAAqB;AACrB;AACE,IAAA,OAAO,EAAE,KAAK,CAAC,OADjB;AAEE,IAAA,mBAAmB,EAAE,KAAK,CAAC,aAF7B;AAGE,IAAA,kBAAkB,EAAE,KAAK,CAAC,YAH5B,EADqB;;AAMrB;AACE,IAAA,OAAO,EAAE,cADX;AAEE,IAAA,mBAAmB,EAAE,aAFvB;AAGE,IAAA,kBAAkB,EAAE,YAHtB,EAVJ;;AAgBA,QAAM,cAAc,GAAG,OAAO,CAC5B,MACE,cAAC,qBAAD;AACE,gBAAC,mBAAD,IACE,YAAY,EAAE,YADhB,EAEE,OAAO,EAAE,OAFX,EAGE,OAAO,EAAE,kBAHX,EAIE,QAAQ,EAAE,YAJZ,wFADF,CAF0B;AAW5B,GAAC,OAAD,EAAU,YAAV,EAAwB,kBAAxB,EAA4C,YAA5C,CAX4B,CAA9B;AAcA,SACE,cAAC,OAAD,IACE,SAAS,EAAC,OADZ,EAEE,OAAO,EAAC,OAFV,EAGE,OAAO,EAAE,cAHX,EAIE,cAAc,EAAE,OAJlB,EAKE,OAAO,EAAE,OALX,EAME,eAAe,EAAE,mBANnB,EAOE,oBAAoB,MAPtB;AASG,EAAA,QATH,CADF;;AAaD,CA7DD,C,cAAM,0B;AA+DS,0B,CAAf,wB,iLA/DM,0B","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useCallback, useMemo, useState } from 'react';\nimport { ColumnMeta } from '@superset-ui/chart-controls';\nimport Popover from 'src/components/Popover';\nimport { ExplorePopoverContent } from 'src/explore/components/ExploreContentPopover';\nimport ColumnSelectPopover from './ColumnSelectPopover';\n\ninterface ColumnSelectPopoverTriggerProps {\n  columns: ColumnMeta[];\n  editedColumn?: ColumnMeta;\n  onColumnEdit: (editedColumn: ColumnMeta) => void;\n  isControlledComponent?: boolean;\n  visible?: boolean;\n  togglePopover?: (visible: boolean) => void;\n  closePopover?: () => void;\n  children: React.ReactNode;\n}\n\nconst ColumnSelectPopoverTrigger = ({\n  columns,\n  editedColumn,\n  onColumnEdit,\n  isControlledComponent,\n  children,\n  ...props\n}: ColumnSelectPopoverTriggerProps) => {\n  const [popoverVisible, setPopoverVisible] = useState(false);\n\n  const togglePopover = useCallback((visible: boolean) => {\n    setPopoverVisible(visible);\n  }, []);\n\n  const closePopover = useCallback(() => {\n    setPopoverVisible(false);\n  }, []);\n\n  const {\n    visible,\n    handleTogglePopover,\n    handleClosePopover,\n  } = isControlledComponent\n    ? {\n        visible: props.visible,\n        handleTogglePopover: props.togglePopover!,\n        handleClosePopover: props.closePopover!,\n      }\n    : {\n        visible: popoverVisible,\n        handleTogglePopover: togglePopover,\n        handleClosePopover: closePopover,\n      };\n\n  const overlayContent = useMemo(\n    () => (\n      <ExplorePopoverContent>\n        <ColumnSelectPopover\n          editedColumn={editedColumn}\n          columns={columns}\n          onClose={handleClosePopover}\n          onChange={onColumnEdit}\n        />\n      </ExplorePopoverContent>\n    ),\n    [columns, editedColumn, handleClosePopover, onColumnEdit],\n  );\n\n  return (\n    <Popover\n      placement=\"right\"\n      trigger=\"click\"\n      content={overlayContent}\n      defaultVisible={visible}\n      visible={visible}\n      onVisibleChange={handleTogglePopover}\n      destroyTooltipOnHide\n    >\n      {children}\n    </Popover>\n  );\n};\n\nexport default ColumnSelectPopoverTrigger;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}