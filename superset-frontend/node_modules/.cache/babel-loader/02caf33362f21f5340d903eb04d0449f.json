{"ast":null,"code":"import _extends from \"@babel/runtime-corejs3/helpers/extends\";import _isEmpty from \"lodash/isEmpty\";var _jsxFileName = \"/home/ubuntu/my_plugin/superset/superset-frontend/src/explore/components/controls/DndColumnSelectControl/DndColumnSelect.tsx\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();import \"core-js/modules/es.string.replace.js\";var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useCallback, useMemo, useState } from 'react';\nimport { FeatureFlag, isFeatureEnabled, tn } from '@superset-ui/core';\n\nimport DndSelectLabel from 'src/explore/components/controls/DndColumnSelectControl/DndSelectLabel';\nimport OptionWrapper from 'src/explore/components/controls/DndColumnSelectControl/OptionWrapper';\nimport { OptionSelector } from 'src/explore/components/controls/DndColumnSelectControl/utils';\nimport { DndItemType } from 'src/explore/components/DndItemType';\nimport { useComponentDidUpdate } from 'src/common/hooks/useComponentDidUpdate';\nimport ColumnSelectPopoverTrigger from './ColumnSelectPopoverTrigger';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nexport function DndColumnSelect(props) {\n  const { value, options, multi = true, onChange, canDelete = true, ghostButtonText, name, label } = props;\n  const [newColumnPopoverVisible, setNewColumnPopoverVisible] = useState(false);\n  const optionSelector = useMemo(() => new OptionSelector(options, multi, value), [multi, options, value]);\n  // synchronize values in case of dataset changes\n  const handleOptionsChange = useCallback(() => {\n    const optionSelectorValues = optionSelector.getValues();\n    if (typeof value !== typeof optionSelectorValues) {\n      onChange(optionSelectorValues);\n    }\n    if (typeof value === 'string' &&\n    typeof optionSelectorValues === 'string' &&\n    value !== optionSelectorValues) {\n      onChange(optionSelectorValues);\n    }\n    if (Array.isArray(optionSelectorValues) &&\n    Array.isArray(value) && (\n    optionSelectorValues.length !== value.length ||\n    optionSelectorValues.every((val, index) => val === value[index]))) {\n      onChange(optionSelectorValues);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [JSON.stringify(value), JSON.stringify(optionSelector.getValues())]);\n  // useComponentDidUpdate to avoid running this for the first render, to avoid\n  // calling onChange when the initial value is not valid for the dataset\n  useComponentDidUpdate(handleOptionsChange);\n  const onDrop = useCallback((item) => {\n    const column = item.value;\n    if (!optionSelector.multi && !_isEmpty(optionSelector.values)) {\n      optionSelector.replace(0, column.column_name);\n    } else\n    {\n      optionSelector.add(column.column_name);\n    }\n    onChange(optionSelector.getValues());\n  }, [onChange, optionSelector]);\n  const canDrop = useCallback((item) => {\n    const columnName = item.value.column_name;\n    return columnName in optionSelector.options && !optionSelector.has(columnName);\n  }, [optionSelector]);\n  const onClickClose = useCallback((index) => {\n    optionSelector.del(index);\n    onChange(optionSelector.getValues());\n  }, [onChange, optionSelector]);\n  const onShiftOptions = useCallback((dragIndex, hoverIndex) => {\n    optionSelector.swap(dragIndex, hoverIndex);\n    onChange(optionSelector.getValues());\n  }, [onChange, optionSelector]);\n  const popoverOptions = useMemo(() => Object.values(options).filter((col) => !optionSelector.values.\n  map((val) => val.column_name).\n  includes(col.column_name)), [optionSelector.values, options]);\n  const valuesRenderer = useCallback(() => optionSelector.values.map((column, idx) => isFeatureEnabled(FeatureFlag.ENABLE_DND_WITH_CLICK_UX) ? ___EmotionJSX(ColumnSelectPopoverTrigger, { columns: popoverOptions, onColumnEdit: (newColumn) => {\n      optionSelector.replace(idx, newColumn.column_name);\n      onChange(optionSelector.getValues());\n    }, editedColumn: column, __self: this, __source: { fileName: _jsxFileName, lineNumber: 79, columnNumber: 147 } },\n  ___EmotionJSX(OptionWrapper, { key: idx, index: idx, clickClose: onClickClose, onShiftOptions: onShiftOptions, type: `${DndItemType.ColumnOption}_${name}_${label}`, canDelete: canDelete, column: column, withCaret: true, __self: this, __source: { fileName: _jsxFileName, lineNumber: 83, columnNumber: 13 } })) :\n  ___EmotionJSX(OptionWrapper, { key: idx, index: idx, clickClose: onClickClose, onShiftOptions: onShiftOptions, type: `${DndItemType.ColumnOption}_${name}_${label}`, canDelete: canDelete, column: column, __self: this, __source: { fileName: _jsxFileName, lineNumber: 84, columnNumber: 45 } })), [\n  canDelete,\n  label,\n  name,\n  onChange,\n  onClickClose,\n  onShiftOptions,\n  optionSelector,\n  popoverOptions]);\n\n  const addNewColumnWithPopover = useCallback((newColumn) => {\n    optionSelector.add(newColumn.column_name);\n    onChange(optionSelector.getValues());\n  }, [onChange, optionSelector]);\n  const togglePopover = useCallback((visible) => {\n    setNewColumnPopoverVisible(visible);\n  }, []);\n  const closePopover = useCallback(() => {\n    togglePopover(false);\n  }, [togglePopover]);\n  const openPopover = useCallback(() => {\n    togglePopover(true);\n  }, [togglePopover]);\n  const defaultGhostButtonText = isFeatureEnabled(FeatureFlag.ENABLE_DND_WITH_CLICK_UX) ?\n  tn('Drop a column here or click', 'Drop columns here or click', multi ? 2 : 1) :\n  tn('Drop column here', 'Drop columns here', multi ? 2 : 1);\n  return ___EmotionJSX(\"div\", { __self: this, __source: { fileName: _jsxFileName, lineNumber: 110, columnNumber: 13 } },\n  ___EmotionJSX(DndSelectLabel, _extends({ onDrop: onDrop, canDrop: canDrop, valuesRenderer: valuesRenderer, accept: DndItemType.Column, displayGhostButton: multi || optionSelector.values.length === 0, ghostButtonText: ghostButtonText || defaultGhostButtonText, onClickGhostButton: isFeatureEnabled(FeatureFlag.ENABLE_DND_WITH_CLICK_UX) ?\n    openPopover :\n    undefined }, props, { __self: this, __source: { fileName: _jsxFileName, lineNumber: 111, columnNumber: 7 } })),\n  ___EmotionJSX(ColumnSelectPopoverTrigger, { columns: popoverOptions, onColumnEdit: addNewColumnWithPopover, isControlledComponent: true, togglePopover: togglePopover, closePopover: closePopover, visible: newColumnPopoverVisible, __self: this, __source: { fileName: _jsxFileName, lineNumber: 114, columnNumber: 7 } },\n  ___EmotionJSX(\"div\", { __self: this, __source: { fileName: _jsxFileName, lineNumber: 115, columnNumber: 9 } })));\n\n\n}__signature__(DndColumnSelect, \"useState{[newColumnPopoverVisible, setNewColumnPopoverVisible](false)}\\nuseMemo{optionSelector}\\nuseCallback{handleOptionsChange}\\nuseComponentDidUpdate{}\\nuseCallback{onDrop}\\nuseCallback{canDrop}\\nuseCallback{onClickClose}\\nuseCallback{onShiftOptions}\\nuseMemo{popoverOptions}\\nuseCallback{valuesRenderer}\\nuseCallback{addNewColumnWithPopover}\\nuseCallback{togglePopover}\\nuseCallback{closePopover}\\nuseCallback{openPopover}\", () => [useComponentDidUpdate]);;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(DndColumnSelect, \"DndColumnSelect\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/explore/components/controls/DndColumnSelectControl/DndColumnSelect.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/home/ubuntu/my_plugin/superset/superset-frontend/src/explore/components/controls/DndColumnSelectControl/DndColumnSelect.tsx"],"names":[],"mappings":"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","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useCallback, useMemo, useState } from 'react';\nimport { FeatureFlag, isFeatureEnabled, tn } from '@superset-ui/core';\nimport { ColumnMeta } from '@superset-ui/chart-controls';\nimport { isEmpty } from 'lodash';\nimport DndSelectLabel from 'src/explore/components/controls/DndColumnSelectControl/DndSelectLabel';\nimport OptionWrapper from 'src/explore/components/controls/DndColumnSelectControl/OptionWrapper';\nimport { OptionSelector } from 'src/explore/components/controls/DndColumnSelectControl/utils';\nimport { DatasourcePanelDndItem } from 'src/explore/components/DatasourcePanel/types';\nimport { DndItemType } from 'src/explore/components/DndItemType';\nimport { useComponentDidUpdate } from 'src/common/hooks/useComponentDidUpdate';\nimport ColumnSelectPopoverTrigger from './ColumnSelectPopoverTrigger';\nimport { DndControlProps } from './types';\n\nexport type DndColumnSelectProps = DndControlProps<string> & {\n  options: Record<string, ColumnMeta>;\n};\n\nexport function DndColumnSelect(props: DndColumnSelectProps) {\n  const {\n    value,\n    options,\n    multi = true,\n    onChange,\n    canDelete = true,\n    ghostButtonText,\n    name,\n    label,\n  } = props;\n  const [newColumnPopoverVisible, setNewColumnPopoverVisible] = useState(false);\n\n  const optionSelector = useMemo(\n    () => new OptionSelector(options, multi, value),\n    [multi, options, value],\n  );\n\n  // synchronize values in case of dataset changes\n  const handleOptionsChange = useCallback(() => {\n    const optionSelectorValues = optionSelector.getValues();\n    if (typeof value !== typeof optionSelectorValues) {\n      onChange(optionSelectorValues);\n    }\n    if (\n      typeof value === 'string' &&\n      typeof optionSelectorValues === 'string' &&\n      value !== optionSelectorValues\n    ) {\n      onChange(optionSelectorValues);\n    }\n    if (\n      Array.isArray(optionSelectorValues) &&\n      Array.isArray(value) &&\n      (optionSelectorValues.length !== value.length ||\n        optionSelectorValues.every((val, index) => val === value[index]))\n    ) {\n      onChange(optionSelectorValues);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [JSON.stringify(value), JSON.stringify(optionSelector.getValues())]);\n\n  // useComponentDidUpdate to avoid running this for the first render, to avoid\n  // calling onChange when the initial value is not valid for the dataset\n  useComponentDidUpdate(handleOptionsChange);\n\n  const onDrop = useCallback(\n    (item: DatasourcePanelDndItem) => {\n      const column = item.value as ColumnMeta;\n      if (!optionSelector.multi && !isEmpty(optionSelector.values)) {\n        optionSelector.replace(0, column.column_name);\n      } else {\n        optionSelector.add(column.column_name);\n      }\n      onChange(optionSelector.getValues());\n    },\n    [onChange, optionSelector],\n  );\n\n  const canDrop = useCallback(\n    (item: DatasourcePanelDndItem) => {\n      const columnName = (item.value as ColumnMeta).column_name;\n      return (\n        columnName in optionSelector.options && !optionSelector.has(columnName)\n      );\n    },\n    [optionSelector],\n  );\n\n  const onClickClose = useCallback(\n    (index: number) => {\n      optionSelector.del(index);\n      onChange(optionSelector.getValues());\n    },\n    [onChange, optionSelector],\n  );\n\n  const onShiftOptions = useCallback(\n    (dragIndex: number, hoverIndex: number) => {\n      optionSelector.swap(dragIndex, hoverIndex);\n      onChange(optionSelector.getValues());\n    },\n    [onChange, optionSelector],\n  );\n\n  const popoverOptions = useMemo(\n    () =>\n      Object.values(options).filter(\n        col =>\n          !optionSelector.values\n            .map(val => val.column_name)\n            .includes(col.column_name),\n      ),\n    [optionSelector.values, options],\n  );\n\n  const valuesRenderer = useCallback(\n    () =>\n      optionSelector.values.map((column, idx) =>\n        isFeatureEnabled(FeatureFlag.ENABLE_DND_WITH_CLICK_UX) ? (\n          <ColumnSelectPopoverTrigger\n            columns={popoverOptions}\n            onColumnEdit={newColumn => {\n              optionSelector.replace(idx, newColumn.column_name);\n              onChange(optionSelector.getValues());\n            }}\n            editedColumn={column}\n          >\n            <OptionWrapper\n              key={idx}\n              index={idx}\n              clickClose={onClickClose}\n              onShiftOptions={onShiftOptions}\n              type={`${DndItemType.ColumnOption}_${name}_${label}`}\n              canDelete={canDelete}\n              column={column}\n              withCaret\n            />\n          </ColumnSelectPopoverTrigger>\n        ) : (\n          <OptionWrapper\n            key={idx}\n            index={idx}\n            clickClose={onClickClose}\n            onShiftOptions={onShiftOptions}\n            type={`${DndItemType.ColumnOption}_${name}_${label}`}\n            canDelete={canDelete}\n            column={column}\n          />\n        ),\n      ),\n    [\n      canDelete,\n      label,\n      name,\n      onChange,\n      onClickClose,\n      onShiftOptions,\n      optionSelector,\n      popoverOptions,\n    ],\n  );\n\n  const addNewColumnWithPopover = useCallback(\n    (newColumn: ColumnMeta) => {\n      optionSelector.add(newColumn.column_name);\n      onChange(optionSelector.getValues());\n    },\n    [onChange, optionSelector],\n  );\n\n  const togglePopover = useCallback((visible: boolean) => {\n    setNewColumnPopoverVisible(visible);\n  }, []);\n\n  const closePopover = useCallback(() => {\n    togglePopover(false);\n  }, [togglePopover]);\n\n  const openPopover = useCallback(() => {\n    togglePopover(true);\n  }, [togglePopover]);\n\n  const defaultGhostButtonText = isFeatureEnabled(\n    FeatureFlag.ENABLE_DND_WITH_CLICK_UX,\n  )\n    ? tn(\n        'Drop a column here or click',\n        'Drop columns here or click',\n        multi ? 2 : 1,\n      )\n    : tn('Drop column here', 'Drop columns here', multi ? 2 : 1);\n\n  return (\n    <div>\n      <DndSelectLabel\n        onDrop={onDrop}\n        canDrop={canDrop}\n        valuesRenderer={valuesRenderer}\n        accept={DndItemType.Column}\n        displayGhostButton={multi || optionSelector.values.length === 0}\n        ghostButtonText={ghostButtonText || defaultGhostButtonText}\n        onClickGhostButton={\n          isFeatureEnabled(FeatureFlag.ENABLE_DND_WITH_CLICK_UX)\n            ? openPopover\n            : undefined\n        }\n        {...props}\n      />\n      <ColumnSelectPopoverTrigger\n        columns={popoverOptions}\n        onColumnEdit={addNewColumnWithPopover}\n        isControlledComponent\n        togglePopover={togglePopover}\n        closePopover={closePopover}\n        visible={newColumnPopoverVisible}\n      >\n        <div />\n      </ColumnSelectPopoverTrigger>\n    </div>\n  );\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}