{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;};(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { t } from '@superset-ui/core';\nimport getToastsFromPyFlashMessages from 'src/components/MessageToasts/getToastsFromPyFlashMessages';\n\nexport default function getInitialState({\n  defaultDbId,\n  common,\n  active_tab: activeTab,\n  tab_state_ids: tabStateIds = [],\n  databases,\n  queries: queries_,\n  requested_query: requestedQuery,\n  user })\n{\n  /**\n   * Before YYYY-MM-DD, the state for SQL Lab was stored exclusively in the\n   * browser's localStorage. The feature flag `SQLLAB_BACKEND_PERSISTENCE`\n   * moves the state to the backend instead, migrating it from local storage.\n   *\n   * To allow for a transparent migration, the initial state is a combination\n   * of the backend state (if any) with the browser state (if any).\n   */\n  const queryEditors = [];\n  const defaultQueryEditor = {\n    id: null,\n    loaded: true,\n    title: t('Untitled query'),\n    sql: 'SELECT *\\nFROM\\nWHERE',\n    selectedText: null,\n    latestQueryId: null,\n    autorun: false,\n    templateParams: null,\n    dbId: defaultDbId,\n    functionNames: [],\n    queryLimit: common.conf.DEFAULT_SQLLAB_LIMIT,\n    validationResult: {\n      id: null,\n      errors: [],\n      completed: false },\n\n    queryCostEstimate: {\n      cost: null,\n      completed: false,\n      error: null },\n\n    hideLeftBar: false };\n\n\n  /**\n   * Load state from the backend. This will be empty if the feature flag\n   * `SQLLAB_BACKEND_PERSISTENCE` is off.\n   */\n  tabStateIds.forEach(({ id, label }) => {\n    let queryEditor;\n    if (activeTab && activeTab.id === id) {\n      queryEditor = {\n        id: id.toString(),\n        loaded: true,\n        title: activeTab.label,\n        sql: activeTab.sql || undefined,\n        selectedText: undefined,\n        latestQueryId: activeTab.latest_query ?\n        activeTab.latest_query.id :\n        null,\n        autorun: activeTab.autorun,\n        templateParams: activeTab.template_params || undefined,\n        dbId: activeTab.database_id,\n        functionNames: [],\n        schema: activeTab.schema,\n        queryLimit: activeTab.query_limit,\n        validationResult: {\n          id: null,\n          errors: [],\n          completed: false },\n\n        hideLeftBar: activeTab.hide_left_bar };\n\n    } else {\n      // dummy state, actual state will be loaded on tab switch\n      queryEditor = {\n        ...defaultQueryEditor,\n        id: id.toString(),\n        loaded: false,\n        title: label };\n\n    }\n    queryEditors.push(queryEditor);\n  });\n\n  const tabHistory = activeTab ? [activeTab.id.toString()] : [];\n  const tables = [];\n  if (activeTab) {\n    activeTab.table_schemas.\n    filter((tableSchema) => tableSchema.description !== null).\n    forEach((tableSchema) => {\n      const {\n        columns,\n        selectStar,\n        primaryKey,\n        foreignKeys,\n        indexes,\n        dataPreviewQueryId,\n        partitions,\n        metadata } =\n      tableSchema.description;\n      const table = {\n        dbId: tableSchema.database_id,\n        queryEditorId: tableSchema.tab_state_id.toString(),\n        schema: tableSchema.schema,\n        name: tableSchema.table,\n        expanded: tableSchema.expanded,\n        id: tableSchema.id,\n        isMetadataLoading: false,\n        isExtraMetadataLoading: false,\n        dataPreviewQueryId,\n        columns,\n        selectStar,\n        primaryKey,\n        foreignKeys,\n        indexes,\n        partitions,\n        metadata };\n\n      tables.push(table);\n    });\n  }\n\n  const queries = { ...queries_ };\n\n  /**\n   * If the `SQLLAB_BACKEND_PERSISTENCE` feature flag is off, or if the user\n   * hasn't used SQL Lab after it has been turned on, the state will be stored\n   * in the browser's local storage.\n   */\n  if (\n  localStorage.getItem('redux') &&\n  JSON.parse(localStorage.getItem('redux')).sqlLab)\n  {\n    const { sqlLab } = JSON.parse(localStorage.getItem('redux'));\n\n    if (sqlLab.queryEditors.length === 0) {\n      // migration was successful\n      localStorage.removeItem('redux');\n    } else {\n      // add query editors and tables to state with a special flag so they can\n      // be migrated if the `SQLLAB_BACKEND_PERSISTENCE` feature flag is on\n      sqlLab.queryEditors.forEach((qe) =>\n      queryEditors.push({\n        ...qe,\n        inLocalStorage: true,\n        loaded: true }));\n\n\n      sqlLab.tables.forEach((table) =>\n      tables.push({ ...table, inLocalStorage: true }));\n\n      Object.values(sqlLab.queries).forEach((query) => {\n        queries[query.id] = { ...query, inLocalStorage: true };\n      });\n      tabHistory.push(...sqlLab.tabHistory);\n    }\n  }\n\n  return {\n    sqlLab: {\n      activeSouthPaneTab: 'Results',\n      alerts: [],\n      databases,\n      offline: false,\n      queries,\n      queryEditors,\n      tabHistory,\n      tables,\n      queriesLastUpdate: Date.now(),\n      user },\n\n    requestedQuery,\n    messageToasts: getToastsFromPyFlashMessages(\n    (common || {}).flash_messages || []),\n\n    localStorageUsageInKilobytes: 0,\n    common: {\n      flash_messages: common.flash_messages,\n      conf: common.conf } };\n\n\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(getInitialState, \"getInitialState\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/reducers/getInitialState.js\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(__signature__, \"__signature__\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/reducers/getInitialState.js\");reactHotLoader.register(getInitialState, \"getInitialState\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/reducers/getInitialState.js\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/reducers/getInitialState.js"],"names":["getInitialState","active_tab","tab_state_ids","tabStateIds","queries","requested_query","queryEditors","defaultQueryEditor","id","loaded","title","t","sql","selectedText","latestQueryId","autorun","templateParams","dbId","functionNames","queryLimit","common","validationResult","errors","completed","queryCostEstimate","cost","error","hideLeftBar","activeTab","queryEditor","schema","tabHistory","tables","tableSchema","table","queryEditorId","name","expanded","isMetadataLoading","isExtraMetadataLoading","localStorage","JSON","sqlLab","inLocalStorage","Object","query","activeSouthPaneTab","alerts","offline","queriesLastUpdate","Date","messageToasts","getToastsFromPyFlashMessages","localStorageUsageInKilobytes","flash_messages","conf"],"mappings":"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","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { t } from '@superset-ui/core';\nimport getToastsFromPyFlashMessages from 'src/components/MessageToasts/getToastsFromPyFlashMessages';\n\nexport default function getInitialState({\n  defaultDbId,\n  common,\n  active_tab: activeTab,\n  tab_state_ids: tabStateIds = [],\n  databases,\n  queries: queries_,\n  requested_query: requestedQuery,\n  user,\n}) {\n  /**\n   * Before YYYY-MM-DD, the state for SQL Lab was stored exclusively in the\n   * browser's localStorage. The feature flag `SQLLAB_BACKEND_PERSISTENCE`\n   * moves the state to the backend instead, migrating it from local storage.\n   *\n   * To allow for a transparent migration, the initial state is a combination\n   * of the backend state (if any) with the browser state (if any).\n   */\n  const queryEditors = [];\n  const defaultQueryEditor = {\n    id: null,\n    loaded: true,\n    title: t('Untitled query'),\n    sql: 'SELECT *\\nFROM\\nWHERE',\n    selectedText: null,\n    latestQueryId: null,\n    autorun: false,\n    templateParams: null,\n    dbId: defaultDbId,\n    functionNames: [],\n    queryLimit: common.conf.DEFAULT_SQLLAB_LIMIT,\n    validationResult: {\n      id: null,\n      errors: [],\n      completed: false,\n    },\n    queryCostEstimate: {\n      cost: null,\n      completed: false,\n      error: null,\n    },\n    hideLeftBar: false,\n  };\n\n  /**\n   * Load state from the backend. This will be empty if the feature flag\n   * `SQLLAB_BACKEND_PERSISTENCE` is off.\n   */\n  tabStateIds.forEach(({ id, label }) => {\n    let queryEditor;\n    if (activeTab && activeTab.id === id) {\n      queryEditor = {\n        id: id.toString(),\n        loaded: true,\n        title: activeTab.label,\n        sql: activeTab.sql || undefined,\n        selectedText: undefined,\n        latestQueryId: activeTab.latest_query\n          ? activeTab.latest_query.id\n          : null,\n        autorun: activeTab.autorun,\n        templateParams: activeTab.template_params || undefined,\n        dbId: activeTab.database_id,\n        functionNames: [],\n        schema: activeTab.schema,\n        queryLimit: activeTab.query_limit,\n        validationResult: {\n          id: null,\n          errors: [],\n          completed: false,\n        },\n        hideLeftBar: activeTab.hide_left_bar,\n      };\n    } else {\n      // dummy state, actual state will be loaded on tab switch\n      queryEditor = {\n        ...defaultQueryEditor,\n        id: id.toString(),\n        loaded: false,\n        title: label,\n      };\n    }\n    queryEditors.push(queryEditor);\n  });\n\n  const tabHistory = activeTab ? [activeTab.id.toString()] : [];\n  const tables = [];\n  if (activeTab) {\n    activeTab.table_schemas\n      .filter(tableSchema => tableSchema.description !== null)\n      .forEach(tableSchema => {\n        const {\n          columns,\n          selectStar,\n          primaryKey,\n          foreignKeys,\n          indexes,\n          dataPreviewQueryId,\n          partitions,\n          metadata,\n        } = tableSchema.description;\n        const table = {\n          dbId: tableSchema.database_id,\n          queryEditorId: tableSchema.tab_state_id.toString(),\n          schema: tableSchema.schema,\n          name: tableSchema.table,\n          expanded: tableSchema.expanded,\n          id: tableSchema.id,\n          isMetadataLoading: false,\n          isExtraMetadataLoading: false,\n          dataPreviewQueryId,\n          columns,\n          selectStar,\n          primaryKey,\n          foreignKeys,\n          indexes,\n          partitions,\n          metadata,\n        };\n        tables.push(table);\n      });\n  }\n\n  const queries = { ...queries_ };\n\n  /**\n   * If the `SQLLAB_BACKEND_PERSISTENCE` feature flag is off, or if the user\n   * hasn't used SQL Lab after it has been turned on, the state will be stored\n   * in the browser's local storage.\n   */\n  if (\n    localStorage.getItem('redux') &&\n    JSON.parse(localStorage.getItem('redux')).sqlLab\n  ) {\n    const { sqlLab } = JSON.parse(localStorage.getItem('redux'));\n\n    if (sqlLab.queryEditors.length === 0) {\n      // migration was successful\n      localStorage.removeItem('redux');\n    } else {\n      // add query editors and tables to state with a special flag so they can\n      // be migrated if the `SQLLAB_BACKEND_PERSISTENCE` feature flag is on\n      sqlLab.queryEditors.forEach(qe =>\n        queryEditors.push({\n          ...qe,\n          inLocalStorage: true,\n          loaded: true,\n        }),\n      );\n      sqlLab.tables.forEach(table =>\n        tables.push({ ...table, inLocalStorage: true }),\n      );\n      Object.values(sqlLab.queries).forEach(query => {\n        queries[query.id] = { ...query, inLocalStorage: true };\n      });\n      tabHistory.push(...sqlLab.tabHistory);\n    }\n  }\n\n  return {\n    sqlLab: {\n      activeSouthPaneTab: 'Results',\n      alerts: [],\n      databases,\n      offline: false,\n      queries,\n      queryEditors,\n      tabHistory,\n      tables,\n      queriesLastUpdate: Date.now(),\n      user,\n    },\n    requestedQuery,\n    messageToasts: getToastsFromPyFlashMessages(\n      (common || {}).flash_messages || [],\n    ),\n    localStorageUsageInKilobytes: 0,\n    common: {\n      flash_messages: common.flash_messages,\n      conf: common.conf,\n    },\n  };\n}\n"]},"metadata":{},"sourceType":"module"}