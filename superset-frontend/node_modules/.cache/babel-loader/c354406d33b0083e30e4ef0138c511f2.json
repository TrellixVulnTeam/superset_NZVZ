{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;};function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}\n\n/* eslint-disable no-dupe-class-members */\nimport { scaleOrdinal } from 'd3-scale';\nimport ExtensibleFunction from '../models/ExtensibleFunction';\nimport stringifyAndTrim from '../utils/stringifyAndTrim'; // Use type augmentation to correct the fact that\n// an instance of CategoricalScale is also a function\n\nclass ScaleCategoricalColor extends ExtensibleFunction {\n  /**\n   * Constructor\n   * @param {*} colors an array of colors\n   * @param {*} parentmanualColors optional parameter that comes from parent\n   * (usually CategoricalColorNamespace) and supersede this.manualColors\n   */\n  constructor(stateOrColors, parentmanualColors) {\n    super((value) => this.getColor(value));\n\n    _defineProperty(this, \"state\", void 0);\n\n    _defineProperty(this, \"parentManualColors\", void 0);\n\n    if (Array.isArray(stateOrColors)) {\n      this.state = {\n        manualColors: {},\n        scale: scaleOrdinal(stateOrColors) };\n\n    } else {\n      this.state = stateOrColors;\n    }\n\n    this.parentManualColors = parentmanualColors;\n  }\n\n  get colors() {\n    return this.state.scale.range();\n  }\n\n  getColor(value) {\n    const cleanedValue = stringifyAndTrim(value);\n    const parentColor = this.parentManualColors && this.parentManualColors[cleanedValue];\n\n    if (parentColor) {\n      return parentColor;\n    }\n\n    const manualColor = this.state.manualColors[cleanedValue];\n\n    if (manualColor) {\n      return manualColor;\n    }\n\n    return this.state.scale(cleanedValue);\n  }\n  /**\n   * Enforce specific color for given value\n   * @param {*} value value\n   * @param {*} manualColor manualColor\n   */\n\n\n  setColor(value, manualColor) {\n    this.state.manualColors[stringifyAndTrim(value)] = manualColor;\n    return this;\n  }\n  /**\n   * Get a mapping of data values to colors\n   * @returns an object where the key is the data value and the value is the hex color code\n   */\n\n\n  getColorMap() {\n    const colorMap = {};\n    this.state.scale.domain().forEach((value) => {\n      colorMap[String(value)] = this.state.scale(value);\n    });\n    return { ...colorMap,\n      ...this.state.manualColors,\n      ...this.parentManualColors };\n\n  }\n  /**\n   * Returns an exact copy of this scale. Changes to this scale will not affect the returned scale, and vice versa.\n   */\n\n\n  copy() {\n    const copy = new ScaleCategoricalColor({\n      manualColors: { ...this.state.manualColors },\n\n      scale: this.state.scale.copy() },\n    this.parentManualColors);\n    return copy;\n  }\n  /**\n   * Returns the scale's current domain.\n   */\n\n\n  domain(newDomain) {\n    if (typeof newDomain === 'undefined') {\n      return this.state.scale.domain();\n    }\n\n    this.state.scale.domain(newDomain);\n    return this;\n  }\n  /**\n   * Returns the scale's current range.\n   */\n\n\n  range(newRange) {\n    if (typeof newRange === 'undefined') {\n      return this.state.scale.range();\n    }\n\n    this.state.scale.range(newRange);\n    return this;\n  }\n  /**\n   * Returns the current unknown value, which defaults to \"implicit\".\n   */\n\n\n  unknown(value) {\n    if (typeof value === 'undefined') {\n      return this.state.scale.unknown();\n    }\n\n    this.state.scale.unknown(value);\n    return this;\n  } // @ts-ignore\n  __reactstandin__regenerateByEval(key, code) {// @ts-ignore\n    this[key] = eval(code);}}const _default =\n\nScaleCategoricalColor;export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(_defineProperty, \"_defineProperty\", \"/home/ubuntu/my_plugin/superset/superset-frontend/node_modules/@encodable/color/esm/scale/ScaleCategoricalColor.js\");reactHotLoader.register(ScaleCategoricalColor, \"ScaleCategoricalColor\", \"/home/ubuntu/my_plugin/superset/superset-frontend/node_modules/@encodable/color/esm/scale/ScaleCategoricalColor.js\");reactHotLoader.register(_default, \"default\", \"/home/ubuntu/my_plugin/superset/superset-frontend/node_modules/@encodable/color/esm/scale/ScaleCategoricalColor.js\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/home/ubuntu/my_plugin/superset/superset-frontend/node_modules/@encodable/color/esm/scale/ScaleCategoricalColor.js"],"names":["_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","scaleOrdinal","ExtensibleFunction","stringifyAndTrim","ScaleCategoricalColor","constructor","stateOrColors","parentmanualColors","getColor","Array","isArray","state","manualColors","scale","parentManualColors","colors","range","cleanedValue","parentColor","manualColor","setColor","getColorMap","colorMap","domain","forEach","String","copy","newDomain","newRange","unknown"],"mappings":"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","sourcesContent":["function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* eslint-disable no-dupe-class-members */\nimport { scaleOrdinal } from 'd3-scale';\nimport ExtensibleFunction from '../models/ExtensibleFunction';\nimport stringifyAndTrim from '../utils/stringifyAndTrim'; // Use type augmentation to correct the fact that\n// an instance of CategoricalScale is also a function\n\nclass ScaleCategoricalColor extends ExtensibleFunction {\n  /**\n   * Constructor\n   * @param {*} colors an array of colors\n   * @param {*} parentmanualColors optional parameter that comes from parent\n   * (usually CategoricalColorNamespace) and supersede this.manualColors\n   */\n  constructor(stateOrColors, parentmanualColors) {\n    super(value => this.getColor(value));\n\n    _defineProperty(this, \"state\", void 0);\n\n    _defineProperty(this, \"parentManualColors\", void 0);\n\n    if (Array.isArray(stateOrColors)) {\n      this.state = {\n        manualColors: {},\n        scale: scaleOrdinal(stateOrColors)\n      };\n    } else {\n      this.state = stateOrColors;\n    }\n\n    this.parentManualColors = parentmanualColors;\n  }\n\n  get colors() {\n    return this.state.scale.range();\n  }\n\n  getColor(value) {\n    const cleanedValue = stringifyAndTrim(value);\n    const parentColor = this.parentManualColors && this.parentManualColors[cleanedValue];\n\n    if (parentColor) {\n      return parentColor;\n    }\n\n    const manualColor = this.state.manualColors[cleanedValue];\n\n    if (manualColor) {\n      return manualColor;\n    }\n\n    return this.state.scale(cleanedValue);\n  }\n  /**\n   * Enforce specific color for given value\n   * @param {*} value value\n   * @param {*} manualColor manualColor\n   */\n\n\n  setColor(value, manualColor) {\n    this.state.manualColors[stringifyAndTrim(value)] = manualColor;\n    return this;\n  }\n  /**\n   * Get a mapping of data values to colors\n   * @returns an object where the key is the data value and the value is the hex color code\n   */\n\n\n  getColorMap() {\n    const colorMap = {};\n    this.state.scale.domain().forEach(value => {\n      colorMap[String(value)] = this.state.scale(value);\n    });\n    return { ...colorMap,\n      ...this.state.manualColors,\n      ...this.parentManualColors\n    };\n  }\n  /**\n   * Returns an exact copy of this scale. Changes to this scale will not affect the returned scale, and vice versa.\n   */\n\n\n  copy() {\n    const copy = new ScaleCategoricalColor({\n      manualColors: { ...this.state.manualColors\n      },\n      scale: this.state.scale.copy()\n    }, this.parentManualColors);\n    return copy;\n  }\n  /**\n   * Returns the scale's current domain.\n   */\n\n\n  domain(newDomain) {\n    if (typeof newDomain === 'undefined') {\n      return this.state.scale.domain();\n    }\n\n    this.state.scale.domain(newDomain);\n    return this;\n  }\n  /**\n   * Returns the scale's current range.\n   */\n\n\n  range(newRange) {\n    if (typeof newRange === 'undefined') {\n      return this.state.scale.range();\n    }\n\n    this.state.scale.range(newRange);\n    return this;\n  }\n  /**\n   * Returns the current unknown value, which defaults to \"implicit\".\n   */\n\n\n  unknown(value) {\n    if (typeof value === 'undefined') {\n      return this.state.scale.unknown();\n    }\n\n    this.state.scale.unknown(value);\n    return this;\n  }\n\n}\n\nexport default ScaleCategoricalColor;"]},"metadata":{},"sourceType":"module"}