{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;};(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nexport default function transformProps(chartProps) {\n  const { height, datasource, formData, queriesData } = chartProps;\n  const { columnCollection = [], groupby, metrics, url } = formData;\n  const { records, columns } = queriesData[0].data;\n  const isGroupBy = (groupby == null ? void 0 : groupby.length) > 0;\n\n  // When there is a \"group by\",\n  // each row in the table is a database column\n  // Otherwise,\n  // each row in the table is a metric\n  let rows;\n  if (isGroupBy) {\n    rows = columns.map((column) =>\n    typeof column === 'object' ? column : { label: column });\n\n  } else {\n    const metricMap = datasource.metrics.reduce((acc, current) => {\n      const map = acc;\n      map[current.metric_name] = current;\n      return map;\n    }, {});\n\n    rows = metrics.map((metric) =>\n    typeof metric === 'object' ? metric : metricMap[metric]);\n\n  }\n\n  // TODO: Better parse this from controls instead of mutative value here.\n  columnCollection.forEach((column) => {\n    const c = column;\n    if (c.timeLag !== undefined && c.timeLag !== null && c.timeLag !== '') {\n      c.timeLag = parseInt(c.timeLag, 10);\n    }\n  });\n\n  return {\n    height,\n    data: records,\n    columnConfigs: columnCollection,\n    rows,\n    rowType: isGroupBy ? 'column' : 'metric',\n    url };\n\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(transformProps, \"transformProps\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/visualizations/TimeTable/transformProps.js\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(__signature__, \"__signature__\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/visualizations/TimeTable/transformProps.js\");reactHotLoader.register(transformProps, \"transformProps\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/visualizations/TimeTable/transformProps.js\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/home/ubuntu/my_plugin/superset/superset-frontend/src/visualizations/TimeTable/transformProps.js"],"names":["transformProps","columnCollection","queriesData","isGroupBy","rows","columns","label","metricMap","map","current","metrics","c","parseInt","data","columnConfigs","rowType"],"mappings":"+kBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAAA,cAAA,CAAA,UAAA,EAAoC;AACjD,QAAM,EAAA,MAAA,EAAA,UAAA,EAAA,QAAA,EAAA,WAAA,KAAN,UAAA;AACA,QAAM,EAAEC,gBAAgB,GAAlB,EAAA,EAAA,OAAA,EAAA,OAAA,EAAA,GAAA,KAAN,QAAA;AACA,QAAM,EAAA,OAAA,EAAA,OAAA,KAAuBC,WAAW,CAAXA,CAAW,CAAXA,CAA7B,IAAA;AACA,QAAMC,SAAS,GAAG,CAAA,OAAO,IAAP,IAAA,GAAA,KAAA,CAAA,GAAA,OAAO,CAAP,MAAA,IAAlB,CAAA;;AAEA;AACA;AACA;AACA;AACA,MAAA,IAAA;AACA,MAAA,SAAA,EAAe;AACbC,IAAAA,IAAI,GAAGC,OAAO,CAAPA,GAAAA,CAAY,CAAA,MAAA;AACjB,WAAA,MAAA,KAAA,QAAA,GAAA,MAAA,GAAsC,EAAEC,KAAK,EAD/CF,MACwC,EADjCC,CAAPD;;AADF,GAAA,MAIO;AACL,UAAMG,SAAS,GAAG,UAAU,CAAV,OAAA,CAAA,MAAA,CAA0B,CAAA,GAAA,EAAA,OAAA,KAAkB;AAC5D,YAAMC,GAAG,GAAT,GAAA;AACAA,MAAAA,GAAG,CAACC,OAAO,CAAXD,WAAG,CAAHA,GAAAA,OAAAA;AACA,aAAA,GAAA;AAHgB,KAAA,EAAlB,EAAkB,CAAlB;;AAMAJ,IAAAA,IAAI,GAAGM,OAAO,CAAPA,GAAAA,CAAY,CAAA,MAAA;AACjB,WAAA,MAAA,KAAA,QAAA,GAAA,MAAA,GAAsCH,SAAS,CADjDH,MACiD,CAD1CM,CAAPN;;AAGD;;AAED;AACAH,EAAAA,gBAAgB,CAAhBA,OAAAA,CAAyB,CAAA,MAAA,KAAU;AACjC,UAAMU,CAAC,GAAP,MAAA;AACA,QAAIA,CAAC,CAADA,OAAAA,KAAAA,SAAAA,IAA2BA,CAAC,CAADA,OAAAA,KAA3BA,IAAAA,IAAiDA,CAAC,CAADA,OAAAA,KAArD,EAAA,EAAuE;AACrEA,MAAAA,CAAC,CAADA,OAAAA,GAAYC,QAAQ,CAACD,CAAC,CAAF,OAAA,EAApBA,EAAoB,CAApBA;AACD;AAJHV,GAAAA;;AAOA,SAAO;AAAA,IAAA,MAAA;AAELY,IAAAA,IAAI,EAFC,OAAA;AAGLC,IAAAA,aAAa,EAHR,gBAAA;AAAA,IAAA,IAAA;AAKLC,IAAAA,OAAO,EAAEZ,SAAS,GAAA,QAAA,GALb,QAAA;AAAP,IAAA,GAAO,EAAP;;kLAnCsBH,c,8mBAAT,c","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nexport default function transformProps(chartProps) {\n  const { height, datasource, formData, queriesData } = chartProps;\n  const { columnCollection = [], groupby, metrics, url } = formData;\n  const { records, columns } = queriesData[0].data;\n  const isGroupBy = groupby?.length > 0;\n\n  // When there is a \"group by\",\n  // each row in the table is a database column\n  // Otherwise,\n  // each row in the table is a metric\n  let rows;\n  if (isGroupBy) {\n    rows = columns.map(column =>\n      typeof column === 'object' ? column : { label: column },\n    );\n  } else {\n    const metricMap = datasource.metrics.reduce((acc, current) => {\n      const map = acc;\n      map[current.metric_name] = current;\n      return map;\n    }, {});\n\n    rows = metrics.map(metric =>\n      typeof metric === 'object' ? metric : metricMap[metric],\n    );\n  }\n\n  // TODO: Better parse this from controls instead of mutative value here.\n  columnCollection.forEach(column => {\n    const c = column;\n    if (c.timeLag !== undefined && c.timeLag !== null && c.timeLag !== '') {\n      c.timeLag = parseInt(c.timeLag, 10);\n    }\n  });\n\n  return {\n    height,\n    data: records,\n    columnConfigs: columnCollection,\n    rows,\n    rowType: isGroupBy ? 'column' : 'metric',\n    url,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}