{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/my_plugin/superset/superset-frontend/src/explore/components/controls/DndColumnSelectControl/ColumnSelectPopover.tsx\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint-disable camelcase */\nimport React, { useCallback, useMemo, useState } from 'react';\nimport Tabs from 'src/components/Tabs';\nimport Button from 'src/components/Button';\nimport { Select } from 'src/components';\nimport { t, styled } from '@superset-ui/core';\nimport { Form, FormItem } from 'src/components/Form';\nimport { StyledColumnOption } from 'src/explore/components/optionRenderers';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst StyledSelect = styled(Select)`\n  .metric-option {\n    & > svg {\n      min-width: ${({ theme }) => `${theme.gridUnit * 4}px`};\n    }\n    & > .option-label {\n      overflow: hidden;\n      text-overflow: ellipsis;\n    }\n  }\n`;\nconst ColumnSelectPopover = ({ columns, editedColumn, onChange, onClose }) => {\n  const [initialCalculatedColumn, initialSimpleColumn] = editedColumn != null && editedColumn.expression ?\n  [editedColumn, undefined] :\n  [undefined, editedColumn];\n  const [selectedCalculatedColumn, setSelectedCalculatedColumn] = useState(initialCalculatedColumn);\n  const [selectedSimpleColumn, setSelectedSimpleColumn] = useState(initialSimpleColumn);\n  const [calculatedColumns, simpleColumns] = useMemo(() => columns == null ? void 0 : columns.reduce((acc, column) => {\n    if (column.expression) {\n      acc[0].push(column);\n    } else\n    {\n      acc[1].push(column);\n    }\n    return acc;\n  }, [[], []]), [columns]);\n  const onCalculatedColumnChange = useCallback((selectedColumnName) => {\n    const selectedColumn = calculatedColumns.find((col) => col.column_name === selectedColumnName);\n    setSelectedCalculatedColumn(selectedColumn);\n    setSelectedSimpleColumn(undefined);\n  }, [calculatedColumns]);\n  const onSimpleColumnChange = useCallback((selectedColumnName) => {\n    const selectedColumn = simpleColumns.find((col) => col.column_name === selectedColumnName);\n    setSelectedCalculatedColumn(undefined);\n    setSelectedSimpleColumn(selectedColumn);\n  }, [simpleColumns]);\n  const defaultActiveTabKey = initialSimpleColumn || calculatedColumns.length === 0 ? 'simple' : 'saved';\n  const onSave = useCallback(() => {\n    const selectedColumn = selectedCalculatedColumn || selectedSimpleColumn;\n    if (!selectedColumn) {\n      return;\n    }\n    onChange(selectedColumn);\n    onClose();\n  }, [onChange, onClose, selectedCalculatedColumn, selectedSimpleColumn]);\n  const onResetStateAndClose = useCallback(() => {\n    setSelectedCalculatedColumn(initialCalculatedColumn);\n    setSelectedSimpleColumn(initialSimpleColumn);\n    onClose();\n  }, [initialCalculatedColumn, initialSimpleColumn, onClose]);\n  const stateIsValid = selectedCalculatedColumn || selectedSimpleColumn;\n  const hasUnsavedChanges = (selectedCalculatedColumn == null ? void 0 : selectedCalculatedColumn.column_name) !== (\n  initialCalculatedColumn == null ? void 0 : initialCalculatedColumn.column_name) ||\n  (selectedSimpleColumn == null ? void 0 : selectedSimpleColumn.column_name) !== (initialSimpleColumn == null ? void 0 : initialSimpleColumn.column_name);\n  const savedExpressionsLabel = t('Saved expressions');\n  const simpleColumnsLabel = t('Column');\n  return ___EmotionJSX(Form, { layout: \"vertical\", id: \"metrics-edit-popover\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 83, columnNumber: 13 } },\n  ___EmotionJSX(Tabs, { id: \"adhoc-metric-edit-tabs\", defaultActiveKey: defaultActiveTabKey, className: \"adhoc-metric-edit-tabs\", allowOverflow: true, __self: this, __source: { fileName: _jsxFileName, lineNumber: 84, columnNumber: 7 } },\n  ___EmotionJSX(Tabs.TabPane, { key: \"saved\", tab: t('Saved'), __self: this, __source: { fileName: _jsxFileName, lineNumber: 85, columnNumber: 9 } },\n  ___EmotionJSX(FormItem, { label: savedExpressionsLabel, __self: this, __source: { fileName: _jsxFileName, lineNumber: 86, columnNumber: 11 } },\n  ___EmotionJSX(StyledSelect, { ariaLabel: savedExpressionsLabel, value: selectedCalculatedColumn == null ? void 0 : selectedCalculatedColumn.column_name, onChange: onCalculatedColumnChange, allowClear: true, autoFocus: !selectedCalculatedColumn, placeholder: t('%s column(s)', calculatedColumns.length), options: calculatedColumns.map((calculatedColumn) => ({\n      value: calculatedColumn.column_name,\n      label: calculatedColumn.verbose_name || calculatedColumn.column_name,\n      customLabel: ___EmotionJSX(StyledColumnOption, { column: calculatedColumn, showType: true, __self: this, __source: { fileName: _jsxFileName, lineNumber: 90, columnNumber: 27 } }),\n      key: calculatedColumn.column_name })), __self: this, __source: { fileName: _jsxFileName, lineNumber: 87, columnNumber: 13 } }))),\n\n\n\n  ___EmotionJSX(Tabs.TabPane, { key: \"simple\", tab: t('Simple'), __self: this, __source: { fileName: _jsxFileName, lineNumber: 95, columnNumber: 9 } },\n  ___EmotionJSX(FormItem, { label: simpleColumnsLabel, __self: this, __source: { fileName: _jsxFileName, lineNumber: 96, columnNumber: 11 } },\n  ___EmotionJSX(Select, { ariaLabel: simpleColumnsLabel, value: selectedSimpleColumn == null ? void 0 : selectedSimpleColumn.column_name, onChange: onSimpleColumnChange, allowClear: true, autoFocus: !selectedSimpleColumn, placeholder: t('%s column(s)', simpleColumns.length), options: simpleColumns.map((simpleColumn) => ({\n      value: simpleColumn.column_name,\n      label: simpleColumn.verbose_name || simpleColumn.column_name,\n      customLabel: ___EmotionJSX(StyledColumnOption, { column: simpleColumn, showType: true, __self: this, __source: { fileName: _jsxFileName, lineNumber: 100, columnNumber: 27 } }),\n      key: simpleColumn.column_name })), __self: this, __source: { fileName: _jsxFileName, lineNumber: 97, columnNumber: 13 } })))),\n\n\n\n\n  ___EmotionJSX(\"div\", { __self: this, __source: { fileName: _jsxFileName, lineNumber: 106, columnNumber: 7 } },\n  ___EmotionJSX(Button, { buttonSize: \"small\", onClick: onResetStateAndClose, cta: true, __self: this, __source: { fileName: _jsxFileName, lineNumber: 107, columnNumber: 9 } },\n  t('Close')),\n\n  ___EmotionJSX(Button, { disabled: !stateIsValid, buttonStyle: hasUnsavedChanges && stateIsValid ? 'primary' : 'default', buttonSize: \"small\", onClick: onSave, cta: true, __self: this, __source: { fileName: _jsxFileName, lineNumber: 110, columnNumber: 9 } },\n  t('Save'))));\n\n\n\n};__signature__(ColumnSelectPopover, \"useState{[selectedCalculatedColumn, setSelectedCalculatedColumn](initialCalculatedColumn)}\\nuseState{[selectedSimpleColumn, setSelectedSimpleColumn](initialSimpleColumn)}\\nuseMemo{[calculatedColumns, simpleColumns]}\\nuseCallback{onCalculatedColumnChange}\\nuseCallback{onSimpleColumnChange}\\nuseCallback{onSave}\\nuseCallback{onResetStateAndClose}\");const _default =\nColumnSelectPopover;export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(StyledSelect, \"StyledSelect\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/explore/components/controls/DndColumnSelectControl/ColumnSelectPopover.tsx\");reactHotLoader.register(ColumnSelectPopover, \"ColumnSelectPopover\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/explore/components/controls/DndColumnSelectControl/ColumnSelectPopover.tsx\");reactHotLoader.register(_default, \"default\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/explore/components/controls/DndColumnSelectControl/ColumnSelectPopover.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/home/ubuntu/my_plugin/superset/superset-frontend/src/explore/components/controls/DndColumnSelectControl/ColumnSelectPopover.tsx"],"names":[],"mappings":"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","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint-disable camelcase */\nimport React, { useCallback, useMemo, useState } from 'react';\nimport Tabs from 'src/components/Tabs';\nimport Button from 'src/components/Button';\nimport { Select } from 'src/components';\nimport { t, styled } from '@superset-ui/core';\n\nimport { Form, FormItem } from 'src/components/Form';\nimport { StyledColumnOption } from 'src/explore/components/optionRenderers';\nimport { ColumnMeta } from '@superset-ui/chart-controls';\n\nconst StyledSelect = styled(Select)`\n  .metric-option {\n    & > svg {\n      min-width: ${({ theme }) => `${theme.gridUnit * 4}px`};\n    }\n    & > .option-label {\n      overflow: hidden;\n      text-overflow: ellipsis;\n    }\n  }\n`;\n\ninterface ColumnSelectPopoverProps {\n  columns: ColumnMeta[];\n  editedColumn?: ColumnMeta;\n  onChange: (column: ColumnMeta) => void;\n  onClose: () => void;\n}\n\nconst ColumnSelectPopover = ({\n  columns,\n  editedColumn,\n  onChange,\n  onClose,\n}: ColumnSelectPopoverProps) => {\n  const [\n    initialCalculatedColumn,\n    initialSimpleColumn,\n  ] = editedColumn?.expression\n    ? [editedColumn, undefined]\n    : [undefined, editedColumn];\n  const [selectedCalculatedColumn, setSelectedCalculatedColumn] = useState(\n    initialCalculatedColumn,\n  );\n  const [selectedSimpleColumn, setSelectedSimpleColumn] = useState(\n    initialSimpleColumn,\n  );\n\n  const [calculatedColumns, simpleColumns] = useMemo(\n    () =>\n      columns?.reduce(\n        (acc: [ColumnMeta[], ColumnMeta[]], column: ColumnMeta) => {\n          if (column.expression) {\n            acc[0].push(column);\n          } else {\n            acc[1].push(column);\n          }\n          return acc;\n        },\n        [[], []],\n      ),\n    [columns],\n  );\n\n  const onCalculatedColumnChange = useCallback(\n    selectedColumnName => {\n      const selectedColumn = calculatedColumns.find(\n        col => col.column_name === selectedColumnName,\n      );\n      setSelectedCalculatedColumn(selectedColumn);\n      setSelectedSimpleColumn(undefined);\n    },\n    [calculatedColumns],\n  );\n\n  const onSimpleColumnChange = useCallback(\n    selectedColumnName => {\n      const selectedColumn = simpleColumns.find(\n        col => col.column_name === selectedColumnName,\n      );\n      setSelectedCalculatedColumn(undefined);\n      setSelectedSimpleColumn(selectedColumn);\n    },\n    [simpleColumns],\n  );\n\n  const defaultActiveTabKey =\n    initialSimpleColumn || calculatedColumns.length === 0 ? 'simple' : 'saved';\n\n  const onSave = useCallback(() => {\n    const selectedColumn = selectedCalculatedColumn || selectedSimpleColumn;\n    if (!selectedColumn) {\n      return;\n    }\n    onChange(selectedColumn);\n    onClose();\n  }, [onChange, onClose, selectedCalculatedColumn, selectedSimpleColumn]);\n\n  const onResetStateAndClose = useCallback(() => {\n    setSelectedCalculatedColumn(initialCalculatedColumn);\n    setSelectedSimpleColumn(initialSimpleColumn);\n    onClose();\n  }, [initialCalculatedColumn, initialSimpleColumn, onClose]);\n\n  const stateIsValid = selectedCalculatedColumn || selectedSimpleColumn;\n  const hasUnsavedChanges =\n    selectedCalculatedColumn?.column_name !==\n      initialCalculatedColumn?.column_name ||\n    selectedSimpleColumn?.column_name !== initialSimpleColumn?.column_name;\n  const savedExpressionsLabel = t('Saved expressions');\n  const simpleColumnsLabel = t('Column');\n\n  return (\n    <Form layout=\"vertical\" id=\"metrics-edit-popover\">\n      <Tabs\n        id=\"adhoc-metric-edit-tabs\"\n        defaultActiveKey={defaultActiveTabKey}\n        className=\"adhoc-metric-edit-tabs\"\n        allowOverflow\n      >\n        <Tabs.TabPane key=\"saved\" tab={t('Saved')}>\n          <FormItem label={savedExpressionsLabel}>\n            <StyledSelect\n              ariaLabel={savedExpressionsLabel}\n              value={selectedCalculatedColumn?.column_name}\n              onChange={onCalculatedColumnChange}\n              allowClear\n              autoFocus={!selectedCalculatedColumn}\n              placeholder={t('%s column(s)', calculatedColumns.length)}\n              options={calculatedColumns.map(calculatedColumn => ({\n                value: calculatedColumn.column_name,\n                label:\n                  calculatedColumn.verbose_name || calculatedColumn.column_name,\n                customLabel: (\n                  <StyledColumnOption column={calculatedColumn} showType />\n                ),\n                key: calculatedColumn.column_name,\n              }))}\n            />\n          </FormItem>\n        </Tabs.TabPane>\n        <Tabs.TabPane key=\"simple\" tab={t('Simple')}>\n          <FormItem label={simpleColumnsLabel}>\n            <Select\n              ariaLabel={simpleColumnsLabel}\n              value={selectedSimpleColumn?.column_name}\n              onChange={onSimpleColumnChange}\n              allowClear\n              autoFocus={!selectedSimpleColumn}\n              placeholder={t('%s column(s)', simpleColumns.length)}\n              options={simpleColumns.map(simpleColumn => ({\n                value: simpleColumn.column_name,\n                label: simpleColumn.verbose_name || simpleColumn.column_name,\n                customLabel: (\n                  <StyledColumnOption column={simpleColumn} showType />\n                ),\n                key: simpleColumn.column_name,\n              }))}\n            />\n          </FormItem>\n        </Tabs.TabPane>\n      </Tabs>\n      <div>\n        <Button buttonSize=\"small\" onClick={onResetStateAndClose} cta>\n          {t('Close')}\n        </Button>\n        <Button\n          disabled={!stateIsValid}\n          buttonStyle={\n            hasUnsavedChanges && stateIsValid ? 'primary' : 'default'\n          }\n          buttonSize=\"small\"\n          onClick={onSave}\n          cta\n        >\n          {t('Save')}\n        </Button>\n      </div>\n    </Form>\n  );\n};\n\nexport default ColumnSelectPopover;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}