{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport shortid from 'shortid';\nimport JSONbig from 'json-bigint';\nimport { t, SupersetClient } from '@superset-ui/core';\nimport invert from 'lodash/invert';\nimport mapKeys from 'lodash/mapKeys';\nimport { isFeatureEnabled, FeatureFlag } from 'src/featureFlags';\n\nimport { now } from 'src/modules/dates';\nimport {\naddDangerToast as addDangerToastAction,\naddInfoToast as addInfoToastAction,\naddSuccessToast as addSuccessToastAction,\naddWarningToast as addWarningToastAction } from\n'src/components/MessageToasts/actions';\nimport { getClientErrorObject } from 'src/utils/getClientErrorObject';\nimport COMMON_ERR_MESSAGES from 'src/utils/errorMessages';\n\nexport const RESET_STATE = 'RESET_STATE';\nexport const ADD_QUERY_EDITOR = 'ADD_QUERY_EDITOR';\nexport const UPDATE_QUERY_EDITOR = 'UPDATE_QUERY_EDITOR';\nexport const QUERY_EDITOR_SAVED = 'QUERY_EDITOR_SAVED';\nexport const CLONE_QUERY_TO_NEW_TAB = 'CLONE_QUERY_TO_NEW_TAB';\nexport const REMOVE_QUERY_EDITOR = 'REMOVE_QUERY_EDITOR';\nexport const MERGE_TABLE = 'MERGE_TABLE';\nexport const REMOVE_TABLE = 'REMOVE_TABLE';\nexport const END_QUERY = 'END_QUERY';\nexport const REMOVE_QUERY = 'REMOVE_QUERY';\nexport const EXPAND_TABLE = 'EXPAND_TABLE';\nexport const COLLAPSE_TABLE = 'COLLAPSE_TABLE';\nexport const QUERY_EDITOR_SETDB = 'QUERY_EDITOR_SETDB';\nexport const QUERY_EDITOR_SET_SCHEMA = 'QUERY_EDITOR_SET_SCHEMA';\nexport const QUERY_EDITOR_SET_SCHEMA_OPTIONS =\n'QUERY_EDITOR_SET_SCHEMA_OPTIONS';\nexport const QUERY_EDITOR_SET_TABLE_OPTIONS = 'QUERY_EDITOR_SET_TABLE_OPTIONS';\nexport const QUERY_EDITOR_SET_TITLE = 'QUERY_EDITOR_SET_TITLE';\nexport const QUERY_EDITOR_SET_AUTORUN = 'QUERY_EDITOR_SET_AUTORUN';\nexport const QUERY_EDITOR_SET_SQL = 'QUERY_EDITOR_SET_SQL';\nexport const QUERY_EDITOR_SET_QUERY_LIMIT = 'QUERY_EDITOR_SET_QUERY_LIMIT';\nexport const QUERY_EDITOR_SET_TEMPLATE_PARAMS =\n'QUERY_EDITOR_SET_TEMPLATE_PARAMS';\nexport const QUERY_EDITOR_SET_SELECTED_TEXT = 'QUERY_EDITOR_SET_SELECTED_TEXT';\nexport const QUERY_EDITOR_SET_FUNCTION_NAMES =\n'QUERY_EDITOR_SET_FUNCTION_NAMES';\nexport const QUERY_EDITOR_PERSIST_HEIGHT = 'QUERY_EDITOR_PERSIST_HEIGHT';\nexport const QUERY_EDITOR_TOGGLE_LEFT_BAR = 'QUERY_EDITOR_TOGGLE_LEFT_BAR';\nexport const MIGRATE_QUERY_EDITOR = 'MIGRATE_QUERY_EDITOR';\nexport const MIGRATE_TAB_HISTORY = 'MIGRATE_TAB_HISTORY';\nexport const MIGRATE_TABLE = 'MIGRATE_TABLE';\nexport const MIGRATE_QUERY = 'MIGRATE_QUERY';\n\nexport const SET_DATABASES = 'SET_DATABASES';\nexport const SET_ACTIVE_QUERY_EDITOR = 'SET_ACTIVE_QUERY_EDITOR';\nexport const LOAD_QUERY_EDITOR = 'LOAD_QUERY_EDITOR';\nexport const SET_TABLES = 'SET_TABLES';\nexport const SET_ACTIVE_SOUTHPANE_TAB = 'SET_ACTIVE_SOUTHPANE_TAB';\nexport const REFRESH_QUERIES = 'REFRESH_QUERIES';\nexport const SET_USER_OFFLINE = 'SET_USER_OFFLINE';\nexport const RUN_QUERY = 'RUN_QUERY';\nexport const START_QUERY = 'START_QUERY';\nexport const STOP_QUERY = 'STOP_QUERY';\nexport const REQUEST_QUERY_RESULTS = 'REQUEST_QUERY_RESULTS';\nexport const QUERY_SUCCESS = 'QUERY_SUCCESS';\nexport const QUERY_FAILED = 'QUERY_FAILED';\nexport const CLEAR_QUERY_RESULTS = 'CLEAR_QUERY_RESULTS';\nexport const REMOVE_DATA_PREVIEW = 'REMOVE_DATA_PREVIEW';\nexport const CHANGE_DATA_PREVIEW_ID = 'CHANGE_DATA_PREVIEW_ID';\n\nexport const START_QUERY_VALIDATION = 'START_QUERY_VALIDATION';\nexport const QUERY_VALIDATION_RETURNED = 'QUERY_VALIDATION_RETURNED';\nexport const QUERY_VALIDATION_FAILED = 'QUERY_VALIDATION_FAILED';\nexport const COST_ESTIMATE_STARTED = 'COST_ESTIMATE_STARTED';\nexport const COST_ESTIMATE_RETURNED = 'COST_ESTIMATE_RETURNED';\nexport const COST_ESTIMATE_FAILED = 'COST_ESTIMATE_FAILED';\n\nexport const CREATE_DATASOURCE_STARTED = 'CREATE_DATASOURCE_STARTED';\nexport const CREATE_DATASOURCE_SUCCESS = 'CREATE_DATASOURCE_SUCCESS';\nexport const CREATE_DATASOURCE_FAILED = 'CREATE_DATASOURCE_FAILED';\n\nexport const addInfoToast = addInfoToastAction;\nexport const addSuccessToast = addSuccessToastAction;\nexport const addDangerToast = addDangerToastAction;\nexport const addWarningToast = addWarningToastAction;\n\nexport const CtasEnum = {\n  TABLE: 'TABLE',\n  VIEW: 'VIEW' };\n\nconst ERR_MSG_CANT_LOAD_QUERY = t(\"The query couldn't be loaded\");\n\n// a map of SavedQuery field names to the different names used client-side,\n// because for now making the names consistent is too complicated\n// so it might as well only happen in one place\nconst queryClientMapping = {\n  id: 'remoteId',\n  db_id: 'dbId',\n  client_id: 'id',\n  label: 'title' };\n\nconst queryServerMapping = invert(queryClientMapping);\n\n// uses a mapping like those above to convert object key names to another style\nconst fieldConverter = (mapping) => (obj) =>\nmapKeys(obj, (value, key) => key in mapping ? mapping[key] : key);\n\nconst convertQueryToServer = fieldConverter(queryServerMapping);\nconst convertQueryToClient = fieldConverter(queryClientMapping);\n\nexport function resetState() {\n  return { type: RESET_STATE };\n}\n\nexport function startQueryValidation(query) {\n  Object.assign(query, {\n    id: query.id ? query.id : shortid.generate() });\n\n  return { type: START_QUERY_VALIDATION, query };\n}\n\nexport function queryValidationReturned(query, results) {\n  return { type: QUERY_VALIDATION_RETURNED, query, results };\n}\n\nexport function queryValidationFailed(query, message, error) {\n  return { type: QUERY_VALIDATION_FAILED, query, message, error };\n}\n\nexport function updateQueryEditor(alterations) {\n  return { type: UPDATE_QUERY_EDITOR, alterations };\n}\n\nexport function scheduleQuery(query) {\n  return (dispatch) =>\n  SupersetClient.post({\n    endpoint: '/savedqueryviewapi/api/create',\n    postPayload: query,\n    stringify: false }).\n\n  then(() =>\n  dispatch(\n  addSuccessToast(\n  t(\n  'Your query has been scheduled. To see details of your query, navigate to Saved queries')))).\n\n\n\n\n  catch(() =>\n  dispatch(addDangerToast(t('Your query could not be scheduled'))));\n\n}\n\nexport function estimateQueryCost(query) {\n  const { dbId, schema, sql, templateParams } = query;\n  const endpoint =\n  schema === null ?\n  `/superset/estimate_query_cost/${dbId}/` :\n  `/superset/estimate_query_cost/${dbId}/${schema}/`;\n  return (dispatch) =>\n  Promise.all([\n  dispatch({ type: COST_ESTIMATE_STARTED, query }),\n  SupersetClient.post({\n    endpoint,\n    postPayload: {\n      sql,\n      templateParams: JSON.parse(templateParams || '{}') } }).\n\n\n  then(({ json }) =>\n  dispatch({ type: COST_ESTIMATE_RETURNED, query, json })).\n\n  catch((response) =>\n  getClientErrorObject(response).then((error) => {\n    const message =\n    error.error ||\n    error.statusText ||\n    t('Failed at retrieving results');\n    return dispatch({\n      type: COST_ESTIMATE_FAILED,\n      query,\n      error: message });\n\n  }))]);\n\n\n}\n\nexport function startQuery(query) {\n  Object.assign(query, {\n    id: query.id ? query.id : shortid.generate(),\n    progress: 0,\n    startDttm: now(),\n    state: query.runAsync ? 'pending' : 'running',\n    cached: false });\n\n  return { type: START_QUERY, query };\n}\n\nexport function querySuccess(query, results) {\n  return function (dispatch) {\n    const sync =\n    !query.isDataPreview &&\n    isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE) ?\n    SupersetClient.put({\n      endpoint: encodeURI(`/tabstateview/${results.query.sqlEditorId}`),\n      postPayload: { latest_query_id: query.id } }) :\n\n    Promise.resolve();\n\n    return sync.\n    then(() => dispatch({ type: QUERY_SUCCESS, query, results })).\n    catch(() =>\n    dispatch(\n    addDangerToast(\n    t(\n    'An error occurred while storing the latest query id in the backend. ' +\n    'Please contact your administrator if this problem persists.'))));\n\n\n\n\n  };\n}\n\nexport function queryFailed(query, msg, link, errors) {\n  return function (dispatch) {\n    const sync =\n    !query.isDataPreview &&\n    isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE) ?\n    SupersetClient.put({\n      endpoint: encodeURI(`/tabstateview/${query.sqlEditorId}`),\n      postPayload: { latest_query_id: query.id } }) :\n\n    Promise.resolve();\n\n    return (\n      sync.\n      catch(() =>\n      dispatch(\n      addDangerToast(\n      t(\n      'An error occurred while storing the latest query id in the backend. ' +\n      'Please contact your administrator if this problem persists.'))))\n\n\n\n\n      // We should always show the error message, even if we couldn't sync the\n      // state to the backend\n      .then(() => dispatch({ type: QUERY_FAILED, query, msg, link, errors })));\n\n  };\n}\n\nexport function stopQuery(query) {\n  return { type: STOP_QUERY, query };\n}\n\nexport function clearQueryResults(query) {\n  return { type: CLEAR_QUERY_RESULTS, query };\n}\n\nexport function removeDataPreview(table) {\n  return { type: REMOVE_DATA_PREVIEW, table };\n}\n\nexport function requestQueryResults(query) {\n  return { type: REQUEST_QUERY_RESULTS, query };\n}\n\nexport function fetchQueryResults(query, displayLimit) {\n  return function (dispatch) {\n    dispatch(requestQueryResults(query));\n\n    return SupersetClient.get({\n      endpoint: `/superset/results/${query.resultsKey}/?rows=${displayLimit}`,\n      parseMethod: 'text' }).\n\n    then(({ text = '{}' }) => {\n      const bigIntJson = JSONbig.parse(text);\n      return dispatch(querySuccess(query, bigIntJson));\n    }).\n    catch((response) =>\n    getClientErrorObject(response).then((error) => {\n      const message =\n      error.error ||\n      error.statusText ||\n      t('Failed at retrieving results');\n\n      return dispatch(\n      queryFailed(query, message, error.link, error.errors));\n\n    }));\n\n  };\n}\n\nexport function runQuery(query) {\n  return function (dispatch) {\n    dispatch(startQuery(query));\n    const postPayload = {\n      client_id: query.id,\n      database_id: query.dbId,\n      json: true,\n      runAsync: query.runAsync,\n      schema: query.schema,\n      sql: query.sql,\n      sql_editor_id: query.sqlEditorId,\n      tab: query.tab,\n      tmp_table_name: query.tempTable,\n      select_as_cta: query.ctas,\n      ctas_method: query.ctas_method,\n      templateParams: query.templateParams,\n      queryLimit: query.queryLimit,\n      expand_data: true };\n\n\n    return SupersetClient.post({\n      endpoint: '/superset/sql_json/',\n      body: JSON.stringify(postPayload),\n      headers: { 'Content-Type': 'application/json' },\n      parseMethod: 'text' }).\n\n    then(({ text = '{}' }) => {\n      if (!query.runAsync) {\n        const bigIntJson = JSONbig.parse(text);\n        dispatch(querySuccess(query, bigIntJson));\n      }\n    }).\n    catch((response) =>\n    getClientErrorObject(response).then((error) => {\n      let message = error.error || error.statusText || t('Unknown error');\n      if (message.includes('CSRF token')) {\n        message = t(COMMON_ERR_MESSAGES.SESSION_TIMED_OUT);\n      }\n      dispatch(queryFailed(query, message, error.link, error.errors));\n    }));\n\n  };\n}\n\nexport function reRunQuery(query) {\n  // run Query with a new id\n  return function (dispatch) {\n    dispatch(runQuery({ ...query, id: shortid.generate() }));\n  };\n}\n\nexport function validateQuery(query) {\n  return function (dispatch) {\n    dispatch(startQueryValidation(query));\n\n    const postPayload = {\n      client_id: query.id,\n      database_id: query.dbId,\n      json: true,\n      schema: query.schema,\n      sql: query.sql,\n      sql_editor_id: query.sqlEditorId,\n      templateParams: query.templateParams,\n      validate_only: true };\n\n\n    return SupersetClient.post({\n      endpoint: `/superset/validate_sql_json/${window.location.search}`,\n      postPayload,\n      stringify: false }).\n\n    then(({ json }) => dispatch(queryValidationReturned(query, json))).\n    catch((response) =>\n    getClientErrorObject(response).then((error) => {\n      let message = error.error || error.statusText || t('Unknown error');\n      if (message.includes('CSRF token')) {\n        message = t(COMMON_ERR_MESSAGES.SESSION_TIMED_OUT);\n      }\n      dispatch(queryValidationFailed(query, message, error));\n    }));\n\n  };\n}\n\nexport function postStopQuery(query) {\n  return function (dispatch) {\n    return SupersetClient.post({\n      endpoint: '/superset/stop_query/',\n      postPayload: { client_id: query.id },\n      stringify: false }).\n\n    then(() => dispatch(stopQuery(query))).\n    then(() => dispatch(addSuccessToast(t('Query was stopped.')))).\n    catch(() =>\n    dispatch(\n    addDangerToast(`${t('Failed at stopping query. ')}'${query.id}'`)));\n\n\n  };\n}\n\nexport function setDatabases(databases) {\n  return { type: SET_DATABASES, databases };\n}\n\nfunction migrateTable(table, queryEditorId, dispatch) {\n  return SupersetClient.post({\n    endpoint: encodeURI('/tableschemaview/'),\n    postPayload: { table: { ...table, queryEditorId } } }).\n\n  then(({ json }) => {\n    const newTable = {\n      ...table,\n      id: json.id,\n      queryEditorId };\n\n    return dispatch({ type: MIGRATE_TABLE, oldTable: table, newTable });\n  }).\n  catch(() =>\n  dispatch(\n  addWarningToast(\n  t(\n  'Unable to migrate table schema state to backend. Superset will retry ' +\n  'later. Please contact your administrator if this problem persists.'))));\n\n\n\n\n}\n\nfunction migrateQuery(queryId, queryEditorId, dispatch) {\n  return SupersetClient.post({\n    endpoint: encodeURI(`/tabstateview/${queryEditorId}/migrate_query`),\n    postPayload: { queryId } }).\n\n  then(() => dispatch({ type: MIGRATE_QUERY, queryId, queryEditorId })).\n  catch(() =>\n  dispatch(\n  addWarningToast(\n  t(\n  'Unable to migrate query state to backend. Superset will retry later. ' +\n  'Please contact your administrator if this problem persists.'))));\n\n\n\n\n}\n\nexport function migrateQueryEditorFromLocalStorage(\nqueryEditor,\ntables,\nqueries)\n{\n  return function (dispatch) {\n    return SupersetClient.post({\n      endpoint: '/tabstateview/',\n      postPayload: { queryEditor } }).\n\n    then(({ json }) => {\n      const newQueryEditor = {\n        ...queryEditor,\n        id: json.id.toString() };\n\n      dispatch({\n        type: MIGRATE_QUERY_EDITOR,\n        oldQueryEditor: queryEditor,\n        newQueryEditor });\n\n      dispatch({\n        type: MIGRATE_TAB_HISTORY,\n        oldId: queryEditor.id,\n        newId: newQueryEditor.id });\n\n      return Promise.all([\n      ...tables.map((table) =>\n      migrateTable(table, newQueryEditor.id, dispatch)),\n\n      ...queries.map((query) =>\n      migrateQuery(query.id, newQueryEditor.id, dispatch))]);\n\n\n    }).\n    catch(() =>\n    dispatch(\n    addWarningToast(\n    t(\n    'Unable to migrate query editor state to backend. Superset will retry ' +\n    'later. Please contact your administrator if this problem persists.'))));\n\n\n\n\n  };\n}\n\nexport function addQueryEditor(queryEditor) {\n  return function (dispatch) {\n    const sync = isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE) ?\n    SupersetClient.post({\n      endpoint: '/tabstateview/',\n      postPayload: { queryEditor } }) :\n\n    Promise.resolve({ json: { id: shortid.generate() } });\n\n    return sync.\n    then(({ json }) => {\n      const newQueryEditor = {\n        ...queryEditor,\n        id: json.id.toString() };\n\n      return dispatch({\n        type: ADD_QUERY_EDITOR,\n        queryEditor: newQueryEditor });\n\n    }).\n    catch(() =>\n    dispatch(\n    addDangerToast(\n    t(\n    'Unable to add a new tab to the backend. Please contact your administrator.'))));\n\n\n\n\n  };\n}\n\nexport function cloneQueryToNewTab(query, autorun) {\n  return function (dispatch, getState) {\n    const state = getState();\n    const { queryEditors, tabHistory } = state.sqlLab;\n    const sourceQueryEditor = queryEditors.find(\n    (qe) => qe.id === tabHistory[tabHistory.length - 1]);\n\n    const queryEditor = {\n      title: t('Copy of %s', sourceQueryEditor.title),\n      dbId: query.dbId ? query.dbId : null,\n      schema: query.schema ? query.schema : null,\n      autorun,\n      sql: query.sql,\n      queryLimit: sourceQueryEditor.queryLimit,\n      maxRow: sourceQueryEditor.maxRow,\n      templateParams: sourceQueryEditor.templateParams };\n\n    return dispatch(addQueryEditor(queryEditor));\n  };\n}\n\nexport function setActiveQueryEditor(queryEditor) {\n  return function (dispatch) {\n    const sync = isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE) ?\n    SupersetClient.post({\n      endpoint: encodeURI(`/tabstateview/${queryEditor.id}/activate`) }) :\n\n    Promise.resolve();\n\n    return sync.\n    then(() => dispatch({ type: SET_ACTIVE_QUERY_EDITOR, queryEditor })).\n    catch((response) => {\n      if (response.status !== 404) {\n        return dispatch(\n        addDangerToast(\n        t(\n        'An error occurred while setting the active tab. Please contact ' +\n        'your administrator.')));\n\n\n\n      }\n      return dispatch({ type: REMOVE_QUERY_EDITOR, queryEditor });\n    });\n  };\n}\n\nexport function loadQueryEditor(queryEditor) {\n  return { type: LOAD_QUERY_EDITOR, queryEditor };\n}\n\nexport function setTables(tableSchemas) {\n  const tables = tableSchemas.\n  filter((tableSchema) => tableSchema.description !== null).\n  map((tableSchema) => {\n    const {\n      columns,\n      selectStar,\n      primaryKey,\n      foreignKeys,\n      indexes,\n      dataPreviewQueryId } =\n    tableSchema.description;\n    return {\n      dbId: tableSchema.database_id,\n      queryEditorId: tableSchema.tab_state_id.toString(),\n      schema: tableSchema.schema,\n      name: tableSchema.table,\n      expanded: tableSchema.expanded,\n      id: tableSchema.id,\n      dataPreviewQueryId,\n      columns,\n      selectStar,\n      primaryKey,\n      foreignKeys,\n      indexes,\n      isMetadataLoading: false,\n      isExtraMetadataLoading: false };\n\n  });\n  return { type: SET_TABLES, tables };\n}\n\nexport function switchQueryEditor(queryEditor, displayLimit) {\n  return function (dispatch) {\n    if (\n    isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE) &&\n    !queryEditor.loaded)\n    {\n      SupersetClient.get({\n        endpoint: encodeURI(`/tabstateview/${queryEditor.id}`) }).\n\n      then(({ json }) => {\n        const loadedQueryEditor = {\n          id: json.id.toString(),\n          loaded: true,\n          title: json.label,\n          sql: json.sql,\n          selectedText: null,\n          latestQueryId: json.latest_query ? json.latest_query.id : null,\n          autorun: json.autorun,\n          dbId: json.database_id,\n          templateParams: json.template_params,\n          schema: json.schema,\n          queryLimit: json.query_limit,\n          validationResult: {\n            id: null,\n            errors: [],\n            completed: false },\n\n          hideLeftBar: json.hide_left_bar };\n\n        dispatch(loadQueryEditor(loadedQueryEditor));\n        dispatch(setTables(json.table_schemas || []));\n        dispatch(setActiveQueryEditor(loadedQueryEditor));\n        if (json.latest_query && json.latest_query.resultsKey) {\n          dispatch(fetchQueryResults(json.latest_query, displayLimit));\n        }\n      }).\n      catch((response) => {\n        if (response.status !== 404) {\n          return dispatch(\n          addDangerToast(t('An error occurred while fetching tab state')));\n\n        }\n        return dispatch({ type: REMOVE_QUERY_EDITOR, queryEditor });\n      });\n    } else {\n      dispatch(setActiveQueryEditor(queryEditor));\n    }\n  };\n}\n\nexport function setActiveSouthPaneTab(tabId) {\n  return { type: SET_ACTIVE_SOUTHPANE_TAB, tabId };\n}\n\nexport function toggleLeftBar(queryEditor) {\n  const hideLeftBar = !queryEditor.hideLeftBar;\n  return function (dispatch) {\n    const sync = isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE) ?\n    SupersetClient.put({\n      endpoint: encodeURI(`/tabstateview/${queryEditor.id}`),\n      postPayload: { hide_left_bar: hideLeftBar } }) :\n\n    Promise.resolve();\n\n    return sync.\n    then(() =>\n    dispatch({\n      type: QUERY_EDITOR_TOGGLE_LEFT_BAR,\n      queryEditor,\n      hideLeftBar })).\n\n\n    catch(() =>\n    dispatch(\n    addDangerToast(\n    t(\n    'An error occurred while hiding the left bar. Please contact your administrator.'))));\n\n\n\n\n  };\n}\n\nexport function removeQueryEditor(queryEditor) {\n  return function (dispatch) {\n    const sync = isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE) ?\n    SupersetClient.delete({\n      endpoint: encodeURI(`/tabstateview/${queryEditor.id}`) }) :\n\n    Promise.resolve();\n\n    return sync.\n    then(() => dispatch({ type: REMOVE_QUERY_EDITOR, queryEditor })).\n    catch(() =>\n    dispatch(\n    addDangerToast(\n    t(\n    'An error occurred while removing tab. Please contact your administrator.'))));\n\n\n\n\n  };\n}\n\nexport function removeQuery(query) {\n  return function (dispatch) {\n    const sync = isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE) ?\n    SupersetClient.delete({\n      endpoint: encodeURI(\n      `/tabstateview/${query.sqlEditorId}/query/${query.id}`) }) :\n\n\n    Promise.resolve();\n\n    return sync.\n    then(() => dispatch({ type: REMOVE_QUERY, query })).\n    catch(() =>\n    dispatch(\n    addDangerToast(\n    t(\n    'An error occurred while removing query. Please contact your administrator.'))));\n\n\n\n\n  };\n}\n\nexport function queryEditorSetDb(queryEditor, dbId) {\n  return function (dispatch) {\n    const sync = isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE) ?\n    SupersetClient.put({\n      endpoint: encodeURI(`/tabstateview/${queryEditor.id}`),\n      postPayload: { database_id: dbId } }) :\n\n    Promise.resolve();\n\n    return sync.\n    then(() => dispatch({ type: QUERY_EDITOR_SETDB, queryEditor, dbId })).\n    catch(() =>\n    dispatch(\n    addDangerToast(\n    t(\n    'An error occurred while setting the tab database ID. Please contact your administrator.'))));\n\n\n\n\n  };\n}\n\nexport function queryEditorSetSchema(queryEditor, schema) {\n  return function (dispatch) {\n    const sync = isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE) ?\n    SupersetClient.put({\n      endpoint: encodeURI(`/tabstateview/${queryEditor.id}`),\n      postPayload: { schema } }) :\n\n    Promise.resolve();\n\n    return sync.\n    then(() =>\n    dispatch({ type: QUERY_EDITOR_SET_SCHEMA, queryEditor, schema })).\n\n    catch(() =>\n    dispatch(\n    addDangerToast(\n    t(\n    'An error occurred while setting the tab schema. Please contact your administrator.'))));\n\n\n\n\n  };\n}\n\nexport function queryEditorSetSchemaOptions(queryEditor, options) {\n  return { type: QUERY_EDITOR_SET_SCHEMA_OPTIONS, queryEditor, options };\n}\n\nexport function queryEditorSetTableOptions(queryEditor, options) {\n  return { type: QUERY_EDITOR_SET_TABLE_OPTIONS, queryEditor, options };\n}\n\nexport function queryEditorSetAutorun(queryEditor, autorun) {\n  return function (dispatch) {\n    const sync = isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE) ?\n    SupersetClient.put({\n      endpoint: encodeURI(`/tabstateview/${queryEditor.id}`),\n      postPayload: { autorun } }) :\n\n    Promise.resolve();\n\n    return sync.\n    then(() =>\n    dispatch({ type: QUERY_EDITOR_SET_AUTORUN, queryEditor, autorun })).\n\n    catch(() =>\n    dispatch(\n    addDangerToast(\n    t(\n    'An error occurred while setting the tab autorun. Please contact your administrator.'))));\n\n\n\n\n  };\n}\n\nexport function queryEditorSetTitle(queryEditor, title) {\n  return function (dispatch) {\n    const sync = isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE) ?\n    SupersetClient.put({\n      endpoint: encodeURI(`/tabstateview/${queryEditor.id}`),\n      postPayload: { label: title } }) :\n\n    Promise.resolve();\n\n    return sync.\n    then(() =>\n    dispatch({ type: QUERY_EDITOR_SET_TITLE, queryEditor, title })).\n\n    catch(() =>\n    dispatch(\n    addDangerToast(\n    t(\n    'An error occurred while setting the tab title. Please contact your administrator.'))));\n\n\n\n\n  };\n}\n\nexport function saveQuery(query) {\n  return (dispatch) =>\n  SupersetClient.post({\n    endpoint: '/savedqueryviewapi/api/create',\n    postPayload: convertQueryToServer(query),\n    stringify: false }).\n\n  then((result) => {\n    dispatch({\n      type: QUERY_EDITOR_SAVED,\n      query,\n      result: convertQueryToClient(result.json.item) });\n\n    dispatch(addSuccessToast(t('Your query was saved')));\n    dispatch(queryEditorSetTitle(query, query.title));\n  }).\n  catch(() =>\n  dispatch(addDangerToast(t('Your query could not be saved'))));\n\n}\n\nexport function updateSavedQuery(query) {\n  return (dispatch) =>\n  SupersetClient.put({\n    endpoint: `/savedqueryviewapi/api/update/${query.remoteId}`,\n    postPayload: convertQueryToServer(query),\n    stringify: false }).\n\n  then(() => {\n    dispatch(addSuccessToast(t('Your query was updated')));\n    dispatch(queryEditorSetTitle(query, query.title));\n  }).\n  catch(() =>\n  dispatch(addDangerToast(t('Your query could not be updated')))).\n\n  then(() => dispatch(updateQueryEditor(query)));\n}\n\nexport function queryEditorSetSql(queryEditor, sql) {\n  return function (dispatch) {\n    // saved query and set tab state use this action\n    dispatch({ type: QUERY_EDITOR_SET_SQL, queryEditor, sql });\n    if (isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE)) {\n      return SupersetClient.put({\n        endpoint: encodeURI(`/tabstateview/${queryEditor.id}`),\n        postPayload: { sql, latest_query_id: queryEditor.latestQueryId } }).\n      catch(() =>\n      dispatch(\n      addDangerToast(\n      t(\n      'An error occurred while storing your query in the backend. To ' +\n      'avoid losing your changes, please save your query using the ' +\n      '\"Save Query\" button.'))));\n\n\n\n\n    }\n    return Promise.resolve();\n  };\n}\n\nexport function queryEditorSetQueryLimit(queryEditor, queryLimit) {\n  return function (dispatch) {\n    const sync = isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE) ?\n    SupersetClient.put({\n      endpoint: encodeURI(`/tabstateview/${queryEditor.id}`),\n      postPayload: { query_limit: queryLimit } }) :\n\n    Promise.resolve();\n\n    return sync.\n    then(() =>\n    dispatch({\n      type: QUERY_EDITOR_SET_QUERY_LIMIT,\n      queryEditor,\n      queryLimit })).\n\n\n    catch(() =>\n    dispatch(\n    addDangerToast(\n    t(\n    'An error occurred while setting the tab title. Please contact your administrator.'))));\n\n\n\n\n  };\n}\n\nexport function queryEditorSetTemplateParams(queryEditor, templateParams) {\n  return function (dispatch) {\n    dispatch({\n      type: QUERY_EDITOR_SET_TEMPLATE_PARAMS,\n      queryEditor,\n      templateParams });\n\n    const sync = isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE) ?\n    SupersetClient.put({\n      endpoint: encodeURI(`/tabstateview/${queryEditor.id}`),\n      postPayload: { template_params: templateParams } }) :\n\n    Promise.resolve();\n\n    return sync.catch(() =>\n    dispatch(\n    addDangerToast(\n    t(\n    'An error occurred while setting the tab template parameters. ' +\n    'Please contact your administrator.'))));\n\n\n\n\n  };\n}\n\nexport function queryEditorSetSelectedText(queryEditor, sql) {\n  return { type: QUERY_EDITOR_SET_SELECTED_TEXT, queryEditor, sql };\n}\n\nexport function mergeTable(table, query) {\n  return { type: MERGE_TABLE, table, query };\n}\n\nfunction getTableMetadata(table, query, dispatch) {\n  return SupersetClient.get({\n    endpoint: encodeURI(\n    `/api/v1/database/${query.dbId}/table/${encodeURIComponent(\n    table.name)\n    }/${encodeURIComponent(table.schema)}/`) }).\n\n\n  then(({ json }) => {\n    const dataPreviewQuery = {\n      id: shortid.generate(),\n      dbId: query.dbId,\n      sql: json.selectStar,\n      tableName: table.name,\n      sqlEditorId: null,\n      tab: '',\n      runAsync: false,\n      ctas: false,\n      isDataPreview: true };\n\n    const newTable = {\n      ...table,\n      ...json,\n      expanded: true,\n      isMetadataLoading: false,\n      dataPreviewQueryId: dataPreviewQuery.id };\n\n    Promise.all([\n    dispatch(mergeTable(newTable, dataPreviewQuery)), // Merge table to tables in state\n    dispatch(runQuery(dataPreviewQuery)) // Run query to get preview data for table\n    ]);\n    return newTable;\n  }).\n  catch(() =>\n  Promise.all([\n  dispatch(\n  mergeTable({\n    ...table,\n    isMetadataLoading: false })),\n\n\n  dispatch(\n  addDangerToast(t('An error occurred while fetching table metadata')))]));\n\n\n\n}\n\nfunction getTableExtendedMetadata(table, query, dispatch) {\n  return SupersetClient.get({\n    endpoint: encodeURI(\n    `/superset/extra_table_metadata/${query.dbId}/` +\n    `${encodeURIComponent(table.name)}/${encodeURIComponent(\n    table.schema)\n    }/`) }).\n\n\n  then(({ json }) => {\n    dispatch(\n    mergeTable({ ...table, ...json, isExtraMetadataLoading: false }));\n\n    return json;\n  }).\n  catch(() =>\n  Promise.all([\n  dispatch(mergeTable({ ...table, isExtraMetadataLoading: false })),\n  dispatch(\n  addDangerToast(t('An error occurred while fetching table metadata')))]));\n\n\n\n}\n\nexport function addTable(query, tableName, schemaName) {\n  return function (dispatch) {\n    const table = {\n      dbId: query.dbId,\n      queryEditorId: query.id,\n      schema: schemaName,\n      name: tableName };\n\n    dispatch(\n    mergeTable({\n      ...table,\n      isMetadataLoading: true,\n      isExtraMetadataLoading: true,\n      expanded: true }));\n\n\n\n    return Promise.all([\n    getTableMetadata(table, query, dispatch),\n    getTableExtendedMetadata(table, query, dispatch)]).\n    then(([newTable, json]) => {\n      const sync = isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE) ?\n      SupersetClient.post({\n        endpoint: encodeURI('/tableschemaview/'),\n        postPayload: { table: { ...newTable, ...json } } }) :\n\n      Promise.resolve({ json: { id: shortid.generate() } });\n\n      return sync.\n      then(({ json: resultJson }) =>\n      dispatch(mergeTable({ ...table, id: resultJson.id }))).\n\n      catch(() =>\n      dispatch(\n      addDangerToast(\n      t(\n      'An error occurred while fetching table metadata. ' +\n      'Please contact your administrator.'))));\n\n\n\n\n    });\n  };\n}\n\nexport function changeDataPreviewId(oldQueryId, newQuery) {\n  return { type: CHANGE_DATA_PREVIEW_ID, oldQueryId, newQuery };\n}\n\nexport function reFetchQueryResults(query) {\n  return function (dispatch) {\n    const newQuery = {\n      id: shortid.generate(),\n      dbId: query.dbId,\n      sql: query.sql,\n      tableName: query.tableName,\n      sqlEditorId: null,\n      tab: '',\n      runAsync: false,\n      ctas: false,\n      queryLimit: query.queryLimit,\n      isDataPreview: query.isDataPreview };\n\n    dispatch(runQuery(newQuery));\n    dispatch(changeDataPreviewId(query.id, newQuery));\n  };\n}\n\nexport function expandTable(table) {\n  return function (dispatch) {\n    const sync = isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE) ?\n    SupersetClient.post({\n      endpoint: encodeURI(`/tableschemaview/${table.id}/expanded`),\n      postPayload: { expanded: true } }) :\n\n    Promise.resolve();\n\n    return sync.\n    then(() => dispatch({ type: EXPAND_TABLE, table })).\n    catch(() =>\n    dispatch(\n    addDangerToast(\n    t(\n    'An error occurred while expanding the table schema. ' +\n    'Please contact your administrator.'))));\n\n\n\n\n  };\n}\n\nexport function collapseTable(table) {\n  return function (dispatch) {\n    const sync = isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE) ?\n    SupersetClient.post({\n      endpoint: encodeURI(`/tableschemaview/${table.id}/expanded`),\n      postPayload: { expanded: false } }) :\n\n    Promise.resolve();\n\n    return sync.\n    then(() => dispatch({ type: COLLAPSE_TABLE, table })).\n    catch(() =>\n    dispatch(\n    addDangerToast(\n    t(\n    'An error occurred while collapsing the table schema. ' +\n    'Please contact your administrator.'))));\n\n\n\n\n  };\n}\n\nexport function removeTable(table) {\n  return function (dispatch) {\n    const sync = isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE) ?\n    SupersetClient.delete({\n      endpoint: encodeURI(`/tableschemaview/${table.id}`) }) :\n\n    Promise.resolve();\n\n    return sync.\n    then(() => dispatch({ type: REMOVE_TABLE, table })).\n    catch(() =>\n    dispatch(\n    addDangerToast(\n    t(\n    'An error occurred while removing the table schema. ' +\n    'Please contact your administrator.'))));\n\n\n\n\n  };\n}\n\nexport function refreshQueries(alteredQueries) {\n  return { type: REFRESH_QUERIES, alteredQueries };\n}\n\nexport function setUserOffline(offline) {\n  return { type: SET_USER_OFFLINE, offline };\n}\n\nexport function persistEditorHeight(queryEditor, northPercent, southPercent) {\n  return {\n    type: QUERY_EDITOR_PERSIST_HEIGHT,\n    queryEditor,\n    northPercent,\n    southPercent };\n\n}\n\nexport function popStoredQuery(urlId) {\n  return function (dispatch) {\n    return SupersetClient.get({ endpoint: `/kv/${urlId}` }).\n    then(({ json }) =>\n    dispatch(\n    addQueryEditor({\n      title: json.title ? json.title : t('Shared query'),\n      dbId: json.dbId ? parseInt(json.dbId, 10) : null,\n      schema: json.schema ? json.schema : null,\n      autorun: json.autorun ? json.autorun : false,\n      sql: json.sql ? json.sql : 'SELECT ...' }))).\n\n\n\n    catch(() => dispatch(addDangerToast(ERR_MSG_CANT_LOAD_QUERY)));\n  };\n}\nexport function popSavedQuery(saveQueryId) {\n  return function (dispatch) {\n    return SupersetClient.get({\n      endpoint: `/savedqueryviewapi/api/get/${saveQueryId}` }).\n\n    then(({ json }) => {\n      const queryEditorProps = {\n        ...convertQueryToClient(json.result),\n        autorun: false };\n\n      return dispatch(addQueryEditor(queryEditorProps));\n    }).\n    catch(() => dispatch(addDangerToast(ERR_MSG_CANT_LOAD_QUERY)));\n  };\n}\nexport function popQuery(queryId) {\n  return function (dispatch) {\n    return SupersetClient.get({\n      endpoint: `/api/v1/query/${queryId}` }).\n\n    then(({ json }) => {\n      const queryData = json.result;\n      const queryEditorProps = {\n        dbId: queryData.database.id,\n        schema: queryData.schema,\n        sql: queryData.sql,\n        title: `Copy of ${queryData.tab_name}`,\n        autorun: false };\n\n      return dispatch(addQueryEditor(queryEditorProps));\n    }).\n    catch(() => dispatch(addDangerToast(ERR_MSG_CANT_LOAD_QUERY)));\n  };\n}\nexport function popDatasourceQuery(datasourceKey, sql) {\n  return function (dispatch) {\n    return SupersetClient.get({\n      endpoint: `/superset/fetch_datasource_metadata?datasourceKey=${datasourceKey}` }).\n\n    then(({ json }) =>\n    dispatch(\n    addQueryEditor({\n      title: `Query ${json.name}`,\n      dbId: json.database.id,\n      schema: json.schema,\n      autorun: sql !== undefined,\n      sql: sql || json.select_star }))).\n\n\n\n    catch(() =>\n    dispatch(addDangerToast(t(\"The datasource couldn't be loaded\"))));\n\n  };\n}\nexport function createDatasourceStarted() {\n  return { type: CREATE_DATASOURCE_STARTED };\n}\nexport function createDatasourceSuccess(data) {\n  const datasource = `${data.table_id}__table`;\n  return { type: CREATE_DATASOURCE_SUCCESS, datasource };\n}\nexport function createDatasourceFailed(err) {\n  return { type: CREATE_DATASOURCE_FAILED, err };\n}\n\nexport function createDatasource(vizOptions) {\n  return (dispatch) => {\n    dispatch(createDatasourceStarted());\n    return SupersetClient.post({\n      endpoint: '/superset/sqllab_viz/',\n      postPayload: { data: vizOptions } }).\n\n    then(({ json }) => {\n      dispatch(createDatasourceSuccess(json));\n\n      return Promise.resolve(json);\n    }).\n    catch(() => {\n      dispatch(\n      createDatasourceFailed(\n      t('An error occurred while creating the data source')));\n\n\n\n      return Promise.reject();\n    });\n  };\n}\n\nexport function createCtasDatasource(vizOptions) {\n  return (dispatch) => {\n    dispatch(createDatasourceStarted());\n    return SupersetClient.post({\n      endpoint: '/superset/get_or_create_table/',\n      postPayload: { data: vizOptions } }).\n\n    then(({ json }) => {\n      dispatch(createDatasourceSuccess(json));\n\n      return json;\n    }).\n    catch(() => {\n      const errorMsg = t('An error occurred while creating the data source');\n      dispatch(createDatasourceFailed(errorMsg));\n      return Promise.reject(new Error(errorMsg));\n    });\n  };\n}\n\nexport function queryEditorSetFunctionNames(queryEditor, dbId) {\n  return function (dispatch) {\n    return SupersetClient.get({\n      endpoint: encodeURI(`/api/v1/database/${dbId}/function_names/`) }).\n\n    then(({ json }) =>\n    dispatch({\n      type: QUERY_EDITOR_SET_FUNCTION_NAMES,\n      queryEditor,\n      functionNames: json.function_names })).\n\n\n    catch(() =>\n    dispatch(\n    addDangerToast(t('An error occurred while fetching function names.'))));\n\n\n  };\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(RESET_STATE, \"RESET_STATE\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(ADD_QUERY_EDITOR, \"ADD_QUERY_EDITOR\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(UPDATE_QUERY_EDITOR, \"UPDATE_QUERY_EDITOR\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(QUERY_EDITOR_SAVED, \"QUERY_EDITOR_SAVED\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(CLONE_QUERY_TO_NEW_TAB, \"CLONE_QUERY_TO_NEW_TAB\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(REMOVE_QUERY_EDITOR, \"REMOVE_QUERY_EDITOR\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(MERGE_TABLE, \"MERGE_TABLE\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(REMOVE_TABLE, \"REMOVE_TABLE\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(END_QUERY, \"END_QUERY\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(REMOVE_QUERY, \"REMOVE_QUERY\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(EXPAND_TABLE, \"EXPAND_TABLE\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(COLLAPSE_TABLE, \"COLLAPSE_TABLE\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(QUERY_EDITOR_SETDB, \"QUERY_EDITOR_SETDB\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(QUERY_EDITOR_SET_SCHEMA, \"QUERY_EDITOR_SET_SCHEMA\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(QUERY_EDITOR_SET_SCHEMA_OPTIONS, \"QUERY_EDITOR_SET_SCHEMA_OPTIONS\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(QUERY_EDITOR_SET_TABLE_OPTIONS, \"QUERY_EDITOR_SET_TABLE_OPTIONS\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(QUERY_EDITOR_SET_TITLE, \"QUERY_EDITOR_SET_TITLE\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(QUERY_EDITOR_SET_AUTORUN, \"QUERY_EDITOR_SET_AUTORUN\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(QUERY_EDITOR_SET_SQL, \"QUERY_EDITOR_SET_SQL\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(QUERY_EDITOR_SET_QUERY_LIMIT, \"QUERY_EDITOR_SET_QUERY_LIMIT\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(QUERY_EDITOR_SET_TEMPLATE_PARAMS, \"QUERY_EDITOR_SET_TEMPLATE_PARAMS\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(QUERY_EDITOR_SET_SELECTED_TEXT, \"QUERY_EDITOR_SET_SELECTED_TEXT\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(QUERY_EDITOR_SET_FUNCTION_NAMES, \"QUERY_EDITOR_SET_FUNCTION_NAMES\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(QUERY_EDITOR_PERSIST_HEIGHT, \"QUERY_EDITOR_PERSIST_HEIGHT\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(QUERY_EDITOR_TOGGLE_LEFT_BAR, \"QUERY_EDITOR_TOGGLE_LEFT_BAR\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(MIGRATE_QUERY_EDITOR, \"MIGRATE_QUERY_EDITOR\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(MIGRATE_TAB_HISTORY, \"MIGRATE_TAB_HISTORY\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(MIGRATE_TABLE, \"MIGRATE_TABLE\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(MIGRATE_QUERY, \"MIGRATE_QUERY\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(SET_DATABASES, \"SET_DATABASES\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(SET_ACTIVE_QUERY_EDITOR, \"SET_ACTIVE_QUERY_EDITOR\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(LOAD_QUERY_EDITOR, \"LOAD_QUERY_EDITOR\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(SET_TABLES, \"SET_TABLES\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(SET_ACTIVE_SOUTHPANE_TAB, \"SET_ACTIVE_SOUTHPANE_TAB\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(REFRESH_QUERIES, \"REFRESH_QUERIES\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(SET_USER_OFFLINE, \"SET_USER_OFFLINE\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(RUN_QUERY, \"RUN_QUERY\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(START_QUERY, \"START_QUERY\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(STOP_QUERY, \"STOP_QUERY\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(REQUEST_QUERY_RESULTS, \"REQUEST_QUERY_RESULTS\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(QUERY_SUCCESS, \"QUERY_SUCCESS\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(QUERY_FAILED, \"QUERY_FAILED\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(CLEAR_QUERY_RESULTS, \"CLEAR_QUERY_RESULTS\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(REMOVE_DATA_PREVIEW, \"REMOVE_DATA_PREVIEW\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(CHANGE_DATA_PREVIEW_ID, \"CHANGE_DATA_PREVIEW_ID\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(START_QUERY_VALIDATION, \"START_QUERY_VALIDATION\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(QUERY_VALIDATION_RETURNED, \"QUERY_VALIDATION_RETURNED\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(QUERY_VALIDATION_FAILED, \"QUERY_VALIDATION_FAILED\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(COST_ESTIMATE_STARTED, \"COST_ESTIMATE_STARTED\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(COST_ESTIMATE_RETURNED, \"COST_ESTIMATE_RETURNED\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(COST_ESTIMATE_FAILED, \"COST_ESTIMATE_FAILED\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(CREATE_DATASOURCE_STARTED, \"CREATE_DATASOURCE_STARTED\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(CREATE_DATASOURCE_SUCCESS, \"CREATE_DATASOURCE_SUCCESS\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(CREATE_DATASOURCE_FAILED, \"CREATE_DATASOURCE_FAILED\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(addInfoToast, \"addInfoToast\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(addSuccessToast, \"addSuccessToast\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(addDangerToast, \"addDangerToast\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(addWarningToast, \"addWarningToast\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(CtasEnum, \"CtasEnum\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(ERR_MSG_CANT_LOAD_QUERY, \"ERR_MSG_CANT_LOAD_QUERY\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(queryClientMapping, \"queryClientMapping\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(queryServerMapping, \"queryServerMapping\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(fieldConverter, \"fieldConverter\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(convertQueryToServer, \"convertQueryToServer\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(convertQueryToClient, \"convertQueryToClient\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(resetState, \"resetState\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(startQueryValidation, \"startQueryValidation\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(queryValidationReturned, \"queryValidationReturned\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(queryValidationFailed, \"queryValidationFailed\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(updateQueryEditor, \"updateQueryEditor\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(scheduleQuery, \"scheduleQuery\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(estimateQueryCost, \"estimateQueryCost\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(startQuery, \"startQuery\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(querySuccess, \"querySuccess\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(queryFailed, \"queryFailed\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(stopQuery, \"stopQuery\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(clearQueryResults, \"clearQueryResults\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(removeDataPreview, \"removeDataPreview\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(requestQueryResults, \"requestQueryResults\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(fetchQueryResults, \"fetchQueryResults\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(runQuery, \"runQuery\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(reRunQuery, \"reRunQuery\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(validateQuery, \"validateQuery\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(postStopQuery, \"postStopQuery\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(setDatabases, \"setDatabases\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(migrateTable, \"migrateTable\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(migrateQuery, \"migrateQuery\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(migrateQueryEditorFromLocalStorage, \"migrateQueryEditorFromLocalStorage\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(addQueryEditor, \"addQueryEditor\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(cloneQueryToNewTab, \"cloneQueryToNewTab\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(setActiveQueryEditor, \"setActiveQueryEditor\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(loadQueryEditor, \"loadQueryEditor\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(setTables, \"setTables\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(switchQueryEditor, \"switchQueryEditor\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(setActiveSouthPaneTab, \"setActiveSouthPaneTab\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(toggleLeftBar, \"toggleLeftBar\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(removeQueryEditor, \"removeQueryEditor\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(removeQuery, \"removeQuery\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(queryEditorSetDb, \"queryEditorSetDb\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(queryEditorSetSchema, \"queryEditorSetSchema\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(queryEditorSetSchemaOptions, \"queryEditorSetSchemaOptions\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(queryEditorSetTableOptions, \"queryEditorSetTableOptions\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(queryEditorSetAutorun, \"queryEditorSetAutorun\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(queryEditorSetTitle, \"queryEditorSetTitle\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(saveQuery, \"saveQuery\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(updateSavedQuery, \"updateSavedQuery\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(queryEditorSetSql, \"queryEditorSetSql\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(queryEditorSetQueryLimit, \"queryEditorSetQueryLimit\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(queryEditorSetTemplateParams, \"queryEditorSetTemplateParams\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(queryEditorSetSelectedText, \"queryEditorSetSelectedText\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(mergeTable, \"mergeTable\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(getTableMetadata, \"getTableMetadata\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(getTableExtendedMetadata, \"getTableExtendedMetadata\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(addTable, \"addTable\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(changeDataPreviewId, \"changeDataPreviewId\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(reFetchQueryResults, \"reFetchQueryResults\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(expandTable, \"expandTable\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(collapseTable, \"collapseTable\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(removeTable, \"removeTable\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(refreshQueries, \"refreshQueries\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(setUserOffline, \"setUserOffline\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(persistEditorHeight, \"persistEditorHeight\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(popStoredQuery, \"popStoredQuery\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(popSavedQuery, \"popSavedQuery\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(popQuery, \"popQuery\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(popDatasourceQuery, \"popDatasourceQuery\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(createDatasourceStarted, \"createDatasourceStarted\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(createDatasourceSuccess, \"createDatasourceSuccess\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(createDatasourceFailed, \"createDatasourceFailed\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(createDatasource, \"createDatasource\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(createCtasDatasource, \"createCtasDatasource\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(queryEditorSetFunctionNames, \"queryEditorSetFunctionNames\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/actions/sqlLab.js"],"names":["shortid","JSONbig","t","SupersetClient","invert","mapKeys","isFeatureEnabled","FeatureFlag","now","addDangerToast","addDangerToastAction","addInfoToast","addInfoToastAction","addSuccessToast","addSuccessToastAction","addWarningToast","addWarningToastAction","getClientErrorObject","COMMON_ERR_MESSAGES","RESET_STATE","ADD_QUERY_EDITOR","UPDATE_QUERY_EDITOR","QUERY_EDITOR_SAVED","CLONE_QUERY_TO_NEW_TAB","REMOVE_QUERY_EDITOR","MERGE_TABLE","REMOVE_TABLE","END_QUERY","REMOVE_QUERY","EXPAND_TABLE","COLLAPSE_TABLE","QUERY_EDITOR_SETDB","QUERY_EDITOR_SET_SCHEMA","QUERY_EDITOR_SET_SCHEMA_OPTIONS","QUERY_EDITOR_SET_TABLE_OPTIONS","QUERY_EDITOR_SET_TITLE","QUERY_EDITOR_SET_AUTORUN","QUERY_EDITOR_SET_SQL","QUERY_EDITOR_SET_QUERY_LIMIT","QUERY_EDITOR_SET_TEMPLATE_PARAMS","QUERY_EDITOR_SET_SELECTED_TEXT","QUERY_EDITOR_SET_FUNCTION_NAMES","QUERY_EDITOR_PERSIST_HEIGHT","QUERY_EDITOR_TOGGLE_LEFT_BAR","MIGRATE_QUERY_EDITOR","MIGRATE_TAB_HISTORY","MIGRATE_TABLE","MIGRATE_QUERY","SET_DATABASES","SET_ACTIVE_QUERY_EDITOR","LOAD_QUERY_EDITOR","SET_TABLES","SET_ACTIVE_SOUTHPANE_TAB","REFRESH_QUERIES","SET_USER_OFFLINE","RUN_QUERY","START_QUERY","STOP_QUERY","REQUEST_QUERY_RESULTS","QUERY_SUCCESS","QUERY_FAILED","CLEAR_QUERY_RESULTS","REMOVE_DATA_PREVIEW","CHANGE_DATA_PREVIEW_ID","START_QUERY_VALIDATION","QUERY_VALIDATION_RETURNED","QUERY_VALIDATION_FAILED","COST_ESTIMATE_STARTED","COST_ESTIMATE_RETURNED","COST_ESTIMATE_FAILED","CREATE_DATASOURCE_STARTED","CREATE_DATASOURCE_SUCCESS","CREATE_DATASOURCE_FAILED","CtasEnum","TABLE","VIEW","ERR_MSG_CANT_LOAD_QUERY","queryClientMapping","id","db_id","client_id","label","queryServerMapping","fieldConverter","mapping","obj","value","key","convertQueryToServer","convertQueryToClient","resetState","type","startQueryValidation","query","Object","assign","generate","queryValidationReturned","results","queryValidationFailed","message","error","updateQueryEditor","alterations","scheduleQuery","dispatch","post","endpoint","postPayload","stringify","then","catch","estimateQueryCost","dbId","schema","sql","templateParams","Promise","all","JSON","parse","json","response","statusText","startQuery","progress","startDttm","state","runAsync","cached","querySuccess","sync","isDataPreview","SQLLAB_BACKEND_PERSISTENCE","put","encodeURI","sqlEditorId","latest_query_id","resolve","queryFailed","msg","link","errors","stopQuery","clearQueryResults","removeDataPreview","table","requestQueryResults","fetchQueryResults","displayLimit","get","resultsKey","parseMethod","text","bigIntJson","runQuery","database_id","sql_editor_id","tab","tmp_table_name","tempTable","select_as_cta","ctas","ctas_method","queryLimit","expand_data","body","headers","includes","SESSION_TIMED_OUT","reRunQuery","validateQuery","validate_only","window","location","search","postStopQuery","setDatabases","databases","migrateTable","queryEditorId","newTable","oldTable","migrateQuery","queryId","migrateQueryEditorFromLocalStorage","queryEditor","tables","queries","newQueryEditor","toString","oldQueryEditor","oldId","newId","map","addQueryEditor","cloneQueryToNewTab","autorun","getState","queryEditors","tabHistory","sqlLab","sourceQueryEditor","find","qe","length","title","maxRow","setActiveQueryEditor","status","loadQueryEditor","setTables","tableSchemas","filter","tableSchema","description","columns","selectStar","primaryKey","foreignKeys","indexes","dataPreviewQueryId","tab_state_id","name","expanded","isMetadataLoading","isExtraMetadataLoading","switchQueryEditor","loaded","loadedQueryEditor","selectedText","latestQueryId","latest_query","template_params","query_limit","validationResult","completed","hideLeftBar","hide_left_bar","table_schemas","setActiveSouthPaneTab","tabId","toggleLeftBar","removeQueryEditor","delete","removeQuery","queryEditorSetDb","queryEditorSetSchema","queryEditorSetSchemaOptions","options","queryEditorSetTableOptions","queryEditorSetAutorun","queryEditorSetTitle","saveQuery","result","item","updateSavedQuery","remoteId","queryEditorSetSql","queryEditorSetQueryLimit","queryEditorSetTemplateParams","queryEditorSetSelectedText","mergeTable","getTableMetadata","encodeURIComponent","dataPreviewQuery","tableName","getTableExtendedMetadata","addTable","schemaName","resultJson","changeDataPreviewId","oldQueryId","newQuery","reFetchQueryResults","expandTable","collapseTable","removeTable","refreshQueries","alteredQueries","setUserOffline","offline","persistEditorHeight","northPercent","southPercent","popStoredQuery","urlId","parseInt","popSavedQuery","saveQueryId","queryEditorProps","popQuery","queryData","database","tab_name","popDatasourceQuery","datasourceKey","undefined","select_star","createDatasourceStarted","createDatasourceSuccess","data","datasource","table_id","createDatasourceFailed","err","createDatasource","vizOptions","reject","createCtasDatasource","errorMsg","Error","queryEditorSetFunctionNames","functionNames","function_names"],"mappings":"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","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport shortid from 'shortid';\nimport JSONbig from 'json-bigint';\nimport { t, SupersetClient } from '@superset-ui/core';\nimport invert from 'lodash/invert';\nimport mapKeys from 'lodash/mapKeys';\nimport { isFeatureEnabled, FeatureFlag } from 'src/featureFlags';\n\nimport { now } from 'src/modules/dates';\nimport {\n  addDangerToast as addDangerToastAction,\n  addInfoToast as addInfoToastAction,\n  addSuccessToast as addSuccessToastAction,\n  addWarningToast as addWarningToastAction,\n} from 'src/components/MessageToasts/actions';\nimport { getClientErrorObject } from 'src/utils/getClientErrorObject';\nimport COMMON_ERR_MESSAGES from 'src/utils/errorMessages';\n\nexport const RESET_STATE = 'RESET_STATE';\nexport const ADD_QUERY_EDITOR = 'ADD_QUERY_EDITOR';\nexport const UPDATE_QUERY_EDITOR = 'UPDATE_QUERY_EDITOR';\nexport const QUERY_EDITOR_SAVED = 'QUERY_EDITOR_SAVED';\nexport const CLONE_QUERY_TO_NEW_TAB = 'CLONE_QUERY_TO_NEW_TAB';\nexport const REMOVE_QUERY_EDITOR = 'REMOVE_QUERY_EDITOR';\nexport const MERGE_TABLE = 'MERGE_TABLE';\nexport const REMOVE_TABLE = 'REMOVE_TABLE';\nexport const END_QUERY = 'END_QUERY';\nexport const REMOVE_QUERY = 'REMOVE_QUERY';\nexport const EXPAND_TABLE = 'EXPAND_TABLE';\nexport const COLLAPSE_TABLE = 'COLLAPSE_TABLE';\nexport const QUERY_EDITOR_SETDB = 'QUERY_EDITOR_SETDB';\nexport const QUERY_EDITOR_SET_SCHEMA = 'QUERY_EDITOR_SET_SCHEMA';\nexport const QUERY_EDITOR_SET_SCHEMA_OPTIONS =\n  'QUERY_EDITOR_SET_SCHEMA_OPTIONS';\nexport const QUERY_EDITOR_SET_TABLE_OPTIONS = 'QUERY_EDITOR_SET_TABLE_OPTIONS';\nexport const QUERY_EDITOR_SET_TITLE = 'QUERY_EDITOR_SET_TITLE';\nexport const QUERY_EDITOR_SET_AUTORUN = 'QUERY_EDITOR_SET_AUTORUN';\nexport const QUERY_EDITOR_SET_SQL = 'QUERY_EDITOR_SET_SQL';\nexport const QUERY_EDITOR_SET_QUERY_LIMIT = 'QUERY_EDITOR_SET_QUERY_LIMIT';\nexport const QUERY_EDITOR_SET_TEMPLATE_PARAMS =\n  'QUERY_EDITOR_SET_TEMPLATE_PARAMS';\nexport const QUERY_EDITOR_SET_SELECTED_TEXT = 'QUERY_EDITOR_SET_SELECTED_TEXT';\nexport const QUERY_EDITOR_SET_FUNCTION_NAMES =\n  'QUERY_EDITOR_SET_FUNCTION_NAMES';\nexport const QUERY_EDITOR_PERSIST_HEIGHT = 'QUERY_EDITOR_PERSIST_HEIGHT';\nexport const QUERY_EDITOR_TOGGLE_LEFT_BAR = 'QUERY_EDITOR_TOGGLE_LEFT_BAR';\nexport const MIGRATE_QUERY_EDITOR = 'MIGRATE_QUERY_EDITOR';\nexport const MIGRATE_TAB_HISTORY = 'MIGRATE_TAB_HISTORY';\nexport const MIGRATE_TABLE = 'MIGRATE_TABLE';\nexport const MIGRATE_QUERY = 'MIGRATE_QUERY';\n\nexport const SET_DATABASES = 'SET_DATABASES';\nexport const SET_ACTIVE_QUERY_EDITOR = 'SET_ACTIVE_QUERY_EDITOR';\nexport const LOAD_QUERY_EDITOR = 'LOAD_QUERY_EDITOR';\nexport const SET_TABLES = 'SET_TABLES';\nexport const SET_ACTIVE_SOUTHPANE_TAB = 'SET_ACTIVE_SOUTHPANE_TAB';\nexport const REFRESH_QUERIES = 'REFRESH_QUERIES';\nexport const SET_USER_OFFLINE = 'SET_USER_OFFLINE';\nexport const RUN_QUERY = 'RUN_QUERY';\nexport const START_QUERY = 'START_QUERY';\nexport const STOP_QUERY = 'STOP_QUERY';\nexport const REQUEST_QUERY_RESULTS = 'REQUEST_QUERY_RESULTS';\nexport const QUERY_SUCCESS = 'QUERY_SUCCESS';\nexport const QUERY_FAILED = 'QUERY_FAILED';\nexport const CLEAR_QUERY_RESULTS = 'CLEAR_QUERY_RESULTS';\nexport const REMOVE_DATA_PREVIEW = 'REMOVE_DATA_PREVIEW';\nexport const CHANGE_DATA_PREVIEW_ID = 'CHANGE_DATA_PREVIEW_ID';\n\nexport const START_QUERY_VALIDATION = 'START_QUERY_VALIDATION';\nexport const QUERY_VALIDATION_RETURNED = 'QUERY_VALIDATION_RETURNED';\nexport const QUERY_VALIDATION_FAILED = 'QUERY_VALIDATION_FAILED';\nexport const COST_ESTIMATE_STARTED = 'COST_ESTIMATE_STARTED';\nexport const COST_ESTIMATE_RETURNED = 'COST_ESTIMATE_RETURNED';\nexport const COST_ESTIMATE_FAILED = 'COST_ESTIMATE_FAILED';\n\nexport const CREATE_DATASOURCE_STARTED = 'CREATE_DATASOURCE_STARTED';\nexport const CREATE_DATASOURCE_SUCCESS = 'CREATE_DATASOURCE_SUCCESS';\nexport const CREATE_DATASOURCE_FAILED = 'CREATE_DATASOURCE_FAILED';\n\nexport const addInfoToast = addInfoToastAction;\nexport const addSuccessToast = addSuccessToastAction;\nexport const addDangerToast = addDangerToastAction;\nexport const addWarningToast = addWarningToastAction;\n\nexport const CtasEnum = {\n  TABLE: 'TABLE',\n  VIEW: 'VIEW',\n};\nconst ERR_MSG_CANT_LOAD_QUERY = t(\"The query couldn't be loaded\");\n\n// a map of SavedQuery field names to the different names used client-side,\n// because for now making the names consistent is too complicated\n// so it might as well only happen in one place\nconst queryClientMapping = {\n  id: 'remoteId',\n  db_id: 'dbId',\n  client_id: 'id',\n  label: 'title',\n};\nconst queryServerMapping = invert(queryClientMapping);\n\n// uses a mapping like those above to convert object key names to another style\nconst fieldConverter = mapping => obj =>\n  mapKeys(obj, (value, key) => (key in mapping ? mapping[key] : key));\n\nconst convertQueryToServer = fieldConverter(queryServerMapping);\nconst convertQueryToClient = fieldConverter(queryClientMapping);\n\nexport function resetState() {\n  return { type: RESET_STATE };\n}\n\nexport function startQueryValidation(query) {\n  Object.assign(query, {\n    id: query.id ? query.id : shortid.generate(),\n  });\n  return { type: START_QUERY_VALIDATION, query };\n}\n\nexport function queryValidationReturned(query, results) {\n  return { type: QUERY_VALIDATION_RETURNED, query, results };\n}\n\nexport function queryValidationFailed(query, message, error) {\n  return { type: QUERY_VALIDATION_FAILED, query, message, error };\n}\n\nexport function updateQueryEditor(alterations) {\n  return { type: UPDATE_QUERY_EDITOR, alterations };\n}\n\nexport function scheduleQuery(query) {\n  return dispatch =>\n    SupersetClient.post({\n      endpoint: '/savedqueryviewapi/api/create',\n      postPayload: query,\n      stringify: false,\n    })\n      .then(() =>\n        dispatch(\n          addSuccessToast(\n            t(\n              'Your query has been scheduled. To see details of your query, navigate to Saved queries',\n            ),\n          ),\n        ),\n      )\n      .catch(() =>\n        dispatch(addDangerToast(t('Your query could not be scheduled'))),\n      );\n}\n\nexport function estimateQueryCost(query) {\n  const { dbId, schema, sql, templateParams } = query;\n  const endpoint =\n    schema === null\n      ? `/superset/estimate_query_cost/${dbId}/`\n      : `/superset/estimate_query_cost/${dbId}/${schema}/`;\n  return dispatch =>\n    Promise.all([\n      dispatch({ type: COST_ESTIMATE_STARTED, query }),\n      SupersetClient.post({\n        endpoint,\n        postPayload: {\n          sql,\n          templateParams: JSON.parse(templateParams || '{}'),\n        },\n      })\n        .then(({ json }) =>\n          dispatch({ type: COST_ESTIMATE_RETURNED, query, json }),\n        )\n        .catch(response =>\n          getClientErrorObject(response).then(error => {\n            const message =\n              error.error ||\n              error.statusText ||\n              t('Failed at retrieving results');\n            return dispatch({\n              type: COST_ESTIMATE_FAILED,\n              query,\n              error: message,\n            });\n          }),\n        ),\n    ]);\n}\n\nexport function startQuery(query) {\n  Object.assign(query, {\n    id: query.id ? query.id : shortid.generate(),\n    progress: 0,\n    startDttm: now(),\n    state: query.runAsync ? 'pending' : 'running',\n    cached: false,\n  });\n  return { type: START_QUERY, query };\n}\n\nexport function querySuccess(query, results) {\n  return function (dispatch) {\n    const sync =\n      !query.isDataPreview &&\n      isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE)\n        ? SupersetClient.put({\n            endpoint: encodeURI(`/tabstateview/${results.query.sqlEditorId}`),\n            postPayload: { latest_query_id: query.id },\n          })\n        : Promise.resolve();\n\n    return sync\n      .then(() => dispatch({ type: QUERY_SUCCESS, query, results }))\n      .catch(() =>\n        dispatch(\n          addDangerToast(\n            t(\n              'An error occurred while storing the latest query id in the backend. ' +\n                'Please contact your administrator if this problem persists.',\n            ),\n          ),\n        ),\n      );\n  };\n}\n\nexport function queryFailed(query, msg, link, errors) {\n  return function (dispatch) {\n    const sync =\n      !query.isDataPreview &&\n      isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE)\n        ? SupersetClient.put({\n            endpoint: encodeURI(`/tabstateview/${query.sqlEditorId}`),\n            postPayload: { latest_query_id: query.id },\n          })\n        : Promise.resolve();\n\n    return (\n      sync\n        .catch(() =>\n          dispatch(\n            addDangerToast(\n              t(\n                'An error occurred while storing the latest query id in the backend. ' +\n                  'Please contact your administrator if this problem persists.',\n              ),\n            ),\n          ),\n        )\n        // We should always show the error message, even if we couldn't sync the\n        // state to the backend\n        .then(() => dispatch({ type: QUERY_FAILED, query, msg, link, errors }))\n    );\n  };\n}\n\nexport function stopQuery(query) {\n  return { type: STOP_QUERY, query };\n}\n\nexport function clearQueryResults(query) {\n  return { type: CLEAR_QUERY_RESULTS, query };\n}\n\nexport function removeDataPreview(table) {\n  return { type: REMOVE_DATA_PREVIEW, table };\n}\n\nexport function requestQueryResults(query) {\n  return { type: REQUEST_QUERY_RESULTS, query };\n}\n\nexport function fetchQueryResults(query, displayLimit) {\n  return function (dispatch) {\n    dispatch(requestQueryResults(query));\n\n    return SupersetClient.get({\n      endpoint: `/superset/results/${query.resultsKey}/?rows=${displayLimit}`,\n      parseMethod: 'text',\n    })\n      .then(({ text = '{}' }) => {\n        const bigIntJson = JSONbig.parse(text);\n        return dispatch(querySuccess(query, bigIntJson));\n      })\n      .catch(response =>\n        getClientErrorObject(response).then(error => {\n          const message =\n            error.error ||\n            error.statusText ||\n            t('Failed at retrieving results');\n\n          return dispatch(\n            queryFailed(query, message, error.link, error.errors),\n          );\n        }),\n      );\n  };\n}\n\nexport function runQuery(query) {\n  return function (dispatch) {\n    dispatch(startQuery(query));\n    const postPayload = {\n      client_id: query.id,\n      database_id: query.dbId,\n      json: true,\n      runAsync: query.runAsync,\n      schema: query.schema,\n      sql: query.sql,\n      sql_editor_id: query.sqlEditorId,\n      tab: query.tab,\n      tmp_table_name: query.tempTable,\n      select_as_cta: query.ctas,\n      ctas_method: query.ctas_method,\n      templateParams: query.templateParams,\n      queryLimit: query.queryLimit,\n      expand_data: true,\n    };\n\n    return SupersetClient.post({\n      endpoint: '/superset/sql_json/',\n      body: JSON.stringify(postPayload),\n      headers: { 'Content-Type': 'application/json' },\n      parseMethod: 'text',\n    })\n      .then(({ text = '{}' }) => {\n        if (!query.runAsync) {\n          const bigIntJson = JSONbig.parse(text);\n          dispatch(querySuccess(query, bigIntJson));\n        }\n      })\n      .catch(response =>\n        getClientErrorObject(response).then(error => {\n          let message = error.error || error.statusText || t('Unknown error');\n          if (message.includes('CSRF token')) {\n            message = t(COMMON_ERR_MESSAGES.SESSION_TIMED_OUT);\n          }\n          dispatch(queryFailed(query, message, error.link, error.errors));\n        }),\n      );\n  };\n}\n\nexport function reRunQuery(query) {\n  // run Query with a new id\n  return function (dispatch) {\n    dispatch(runQuery({ ...query, id: shortid.generate() }));\n  };\n}\n\nexport function validateQuery(query) {\n  return function (dispatch) {\n    dispatch(startQueryValidation(query));\n\n    const postPayload = {\n      client_id: query.id,\n      database_id: query.dbId,\n      json: true,\n      schema: query.schema,\n      sql: query.sql,\n      sql_editor_id: query.sqlEditorId,\n      templateParams: query.templateParams,\n      validate_only: true,\n    };\n\n    return SupersetClient.post({\n      endpoint: `/superset/validate_sql_json/${window.location.search}`,\n      postPayload,\n      stringify: false,\n    })\n      .then(({ json }) => dispatch(queryValidationReturned(query, json)))\n      .catch(response =>\n        getClientErrorObject(response).then(error => {\n          let message = error.error || error.statusText || t('Unknown error');\n          if (message.includes('CSRF token')) {\n            message = t(COMMON_ERR_MESSAGES.SESSION_TIMED_OUT);\n          }\n          dispatch(queryValidationFailed(query, message, error));\n        }),\n      );\n  };\n}\n\nexport function postStopQuery(query) {\n  return function (dispatch) {\n    return SupersetClient.post({\n      endpoint: '/superset/stop_query/',\n      postPayload: { client_id: query.id },\n      stringify: false,\n    })\n      .then(() => dispatch(stopQuery(query)))\n      .then(() => dispatch(addSuccessToast(t('Query was stopped.'))))\n      .catch(() =>\n        dispatch(\n          addDangerToast(`${t('Failed at stopping query. ')}'${query.id}'`),\n        ),\n      );\n  };\n}\n\nexport function setDatabases(databases) {\n  return { type: SET_DATABASES, databases };\n}\n\nfunction migrateTable(table, queryEditorId, dispatch) {\n  return SupersetClient.post({\n    endpoint: encodeURI('/tableschemaview/'),\n    postPayload: { table: { ...table, queryEditorId } },\n  })\n    .then(({ json }) => {\n      const newTable = {\n        ...table,\n        id: json.id,\n        queryEditorId,\n      };\n      return dispatch({ type: MIGRATE_TABLE, oldTable: table, newTable });\n    })\n    .catch(() =>\n      dispatch(\n        addWarningToast(\n          t(\n            'Unable to migrate table schema state to backend. Superset will retry ' +\n              'later. Please contact your administrator if this problem persists.',\n          ),\n        ),\n      ),\n    );\n}\n\nfunction migrateQuery(queryId, queryEditorId, dispatch) {\n  return SupersetClient.post({\n    endpoint: encodeURI(`/tabstateview/${queryEditorId}/migrate_query`),\n    postPayload: { queryId },\n  })\n    .then(() => dispatch({ type: MIGRATE_QUERY, queryId, queryEditorId }))\n    .catch(() =>\n      dispatch(\n        addWarningToast(\n          t(\n            'Unable to migrate query state to backend. Superset will retry later. ' +\n              'Please contact your administrator if this problem persists.',\n          ),\n        ),\n      ),\n    );\n}\n\nexport function migrateQueryEditorFromLocalStorage(\n  queryEditor,\n  tables,\n  queries,\n) {\n  return function (dispatch) {\n    return SupersetClient.post({\n      endpoint: '/tabstateview/',\n      postPayload: { queryEditor },\n    })\n      .then(({ json }) => {\n        const newQueryEditor = {\n          ...queryEditor,\n          id: json.id.toString(),\n        };\n        dispatch({\n          type: MIGRATE_QUERY_EDITOR,\n          oldQueryEditor: queryEditor,\n          newQueryEditor,\n        });\n        dispatch({\n          type: MIGRATE_TAB_HISTORY,\n          oldId: queryEditor.id,\n          newId: newQueryEditor.id,\n        });\n        return Promise.all([\n          ...tables.map(table =>\n            migrateTable(table, newQueryEditor.id, dispatch),\n          ),\n          ...queries.map(query =>\n            migrateQuery(query.id, newQueryEditor.id, dispatch),\n          ),\n        ]);\n      })\n      .catch(() =>\n        dispatch(\n          addWarningToast(\n            t(\n              'Unable to migrate query editor state to backend. Superset will retry ' +\n                'later. Please contact your administrator if this problem persists.',\n            ),\n          ),\n        ),\n      );\n  };\n}\n\nexport function addQueryEditor(queryEditor) {\n  return function (dispatch) {\n    const sync = isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE)\n      ? SupersetClient.post({\n          endpoint: '/tabstateview/',\n          postPayload: { queryEditor },\n        })\n      : Promise.resolve({ json: { id: shortid.generate() } });\n\n    return sync\n      .then(({ json }) => {\n        const newQueryEditor = {\n          ...queryEditor,\n          id: json.id.toString(),\n        };\n        return dispatch({\n          type: ADD_QUERY_EDITOR,\n          queryEditor: newQueryEditor,\n        });\n      })\n      .catch(() =>\n        dispatch(\n          addDangerToast(\n            t(\n              'Unable to add a new tab to the backend. Please contact your administrator.',\n            ),\n          ),\n        ),\n      );\n  };\n}\n\nexport function cloneQueryToNewTab(query, autorun) {\n  return function (dispatch, getState) {\n    const state = getState();\n    const { queryEditors, tabHistory } = state.sqlLab;\n    const sourceQueryEditor = queryEditors.find(\n      qe => qe.id === tabHistory[tabHistory.length - 1],\n    );\n    const queryEditor = {\n      title: t('Copy of %s', sourceQueryEditor.title),\n      dbId: query.dbId ? query.dbId : null,\n      schema: query.schema ? query.schema : null,\n      autorun,\n      sql: query.sql,\n      queryLimit: sourceQueryEditor.queryLimit,\n      maxRow: sourceQueryEditor.maxRow,\n      templateParams: sourceQueryEditor.templateParams,\n    };\n    return dispatch(addQueryEditor(queryEditor));\n  };\n}\n\nexport function setActiveQueryEditor(queryEditor) {\n  return function (dispatch) {\n    const sync = isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE)\n      ? SupersetClient.post({\n          endpoint: encodeURI(`/tabstateview/${queryEditor.id}/activate`),\n        })\n      : Promise.resolve();\n\n    return sync\n      .then(() => dispatch({ type: SET_ACTIVE_QUERY_EDITOR, queryEditor }))\n      .catch(response => {\n        if (response.status !== 404) {\n          return dispatch(\n            addDangerToast(\n              t(\n                'An error occurred while setting the active tab. Please contact ' +\n                  'your administrator.',\n              ),\n            ),\n          );\n        }\n        return dispatch({ type: REMOVE_QUERY_EDITOR, queryEditor });\n      });\n  };\n}\n\nexport function loadQueryEditor(queryEditor) {\n  return { type: LOAD_QUERY_EDITOR, queryEditor };\n}\n\nexport function setTables(tableSchemas) {\n  const tables = tableSchemas\n    .filter(tableSchema => tableSchema.description !== null)\n    .map(tableSchema => {\n      const {\n        columns,\n        selectStar,\n        primaryKey,\n        foreignKeys,\n        indexes,\n        dataPreviewQueryId,\n      } = tableSchema.description;\n      return {\n        dbId: tableSchema.database_id,\n        queryEditorId: tableSchema.tab_state_id.toString(),\n        schema: tableSchema.schema,\n        name: tableSchema.table,\n        expanded: tableSchema.expanded,\n        id: tableSchema.id,\n        dataPreviewQueryId,\n        columns,\n        selectStar,\n        primaryKey,\n        foreignKeys,\n        indexes,\n        isMetadataLoading: false,\n        isExtraMetadataLoading: false,\n      };\n    });\n  return { type: SET_TABLES, tables };\n}\n\nexport function switchQueryEditor(queryEditor, displayLimit) {\n  return function (dispatch) {\n    if (\n      isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE) &&\n      !queryEditor.loaded\n    ) {\n      SupersetClient.get({\n        endpoint: encodeURI(`/tabstateview/${queryEditor.id}`),\n      })\n        .then(({ json }) => {\n          const loadedQueryEditor = {\n            id: json.id.toString(),\n            loaded: true,\n            title: json.label,\n            sql: json.sql,\n            selectedText: null,\n            latestQueryId: json.latest_query ? json.latest_query.id : null,\n            autorun: json.autorun,\n            dbId: json.database_id,\n            templateParams: json.template_params,\n            schema: json.schema,\n            queryLimit: json.query_limit,\n            validationResult: {\n              id: null,\n              errors: [],\n              completed: false,\n            },\n            hideLeftBar: json.hide_left_bar,\n          };\n          dispatch(loadQueryEditor(loadedQueryEditor));\n          dispatch(setTables(json.table_schemas || []));\n          dispatch(setActiveQueryEditor(loadedQueryEditor));\n          if (json.latest_query && json.latest_query.resultsKey) {\n            dispatch(fetchQueryResults(json.latest_query, displayLimit));\n          }\n        })\n        .catch(response => {\n          if (response.status !== 404) {\n            return dispatch(\n              addDangerToast(t('An error occurred while fetching tab state')),\n            );\n          }\n          return dispatch({ type: REMOVE_QUERY_EDITOR, queryEditor });\n        });\n    } else {\n      dispatch(setActiveQueryEditor(queryEditor));\n    }\n  };\n}\n\nexport function setActiveSouthPaneTab(tabId) {\n  return { type: SET_ACTIVE_SOUTHPANE_TAB, tabId };\n}\n\nexport function toggleLeftBar(queryEditor) {\n  const hideLeftBar = !queryEditor.hideLeftBar;\n  return function (dispatch) {\n    const sync = isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE)\n      ? SupersetClient.put({\n          endpoint: encodeURI(`/tabstateview/${queryEditor.id}`),\n          postPayload: { hide_left_bar: hideLeftBar },\n        })\n      : Promise.resolve();\n\n    return sync\n      .then(() =>\n        dispatch({\n          type: QUERY_EDITOR_TOGGLE_LEFT_BAR,\n          queryEditor,\n          hideLeftBar,\n        }),\n      )\n      .catch(() =>\n        dispatch(\n          addDangerToast(\n            t(\n              'An error occurred while hiding the left bar. Please contact your administrator.',\n            ),\n          ),\n        ),\n      );\n  };\n}\n\nexport function removeQueryEditor(queryEditor) {\n  return function (dispatch) {\n    const sync = isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE)\n      ? SupersetClient.delete({\n          endpoint: encodeURI(`/tabstateview/${queryEditor.id}`),\n        })\n      : Promise.resolve();\n\n    return sync\n      .then(() => dispatch({ type: REMOVE_QUERY_EDITOR, queryEditor }))\n      .catch(() =>\n        dispatch(\n          addDangerToast(\n            t(\n              'An error occurred while removing tab. Please contact your administrator.',\n            ),\n          ),\n        ),\n      );\n  };\n}\n\nexport function removeQuery(query) {\n  return function (dispatch) {\n    const sync = isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE)\n      ? SupersetClient.delete({\n          endpoint: encodeURI(\n            `/tabstateview/${query.sqlEditorId}/query/${query.id}`,\n          ),\n        })\n      : Promise.resolve();\n\n    return sync\n      .then(() => dispatch({ type: REMOVE_QUERY, query }))\n      .catch(() =>\n        dispatch(\n          addDangerToast(\n            t(\n              'An error occurred while removing query. Please contact your administrator.',\n            ),\n          ),\n        ),\n      );\n  };\n}\n\nexport function queryEditorSetDb(queryEditor, dbId) {\n  return function (dispatch) {\n    const sync = isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE)\n      ? SupersetClient.put({\n          endpoint: encodeURI(`/tabstateview/${queryEditor.id}`),\n          postPayload: { database_id: dbId },\n        })\n      : Promise.resolve();\n\n    return sync\n      .then(() => dispatch({ type: QUERY_EDITOR_SETDB, queryEditor, dbId }))\n      .catch(() =>\n        dispatch(\n          addDangerToast(\n            t(\n              'An error occurred while setting the tab database ID. Please contact your administrator.',\n            ),\n          ),\n        ),\n      );\n  };\n}\n\nexport function queryEditorSetSchema(queryEditor, schema) {\n  return function (dispatch) {\n    const sync = isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE)\n      ? SupersetClient.put({\n          endpoint: encodeURI(`/tabstateview/${queryEditor.id}`),\n          postPayload: { schema },\n        })\n      : Promise.resolve();\n\n    return sync\n      .then(() =>\n        dispatch({ type: QUERY_EDITOR_SET_SCHEMA, queryEditor, schema }),\n      )\n      .catch(() =>\n        dispatch(\n          addDangerToast(\n            t(\n              'An error occurred while setting the tab schema. Please contact your administrator.',\n            ),\n          ),\n        ),\n      );\n  };\n}\n\nexport function queryEditorSetSchemaOptions(queryEditor, options) {\n  return { type: QUERY_EDITOR_SET_SCHEMA_OPTIONS, queryEditor, options };\n}\n\nexport function queryEditorSetTableOptions(queryEditor, options) {\n  return { type: QUERY_EDITOR_SET_TABLE_OPTIONS, queryEditor, options };\n}\n\nexport function queryEditorSetAutorun(queryEditor, autorun) {\n  return function (dispatch) {\n    const sync = isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE)\n      ? SupersetClient.put({\n          endpoint: encodeURI(`/tabstateview/${queryEditor.id}`),\n          postPayload: { autorun },\n        })\n      : Promise.resolve();\n\n    return sync\n      .then(() =>\n        dispatch({ type: QUERY_EDITOR_SET_AUTORUN, queryEditor, autorun }),\n      )\n      .catch(() =>\n        dispatch(\n          addDangerToast(\n            t(\n              'An error occurred while setting the tab autorun. Please contact your administrator.',\n            ),\n          ),\n        ),\n      );\n  };\n}\n\nexport function queryEditorSetTitle(queryEditor, title) {\n  return function (dispatch) {\n    const sync = isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE)\n      ? SupersetClient.put({\n          endpoint: encodeURI(`/tabstateview/${queryEditor.id}`),\n          postPayload: { label: title },\n        })\n      : Promise.resolve();\n\n    return sync\n      .then(() =>\n        dispatch({ type: QUERY_EDITOR_SET_TITLE, queryEditor, title }),\n      )\n      .catch(() =>\n        dispatch(\n          addDangerToast(\n            t(\n              'An error occurred while setting the tab title. Please contact your administrator.',\n            ),\n          ),\n        ),\n      );\n  };\n}\n\nexport function saveQuery(query) {\n  return dispatch =>\n    SupersetClient.post({\n      endpoint: '/savedqueryviewapi/api/create',\n      postPayload: convertQueryToServer(query),\n      stringify: false,\n    })\n      .then(result => {\n        dispatch({\n          type: QUERY_EDITOR_SAVED,\n          query,\n          result: convertQueryToClient(result.json.item),\n        });\n        dispatch(addSuccessToast(t('Your query was saved')));\n        dispatch(queryEditorSetTitle(query, query.title));\n      })\n      .catch(() =>\n        dispatch(addDangerToast(t('Your query could not be saved'))),\n      );\n}\n\nexport function updateSavedQuery(query) {\n  return dispatch =>\n    SupersetClient.put({\n      endpoint: `/savedqueryviewapi/api/update/${query.remoteId}`,\n      postPayload: convertQueryToServer(query),\n      stringify: false,\n    })\n      .then(() => {\n        dispatch(addSuccessToast(t('Your query was updated')));\n        dispatch(queryEditorSetTitle(query, query.title));\n      })\n      .catch(() =>\n        dispatch(addDangerToast(t('Your query could not be updated'))),\n      )\n      .then(() => dispatch(updateQueryEditor(query)));\n}\n\nexport function queryEditorSetSql(queryEditor, sql) {\n  return function (dispatch) {\n    // saved query and set tab state use this action\n    dispatch({ type: QUERY_EDITOR_SET_SQL, queryEditor, sql });\n    if (isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE)) {\n      return SupersetClient.put({\n        endpoint: encodeURI(`/tabstateview/${queryEditor.id}`),\n        postPayload: { sql, latest_query_id: queryEditor.latestQueryId },\n      }).catch(() =>\n        dispatch(\n          addDangerToast(\n            t(\n              'An error occurred while storing your query in the backend. To ' +\n                'avoid losing your changes, please save your query using the ' +\n                '\"Save Query\" button.',\n            ),\n          ),\n        ),\n      );\n    }\n    return Promise.resolve();\n  };\n}\n\nexport function queryEditorSetQueryLimit(queryEditor, queryLimit) {\n  return function (dispatch) {\n    const sync = isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE)\n      ? SupersetClient.put({\n          endpoint: encodeURI(`/tabstateview/${queryEditor.id}`),\n          postPayload: { query_limit: queryLimit },\n        })\n      : Promise.resolve();\n\n    return sync\n      .then(() =>\n        dispatch({\n          type: QUERY_EDITOR_SET_QUERY_LIMIT,\n          queryEditor,\n          queryLimit,\n        }),\n      )\n      .catch(() =>\n        dispatch(\n          addDangerToast(\n            t(\n              'An error occurred while setting the tab title. Please contact your administrator.',\n            ),\n          ),\n        ),\n      );\n  };\n}\n\nexport function queryEditorSetTemplateParams(queryEditor, templateParams) {\n  return function (dispatch) {\n    dispatch({\n      type: QUERY_EDITOR_SET_TEMPLATE_PARAMS,\n      queryEditor,\n      templateParams,\n    });\n    const sync = isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE)\n      ? SupersetClient.put({\n          endpoint: encodeURI(`/tabstateview/${queryEditor.id}`),\n          postPayload: { template_params: templateParams },\n        })\n      : Promise.resolve();\n\n    return sync.catch(() =>\n      dispatch(\n        addDangerToast(\n          t(\n            'An error occurred while setting the tab template parameters. ' +\n              'Please contact your administrator.',\n          ),\n        ),\n      ),\n    );\n  };\n}\n\nexport function queryEditorSetSelectedText(queryEditor, sql) {\n  return { type: QUERY_EDITOR_SET_SELECTED_TEXT, queryEditor, sql };\n}\n\nexport function mergeTable(table, query) {\n  return { type: MERGE_TABLE, table, query };\n}\n\nfunction getTableMetadata(table, query, dispatch) {\n  return SupersetClient.get({\n    endpoint: encodeURI(\n      `/api/v1/database/${query.dbId}/table/${encodeURIComponent(\n        table.name,\n      )}/${encodeURIComponent(table.schema)}/`,\n    ),\n  })\n    .then(({ json }) => {\n      const dataPreviewQuery = {\n        id: shortid.generate(),\n        dbId: query.dbId,\n        sql: json.selectStar,\n        tableName: table.name,\n        sqlEditorId: null,\n        tab: '',\n        runAsync: false,\n        ctas: false,\n        isDataPreview: true,\n      };\n      const newTable = {\n        ...table,\n        ...json,\n        expanded: true,\n        isMetadataLoading: false,\n        dataPreviewQueryId: dataPreviewQuery.id,\n      };\n      Promise.all([\n        dispatch(mergeTable(newTable, dataPreviewQuery)), // Merge table to tables in state\n        dispatch(runQuery(dataPreviewQuery)), // Run query to get preview data for table\n      ]);\n      return newTable;\n    })\n    .catch(() =>\n      Promise.all([\n        dispatch(\n          mergeTable({\n            ...table,\n            isMetadataLoading: false,\n          }),\n        ),\n        dispatch(\n          addDangerToast(t('An error occurred while fetching table metadata')),\n        ),\n      ]),\n    );\n}\n\nfunction getTableExtendedMetadata(table, query, dispatch) {\n  return SupersetClient.get({\n    endpoint: encodeURI(\n      `/superset/extra_table_metadata/${query.dbId}/` +\n        `${encodeURIComponent(table.name)}/${encodeURIComponent(\n          table.schema,\n        )}/`,\n    ),\n  })\n    .then(({ json }) => {\n      dispatch(\n        mergeTable({ ...table, ...json, isExtraMetadataLoading: false }),\n      );\n      return json;\n    })\n    .catch(() =>\n      Promise.all([\n        dispatch(mergeTable({ ...table, isExtraMetadataLoading: false })),\n        dispatch(\n          addDangerToast(t('An error occurred while fetching table metadata')),\n        ),\n      ]),\n    );\n}\n\nexport function addTable(query, tableName, schemaName) {\n  return function (dispatch) {\n    const table = {\n      dbId: query.dbId,\n      queryEditorId: query.id,\n      schema: schemaName,\n      name: tableName,\n    };\n    dispatch(\n      mergeTable({\n        ...table,\n        isMetadataLoading: true,\n        isExtraMetadataLoading: true,\n        expanded: true,\n      }),\n    );\n\n    return Promise.all([\n      getTableMetadata(table, query, dispatch),\n      getTableExtendedMetadata(table, query, dispatch),\n    ]).then(([newTable, json]) => {\n      const sync = isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE)\n        ? SupersetClient.post({\n            endpoint: encodeURI('/tableschemaview/'),\n            postPayload: { table: { ...newTable, ...json } },\n          })\n        : Promise.resolve({ json: { id: shortid.generate() } });\n\n      return sync\n        .then(({ json: resultJson }) =>\n          dispatch(mergeTable({ ...table, id: resultJson.id })),\n        )\n        .catch(() =>\n          dispatch(\n            addDangerToast(\n              t(\n                'An error occurred while fetching table metadata. ' +\n                  'Please contact your administrator.',\n              ),\n            ),\n          ),\n        );\n    });\n  };\n}\n\nexport function changeDataPreviewId(oldQueryId, newQuery) {\n  return { type: CHANGE_DATA_PREVIEW_ID, oldQueryId, newQuery };\n}\n\nexport function reFetchQueryResults(query) {\n  return function (dispatch) {\n    const newQuery = {\n      id: shortid.generate(),\n      dbId: query.dbId,\n      sql: query.sql,\n      tableName: query.tableName,\n      sqlEditorId: null,\n      tab: '',\n      runAsync: false,\n      ctas: false,\n      queryLimit: query.queryLimit,\n      isDataPreview: query.isDataPreview,\n    };\n    dispatch(runQuery(newQuery));\n    dispatch(changeDataPreviewId(query.id, newQuery));\n  };\n}\n\nexport function expandTable(table) {\n  return function (dispatch) {\n    const sync = isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE)\n      ? SupersetClient.post({\n          endpoint: encodeURI(`/tableschemaview/${table.id}/expanded`),\n          postPayload: { expanded: true },\n        })\n      : Promise.resolve();\n\n    return sync\n      .then(() => dispatch({ type: EXPAND_TABLE, table }))\n      .catch(() =>\n        dispatch(\n          addDangerToast(\n            t(\n              'An error occurred while expanding the table schema. ' +\n                'Please contact your administrator.',\n            ),\n          ),\n        ),\n      );\n  };\n}\n\nexport function collapseTable(table) {\n  return function (dispatch) {\n    const sync = isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE)\n      ? SupersetClient.post({\n          endpoint: encodeURI(`/tableschemaview/${table.id}/expanded`),\n          postPayload: { expanded: false },\n        })\n      : Promise.resolve();\n\n    return sync\n      .then(() => dispatch({ type: COLLAPSE_TABLE, table }))\n      .catch(() =>\n        dispatch(\n          addDangerToast(\n            t(\n              'An error occurred while collapsing the table schema. ' +\n                'Please contact your administrator.',\n            ),\n          ),\n        ),\n      );\n  };\n}\n\nexport function removeTable(table) {\n  return function (dispatch) {\n    const sync = isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE)\n      ? SupersetClient.delete({\n          endpoint: encodeURI(`/tableschemaview/${table.id}`),\n        })\n      : Promise.resolve();\n\n    return sync\n      .then(() => dispatch({ type: REMOVE_TABLE, table }))\n      .catch(() =>\n        dispatch(\n          addDangerToast(\n            t(\n              'An error occurred while removing the table schema. ' +\n                'Please contact your administrator.',\n            ),\n          ),\n        ),\n      );\n  };\n}\n\nexport function refreshQueries(alteredQueries) {\n  return { type: REFRESH_QUERIES, alteredQueries };\n}\n\nexport function setUserOffline(offline) {\n  return { type: SET_USER_OFFLINE, offline };\n}\n\nexport function persistEditorHeight(queryEditor, northPercent, southPercent) {\n  return {\n    type: QUERY_EDITOR_PERSIST_HEIGHT,\n    queryEditor,\n    northPercent,\n    southPercent,\n  };\n}\n\nexport function popStoredQuery(urlId) {\n  return function (dispatch) {\n    return SupersetClient.get({ endpoint: `/kv/${urlId}` })\n      .then(({ json }) =>\n        dispatch(\n          addQueryEditor({\n            title: json.title ? json.title : t('Shared query'),\n            dbId: json.dbId ? parseInt(json.dbId, 10) : null,\n            schema: json.schema ? json.schema : null,\n            autorun: json.autorun ? json.autorun : false,\n            sql: json.sql ? json.sql : 'SELECT ...',\n          }),\n        ),\n      )\n      .catch(() => dispatch(addDangerToast(ERR_MSG_CANT_LOAD_QUERY)));\n  };\n}\nexport function popSavedQuery(saveQueryId) {\n  return function (dispatch) {\n    return SupersetClient.get({\n      endpoint: `/savedqueryviewapi/api/get/${saveQueryId}`,\n    })\n      .then(({ json }) => {\n        const queryEditorProps = {\n          ...convertQueryToClient(json.result),\n          autorun: false,\n        };\n        return dispatch(addQueryEditor(queryEditorProps));\n      })\n      .catch(() => dispatch(addDangerToast(ERR_MSG_CANT_LOAD_QUERY)));\n  };\n}\nexport function popQuery(queryId) {\n  return function (dispatch) {\n    return SupersetClient.get({\n      endpoint: `/api/v1/query/${queryId}`,\n    })\n      .then(({ json }) => {\n        const queryData = json.result;\n        const queryEditorProps = {\n          dbId: queryData.database.id,\n          schema: queryData.schema,\n          sql: queryData.sql,\n          title: `Copy of ${queryData.tab_name}`,\n          autorun: false,\n        };\n        return dispatch(addQueryEditor(queryEditorProps));\n      })\n      .catch(() => dispatch(addDangerToast(ERR_MSG_CANT_LOAD_QUERY)));\n  };\n}\nexport function popDatasourceQuery(datasourceKey, sql) {\n  return function (dispatch) {\n    return SupersetClient.get({\n      endpoint: `/superset/fetch_datasource_metadata?datasourceKey=${datasourceKey}`,\n    })\n      .then(({ json }) =>\n        dispatch(\n          addQueryEditor({\n            title: `Query ${json.name}`,\n            dbId: json.database.id,\n            schema: json.schema,\n            autorun: sql !== undefined,\n            sql: sql || json.select_star,\n          }),\n        ),\n      )\n      .catch(() =>\n        dispatch(addDangerToast(t(\"The datasource couldn't be loaded\"))),\n      );\n  };\n}\nexport function createDatasourceStarted() {\n  return { type: CREATE_DATASOURCE_STARTED };\n}\nexport function createDatasourceSuccess(data) {\n  const datasource = `${data.table_id}__table`;\n  return { type: CREATE_DATASOURCE_SUCCESS, datasource };\n}\nexport function createDatasourceFailed(err) {\n  return { type: CREATE_DATASOURCE_FAILED, err };\n}\n\nexport function createDatasource(vizOptions) {\n  return dispatch => {\n    dispatch(createDatasourceStarted());\n    return SupersetClient.post({\n      endpoint: '/superset/sqllab_viz/',\n      postPayload: { data: vizOptions },\n    })\n      .then(({ json }) => {\n        dispatch(createDatasourceSuccess(json));\n\n        return Promise.resolve(json);\n      })\n      .catch(() => {\n        dispatch(\n          createDatasourceFailed(\n            t('An error occurred while creating the data source'),\n          ),\n        );\n\n        return Promise.reject();\n      });\n  };\n}\n\nexport function createCtasDatasource(vizOptions) {\n  return dispatch => {\n    dispatch(createDatasourceStarted());\n    return SupersetClient.post({\n      endpoint: '/superset/get_or_create_table/',\n      postPayload: { data: vizOptions },\n    })\n      .then(({ json }) => {\n        dispatch(createDatasourceSuccess(json));\n\n        return json;\n      })\n      .catch(() => {\n        const errorMsg = t('An error occurred while creating the data source');\n        dispatch(createDatasourceFailed(errorMsg));\n        return Promise.reject(new Error(errorMsg));\n      });\n  };\n}\n\nexport function queryEditorSetFunctionNames(queryEditor, dbId) {\n  return function (dispatch) {\n    return SupersetClient.get({\n      endpoint: encodeURI(`/api/v1/database/${dbId}/function_names/`),\n    })\n      .then(({ json }) =>\n        dispatch({\n          type: QUERY_EDITOR_SET_FUNCTION_NAMES,\n          queryEditor,\n          functionNames: json.function_names,\n        }),\n      )\n      .catch(() =>\n        dispatch(\n          addDangerToast(t('An error occurred while fetching function names.')),\n        ),\n      );\n  };\n}\n"]},"metadata":{},"sourceType":"module"}