{"ast":null,"code":"import \"core-js/modules/es.string.replace.js\";import { t } from '@superset-ui/core';\nimport { addWarningToast } from 'src/components/MessageToasts/actions';\nimport { jsPDF } from 'jspdf';\nimport html2canvas from 'html2canvas';\nimport kebabCase from 'lodash/kebabCase';\n/**\n * @remark\n * same as https://github.com/apache/superset/blob/c53bc4ddf9808a8bb6916bbe3cb31935d33a2420/superset-frontend/src/assets/stylesheets/less/variables.less#L34\n */\n/**\n * generate a consistent file stem from a description and date\n *\n * @param description title or description of content of file\n * @param date date when file was generated\n */\nconst generateFileStem = (description, date = new Date()) => `${kebabCase(description)}-${date.toISOString().replace(/[: ]/g, '-')}`;\n/**\n * Create an event handler for turning an element into an image\n *\n * @param selector css selector of the parent element which should be turned into image\n * @param description name or a short description of what is being printed.\n *   Value will be normalized, and a date as well as a file extension will be added.\n * @param domToImageOptions dom-to-image Options object.\n * @param isExactSelector if false, searches for the closest ancestor that matches selector.\n * @returns event handler\n */\nexport default function downloadAsPdf(selector, description, isExactSelector = false) {\n  return (event) => {\n    const elementToPrint = isExactSelector ?\n    document.querySelector(selector) :\n    event.currentTarget.closest(selector);\n    if (!elementToPrint) {\n      return addWarningToast(t('PDF download failed, please refresh and try again.'));\n    }\n    return html2canvas(document.querySelector('.dashboard')).then((canvas) => {\n      const dashboard = document.querySelector('.dashboard');\n      let height = 0;\n      let width = 0;\n      if (dashboard != null) {\n        height = dashboard.offsetHeight;\n        width = dashboard.offsetWidth;\n      }\n      const pdf = new jsPDF({\n        orientation: 'p',\n        unit: 'mm',\n        format: [width / 2, height / 2],\n        putOnlyUsedFonts: true,\n        compress: true });\n\n      pdf.addImage(canvas, 'PNG', 0, 0, width / 2, height / 2);\n      pdf.save(`${generateFileStem(description)}.pdf`);\n      window.open(canvas.toDataURL());\n    });\n  };\n}","map":null,"metadata":{},"sourceType":"module"}