{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/components/filterscope/FilterScopeSelector.jsx\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport Button from 'src/components/Button';\nimport { t, styled } from '@superset-ui/core';\n\nimport buildFilterScopeTreeEntry from 'src/dashboard/util/buildFilterScopeTreeEntry';\nimport getFilterScopeNodesTree from 'src/dashboard/util/getFilterScopeNodesTree';\nimport getFilterFieldNodesTree from 'src/dashboard/util/getFilterFieldNodesTree';\nimport getFilterScopeParentNodes from 'src/dashboard/util/getFilterScopeParentNodes';\nimport getKeyForFilterScopeTree from 'src/dashboard/util/getKeyForFilterScopeTree';\nimport getSelectedChartIdForFilterScopeTree from 'src/dashboard/util/getSelectedChartIdForFilterScopeTree';\nimport getFilterScopeFromNodesTree from 'src/dashboard/util/getFilterScopeFromNodesTree';\nimport getRevertedFilterScope from 'src/dashboard/util/getRevertedFilterScope';\nimport { getChartIdsInFilterScope } from 'src/dashboard/util/activeDashboardFilters';\nimport {\ngetChartIdAndColumnFromFilterKey,\ngetDashboardFilterKey } from\n'src/dashboard/util/getDashboardFilterKey';\nimport { ALL_FILTERS_ROOT } from 'src/dashboard/util/constants';\nimport { dashboardFilterPropShape } from 'src/dashboard/util/propShapes';\nimport FilterScopeTree from './FilterScopeTree';\nimport FilterFieldTree from './FilterFieldTree';import { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nconst propTypes = {\n  dashboardFilters: PropTypes.objectOf(dashboardFilterPropShape).isRequired,\n  layout: PropTypes.object.isRequired,\n\n  updateDashboardFiltersScope: PropTypes.func.isRequired,\n  setUnsavedChanges: PropTypes.func.isRequired,\n  onCloseModal: PropTypes.func.isRequired };\n\n\nconst ActionsContainer = styled.div`\n  height: ${({ theme }) => theme.gridUnit * 16}px;\n\n  // TODO: replace hardcoded color with theme variable after refactoring filter-scope-selector.less to Emotion\n  border-top: ${({ theme }) => theme.gridUnit / 4}px solid #cfd8dc;\n  padding: ${({ theme }) => theme.gridUnit * 6}px;\n  margin: 0 0 0 ${({ theme }) => -theme.gridUnit * 6}px;\n  text-align: right;\n\n  .btn {\n    margin-right: ${({ theme }) => theme.gridUnit * 4}px;\n\n    &:last-child {\n      margin-right: 0;\n    }\n  }\n`;\n\nexport default class FilterScopeSelector extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    const { dashboardFilters, layout } = props;\n\n    if (Object.keys(dashboardFilters).length > 0) {\n      // display filter fields in tree structure\n      const filterFieldNodes = getFilterFieldNodesTree({\n        dashboardFilters });\n\n      // filterFieldNodes root node is dashboard_root component,\n      // so that we can offer a select/deselect all link\n      const filtersNodes = filterFieldNodes[0].children;\n      this.allfilterFields = [];\n      filtersNodes.forEach(({ children }) => {\n        children.forEach((child) => {\n          this.allfilterFields.push(child.value);\n        });\n      });\n      this.defaultFilterKey = filtersNodes[0].children[0].value;\n\n      // build FilterScopeTree object for each filterKey\n      const filterScopeMap = Object.values(dashboardFilters).reduce(\n      (map, { chartId: filterId, columns }) => {\n        const filterScopeByChartId = Object.keys(columns).reduce(\n        (mapByChartId, columnName) => {\n          const filterKey = getDashboardFilterKey({\n            chartId: filterId,\n            column: columnName });\n\n          const nodes = getFilterScopeNodesTree({\n            components: layout,\n            filterFields: [filterKey],\n            selectedChartId: filterId });\n\n          const expanded = getFilterScopeParentNodes(nodes, 1);\n          // force display filter_box chart as unchecked, but show checkbox as disabled\n          const chartIdsInFilterScope = (\n          getChartIdsInFilterScope({\n            filterScope: dashboardFilters[filterId].scopes[columnName] }) ||\n          []).\n          filter((id) => id !== filterId);\n\n          return {\n            ...mapByChartId,\n            [filterKey]: {\n              // unfiltered nodes\n              nodes,\n              // filtered nodes in display if searchText is not empty\n              nodesFiltered: [...nodes],\n              checked: chartIdsInFilterScope,\n              expanded } };\n\n\n        },\n        {});\n\n\n        return {\n          ...map,\n          ...filterScopeByChartId };\n\n      },\n      {});\n\n\n      // initial state: active defaultFilerKey\n      const { chartId } = getChartIdAndColumnFromFilterKey(\n      this.defaultFilterKey);\n\n      const checkedFilterFields = [];\n      const activeFilterField = this.defaultFilterKey;\n      // expand defaultFilterKey in filter field tree\n      const expandedFilterIds = [ALL_FILTERS_ROOT].concat(chartId);\n\n      const filterScopeTreeEntry = buildFilterScopeTreeEntry({\n        checkedFilterFields,\n        activeFilterField,\n        filterScopeMap,\n        layout });\n\n      this.state = {\n        showSelector: true,\n        activeFilterField,\n        searchText: '',\n        filterScopeMap: {\n          ...filterScopeMap,\n          ...filterScopeTreeEntry },\n\n        filterFieldNodes,\n        checkedFilterFields,\n        expandedFilterIds };\n\n    } else {\n      this.state = {\n        showSelector: false };\n\n    }\n\n    this.filterNodes = this.filterNodes.bind(this);\n    this.onChangeFilterField = this.onChangeFilterField.bind(this);\n    this.onCheckFilterScope = this.onCheckFilterScope.bind(this);\n    this.onExpandFilterScope = this.onExpandFilterScope.bind(this);\n    this.onSearchInputChange = this.onSearchInputChange.bind(this);\n    this.onCheckFilterField = this.onCheckFilterField.bind(this);\n    this.onExpandFilterField = this.onExpandFilterField.bind(this);\n    this.onClose = this.onClose.bind(this);\n    this.onSave = this.onSave.bind(this);\n  }\n\n  onCheckFilterScope(checked = []) {\n    const {\n      activeFilterField,\n      filterScopeMap,\n      checkedFilterFields } =\n    this.state;\n\n    const key = getKeyForFilterScopeTree({\n      activeFilterField,\n      checkedFilterFields });\n\n    const editingList = activeFilterField ?\n    [activeFilterField] :\n    checkedFilterFields;\n    const updatedEntry = {\n      ...filterScopeMap[key],\n      checked };\n\n\n    const updatedFilterScopeMap = getRevertedFilterScope({\n      checked,\n      filterFields: editingList,\n      filterScopeMap });\n\n\n    this.setState(() => ({\n      filterScopeMap: {\n        ...filterScopeMap,\n        ...updatedFilterScopeMap,\n        [key]: updatedEntry } }));\n\n\n  }\n\n  onExpandFilterScope(expanded = []) {\n    const {\n      activeFilterField,\n      checkedFilterFields,\n      filterScopeMap } =\n    this.state;\n    const key = getKeyForFilterScopeTree({\n      activeFilterField,\n      checkedFilterFields });\n\n    const updatedEntry = {\n      ...filterScopeMap[key],\n      expanded };\n\n    this.setState(() => ({\n      filterScopeMap: {\n        ...filterScopeMap,\n        [key]: updatedEntry } }));\n\n\n  }\n\n  onCheckFilterField(checkedFilterFields = []) {\n    const { layout } = this.props;\n    const { filterScopeMap } = this.state;\n    const filterScopeTreeEntry = buildFilterScopeTreeEntry({\n      checkedFilterFields,\n      activeFilterField: null,\n      filterScopeMap,\n      layout });\n\n\n    this.setState(() => ({\n      activeFilterField: null,\n      checkedFilterFields,\n      filterScopeMap: {\n        ...filterScopeMap,\n        ...filterScopeTreeEntry } }));\n\n\n  }\n\n  onExpandFilterField(expandedFilterIds = []) {\n    this.setState(() => ({\n      expandedFilterIds }));\n\n  }\n\n  onChangeFilterField(filterField = {}) {\n    const { layout } = this.props;\n    const nextActiveFilterField = filterField.value;\n    const {\n      activeFilterField: currentActiveFilterField,\n      checkedFilterFields,\n      filterScopeMap } =\n    this.state;\n\n    // we allow single edit and multiple edit in the same view.\n    // if user click on the single filter field,\n    // will show filter scope for the single field.\n    // if user click on the same filter filed again,\n    // will toggle off the single filter field,\n    // and allow multi-edit all checked filter fields.\n    if (nextActiveFilterField === currentActiveFilterField) {\n      const filterScopeTreeEntry = buildFilterScopeTreeEntry({\n        checkedFilterFields,\n        activeFilterField: null,\n        filterScopeMap,\n        layout });\n\n\n      this.setState({\n        activeFilterField: null,\n        filterScopeMap: {\n          ...filterScopeMap,\n          ...filterScopeTreeEntry } });\n\n\n    } else if (this.allfilterFields.includes(nextActiveFilterField)) {\n      const filterScopeTreeEntry = buildFilterScopeTreeEntry({\n        checkedFilterFields,\n        activeFilterField: nextActiveFilterField,\n        filterScopeMap,\n        layout });\n\n\n      this.setState({\n        activeFilterField: nextActiveFilterField,\n        filterScopeMap: {\n          ...filterScopeMap,\n          ...filterScopeTreeEntry } });\n\n\n    }\n  }\n\n  onSearchInputChange(e) {\n    this.setState({ searchText: e.target.value }, this.filterTree);\n  }\n\n  onClose() {\n    this.props.onCloseModal();\n  }\n\n  onSave() {\n    const { filterScopeMap } = this.state;\n\n    const allFilterFieldScopes = this.allfilterFields.reduce(\n    (map, filterKey) => {\n      const { nodes } = filterScopeMap[filterKey];\n      const checkedChartIds = filterScopeMap[filterKey].checked;\n\n      return {\n        ...map,\n        [filterKey]: getFilterScopeFromNodesTree({\n          filterKey,\n          nodes,\n          checkedChartIds }) };\n\n\n    },\n    {});\n\n\n    this.props.updateDashboardFiltersScope(allFilterFieldScopes);\n    this.props.setUnsavedChanges(true);\n\n    // click Save button will do save and close modal\n    this.props.onCloseModal();\n  }\n\n  filterTree() {\n    // Reset nodes back to unfiltered state\n    if (!this.state.searchText) {\n      this.setState((prevState) => {\n        const {\n          activeFilterField,\n          checkedFilterFields,\n          filterScopeMap } =\n        prevState;\n        const key = getKeyForFilterScopeTree({\n          activeFilterField,\n          checkedFilterFields });\n\n\n        const updatedEntry = {\n          ...filterScopeMap[key],\n          nodesFiltered: filterScopeMap[key].nodes };\n\n        return {\n          filterScopeMap: {\n            ...filterScopeMap,\n            [key]: updatedEntry } };\n\n\n      });\n    } else {\n      const updater = (prevState) => {\n        const {\n          activeFilterField,\n          checkedFilterFields,\n          filterScopeMap } =\n        prevState;\n        const key = getKeyForFilterScopeTree({\n          activeFilterField,\n          checkedFilterFields });\n\n\n        const nodesFiltered = filterScopeMap[key].nodes.reduce(\n        this.filterNodes,\n        []);\n\n        const expanded = getFilterScopeParentNodes([...nodesFiltered]);\n        const updatedEntry = {\n          ...filterScopeMap[key],\n          nodesFiltered,\n          expanded };\n\n\n        return {\n          filterScopeMap: {\n            ...filterScopeMap,\n            [key]: updatedEntry } };\n\n\n      };\n\n      this.setState(updater);\n    }\n  }\n\n  filterNodes(filtered = [], node = {}) {\n    const { searchText } = this.state;\n    const children = (node.children || []).reduce(this.filterNodes, []);\n\n    if (\n    // Node's label matches the search string\n    node.label.toLocaleLowerCase().indexOf(searchText.toLocaleLowerCase()) >\n    -1 ||\n    // Or a children has a matching node\n    children.length)\n    {\n      filtered.push({ ...node, children });\n    }\n\n    return filtered;\n  }\n\n  renderFilterFieldList() {\n    const {\n      activeFilterField,\n      filterFieldNodes,\n      checkedFilterFields,\n      expandedFilterIds } =\n    this.state;\n    return (\n      ___EmotionJSX(FilterFieldTree, {\n        activeKey: activeFilterField,\n        nodes: filterFieldNodes,\n        checked: checkedFilterFields,\n        expanded: expandedFilterIds,\n        onClick: this.onChangeFilterField,\n        onCheck: this.onCheckFilterField,\n        onExpand: this.onExpandFilterField, __self: this, __source: { fileName: _jsxFileName, lineNumber: 431, columnNumber: 7 } }));\n\n\n  }\n\n  renderFilterScopeTree() {\n    const {\n      filterScopeMap,\n      activeFilterField,\n      checkedFilterFields,\n      searchText } =\n    this.state;\n\n    const key = getKeyForFilterScopeTree({\n      activeFilterField,\n      checkedFilterFields });\n\n\n    const selectedChartId = getSelectedChartIdForFilterScopeTree({\n      activeFilterField,\n      checkedFilterFields });\n\n    return (\n      ___EmotionJSX(React.Fragment, null,\n      ___EmotionJSX(\"input\", {\n        className: \"filter-text scope-search multi-edit-mode\",\n        placeholder: t('Search...'),\n        type: \"text\",\n        value: searchText,\n        onChange: this.onSearchInputChange, __self: this, __source: { fileName: _jsxFileName, lineNumber: 462, columnNumber: 9 } }),\n\n      ___EmotionJSX(FilterScopeTree, {\n        nodes: filterScopeMap[key].nodesFiltered,\n        checked: filterScopeMap[key].checked,\n        expanded: filterScopeMap[key].expanded,\n        onCheck: this.onCheckFilterScope,\n        onExpand: this.onExpandFilterScope\n        // pass selectedFilterId prop to FilterScopeTree component,\n        // to hide checkbox for selected filter field itself\n        , selectedChartId: selectedChartId, __self: this, __source: { fileName: _jsxFileName, lineNumber: 469, columnNumber: 9 } })));\n\n\n\n  }\n\n  renderEditingFiltersName() {\n    const { dashboardFilters } = this.props;\n    const { activeFilterField, checkedFilterFields } = this.state;\n    const currentFilterLabels = [].\n    concat(activeFilterField || checkedFilterFields).\n    map((key) => {\n      const { chartId, column } = getChartIdAndColumnFromFilterKey(key);\n      return dashboardFilters[chartId].labels[column] || column;\n    });\n\n    return (\n      ___EmotionJSX(\"div\", { className: \"selected-fields multi-edit-mode\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 494, columnNumber: 7 } },\n      currentFilterLabels.length === 0 && t('No filter is selected.'),\n      currentFilterLabels.length === 1 && t('Editing 1 filter:'),\n      currentFilterLabels.length > 1 &&\n      t('Batch editing %d filters:', currentFilterLabels.length),\n      ___EmotionJSX(\"span\", { className: \"selected-scopes\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 499, columnNumber: 9 } },\n      currentFilterLabels.join(', '))));\n\n\n\n  }\n\n  render() {\n    const { showSelector } = this.state;\n\n    return (\n      ___EmotionJSX(\"div\", { className: \"filter-scope-container\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 510, columnNumber: 7 } },\n      ___EmotionJSX(\"div\", { className: \"filter-scope-header\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 511, columnNumber: 9 } },\n      ___EmotionJSX(\"h4\", { __self: this, __source: { fileName: _jsxFileName, lineNumber: 512, columnNumber: 11 } }, t('Configure filter scopes')),\n      showSelector && this.renderEditingFiltersName()),\n\n\n      ___EmotionJSX(\"div\", { className: \"filter-scope-body\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 516, columnNumber: 9 } },\n      !showSelector ?\n      ___EmotionJSX(\"div\", { className: \"warning-message\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 518, columnNumber: 13 } },\n      t('There are no filters in this dashboard.')) :\n\n\n      ___EmotionJSX(\"div\", { className: \"filters-scope-selector\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 522, columnNumber: 13 } },\n      ___EmotionJSX(\"div\", { className: cx('filter-field-pane multi-edit-mode'), __self: this, __source: { fileName: _jsxFileName, lineNumber: 523, columnNumber: 15 } },\n      this.renderFilterFieldList()),\n\n      ___EmotionJSX(\"div\", { className: \"filter-scope-pane multi-edit-mode\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 526, columnNumber: 15 } },\n      this.renderFilterScopeTree()))),\n\n\n\n\n\n      ___EmotionJSX(ActionsContainer, { __self: this, __source: { fileName: _jsxFileName, lineNumber: 533, columnNumber: 9 } },\n      ___EmotionJSX(Button, { buttonSize: \"small\", onClick: this.onClose, __self: this, __source: { fileName: _jsxFileName, lineNumber: 534, columnNumber: 11 } },\n      t('Close')),\n\n      showSelector &&\n      ___EmotionJSX(Button, {\n        buttonSize: \"small\",\n        buttonStyle: \"primary\",\n        onClick: this.onSave, __self: this, __source: { fileName: _jsxFileName, lineNumber: 538, columnNumber: 13 } },\n\n      t('Save')))));\n\n\n\n\n\n  } // @ts-ignore\n  __reactstandin__regenerateByEval(key, code) {// @ts-ignore\n    this[key] = eval(code);}}\nFilterScopeSelector.propTypes = propTypes;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(propTypes, \"propTypes\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/components/filterscope/FilterScopeSelector.jsx\");reactHotLoader.register(ActionsContainer, \"ActionsContainer\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/components/filterscope/FilterScopeSelector.jsx\");reactHotLoader.register(FilterScopeSelector, \"FilterScopeSelector\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/components/filterscope/FilterScopeSelector.jsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/components/filterscope/FilterScopeSelector.jsx"],"names":["React","PropTypes","cx","Button","t","styled","buildFilterScopeTreeEntry","getFilterScopeNodesTree","getFilterFieldNodesTree","getFilterScopeParentNodes","getKeyForFilterScopeTree","getSelectedChartIdForFilterScopeTree","getFilterScopeFromNodesTree","getRevertedFilterScope","getChartIdsInFilterScope","getChartIdAndColumnFromFilterKey","getDashboardFilterKey","ALL_FILTERS_ROOT","dashboardFilterPropShape","FilterScopeTree","FilterFieldTree","propTypes","dashboardFilters","objectOf","isRequired","layout","object","updateDashboardFiltersScope","func","setUnsavedChanges","onCloseModal","ActionsContainer","div","theme","gridUnit","FilterScopeSelector","PureComponent","constructor","props","Object","keys","length","filterFieldNodes","filtersNodes","children","allfilterFields","forEach","child","push","value","defaultFilterKey","filterScopeMap","values","reduce","map","chartId","filterId","columns","filterScopeByChartId","mapByChartId","columnName","filterKey","column","nodes","components","filterFields","selectedChartId","expanded","chartIdsInFilterScope","filterScope","scopes","filter","id","nodesFiltered","checked","checkedFilterFields","activeFilterField","expandedFilterIds","concat","filterScopeTreeEntry","state","showSelector","searchText","filterNodes","bind","onChangeFilterField","onCheckFilterScope","onExpandFilterScope","onSearchInputChange","onCheckFilterField","onExpandFilterField","onClose","onSave","key","editingList","updatedEntry","updatedFilterScopeMap","setState","filterField","nextActiveFilterField","currentActiveFilterField","includes","e","target","filterTree","allFilterFieldScopes","checkedChartIds","prevState","updater","filtered","node","label","toLocaleLowerCase","indexOf","renderFilterFieldList","renderFilterScopeTree","renderEditingFiltersName","currentFilterLabels","labels","join","render"],"mappings":"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","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport Button from 'src/components/Button';\nimport { t, styled } from '@superset-ui/core';\n\nimport buildFilterScopeTreeEntry from 'src/dashboard/util/buildFilterScopeTreeEntry';\nimport getFilterScopeNodesTree from 'src/dashboard/util/getFilterScopeNodesTree';\nimport getFilterFieldNodesTree from 'src/dashboard/util/getFilterFieldNodesTree';\nimport getFilterScopeParentNodes from 'src/dashboard/util/getFilterScopeParentNodes';\nimport getKeyForFilterScopeTree from 'src/dashboard/util/getKeyForFilterScopeTree';\nimport getSelectedChartIdForFilterScopeTree from 'src/dashboard/util/getSelectedChartIdForFilterScopeTree';\nimport getFilterScopeFromNodesTree from 'src/dashboard/util/getFilterScopeFromNodesTree';\nimport getRevertedFilterScope from 'src/dashboard/util/getRevertedFilterScope';\nimport { getChartIdsInFilterScope } from 'src/dashboard/util/activeDashboardFilters';\nimport {\n  getChartIdAndColumnFromFilterKey,\n  getDashboardFilterKey,\n} from 'src/dashboard/util/getDashboardFilterKey';\nimport { ALL_FILTERS_ROOT } from 'src/dashboard/util/constants';\nimport { dashboardFilterPropShape } from 'src/dashboard/util/propShapes';\nimport FilterScopeTree from './FilterScopeTree';\nimport FilterFieldTree from './FilterFieldTree';\n\nconst propTypes = {\n  dashboardFilters: PropTypes.objectOf(dashboardFilterPropShape).isRequired,\n  layout: PropTypes.object.isRequired,\n\n  updateDashboardFiltersScope: PropTypes.func.isRequired,\n  setUnsavedChanges: PropTypes.func.isRequired,\n  onCloseModal: PropTypes.func.isRequired,\n};\n\nconst ActionsContainer = styled.div`\n  height: ${({ theme }) => theme.gridUnit * 16}px;\n\n  // TODO: replace hardcoded color with theme variable after refactoring filter-scope-selector.less to Emotion\n  border-top: ${({ theme }) => theme.gridUnit / 4}px solid #cfd8dc;\n  padding: ${({ theme }) => theme.gridUnit * 6}px;\n  margin: 0 0 0 ${({ theme }) => -theme.gridUnit * 6}px;\n  text-align: right;\n\n  .btn {\n    margin-right: ${({ theme }) => theme.gridUnit * 4}px;\n\n    &:last-child {\n      margin-right: 0;\n    }\n  }\n`;\n\nexport default class FilterScopeSelector extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    const { dashboardFilters, layout } = props;\n\n    if (Object.keys(dashboardFilters).length > 0) {\n      // display filter fields in tree structure\n      const filterFieldNodes = getFilterFieldNodesTree({\n        dashboardFilters,\n      });\n      // filterFieldNodes root node is dashboard_root component,\n      // so that we can offer a select/deselect all link\n      const filtersNodes = filterFieldNodes[0].children;\n      this.allfilterFields = [];\n      filtersNodes.forEach(({ children }) => {\n        children.forEach(child => {\n          this.allfilterFields.push(child.value);\n        });\n      });\n      this.defaultFilterKey = filtersNodes[0].children[0].value;\n\n      // build FilterScopeTree object for each filterKey\n      const filterScopeMap = Object.values(dashboardFilters).reduce(\n        (map, { chartId: filterId, columns }) => {\n          const filterScopeByChartId = Object.keys(columns).reduce(\n            (mapByChartId, columnName) => {\n              const filterKey = getDashboardFilterKey({\n                chartId: filterId,\n                column: columnName,\n              });\n              const nodes = getFilterScopeNodesTree({\n                components: layout,\n                filterFields: [filterKey],\n                selectedChartId: filterId,\n              });\n              const expanded = getFilterScopeParentNodes(nodes, 1);\n              // force display filter_box chart as unchecked, but show checkbox as disabled\n              const chartIdsInFilterScope = (\n                getChartIdsInFilterScope({\n                  filterScope: dashboardFilters[filterId].scopes[columnName],\n                }) || []\n              ).filter(id => id !== filterId);\n\n              return {\n                ...mapByChartId,\n                [filterKey]: {\n                  // unfiltered nodes\n                  nodes,\n                  // filtered nodes in display if searchText is not empty\n                  nodesFiltered: [...nodes],\n                  checked: chartIdsInFilterScope,\n                  expanded,\n                },\n              };\n            },\n            {},\n          );\n\n          return {\n            ...map,\n            ...filterScopeByChartId,\n          };\n        },\n        {},\n      );\n\n      // initial state: active defaultFilerKey\n      const { chartId } = getChartIdAndColumnFromFilterKey(\n        this.defaultFilterKey,\n      );\n      const checkedFilterFields = [];\n      const activeFilterField = this.defaultFilterKey;\n      // expand defaultFilterKey in filter field tree\n      const expandedFilterIds = [ALL_FILTERS_ROOT].concat(chartId);\n\n      const filterScopeTreeEntry = buildFilterScopeTreeEntry({\n        checkedFilterFields,\n        activeFilterField,\n        filterScopeMap,\n        layout,\n      });\n      this.state = {\n        showSelector: true,\n        activeFilterField,\n        searchText: '',\n        filterScopeMap: {\n          ...filterScopeMap,\n          ...filterScopeTreeEntry,\n        },\n        filterFieldNodes,\n        checkedFilterFields,\n        expandedFilterIds,\n      };\n    } else {\n      this.state = {\n        showSelector: false,\n      };\n    }\n\n    this.filterNodes = this.filterNodes.bind(this);\n    this.onChangeFilterField = this.onChangeFilterField.bind(this);\n    this.onCheckFilterScope = this.onCheckFilterScope.bind(this);\n    this.onExpandFilterScope = this.onExpandFilterScope.bind(this);\n    this.onSearchInputChange = this.onSearchInputChange.bind(this);\n    this.onCheckFilterField = this.onCheckFilterField.bind(this);\n    this.onExpandFilterField = this.onExpandFilterField.bind(this);\n    this.onClose = this.onClose.bind(this);\n    this.onSave = this.onSave.bind(this);\n  }\n\n  onCheckFilterScope(checked = []) {\n    const {\n      activeFilterField,\n      filterScopeMap,\n      checkedFilterFields,\n    } = this.state;\n\n    const key = getKeyForFilterScopeTree({\n      activeFilterField,\n      checkedFilterFields,\n    });\n    const editingList = activeFilterField\n      ? [activeFilterField]\n      : checkedFilterFields;\n    const updatedEntry = {\n      ...filterScopeMap[key],\n      checked,\n    };\n\n    const updatedFilterScopeMap = getRevertedFilterScope({\n      checked,\n      filterFields: editingList,\n      filterScopeMap,\n    });\n\n    this.setState(() => ({\n      filterScopeMap: {\n        ...filterScopeMap,\n        ...updatedFilterScopeMap,\n        [key]: updatedEntry,\n      },\n    }));\n  }\n\n  onExpandFilterScope(expanded = []) {\n    const {\n      activeFilterField,\n      checkedFilterFields,\n      filterScopeMap,\n    } = this.state;\n    const key = getKeyForFilterScopeTree({\n      activeFilterField,\n      checkedFilterFields,\n    });\n    const updatedEntry = {\n      ...filterScopeMap[key],\n      expanded,\n    };\n    this.setState(() => ({\n      filterScopeMap: {\n        ...filterScopeMap,\n        [key]: updatedEntry,\n      },\n    }));\n  }\n\n  onCheckFilterField(checkedFilterFields = []) {\n    const { layout } = this.props;\n    const { filterScopeMap } = this.state;\n    const filterScopeTreeEntry = buildFilterScopeTreeEntry({\n      checkedFilterFields,\n      activeFilterField: null,\n      filterScopeMap,\n      layout,\n    });\n\n    this.setState(() => ({\n      activeFilterField: null,\n      checkedFilterFields,\n      filterScopeMap: {\n        ...filterScopeMap,\n        ...filterScopeTreeEntry,\n      },\n    }));\n  }\n\n  onExpandFilterField(expandedFilterIds = []) {\n    this.setState(() => ({\n      expandedFilterIds,\n    }));\n  }\n\n  onChangeFilterField(filterField = {}) {\n    const { layout } = this.props;\n    const nextActiveFilterField = filterField.value;\n    const {\n      activeFilterField: currentActiveFilterField,\n      checkedFilterFields,\n      filterScopeMap,\n    } = this.state;\n\n    // we allow single edit and multiple edit in the same view.\n    // if user click on the single filter field,\n    // will show filter scope for the single field.\n    // if user click on the same filter filed again,\n    // will toggle off the single filter field,\n    // and allow multi-edit all checked filter fields.\n    if (nextActiveFilterField === currentActiveFilterField) {\n      const filterScopeTreeEntry = buildFilterScopeTreeEntry({\n        checkedFilterFields,\n        activeFilterField: null,\n        filterScopeMap,\n        layout,\n      });\n\n      this.setState({\n        activeFilterField: null,\n        filterScopeMap: {\n          ...filterScopeMap,\n          ...filterScopeTreeEntry,\n        },\n      });\n    } else if (this.allfilterFields.includes(nextActiveFilterField)) {\n      const filterScopeTreeEntry = buildFilterScopeTreeEntry({\n        checkedFilterFields,\n        activeFilterField: nextActiveFilterField,\n        filterScopeMap,\n        layout,\n      });\n\n      this.setState({\n        activeFilterField: nextActiveFilterField,\n        filterScopeMap: {\n          ...filterScopeMap,\n          ...filterScopeTreeEntry,\n        },\n      });\n    }\n  }\n\n  onSearchInputChange(e) {\n    this.setState({ searchText: e.target.value }, this.filterTree);\n  }\n\n  onClose() {\n    this.props.onCloseModal();\n  }\n\n  onSave() {\n    const { filterScopeMap } = this.state;\n\n    const allFilterFieldScopes = this.allfilterFields.reduce(\n      (map, filterKey) => {\n        const { nodes } = filterScopeMap[filterKey];\n        const checkedChartIds = filterScopeMap[filterKey].checked;\n\n        return {\n          ...map,\n          [filterKey]: getFilterScopeFromNodesTree({\n            filterKey,\n            nodes,\n            checkedChartIds,\n          }),\n        };\n      },\n      {},\n    );\n\n    this.props.updateDashboardFiltersScope(allFilterFieldScopes);\n    this.props.setUnsavedChanges(true);\n\n    // click Save button will do save and close modal\n    this.props.onCloseModal();\n  }\n\n  filterTree() {\n    // Reset nodes back to unfiltered state\n    if (!this.state.searchText) {\n      this.setState(prevState => {\n        const {\n          activeFilterField,\n          checkedFilterFields,\n          filterScopeMap,\n        } = prevState;\n        const key = getKeyForFilterScopeTree({\n          activeFilterField,\n          checkedFilterFields,\n        });\n\n        const updatedEntry = {\n          ...filterScopeMap[key],\n          nodesFiltered: filterScopeMap[key].nodes,\n        };\n        return {\n          filterScopeMap: {\n            ...filterScopeMap,\n            [key]: updatedEntry,\n          },\n        };\n      });\n    } else {\n      const updater = prevState => {\n        const {\n          activeFilterField,\n          checkedFilterFields,\n          filterScopeMap,\n        } = prevState;\n        const key = getKeyForFilterScopeTree({\n          activeFilterField,\n          checkedFilterFields,\n        });\n\n        const nodesFiltered = filterScopeMap[key].nodes.reduce(\n          this.filterNodes,\n          [],\n        );\n        const expanded = getFilterScopeParentNodes([...nodesFiltered]);\n        const updatedEntry = {\n          ...filterScopeMap[key],\n          nodesFiltered,\n          expanded,\n        };\n\n        return {\n          filterScopeMap: {\n            ...filterScopeMap,\n            [key]: updatedEntry,\n          },\n        };\n      };\n\n      this.setState(updater);\n    }\n  }\n\n  filterNodes(filtered = [], node = {}) {\n    const { searchText } = this.state;\n    const children = (node.children || []).reduce(this.filterNodes, []);\n\n    if (\n      // Node's label matches the search string\n      node.label.toLocaleLowerCase().indexOf(searchText.toLocaleLowerCase()) >\n        -1 ||\n      // Or a children has a matching node\n      children.length\n    ) {\n      filtered.push({ ...node, children });\n    }\n\n    return filtered;\n  }\n\n  renderFilterFieldList() {\n    const {\n      activeFilterField,\n      filterFieldNodes,\n      checkedFilterFields,\n      expandedFilterIds,\n    } = this.state;\n    return (\n      <FilterFieldTree\n        activeKey={activeFilterField}\n        nodes={filterFieldNodes}\n        checked={checkedFilterFields}\n        expanded={expandedFilterIds}\n        onClick={this.onChangeFilterField}\n        onCheck={this.onCheckFilterField}\n        onExpand={this.onExpandFilterField}\n      />\n    );\n  }\n\n  renderFilterScopeTree() {\n    const {\n      filterScopeMap,\n      activeFilterField,\n      checkedFilterFields,\n      searchText,\n    } = this.state;\n\n    const key = getKeyForFilterScopeTree({\n      activeFilterField,\n      checkedFilterFields,\n    });\n\n    const selectedChartId = getSelectedChartIdForFilterScopeTree({\n      activeFilterField,\n      checkedFilterFields,\n    });\n    return (\n      <>\n        <input\n          className=\"filter-text scope-search multi-edit-mode\"\n          placeholder={t('Search...')}\n          type=\"text\"\n          value={searchText}\n          onChange={this.onSearchInputChange}\n        />\n        <FilterScopeTree\n          nodes={filterScopeMap[key].nodesFiltered}\n          checked={filterScopeMap[key].checked}\n          expanded={filterScopeMap[key].expanded}\n          onCheck={this.onCheckFilterScope}\n          onExpand={this.onExpandFilterScope}\n          // pass selectedFilterId prop to FilterScopeTree component,\n          // to hide checkbox for selected filter field itself\n          selectedChartId={selectedChartId}\n        />\n      </>\n    );\n  }\n\n  renderEditingFiltersName() {\n    const { dashboardFilters } = this.props;\n    const { activeFilterField, checkedFilterFields } = this.state;\n    const currentFilterLabels = []\n      .concat(activeFilterField || checkedFilterFields)\n      .map(key => {\n        const { chartId, column } = getChartIdAndColumnFromFilterKey(key);\n        return dashboardFilters[chartId].labels[column] || column;\n      });\n\n    return (\n      <div className=\"selected-fields multi-edit-mode\">\n        {currentFilterLabels.length === 0 && t('No filter is selected.')}\n        {currentFilterLabels.length === 1 && t('Editing 1 filter:')}\n        {currentFilterLabels.length > 1 &&\n          t('Batch editing %d filters:', currentFilterLabels.length)}\n        <span className=\"selected-scopes\">\n          {currentFilterLabels.join(', ')}\n        </span>\n      </div>\n    );\n  }\n\n  render() {\n    const { showSelector } = this.state;\n\n    return (\n      <div className=\"filter-scope-container\">\n        <div className=\"filter-scope-header\">\n          <h4>{t('Configure filter scopes')}</h4>\n          {showSelector && this.renderEditingFiltersName()}\n        </div>\n\n        <div className=\"filter-scope-body\">\n          {!showSelector ? (\n            <div className=\"warning-message\">\n              {t('There are no filters in this dashboard.')}\n            </div>\n          ) : (\n            <div className=\"filters-scope-selector\">\n              <div className={cx('filter-field-pane multi-edit-mode')}>\n                {this.renderFilterFieldList()}\n              </div>\n              <div className=\"filter-scope-pane multi-edit-mode\">\n                {this.renderFilterScopeTree()}\n              </div>\n            </div>\n          )}\n        </div>\n\n        <ActionsContainer>\n          <Button buttonSize=\"small\" onClick={this.onClose}>\n            {t('Close')}\n          </Button>\n          {showSelector && (\n            <Button\n              buttonSize=\"small\"\n              buttonStyle=\"primary\"\n              onClick={this.onSave}\n            >\n              {t('Save')}\n            </Button>\n          )}\n        </ActionsContainer>\n      </div>\n    );\n  }\n}\n\nFilterScopeSelector.propTypes = propTypes;\n"]},"metadata":{},"sourceType":"module"}