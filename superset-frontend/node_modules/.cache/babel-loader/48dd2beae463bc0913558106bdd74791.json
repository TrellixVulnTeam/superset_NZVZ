{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/my_plugin/superset/superset-frontend/src/visualizations/TimeTable/TimeTable.jsx\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport Mustache from 'mustache';\nimport { scaleLinear } from 'd3-scale';\nimport TableView from 'src/components/TableView';\nimport { formatNumber, formatTime, styled } from '@superset-ui/core';\nimport {\nInfoTooltipWithTrigger,\nMetricOption } from\n'@superset-ui/chart-controls';\nimport moment from 'moment';\n\nimport FormattedNumber from './FormattedNumber';\nimport SparklineCell from './SparklineCell';\nimport './TimeTable.less';import { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nconst ACCESSIBLE_COLOR_BOUNDS = ['#ca0020', '#0571b0'];\n\nfunction colorFromBounds(value, bounds, colorBounds = ACCESSIBLE_COLOR_BOUNDS) {\n  if (bounds) {\n    const [min, max] = bounds;\n    const [minColor, maxColor] = colorBounds;\n    if (min !== null && max !== null) {\n      const colorScale = scaleLinear().\n      domain([min, (max + min) / 2, max]).\n      range([minColor, 'grey', maxColor]);\n      return colorScale(value);\n    }\n    if (min !== null) {\n      return value >= min ? maxColor : minColor;\n    }\n    if (max !== null) {\n      return value < max ? maxColor : minColor;\n    }\n  }\n  return null;\n}\n\nconst propTypes = {\n  className: PropTypes.string,\n  height: PropTypes.number,\n  // Example\n  // {'2018-04-14 00:00:00': { 'SUM(metric_value)': 80031779.40047 }}\n  data: PropTypes.objectOf(PropTypes.objectOf(PropTypes.number)).isRequired,\n  columnConfigs: PropTypes.arrayOf(\n  PropTypes.shape({\n    colType: PropTypes.string,\n    comparisonType: PropTypes.string,\n    d3format: PropTypes.string,\n    key: PropTypes.string,\n    label: PropTypes.string,\n    timeLag: PropTypes.number })).\n\n  isRequired,\n  rows: PropTypes.arrayOf(\n  PropTypes.oneOfType([\n  PropTypes.shape({\n    label: PropTypes.string }),\n\n  PropTypes.shape({\n    metric_name: PropTypes.string })])).\n\n\n  isRequired,\n  rowType: PropTypes.oneOf(['column', 'metric']).isRequired,\n  url: PropTypes.string };\n\nconst defaultProps = {\n  className: '',\n  height: undefined,\n  url: '' };\n\n\nconst TimeTableStyles = styled.div`\n  height: ${(props) => props.height}px;\n\n  th {\n    z-index: 1; // to cover sparkline\n  }\n`;\n\nconst TimeTable = ({\n  className,\n  height,\n  data,\n  columnConfigs,\n  rowType,\n  rows,\n  url }) =>\n{\n  const memoizedColumns = useMemo(\n  () => [\n  { accessor: 'metric', Header: 'Metric' },\n  ...columnConfigs.map((columnConfig, i) => ({\n    accessor: columnConfig.key,\n    cellProps: columnConfig.colType === 'spark' && {\n      style: { width: '1%' } },\n\n    Header: () =>\n    ___EmotionJSX(React.Fragment, null,\n    columnConfig.label, ' ',\n    columnConfig.tooltip &&\n    ___EmotionJSX(InfoTooltipWithTrigger, {\n      tooltip: columnConfig.tooltip,\n      label: `tt-col-${i}`,\n      placement: \"top\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 121, columnNumber: 15 } })),\n\n\n\n\n    sortType: (rowA, rowB, columnId) => {\n      const rowAVal = rowA.values[columnId].props['data-value'];\n      const rowBVal = rowB.values[columnId].props['data-value'];\n      return rowAVal - rowBVal;\n    } }))],\n\n\n  [columnConfigs]);\n\n\n  const memoizedRows = useMemo(() => {\n    const renderSparklineCell = (valueField, column, entries) => {\n      let sparkData;\n      if (column.timeRatio) {\n        // Period ratio sparkline\n        sparkData = [];\n        for (let i = column.timeRatio; i < entries.length; i += 1) {\n          const prevData = entries[i - column.timeRatio][valueField];\n          if (prevData && prevData !== 0) {\n            sparkData.push(entries[i][valueField] / prevData);\n          } else {\n            sparkData.push(null);\n          }\n        }\n      } else {\n        sparkData = entries.map((d) => d[valueField]);\n      }\n\n      return (\n        ___EmotionJSX(SparklineCell, {\n          width: parseInt(column.width, 10) || 300,\n          height: parseInt(column.height, 10) || 50,\n          data: sparkData,\n          \"data-value\": sparkData[sparkData.length - 1],\n          ariaLabel: `spark-${valueField}`,\n          numberFormat: column.d3format,\n          yAxisBounds: column.yAxisBounds,\n          showYAxis: column.showYAxis,\n          renderTooltip: ({ index }) =>\n          ___EmotionJSX(\"div\", { __self: this, __source: { fileName: _jsxFileName, lineNumber: 168, columnNumber: 13 } },\n          ___EmotionJSX(\"strong\", { __self: this, __source: { fileName: _jsxFileName, lineNumber: 169, columnNumber: 15 } }, formatNumber(column.d3format, sparkData[index])),\n          ___EmotionJSX(\"div\", { __self: this, __source: { fileName: _jsxFileName, lineNumber: 170, columnNumber: 15 } },\n          formatTime(\n          column.dateFormat,\n          moment.utc(entries[index].time).toDate()))), __self: this, __source: { fileName: _jsxFileName, lineNumber: 158, columnNumber: 9 } }));\n\n\n\n\n\n\n    };\n\n    const renderValueCell = (valueField, column, reversedEntries) => {\n      const recent = reversedEntries[0][valueField];\n      let v;\n      let errorMsg;\n      if (column.colType === 'time') {\n        // Time lag ratio\n        const timeLag = column.timeLag || 0;\n        const totalLag = Object.keys(reversedEntries).length;\n        if (timeLag >= totalLag) {\n          errorMsg = `The time lag set at ${timeLag} is too large for the length of data at ${reversedEntries.length}. No data available.`;\n        } else {\n          v = reversedEntries[timeLag][valueField];\n        }\n        if (column.comparisonType === 'diff') {\n          v = recent - v;\n        } else if (column.comparisonType === 'perc') {\n          v = recent / v;\n        } else if (column.comparisonType === 'perc_change') {\n          v = recent / v - 1;\n        }\n        v = v || 0;\n      } else if (column.colType === 'contrib') {\n        // contribution to column total\n        v =\n        recent /\n        Object.keys(reversedEntries[0]).\n        map((k) => k !== 'time' ? reversedEntries[0][k] : null).\n        reduce((a, b) => a + b);\n      } else if (column.colType === 'avg') {\n        // Average over the last {timeLag}\n        v = null;\n        if (reversedEntries.length > 0) {\n          const stats = reversedEntries.slice(undefined, column.timeLag).reduce(\n          function ({ count, sum }, entry) {\n            return entry[valueField] !== undefined &&\n            entry[valueField] !== null ?\n            { count: count + 1, sum: sum + entry[valueField] } :\n            { count, sum };\n          },\n          { count: 0, sum: 0 });\n\n          if (stats.count > 0) {\n            v = stats.sum / stats.count;\n          }\n        }\n      }\n\n      const color = colorFromBounds(v, column.bounds);\n\n      return (\n        ___EmotionJSX(\"span\", {\n          key: column.key,\n          \"data-value\": v,\n          style:\n          color && {\n            boxShadow: `inset 0px -2.5px 0px 0px ${color}`,\n            borderRight: '2px solid #fff' }, __self: this, __source: { fileName: _jsxFileName, lineNumber: 232, columnNumber: 9 } },\n\n\n\n        errorMsg ||\n        ___EmotionJSX(\"span\", { style: { color }, __self: this, __source: { fileName: _jsxFileName, lineNumber: 243, columnNumber: 13 } },\n        ___EmotionJSX(FormattedNumber, { num: v, format: column.d3format, __self: this, __source: { fileName: _jsxFileName, lineNumber: 244, columnNumber: 15 } }))));\n\n\n\n\n    };\n\n    const renderLeftCell = (row) => {\n      const context = { metric: row };\n      const fullUrl = url ? Mustache.render(url, context) : null;\n\n      if (rowType === 'column') {\n        const column = row;\n        if (fullUrl) {\n          return (\n            ___EmotionJSX(\"a\", { href: fullUrl, rel: \"noopener noreferrer\", target: \"_blank\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 259, columnNumber: 13 } },\n            column.label));\n\n\n        }\n        return column.label;\n      }\n\n      return (\n        ___EmotionJSX(MetricOption, {\n          metric: row,\n          url: fullUrl,\n          showFormula: false,\n          openInNewWindow: true, __self: this, __source: { fileName: _jsxFileName, lineNumber: 268, columnNumber: 9 } }));\n\n\n    };\n\n    const entries = Object.keys(data).\n    sort().\n    map((time) => ({ ...data[time], time }));\n    const reversedEntries = entries.concat().reverse();\n\n    return rows.map((row) => {\n      const valueField = row.label || row.metric_name;\n      const cellValues = columnConfigs.reduce((acc, columnConfig) => {\n        if (columnConfig.colType === 'spark') {\n          return {\n            ...acc,\n            [columnConfig.key]: renderSparklineCell(\n            valueField,\n            columnConfig,\n            entries) };\n\n\n        }\n        return {\n          ...acc,\n          [columnConfig.key]: renderValueCell(\n          valueField,\n          columnConfig,\n          reversedEntries) };\n\n\n      }, {});\n      return { ...row, ...cellValues, metric: renderLeftCell(row) };\n    });\n  }, [columnConfigs, data, rowType, rows, url]);\n\n  const defaultSort =\n  rowType === 'column' && columnConfigs.length ?\n  [\n  {\n    id: columnConfigs[0].key,\n    desc: 'true' }] :\n\n\n  [];\n\n  return (\n    ___EmotionJSX(TimeTableStyles, { className: `time-table ${className}`, height: height, __self: this, __source: { fileName: _jsxFileName, lineNumber: 319, columnNumber: 5 } },\n    ___EmotionJSX(TableView, {\n      className: \"table-no-hover\",\n      columns: memoizedColumns,\n      data: memoizedRows,\n      initialSortBy: defaultSort,\n      withPagination: false, __self: this, __source: { fileName: _jsxFileName, lineNumber: 320, columnNumber: 7 } })));\n\n\n\n};__signature__(TimeTable, \"useMemo{memoizedColumns}\\nuseMemo{memoizedRows}\");\n\nTimeTable.propTypes = propTypes;\nTimeTable.defaultProps = defaultProps;const _default =\n\nTimeTable;export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(ACCESSIBLE_COLOR_BOUNDS, \"ACCESSIBLE_COLOR_BOUNDS\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/visualizations/TimeTable/TimeTable.jsx\");reactHotLoader.register(colorFromBounds, \"colorFromBounds\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/visualizations/TimeTable/TimeTable.jsx\");reactHotLoader.register(propTypes, \"propTypes\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/visualizations/TimeTable/TimeTable.jsx\");reactHotLoader.register(defaultProps, \"defaultProps\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/visualizations/TimeTable/TimeTable.jsx\");reactHotLoader.register(TimeTableStyles, \"TimeTableStyles\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/visualizations/TimeTable/TimeTable.jsx\");reactHotLoader.register(TimeTable, \"TimeTable\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/visualizations/TimeTable/TimeTable.jsx\");reactHotLoader.register(_default, \"default\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/visualizations/TimeTable/TimeTable.jsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/home/ubuntu/my_plugin/superset/superset-frontend/src/visualizations/TimeTable/TimeTable.jsx"],"names":["React","useMemo","PropTypes","Mustache","scaleLinear","TableView","formatNumber","formatTime","styled","InfoTooltipWithTrigger","MetricOption","moment","FormattedNumber","SparklineCell","ACCESSIBLE_COLOR_BOUNDS","colorFromBounds","value","bounds","colorBounds","min","max","minColor","maxColor","colorScale","domain","range","propTypes","className","string","height","number","data","objectOf","isRequired","columnConfigs","arrayOf","shape","colType","comparisonType","d3format","key","label","timeLag","rows","oneOfType","metric_name","rowType","oneOf","url","defaultProps","undefined","TimeTableStyles","div","props","TimeTable","memoizedColumns","accessor","Header","map","columnConfig","i","cellProps","style","width","tooltip","sortType","rowA","rowB","columnId","rowAVal","values","rowBVal","memoizedRows","renderSparklineCell","valueField","column","entries","sparkData","timeRatio","length","prevData","push","d","parseInt","yAxisBounds","showYAxis","index","dateFormat","utc","time","toDate","renderValueCell","reversedEntries","recent","v","errorMsg","totalLag","Object","keys","k","reduce","a","b","stats","slice","count","sum","entry","color","boxShadow","borderRight","renderLeftCell","row","context","metric","fullUrl","render","sort","concat","reverse","cellValues","acc","defaultSort","id","desc"],"mappings":"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","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport Mustache from 'mustache';\nimport { scaleLinear } from 'd3-scale';\nimport TableView from 'src/components/TableView';\nimport { formatNumber, formatTime, styled } from '@superset-ui/core';\nimport {\n  InfoTooltipWithTrigger,\n  MetricOption,\n} from '@superset-ui/chart-controls';\nimport moment from 'moment';\n\nimport FormattedNumber from './FormattedNumber';\nimport SparklineCell from './SparklineCell';\nimport './TimeTable.less';\n\nconst ACCESSIBLE_COLOR_BOUNDS = ['#ca0020', '#0571b0'];\n\nfunction colorFromBounds(value, bounds, colorBounds = ACCESSIBLE_COLOR_BOUNDS) {\n  if (bounds) {\n    const [min, max] = bounds;\n    const [minColor, maxColor] = colorBounds;\n    if (min !== null && max !== null) {\n      const colorScale = scaleLinear()\n        .domain([min, (max + min) / 2, max])\n        .range([minColor, 'grey', maxColor]);\n      return colorScale(value);\n    }\n    if (min !== null) {\n      return value >= min ? maxColor : minColor;\n    }\n    if (max !== null) {\n      return value < max ? maxColor : minColor;\n    }\n  }\n  return null;\n}\n\nconst propTypes = {\n  className: PropTypes.string,\n  height: PropTypes.number,\n  // Example\n  // {'2018-04-14 00:00:00': { 'SUM(metric_value)': 80031779.40047 }}\n  data: PropTypes.objectOf(PropTypes.objectOf(PropTypes.number)).isRequired,\n  columnConfigs: PropTypes.arrayOf(\n    PropTypes.shape({\n      colType: PropTypes.string,\n      comparisonType: PropTypes.string,\n      d3format: PropTypes.string,\n      key: PropTypes.string,\n      label: PropTypes.string,\n      timeLag: PropTypes.number,\n    }),\n  ).isRequired,\n  rows: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n      PropTypes.shape({\n        label: PropTypes.string,\n      }),\n      PropTypes.shape({\n        metric_name: PropTypes.string,\n      }),\n    ]),\n  ).isRequired,\n  rowType: PropTypes.oneOf(['column', 'metric']).isRequired,\n  url: PropTypes.string,\n};\nconst defaultProps = {\n  className: '',\n  height: undefined,\n  url: '',\n};\n\nconst TimeTableStyles = styled.div`\n  height: ${props => props.height}px;\n\n  th {\n    z-index: 1; // to cover sparkline\n  }\n`;\n\nconst TimeTable = ({\n  className,\n  height,\n  data,\n  columnConfigs,\n  rowType,\n  rows,\n  url,\n}) => {\n  const memoizedColumns = useMemo(\n    () => [\n      { accessor: 'metric', Header: 'Metric' },\n      ...columnConfigs.map((columnConfig, i) => ({\n        accessor: columnConfig.key,\n        cellProps: columnConfig.colType === 'spark' && {\n          style: { width: '1%' },\n        },\n        Header: () => (\n          <>\n            {columnConfig.label}{' '}\n            {columnConfig.tooltip && (\n              <InfoTooltipWithTrigger\n                tooltip={columnConfig.tooltip}\n                label={`tt-col-${i}`}\n                placement=\"top\"\n              />\n            )}\n          </>\n        ),\n        sortType: (rowA, rowB, columnId) => {\n          const rowAVal = rowA.values[columnId].props['data-value'];\n          const rowBVal = rowB.values[columnId].props['data-value'];\n          return rowAVal - rowBVal;\n        },\n      })),\n    ],\n    [columnConfigs],\n  );\n\n  const memoizedRows = useMemo(() => {\n    const renderSparklineCell = (valueField, column, entries) => {\n      let sparkData;\n      if (column.timeRatio) {\n        // Period ratio sparkline\n        sparkData = [];\n        for (let i = column.timeRatio; i < entries.length; i += 1) {\n          const prevData = entries[i - column.timeRatio][valueField];\n          if (prevData && prevData !== 0) {\n            sparkData.push(entries[i][valueField] / prevData);\n          } else {\n            sparkData.push(null);\n          }\n        }\n      } else {\n        sparkData = entries.map(d => d[valueField]);\n      }\n\n      return (\n        <SparklineCell\n          width={parseInt(column.width, 10) || 300}\n          height={parseInt(column.height, 10) || 50}\n          data={sparkData}\n          data-value={sparkData[sparkData.length - 1]}\n          ariaLabel={`spark-${valueField}`}\n          numberFormat={column.d3format}\n          yAxisBounds={column.yAxisBounds}\n          showYAxis={column.showYAxis}\n          renderTooltip={({ index }) => (\n            <div>\n              <strong>{formatNumber(column.d3format, sparkData[index])}</strong>\n              <div>\n                {formatTime(\n                  column.dateFormat,\n                  moment.utc(entries[index].time).toDate(),\n                )}\n              </div>\n            </div>\n          )}\n        />\n      );\n    };\n\n    const renderValueCell = (valueField, column, reversedEntries) => {\n      const recent = reversedEntries[0][valueField];\n      let v;\n      let errorMsg;\n      if (column.colType === 'time') {\n        // Time lag ratio\n        const timeLag = column.timeLag || 0;\n        const totalLag = Object.keys(reversedEntries).length;\n        if (timeLag >= totalLag) {\n          errorMsg = `The time lag set at ${timeLag} is too large for the length of data at ${reversedEntries.length}. No data available.`;\n        } else {\n          v = reversedEntries[timeLag][valueField];\n        }\n        if (column.comparisonType === 'diff') {\n          v = recent - v;\n        } else if (column.comparisonType === 'perc') {\n          v = recent / v;\n        } else if (column.comparisonType === 'perc_change') {\n          v = recent / v - 1;\n        }\n        v = v || 0;\n      } else if (column.colType === 'contrib') {\n        // contribution to column total\n        v =\n          recent /\n          Object.keys(reversedEntries[0])\n            .map(k => (k !== 'time' ? reversedEntries[0][k] : null))\n            .reduce((a, b) => a + b);\n      } else if (column.colType === 'avg') {\n        // Average over the last {timeLag}\n        v = null;\n        if (reversedEntries.length > 0) {\n          const stats = reversedEntries.slice(undefined, column.timeLag).reduce(\n            function ({ count, sum }, entry) {\n              return entry[valueField] !== undefined &&\n                entry[valueField] !== null\n                ? { count: count + 1, sum: sum + entry[valueField] }\n                : { count, sum };\n            },\n            { count: 0, sum: 0 },\n          );\n          if (stats.count > 0) {\n            v = stats.sum / stats.count;\n          }\n        }\n      }\n\n      const color = colorFromBounds(v, column.bounds);\n\n      return (\n        <span\n          key={column.key}\n          data-value={v}\n          style={\n            color && {\n              boxShadow: `inset 0px -2.5px 0px 0px ${color}`,\n              borderRight: '2px solid #fff',\n            }\n          }\n        >\n          {errorMsg || (\n            <span style={{ color }}>\n              <FormattedNumber num={v} format={column.d3format} />\n            </span>\n          )}\n        </span>\n      );\n    };\n\n    const renderLeftCell = row => {\n      const context = { metric: row };\n      const fullUrl = url ? Mustache.render(url, context) : null;\n\n      if (rowType === 'column') {\n        const column = row;\n        if (fullUrl) {\n          return (\n            <a href={fullUrl} rel=\"noopener noreferrer\" target=\"_blank\">\n              {column.label}\n            </a>\n          );\n        }\n        return column.label;\n      }\n\n      return (\n        <MetricOption\n          metric={row}\n          url={fullUrl}\n          showFormula={false}\n          openInNewWindow\n        />\n      );\n    };\n\n    const entries = Object.keys(data)\n      .sort()\n      .map(time => ({ ...data[time], time }));\n    const reversedEntries = entries.concat().reverse();\n\n    return rows.map(row => {\n      const valueField = row.label || row.metric_name;\n      const cellValues = columnConfigs.reduce((acc, columnConfig) => {\n        if (columnConfig.colType === 'spark') {\n          return {\n            ...acc,\n            [columnConfig.key]: renderSparklineCell(\n              valueField,\n              columnConfig,\n              entries,\n            ),\n          };\n        }\n        return {\n          ...acc,\n          [columnConfig.key]: renderValueCell(\n            valueField,\n            columnConfig,\n            reversedEntries,\n          ),\n        };\n      }, {});\n      return { ...row, ...cellValues, metric: renderLeftCell(row) };\n    });\n  }, [columnConfigs, data, rowType, rows, url]);\n\n  const defaultSort =\n    rowType === 'column' && columnConfigs.length\n      ? [\n          {\n            id: columnConfigs[0].key,\n            desc: 'true',\n          },\n        ]\n      : [];\n\n  return (\n    <TimeTableStyles className={`time-table ${className}`} height={height}>\n      <TableView\n        className=\"table-no-hover\"\n        columns={memoizedColumns}\n        data={memoizedRows}\n        initialSortBy={defaultSort}\n        withPagination={false}\n      />\n    </TimeTableStyles>\n  );\n};\n\nTimeTable.propTypes = propTypes;\nTimeTable.defaultProps = defaultProps;\n\nexport default TimeTable;\n"]},"metadata":{},"sourceType":"module"}