{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;};export default function pairs(values, pairof = pair) {\n  const pairs = [];\n  let previous;\n  let first = false;\n  for (const value of values) {\n    if (first) pairs.push(pairof(previous, value));\n    previous = value;\n    first = true;\n  }\n  return pairs;\n}\n\nexport function pair(a, b) {\n  return [a, b];\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(pairs, \"pairs\", \"/home/ubuntu/my_plugin/superset/superset-frontend/node_modules/@encodable/color/node_modules/d3-array/src/pairs.js\");reactHotLoader.register(pair, \"pair\", \"/home/ubuntu/my_plugin/superset/superset-frontend/node_modules/@encodable/color/node_modules/d3-array/src/pairs.js\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/home/ubuntu/my_plugin/superset/superset-frontend/node_modules/@encodable/color/node_modules/d3-array/src/pairs.js"],"names":["pairs","values","pairof","pair","previous","first","value","push","a","b"],"mappings":"uSAAA,eAAe,SAASA,KAAT,CAAeC,MAAf,EAAuBC,MAAM,GAAGC,IAAhC,EAAsC;AACnD,QAAMH,KAAK,GAAG,EAAd;AACA,MAAII,QAAJ;AACA,MAAIC,KAAK,GAAG,KAAZ;AACA,OAAK,MAAMC,KAAX,IAAoBL,MAApB,EAA4B;AAC1B,QAAII,KAAJ,EAAWL,KAAK,CAACO,IAAN,CAAWL,MAAM,CAACE,QAAD,EAAWE,KAAX,CAAjB;AACXF,IAAAA,QAAQ,GAAGE,KAAX;AACAD,IAAAA,KAAK,GAAG,IAAR;AACD;AACD,SAAOL,KAAP;AACD;;AAED,OAAO,SAASG,IAAT,CAAcK,CAAd,EAAiBC,CAAjB,EAAoB;AACzB,SAAO,CAACD,CAAD,EAAIC,CAAJ,CAAP;AACD,C,iLAduBT,K,yJAYRG,I","sourcesContent":["export default function pairs(values, pairof = pair) {\n  const pairs = [];\n  let previous;\n  let first = false;\n  for (const value of values) {\n    if (first) pairs.push(pairof(previous, value));\n    previous = value;\n    first = true;\n  }\n  return pairs;\n}\n\nexport function pair(a, b) {\n  return [a, b];\n}\n"]},"metadata":{},"sourceType":"module"}