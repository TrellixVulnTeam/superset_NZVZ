{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/components/Header/HeaderActionsDropdown/index.jsx\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();import \"core-js/modules/es.string.replace.js\";var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { styled, SupersetClient, t } from '@superset-ui/core';\n\nimport { Menu, NoAnimationDropdown } from 'src/common/components';\nimport Icons from 'src/components/Icons';\nimport { URL_PARAMS } from 'src/constants';\nimport ShareMenuItems from 'src/dashboard/components/menu/ShareMenuItems';\nimport CssEditor from 'src/dashboard/components/CssEditor';\nimport RefreshIntervalModal from 'src/dashboard/components/RefreshIntervalModal';\nimport SaveModal from 'src/dashboard/components/SaveModal';\nimport injectCustomCss from 'src/dashboard/util/injectCustomCss';\nimport { SAVE_TYPE_NEWDASHBOARD } from 'src/dashboard/util/constants';\nimport FilterScopeModal from 'src/dashboard/components/filterscope/FilterScopeModal';\nimport downloadAsImage from 'src/utils/downloadAsImage';\nimport downloadAsPdf from 'src/utils/downLoadAsPdf';\nimport getDashboardUrl from 'src/dashboard/util/getDashboardUrl';\nimport { getActiveFilters } from 'src/dashboard/util/activeDashboardFilters';\nimport { getUrlParam } from 'src/utils/urlUtils';import { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nconst propTypes = {\n  addSuccessToast: PropTypes.func.isRequired,\n  addDangerToast: PropTypes.func.isRequired,\n  dashboardInfo: PropTypes.object.isRequired,\n  dashboardId: PropTypes.number.isRequired,\n  dashboardTitle: PropTypes.string.isRequired,\n  dataMask: PropTypes.object.isRequired,\n  customCss: PropTypes.string.isRequired,\n  colorNamespace: PropTypes.string,\n  colorScheme: PropTypes.string,\n  onChange: PropTypes.func.isRequired,\n  updateCss: PropTypes.func.isRequired,\n  forceRefreshAllCharts: PropTypes.func.isRequired,\n  refreshFrequency: PropTypes.number.isRequired,\n  shouldPersistRefreshFrequency: PropTypes.bool.isRequired,\n  setRefreshFrequency: PropTypes.func.isRequired,\n  startPeriodicRender: PropTypes.func.isRequired,\n  editMode: PropTypes.bool.isRequired,\n  userCanEdit: PropTypes.bool.isRequired,\n  userCanShare: PropTypes.bool.isRequired,\n  userCanSave: PropTypes.bool.isRequired,\n  isLoading: PropTypes.bool.isRequired,\n  layout: PropTypes.object.isRequired,\n  expandedSlices: PropTypes.object.isRequired,\n  onSave: PropTypes.func.isRequired,\n  showPropertiesModal: PropTypes.func.isRequired,\n  refreshLimit: PropTypes.number,\n  refreshWarning: PropTypes.string,\n  lastModifiedTime: PropTypes.number.isRequired };\n\n\nconst defaultProps = {\n  colorNamespace: undefined,\n  colorScheme: undefined,\n  refreshLimit: 0,\n  refreshWarning: null };\n\n\nconst MENU_KEYS = {\n  SAVE_MODAL: 'save-modal',\n  SHARE_DASHBOARD: 'share-dashboard',\n  REFRESH_DASHBOARD: 'refresh-dashboard',\n  AUTOREFRESH_MODAL: 'autorefresh-modal',\n  SET_FILTER_MAPPING: 'set-filter-mapping',\n  EDIT_PROPERTIES: 'edit-properties',\n  EDIT_CSS: 'edit-css',\n  DOWNLOAD_AS_IMAGE: 'download-as-image',\n  DOWNLOAD_AS_PDF: 'download-as-pdf',\n  TOGGLE_FULLSCREEN: 'toggle-fullscreen' };\n\n\nconst DropdownButton = styled.div`\n  margin-left: ${({ theme }) => theme.gridUnit * 2.5}px;\n  span {\n    color: ${({ theme }) => theme.colors.grayscale.base};\n  }\n`;\n\nconst SCREENSHOT_NODE_SELECTOR = '.dashboard';\n\nclass HeaderActionsDropdown extends React.PureComponent {\n  static discardChanges() {\n    window.location.reload();\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      css: props.customCss,\n      cssTemplates: [] };\n\n\n    this.changeCss = this.changeCss.bind(this);\n    this.changeRefreshInterval = this.changeRefreshInterval.bind(this);\n    this.handleMenuClick = this.handleMenuClick.bind(this);\n  }\n\n  UNSAFE_componentWillMount() {\n    injectCustomCss(this.state.css);\n\n    SupersetClient.get({ endpoint: '/csstemplateasyncmodelview/api/read' }).\n    then(({ json }) => {\n      const cssTemplates = json.result.map((row) => ({\n        value: row.template_name,\n        css: row.css,\n        label: row.template_name }));\n\n      this.setState({ cssTemplates });\n    }).\n    catch(() => {\n      this.props.addDangerToast(\n      t('An error occurred while fetching available CSS templates'));\n\n    });\n  }\n\n  changeCss(css) {\n    this.setState({ css }, () => {\n      injectCustomCss(css);\n    });\n    this.props.onChange();\n    this.props.updateCss(css);\n  }\n\n  changeRefreshInterval(refreshInterval, isPersistent) {\n    this.props.setRefreshFrequency(refreshInterval, isPersistent);\n    this.props.startPeriodicRender(refreshInterval * 1000);\n  }\n\n  handleMenuClick({ key, domEvent }) {\n    switch (key) {\n      case MENU_KEYS.REFRESH_DASHBOARD:\n        this.props.forceRefreshAllCharts();\n        break;\n      case MENU_KEYS.EDIT_PROPERTIES:\n        this.props.showPropertiesModal();\n        break;\n      case MENU_KEYS.DOWNLOAD_AS_PDF:\n        // menu closes with a delay, we need to hide it manually,\n        // so that we don't capture it on the screenshot\n        // const pdfMenu = document.querySelector(\n        //   '.ant-dropdown:not(.ant-dropdown-hidden)',\n        // );\n        // pdfMenu.style.visibility = 'hidden';\n        downloadAsPdf(\n        SCREENSHOT_NODE_SELECTOR,\n        this.props.dashboardTitle,\n        {},\n        true)(\n        domEvent).then(() => {\n          // pdfMenu.style.visibility = 'visible';\n        });\n        break;\n      case MENU_KEYS.DOWNLOAD_AS_IMAGE:{\n          // menu closes with a delay, we need to hide it manually,\n          // so that we don't capture it on the screenshot\n          const menu = document.querySelector(\n          '.ant-dropdown:not(.ant-dropdown-hidden)');\n\n          menu.style.visibility = 'hidden';\n          downloadAsImage(\n          SCREENSHOT_NODE_SELECTOR,\n          this.props.dashboardTitle,\n          {},\n          true)(\n          domEvent).then(() => {\n            menu.style.visibility = 'visible';\n          });\n          break;\n        }\n      case MENU_KEYS.TOGGLE_FULLSCREEN:{\n          const url = getDashboardUrl({\n            dataMask: this.props.dataMask,\n            pathname: window.location.pathname,\n            filters: getActiveFilters(),\n            hash: window.location.hash,\n            standalone: !getUrlParam(URL_PARAMS.standalone) });\n\n          window.location.replace(url);\n          break;\n        }\n      default:\n        break;}\n\n  }\n\n  render() {\n    const {\n      dashboardTitle,\n      dashboardId,\n      dashboardInfo,\n      dataMask,\n      refreshFrequency,\n      shouldPersistRefreshFrequency,\n      editMode,\n      customCss,\n      colorNamespace,\n      colorScheme,\n      layout,\n      expandedSlices,\n      onSave,\n      userCanEdit,\n      userCanShare,\n      userCanSave,\n      isLoading,\n      refreshLimit,\n      refreshWarning,\n      lastModifiedTime,\n      addSuccessToast,\n      addDangerToast } =\n    this.props;\n\n    const emailTitle = t('Superset dashboard');\n    const emailSubject = `${emailTitle} ${dashboardTitle}`;\n    const emailBody = t('Check out this dashboard: ');\n\n    const url = getDashboardUrl({\n      dataMask,\n      pathname: window.location.pathname,\n      filters: getActiveFilters(),\n      hash: window.location.hash });\n\n\n    const menu =\n    ___EmotionJSX(Menu, {\n      onClick: this.handleMenuClick,\n      selectable: false,\n      \"data-test\": \"header-actions-menu\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 244, columnNumber: 7 } },\n\n    userCanSave &&\n    ___EmotionJSX(Menu.Item, { key: MENU_KEYS.SAVE_MODAL, __self: this, __source: { fileName: _jsxFileName, lineNumber: 250, columnNumber: 11 } },\n    ___EmotionJSX(SaveModal, {\n      addSuccessToast: this.props.addSuccessToast,\n      addDangerToast: this.props.addDangerToast,\n      dashboardId: dashboardId,\n      dashboardTitle: dashboardTitle,\n      dashboardInfo: dashboardInfo,\n      saveType: SAVE_TYPE_NEWDASHBOARD,\n      layout: layout,\n      expandedSlices: expandedSlices,\n      refreshFrequency: refreshFrequency,\n      shouldPersistRefreshFrequency: shouldPersistRefreshFrequency,\n      lastModifiedTime: lastModifiedTime,\n      customCss: customCss,\n      colorNamespace: colorNamespace,\n      colorScheme: colorScheme,\n      onSave: onSave,\n      triggerNode:\n      ___EmotionJSX(\"span\", { \"data-test\": \"save-as-menu-item\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 268, columnNumber: 17 } }, t('Save as')),\n\n      canOverwrite: userCanEdit, __self: this, __source: { fileName: _jsxFileName, lineNumber: 251, columnNumber: 13 } })),\n\n\n\n    userCanShare &&\n    ___EmotionJSX(ShareMenuItems, {\n      url: url,\n      copyMenuItemTitle: t('Copy dashboard URL'),\n      emailMenuItemTitle: t('Share dashboard by email'),\n      emailSubject: emailSubject,\n      emailBody: emailBody,\n      addSuccessToast: addSuccessToast,\n      addDangerToast: addDangerToast, __self: this, __source: { fileName: _jsxFileName, lineNumber: 275, columnNumber: 11 } }),\n\n\n    ___EmotionJSX(Menu.Item, {\n      key: MENU_KEYS.REFRESH_DASHBOARD,\n      \"data-test\": \"refresh-dashboard-menu-item\",\n      disabled: isLoading, __self: this, __source: { fileName: _jsxFileName, lineNumber: 285, columnNumber: 9 } },\n\n    t('Refresh dashboard')),\n\n    ___EmotionJSX(Menu.Divider, { __self: this, __source: { fileName: _jsxFileName, lineNumber: 292, columnNumber: 9 } }),\n    ___EmotionJSX(Menu.Item, { key: MENU_KEYS.AUTOREFRESH_MODAL, __self: this, __source: { fileName: _jsxFileName, lineNumber: 293, columnNumber: 9 } },\n    ___EmotionJSX(RefreshIntervalModal, {\n      refreshFrequency: refreshFrequency,\n      refreshLimit: refreshLimit,\n      refreshWarning: refreshWarning,\n      onChange: this.changeRefreshInterval,\n      editMode: editMode,\n      triggerNode: ___EmotionJSX(\"span\", { __self: this, __source: { fileName: _jsxFileName, lineNumber: 300, columnNumber: 26 } }, t('Set auto-refresh interval')), __self: this, __source: { fileName: _jsxFileName, lineNumber: 294, columnNumber: 11 } })),\n\n\n\n    editMode &&\n    ___EmotionJSX(Menu.Item, { key: MENU_KEYS.SET_FILTER_MAPPING, __self: this, __source: { fileName: _jsxFileName, lineNumber: 305, columnNumber: 11 } },\n    ___EmotionJSX(FilterScopeModal, {\n      className: \"m-r-5\",\n      triggerNode: t('Set filter mapping'), __self: this, __source: { fileName: _jsxFileName, lineNumber: 306, columnNumber: 13 } })),\n\n\n\n\n    editMode &&\n    ___EmotionJSX(Menu.Item, { key: MENU_KEYS.EDIT_PROPERTIES, __self: this, __source: { fileName: _jsxFileName, lineNumber: 314, columnNumber: 11 } },\n    t('Edit dashboard properties')),\n\n\n\n    editMode &&\n    ___EmotionJSX(Menu.Item, { key: MENU_KEYS.EDIT_CSS, __self: this, __source: { fileName: _jsxFileName, lineNumber: 320, columnNumber: 11 } },\n    ___EmotionJSX(CssEditor, {\n      triggerNode: ___EmotionJSX(\"span\", { __self: this, __source: { fileName: _jsxFileName, lineNumber: 322, columnNumber: 28 } }, t('Edit CSS')),\n      initialCss: this.state.css,\n      templates: this.state.cssTemplates,\n      onChange: this.changeCss, __self: this, __source: { fileName: _jsxFileName, lineNumber: 321, columnNumber: 13 } })),\n\n\n\n\n    !editMode &&\n    ___EmotionJSX(Menu.Item, { key: MENU_KEYS.DOWNLOAD_AS_IMAGE, __self: this, __source: { fileName: _jsxFileName, lineNumber: 331, columnNumber: 11 } },\n    t('Download as image')),\n\n\n\n    !editMode &&\n    ___EmotionJSX(Menu.Item, { key: MENU_KEYS.TOGGLE_FULLSCREEN, __self: this, __source: { fileName: _jsxFileName, lineNumber: 337, columnNumber: 11 } },\n    getUrlParam(URL_PARAMS.standalone) ?\n    t('Exit fullscreen') :\n    t('Enter fullscreen')));\n\n\n\n\n    return (\n      ___EmotionJSX(NoAnimationDropdown, {\n        overlay: menu,\n        trigger: ['click'],\n        getPopupContainer: (triggerNode) =>\n        triggerNode.closest('.dashboard-header'), __self: this, __source: { fileName: _jsxFileName, lineNumber: 346, columnNumber: 7 } },\n\n\n      ___EmotionJSX(DropdownButton, { id: \"save-dash-split-button\", role: \"button\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 353, columnNumber: 9 } },\n      ___EmotionJSX(Icons.MoreHoriz, { __self: this, __source: { fileName: _jsxFileName, lineNumber: 354, columnNumber: 11 } }))));\n\n\n\n  } // @ts-ignore\n  __reactstandin__regenerateByEval(key, code) {// @ts-ignore\n    this[key] = eval(code);}}\nHeaderActionsDropdown.propTypes = propTypes;\nHeaderActionsDropdown.defaultProps = defaultProps;const _default =\n\nHeaderActionsDropdown;export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(propTypes, \"propTypes\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/components/Header/HeaderActionsDropdown/index.jsx\");reactHotLoader.register(defaultProps, \"defaultProps\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/components/Header/HeaderActionsDropdown/index.jsx\");reactHotLoader.register(MENU_KEYS, \"MENU_KEYS\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/components/Header/HeaderActionsDropdown/index.jsx\");reactHotLoader.register(DropdownButton, \"DropdownButton\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/components/Header/HeaderActionsDropdown/index.jsx\");reactHotLoader.register(SCREENSHOT_NODE_SELECTOR, \"SCREENSHOT_NODE_SELECTOR\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/components/Header/HeaderActionsDropdown/index.jsx\");reactHotLoader.register(HeaderActionsDropdown, \"HeaderActionsDropdown\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/components/Header/HeaderActionsDropdown/index.jsx\");reactHotLoader.register(_default, \"default\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/components/Header/HeaderActionsDropdown/index.jsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/components/Header/HeaderActionsDropdown/index.jsx"],"names":["React","PropTypes","styled","SupersetClient","t","Menu","NoAnimationDropdown","Icons","URL_PARAMS","ShareMenuItems","CssEditor","RefreshIntervalModal","SaveModal","injectCustomCss","SAVE_TYPE_NEWDASHBOARD","FilterScopeModal","downloadAsImage","downloadAsPdf","getDashboardUrl","getActiveFilters","getUrlParam","propTypes","addSuccessToast","func","isRequired","addDangerToast","dashboardInfo","object","dashboardId","number","dashboardTitle","string","dataMask","customCss","colorNamespace","colorScheme","onChange","updateCss","forceRefreshAllCharts","refreshFrequency","shouldPersistRefreshFrequency","bool","setRefreshFrequency","startPeriodicRender","editMode","userCanEdit","userCanShare","userCanSave","isLoading","layout","expandedSlices","onSave","showPropertiesModal","refreshLimit","refreshWarning","lastModifiedTime","defaultProps","undefined","MENU_KEYS","SAVE_MODAL","SHARE_DASHBOARD","REFRESH_DASHBOARD","AUTOREFRESH_MODAL","SET_FILTER_MAPPING","EDIT_PROPERTIES","EDIT_CSS","DOWNLOAD_AS_IMAGE","DOWNLOAD_AS_PDF","TOGGLE_FULLSCREEN","DropdownButton","div","theme","gridUnit","colors","grayscale","base","SCREENSHOT_NODE_SELECTOR","HeaderActionsDropdown","PureComponent","discardChanges","window","location","reload","constructor","props","state","css","cssTemplates","changeCss","bind","changeRefreshInterval","handleMenuClick","UNSAFE_componentWillMount","get","endpoint","then","json","result","map","row","value","template_name","label","setState","catch","refreshInterval","isPersistent","key","domEvent","menu","document","querySelector","style","visibility","url","pathname","filters","hash","standalone","replace","render","emailTitle","emailSubject","emailBody","triggerNode","closest"],"mappings":"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","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { styled, SupersetClient, t } from '@superset-ui/core';\n\nimport { Menu, NoAnimationDropdown } from 'src/common/components';\nimport Icons from 'src/components/Icons';\nimport { URL_PARAMS } from 'src/constants';\nimport ShareMenuItems from 'src/dashboard/components/menu/ShareMenuItems';\nimport CssEditor from 'src/dashboard/components/CssEditor';\nimport RefreshIntervalModal from 'src/dashboard/components/RefreshIntervalModal';\nimport SaveModal from 'src/dashboard/components/SaveModal';\nimport injectCustomCss from 'src/dashboard/util/injectCustomCss';\nimport { SAVE_TYPE_NEWDASHBOARD } from 'src/dashboard/util/constants';\nimport FilterScopeModal from 'src/dashboard/components/filterscope/FilterScopeModal';\nimport downloadAsImage from 'src/utils/downloadAsImage';\nimport downloadAsPdf from 'src/utils/downLoadAsPdf';\nimport getDashboardUrl from 'src/dashboard/util/getDashboardUrl';\nimport { getActiveFilters } from 'src/dashboard/util/activeDashboardFilters';\nimport { getUrlParam } from 'src/utils/urlUtils';\n\nconst propTypes = {\n  addSuccessToast: PropTypes.func.isRequired,\n  addDangerToast: PropTypes.func.isRequired,\n  dashboardInfo: PropTypes.object.isRequired,\n  dashboardId: PropTypes.number.isRequired,\n  dashboardTitle: PropTypes.string.isRequired,\n  dataMask: PropTypes.object.isRequired,\n  customCss: PropTypes.string.isRequired,\n  colorNamespace: PropTypes.string,\n  colorScheme: PropTypes.string,\n  onChange: PropTypes.func.isRequired,\n  updateCss: PropTypes.func.isRequired,\n  forceRefreshAllCharts: PropTypes.func.isRequired,\n  refreshFrequency: PropTypes.number.isRequired,\n  shouldPersistRefreshFrequency: PropTypes.bool.isRequired,\n  setRefreshFrequency: PropTypes.func.isRequired,\n  startPeriodicRender: PropTypes.func.isRequired,\n  editMode: PropTypes.bool.isRequired,\n  userCanEdit: PropTypes.bool.isRequired,\n  userCanShare: PropTypes.bool.isRequired,\n  userCanSave: PropTypes.bool.isRequired,\n  isLoading: PropTypes.bool.isRequired,\n  layout: PropTypes.object.isRequired,\n  expandedSlices: PropTypes.object.isRequired,\n  onSave: PropTypes.func.isRequired,\n  showPropertiesModal: PropTypes.func.isRequired,\n  refreshLimit: PropTypes.number,\n  refreshWarning: PropTypes.string,\n  lastModifiedTime: PropTypes.number.isRequired,\n};\n\nconst defaultProps = {\n  colorNamespace: undefined,\n  colorScheme: undefined,\n  refreshLimit: 0,\n  refreshWarning: null,\n};\n\nconst MENU_KEYS = {\n  SAVE_MODAL: 'save-modal',\n  SHARE_DASHBOARD: 'share-dashboard',\n  REFRESH_DASHBOARD: 'refresh-dashboard',\n  AUTOREFRESH_MODAL: 'autorefresh-modal',\n  SET_FILTER_MAPPING: 'set-filter-mapping',\n  EDIT_PROPERTIES: 'edit-properties',\n  EDIT_CSS: 'edit-css',\n  DOWNLOAD_AS_IMAGE: 'download-as-image',\n  DOWNLOAD_AS_PDF: 'download-as-pdf',\n  TOGGLE_FULLSCREEN: 'toggle-fullscreen',\n};\n\nconst DropdownButton = styled.div`\n  margin-left: ${({ theme }) => theme.gridUnit * 2.5}px;\n  span {\n    color: ${({ theme }) => theme.colors.grayscale.base};\n  }\n`;\n\nconst SCREENSHOT_NODE_SELECTOR = '.dashboard';\n\nclass HeaderActionsDropdown extends React.PureComponent {\n  static discardChanges() {\n    window.location.reload();\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      css: props.customCss,\n      cssTemplates: [],\n    };\n\n    this.changeCss = this.changeCss.bind(this);\n    this.changeRefreshInterval = this.changeRefreshInterval.bind(this);\n    this.handleMenuClick = this.handleMenuClick.bind(this);\n  }\n\n  UNSAFE_componentWillMount() {\n    injectCustomCss(this.state.css);\n\n    SupersetClient.get({ endpoint: '/csstemplateasyncmodelview/api/read' })\n      .then(({ json }) => {\n        const cssTemplates = json.result.map(row => ({\n          value: row.template_name,\n          css: row.css,\n          label: row.template_name,\n        }));\n        this.setState({ cssTemplates });\n      })\n      .catch(() => {\n        this.props.addDangerToast(\n          t('An error occurred while fetching available CSS templates'),\n        );\n      });\n  }\n\n  changeCss(css) {\n    this.setState({ css }, () => {\n      injectCustomCss(css);\n    });\n    this.props.onChange();\n    this.props.updateCss(css);\n  }\n\n  changeRefreshInterval(refreshInterval, isPersistent) {\n    this.props.setRefreshFrequency(refreshInterval, isPersistent);\n    this.props.startPeriodicRender(refreshInterval * 1000);\n  }\n\n  handleMenuClick({ key, domEvent }) {\n    switch (key) {\n      case MENU_KEYS.REFRESH_DASHBOARD:\n        this.props.forceRefreshAllCharts();\n        break;\n      case MENU_KEYS.EDIT_PROPERTIES:\n        this.props.showPropertiesModal();\n        break;\n      case MENU_KEYS.DOWNLOAD_AS_PDF:\n        // menu closes with a delay, we need to hide it manually,\n        // so that we don't capture it on the screenshot\n        // const pdfMenu = document.querySelector(\n        //   '.ant-dropdown:not(.ant-dropdown-hidden)',\n        // );\n        // pdfMenu.style.visibility = 'hidden';\n        downloadAsPdf(\n          SCREENSHOT_NODE_SELECTOR,\n          this.props.dashboardTitle,\n          {},\n          true,\n        )(domEvent).then(() => {\n          // pdfMenu.style.visibility = 'visible';\n        });\n        break;\n      case MENU_KEYS.DOWNLOAD_AS_IMAGE: {\n        // menu closes with a delay, we need to hide it manually,\n        // so that we don't capture it on the screenshot\n        const menu = document.querySelector(\n          '.ant-dropdown:not(.ant-dropdown-hidden)',\n        );\n        menu.style.visibility = 'hidden';\n        downloadAsImage(\n          SCREENSHOT_NODE_SELECTOR,\n          this.props.dashboardTitle,\n          {},\n          true,\n        )(domEvent).then(() => {\n          menu.style.visibility = 'visible';\n        });\n        break;\n      }\n      case MENU_KEYS.TOGGLE_FULLSCREEN: {\n        const url = getDashboardUrl({\n          dataMask: this.props.dataMask,\n          pathname: window.location.pathname,\n          filters: getActiveFilters(),\n          hash: window.location.hash,\n          standalone: !getUrlParam(URL_PARAMS.standalone),\n        });\n        window.location.replace(url);\n        break;\n      }\n      default:\n        break;\n    }\n  }\n\n  render() {\n    const {\n      dashboardTitle,\n      dashboardId,\n      dashboardInfo,\n      dataMask,\n      refreshFrequency,\n      shouldPersistRefreshFrequency,\n      editMode,\n      customCss,\n      colorNamespace,\n      colorScheme,\n      layout,\n      expandedSlices,\n      onSave,\n      userCanEdit,\n      userCanShare,\n      userCanSave,\n      isLoading,\n      refreshLimit,\n      refreshWarning,\n      lastModifiedTime,\n      addSuccessToast,\n      addDangerToast,\n    } = this.props;\n\n    const emailTitle = t('Superset dashboard');\n    const emailSubject = `${emailTitle} ${dashboardTitle}`;\n    const emailBody = t('Check out this dashboard: ');\n\n    const url = getDashboardUrl({\n      dataMask,\n      pathname: window.location.pathname,\n      filters: getActiveFilters(),\n      hash: window.location.hash,\n    });\n\n    const menu = (\n      <Menu\n        onClick={this.handleMenuClick}\n        selectable={false}\n        data-test=\"header-actions-menu\"\n      >\n        {userCanSave && (\n          <Menu.Item key={MENU_KEYS.SAVE_MODAL}>\n            <SaveModal\n              addSuccessToast={this.props.addSuccessToast}\n              addDangerToast={this.props.addDangerToast}\n              dashboardId={dashboardId}\n              dashboardTitle={dashboardTitle}\n              dashboardInfo={dashboardInfo}\n              saveType={SAVE_TYPE_NEWDASHBOARD}\n              layout={layout}\n              expandedSlices={expandedSlices}\n              refreshFrequency={refreshFrequency}\n              shouldPersistRefreshFrequency={shouldPersistRefreshFrequency}\n              lastModifiedTime={lastModifiedTime}\n              customCss={customCss}\n              colorNamespace={colorNamespace}\n              colorScheme={colorScheme}\n              onSave={onSave}\n              triggerNode={\n                <span data-test=\"save-as-menu-item\">{t('Save as')}</span>\n              }\n              canOverwrite={userCanEdit}\n            />\n          </Menu.Item>\n        )}\n        {userCanShare && (\n          <ShareMenuItems\n            url={url}\n            copyMenuItemTitle={t('Copy dashboard URL')}\n            emailMenuItemTitle={t('Share dashboard by email')}\n            emailSubject={emailSubject}\n            emailBody={emailBody}\n            addSuccessToast={addSuccessToast}\n            addDangerToast={addDangerToast}\n          />\n        )}\n        <Menu.Item\n          key={MENU_KEYS.REFRESH_DASHBOARD}\n          data-test=\"refresh-dashboard-menu-item\"\n          disabled={isLoading}\n        >\n          {t('Refresh dashboard')}\n        </Menu.Item>\n        <Menu.Divider />\n        <Menu.Item key={MENU_KEYS.AUTOREFRESH_MODAL}>\n          <RefreshIntervalModal\n            refreshFrequency={refreshFrequency}\n            refreshLimit={refreshLimit}\n            refreshWarning={refreshWarning}\n            onChange={this.changeRefreshInterval}\n            editMode={editMode}\n            triggerNode={<span>{t('Set auto-refresh interval')}</span>}\n          />\n        </Menu.Item>\n\n        {editMode && (\n          <Menu.Item key={MENU_KEYS.SET_FILTER_MAPPING}>\n            <FilterScopeModal\n              className=\"m-r-5\"\n              triggerNode={t('Set filter mapping')}\n            />\n          </Menu.Item>\n        )}\n\n        {editMode && (\n          <Menu.Item key={MENU_KEYS.EDIT_PROPERTIES}>\n            {t('Edit dashboard properties')}\n          </Menu.Item>\n        )}\n\n        {editMode && (\n          <Menu.Item key={MENU_KEYS.EDIT_CSS}>\n            <CssEditor\n              triggerNode={<span>{t('Edit CSS')}</span>}\n              initialCss={this.state.css}\n              templates={this.state.cssTemplates}\n              onChange={this.changeCss}\n            />\n          </Menu.Item>\n        )}\n\n        {!editMode && (\n          <Menu.Item key={MENU_KEYS.DOWNLOAD_AS_IMAGE}>\n            {t('Download as image')}\n          </Menu.Item>\n        )}\n\n        {!editMode && (\n          <Menu.Item key={MENU_KEYS.TOGGLE_FULLSCREEN}>\n            {getUrlParam(URL_PARAMS.standalone)\n              ? t('Exit fullscreen')\n              : t('Enter fullscreen')}\n          </Menu.Item>\n        )}\n      </Menu>\n    );\n    return (\n      <NoAnimationDropdown\n        overlay={menu}\n        trigger={['click']}\n        getPopupContainer={triggerNode =>\n          triggerNode.closest('.dashboard-header')\n        }\n      >\n        <DropdownButton id=\"save-dash-split-button\" role=\"button\">\n          <Icons.MoreHoriz />\n        </DropdownButton>\n      </NoAnimationDropdown>\n    );\n  }\n}\n\nHeaderActionsDropdown.propTypes = propTypes;\nHeaderActionsDropdown.defaultProps = defaultProps;\n\nexport default HeaderActionsDropdown;\n"]},"metadata":{},"sourceType":"module"}