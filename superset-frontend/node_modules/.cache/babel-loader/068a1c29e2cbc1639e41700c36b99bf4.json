{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/my_plugin/superset/superset-frontend/src/views/CRUD/alert/components/NotificationMethod.tsx\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState } from 'react';\nimport { styled, t, useTheme } from '@superset-ui/core';\nimport { Select } from 'src/components';\nimport Icons from 'src/components/Icons';\nimport { StyledInputContainer } from '../AlertReportModal';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst StyledNotificationMethod = styled.div`\n  margin-bottom: 10px;\n\n  .input-container {\n    textarea {\n      height: auto;\n    }\n  }\n\n  .inline-container {\n    margin-bottom: 10px;\n\n    .input-container {\n      margin-left: 10px;\n    }\n\n    > div {\n      margin: 0;\n    }\n\n    .delete-button {\n      margin-left: 10px;\n      padding-top: 3px;\n    }\n  }\n`;\nexport const NotificationMethod = ({ setting = null, index, onUpdate, onRemove }) => {\n  const { method, recipients, options } = setting || {};\n  const [recipientValue, setRecipientValue] = useState(recipients || '');\n  const theme = useTheme();\n  if (!setting) {\n    return null;\n  }\n  const onMethodChange = (method) => {\n    // Since we're swapping the method, reset the recipients\n    setRecipientValue('');\n    if (onUpdate) {\n      const updatedSetting = {\n        ...setting,\n        method,\n        recipients: '' };\n\n      onUpdate(index, updatedSetting);\n    }\n  };\n  const onRecipientsChange = (event) => {\n    const { target } = event;\n    setRecipientValue(target.value);\n    if (onUpdate) {\n      const updatedSetting = {\n        ...setting,\n        recipients: target.value };\n\n      onUpdate(index, updatedSetting);\n    }\n  };\n  // Set recipients\n  if (!!recipients && recipientValue !== recipients) {\n    setRecipientValue(recipients);\n  }\n  return ___EmotionJSX(StyledNotificationMethod, { __self: this, __source: { fileName: _jsxFileName, lineNumber: 84, columnNumber: 13 } },\n  ___EmotionJSX(\"div\", { className: \"inline-container\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 85, columnNumber: 7 } },\n  ___EmotionJSX(StyledInputContainer, { __self: this, __source: { fileName: _jsxFileName, lineNumber: 86, columnNumber: 9 } },\n  ___EmotionJSX(\"div\", { className: \"input-container\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 87, columnNumber: 11 } },\n  ___EmotionJSX(Select, { ariaLabel: t('Delivery method'), \"data-test\": \"select-delivery-method\", onChange: onMethodChange, placeholder: t('Select Delivery Method'), options: (options || []).map((method) => ({\n      label: method,\n      value: method })),\n    value: method, __self: this, __source: { fileName: _jsxFileName, lineNumber: 88, columnNumber: 13 } }))),\n\n\n  method !== undefined && !!onRemove ? ___EmotionJSX(\"span\", { role: \"button\", tabIndex: 0, className: \"delete-button\", onClick: () => onRemove(index), __self: this, __source: { fileName: _jsxFileName, lineNumber: 94, columnNumber: 48 } },\n  ___EmotionJSX(Icons.Trash, { iconColor: theme.colors.grayscale.base, __self: this, __source: { fileName: _jsxFileName, lineNumber: 95, columnNumber: 13 } })) :\n  null),\n\n  method !== undefined ? ___EmotionJSX(StyledInputContainer, { __self: this, __source: { fileName: _jsxFileName, lineNumber: 98, columnNumber: 32 } },\n  ___EmotionJSX(\"div\", { className: \"control-label\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 99, columnNumber: 11 } }, t(method)),\n  ___EmotionJSX(\"div\", { className: \"input-container\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 100, columnNumber: 11 } },\n  ___EmotionJSX(\"textarea\", { name: \"recipients\", value: recipientValue, onChange: onRecipientsChange, __self: this, __source: { fileName: _jsxFileName, lineNumber: 101, columnNumber: 13 } })),\n\n  ___EmotionJSX(\"div\", { className: \"helper\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 103, columnNumber: 11 } },\n  t('Recipients are separated by \",\" or \";\"'))) :\n\n  null);\n\n};__signature__(NotificationMethod, \"useState{[recipientValue, setRecipientValue](recipients || '')}\\nuseTheme{theme}\", () => [useTheme]);;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(StyledNotificationMethod, \"StyledNotificationMethod\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/views/CRUD/alert/components/NotificationMethod.tsx\");reactHotLoader.register(NotificationMethod, \"NotificationMethod\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/views/CRUD/alert/components/NotificationMethod.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/home/ubuntu/my_plugin/superset/superset-frontend/src/views/CRUD/alert/components/NotificationMethod.tsx"],"names":[],"mappings":"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","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { FunctionComponent, useState } from 'react';\nimport { styled, t, useTheme } from '@superset-ui/core';\nimport { Select } from 'src/components';\nimport Icons from 'src/components/Icons';\nimport { NotificationMethodOption } from 'src/views/CRUD/alert/types';\nimport { StyledInputContainer } from '../AlertReportModal';\n\nconst StyledNotificationMethod = styled.div`\n  margin-bottom: 10px;\n\n  .input-container {\n    textarea {\n      height: auto;\n    }\n  }\n\n  .inline-container {\n    margin-bottom: 10px;\n\n    .input-container {\n      margin-left: 10px;\n    }\n\n    > div {\n      margin: 0;\n    }\n\n    .delete-button {\n      margin-left: 10px;\n      padding-top: 3px;\n    }\n  }\n`;\n\ntype NotificationSetting = {\n  method?: NotificationMethodOption;\n  recipients: string;\n  options: NotificationMethodOption[];\n};\n\ninterface NotificationMethodProps {\n  setting?: NotificationSetting | null;\n  index: number;\n  onUpdate?: (index: number, updatedSetting: NotificationSetting) => void;\n  onRemove?: (index: number) => void;\n}\n\nexport const NotificationMethod: FunctionComponent<NotificationMethodProps> = ({\n  setting = null,\n  index,\n  onUpdate,\n  onRemove,\n}) => {\n  const { method, recipients, options } = setting || {};\n  const [recipientValue, setRecipientValue] = useState<string>(\n    recipients || '',\n  );\n  const theme = useTheme();\n\n  if (!setting) {\n    return null;\n  }\n\n  const onMethodChange = (method: NotificationMethodOption) => {\n    // Since we're swapping the method, reset the recipients\n    setRecipientValue('');\n    if (onUpdate) {\n      const updatedSetting = {\n        ...setting,\n        method,\n        recipients: '',\n      };\n\n      onUpdate(index, updatedSetting);\n    }\n  };\n\n  const onRecipientsChange = (\n    event: React.ChangeEvent<HTMLTextAreaElement>,\n  ) => {\n    const { target } = event;\n\n    setRecipientValue(target.value);\n\n    if (onUpdate) {\n      const updatedSetting = {\n        ...setting,\n        recipients: target.value,\n      };\n\n      onUpdate(index, updatedSetting);\n    }\n  };\n\n  // Set recipients\n  if (!!recipients && recipientValue !== recipients) {\n    setRecipientValue(recipients);\n  }\n\n  return (\n    <StyledNotificationMethod>\n      <div className=\"inline-container\">\n        <StyledInputContainer>\n          <div className=\"input-container\">\n            <Select\n              ariaLabel={t('Delivery method')}\n              data-test=\"select-delivery-method\"\n              onChange={onMethodChange}\n              placeholder={t('Select Delivery Method')}\n              options={(options || []).map(\n                (method: NotificationMethodOption) => ({\n                  label: method,\n                  value: method,\n                }),\n              )}\n              value={method}\n            />\n          </div>\n        </StyledInputContainer>\n        {method !== undefined && !!onRemove ? (\n          <span\n            role=\"button\"\n            tabIndex={0}\n            className=\"delete-button\"\n            onClick={() => onRemove(index)}\n          >\n            <Icons.Trash iconColor={theme.colors.grayscale.base} />\n          </span>\n        ) : null}\n      </div>\n      {method !== undefined ? (\n        <StyledInputContainer>\n          <div className=\"control-label\">{t(method)}</div>\n          <div className=\"input-container\">\n            <textarea\n              name=\"recipients\"\n              value={recipientValue}\n              onChange={onRecipientsChange}\n            />\n          </div>\n          <div className=\"helper\">\n            {t('Recipients are separated by \",\" or \";\"')}\n          </div>\n        </StyledInputContainer>\n      ) : null}\n    </StyledNotificationMethod>\n  );\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}