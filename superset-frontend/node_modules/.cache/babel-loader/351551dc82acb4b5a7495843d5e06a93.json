{"ast":null,"code":"import { css as _css } from \"@emotion/react\";var _jsxFileName = \"/home/ubuntu/my_plugin/superset/superset-frontend/src/views/CRUD/data/database/DatabaseModal/ExtraOptions.tsx\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport cx from 'classnames';\nimport { t } from '@superset-ui/core';\nimport InfoTooltip from 'src/components/InfoTooltip';\nimport IndeterminateCheckbox from 'src/components/IndeterminateCheckbox';\nimport Collapse from 'src/components/Collapse';\nimport { StyledInputContainer, StyledJsonEditor, StyledExpandableForm, antdCollapseStyles, no_margin_bottom } from './styles';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst ExtraOptions = ({ db, onInputChange, onTextChange, onEditorChange, onExtraInputChange, onExtraEditorChange }) => {var _db$extra_json, _db$extra_json2, _db$extra_json3, _db$extra_json3$metad, _db$extra_json4, _db$extra_json4$metad, _db$extra_json5, _db$extra_json6, _db$extra_json7, _db$extra_json8, _db$extra_json9;\n  const expandableModalIsOpen = !!(db != null && db.expose_in_sqllab);\n  const createAsOpen = !!(db != null && db.allow_ctas || db != null && db.allow_cvas);\n  return ___EmotionJSX(Collapse, { expandIconPosition: \"right\", accordion: true, css: (theme) => antdCollapseStyles(theme), __self: this, __source: { fileName: _jsxFileName, lineNumber: 29, columnNumber: 13 } },\n  ___EmotionJSX(Collapse.Panel, { header: ___EmotionJSX(\"div\", { __self: this, __source: { fileName: _jsxFileName, lineNumber: 30, columnNumber: 31 } },\n    ___EmotionJSX(\"h4\", { __self: this, __source: { fileName: _jsxFileName, lineNumber: 31, columnNumber: 13 } }, \"SQL Lab\"),\n    ___EmotionJSX(\"p\", { className: \"helper\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 32, columnNumber: 13 } }, \"Adjust how this database will interact with SQL Lab.\")),\n\n\n    key: \"1\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 30, columnNumber: 7 } },\n  ___EmotionJSX(StyledInputContainer, { css: no_margin_bottom, __self: this, __source: { fileName: _jsxFileName, lineNumber: 36, columnNumber: 9 } },\n  ___EmotionJSX(\"div\", { className: \"input-container\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 37, columnNumber: 11 } },\n  ___EmotionJSX(IndeterminateCheckbox, { id: \"expose_in_sqllab\", indeterminate: false, checked: !!(db != null && db.expose_in_sqllab), onChange: onInputChange, labelText: t('Expose database in SQL Lab'), __self: this, __source: { fileName: _jsxFileName, lineNumber: 38, columnNumber: 13 } }),\n  ___EmotionJSX(InfoTooltip, { tooltip: t('Allow this database to be queried in SQL Lab'), __self: this, __source: { fileName: _jsxFileName, lineNumber: 39, columnNumber: 13 } })),\n\n  ___EmotionJSX(StyledExpandableForm, { className: cx('expandable', {\n      open: expandableModalIsOpen,\n      'ctas-open': createAsOpen }), __self: this, __source: { fileName: _jsxFileName, lineNumber: 41, columnNumber: 11 } },\n\n  ___EmotionJSX(StyledInputContainer, { css: no_margin_bottom, __self: this, __source: { fileName: _jsxFileName, lineNumber: 45, columnNumber: 13 } },\n  ___EmotionJSX(\"div\", { className: \"input-container\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 46, columnNumber: 15 } },\n  ___EmotionJSX(IndeterminateCheckbox, { id: \"allow_ctas\", indeterminate: false, checked: !!(db != null && db.allow_ctas), onChange: onInputChange, labelText: t('Allow CREATE TABLE AS'), __self: this, __source: { fileName: _jsxFileName, lineNumber: 47, columnNumber: 17 } }),\n  ___EmotionJSX(InfoTooltip, { tooltip: t('Allow creation of new tables based on queries'), __self: this, __source: { fileName: _jsxFileName, lineNumber: 48, columnNumber: 17 } }))),\n\n\n  ___EmotionJSX(StyledInputContainer, { css: no_margin_bottom, __self: this, __source: { fileName: _jsxFileName, lineNumber: 51, columnNumber: 13 } },\n  ___EmotionJSX(\"div\", { className: \"input-container\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 52, columnNumber: 15 } },\n  ___EmotionJSX(IndeterminateCheckbox, { id: \"allow_cvas\", indeterminate: false, checked: !!(db != null && db.allow_cvas), onChange: onInputChange, labelText: t('Allow CREATE VIEW AS'), __self: this, __source: { fileName: _jsxFileName, lineNumber: 53, columnNumber: 17 } }),\n  ___EmotionJSX(InfoTooltip, { tooltip: t('Allow creation of new views based on queries'), __self: this, __source: { fileName: _jsxFileName, lineNumber: 54, columnNumber: 17 } })),\n\n  ___EmotionJSX(StyledInputContainer, { className: cx('expandable', { open: createAsOpen }), __self: this, __source: { fileName: _jsxFileName, lineNumber: 56, columnNumber: 15 } },\n  ___EmotionJSX(\"div\", { className: \"control-label\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 57, columnNumber: 17 } }, t('CTAS & CVAS SCHEMA')),\n  ___EmotionJSX(\"div\", { className: \"input-container\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 58, columnNumber: 17 } },\n  ___EmotionJSX(\"input\", { type: \"text\", name: \"force_ctas_schema\", value: (db == null ? void 0 : db.force_ctas_schema) || '', placeholder: t('Create or select schema...'), onChange: onInputChange, __self: this, __source: { fileName: _jsxFileName, lineNumber: 59, columnNumber: 19 } })),\n\n  ___EmotionJSX(\"div\", { className: \"helper\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 61, columnNumber: 17 } },\n  t('Force all tables and views to be created in this schema when clicking CTAS or CVAS in SQL Lab.')))),\n\n\n\n  ___EmotionJSX(StyledInputContainer, { css: no_margin_bottom, __self: this, __source: { fileName: _jsxFileName, lineNumber: 66, columnNumber: 13 } },\n  ___EmotionJSX(\"div\", { className: \"input-container\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 67, columnNumber: 15 } },\n  ___EmotionJSX(IndeterminateCheckbox, { id: \"allow_dml\", indeterminate: false, checked: !!(db != null && db.allow_dml), onChange: onInputChange, labelText: t('Allow DML'), __self: this, __source: { fileName: _jsxFileName, lineNumber: 68, columnNumber: 17 } }),\n  ___EmotionJSX(InfoTooltip, { tooltip: t('Allow manipulation of the database using non-SELECT statements such as UPDATE, DELETE, CREATE, etc.'), __self: this, __source: { fileName: _jsxFileName, lineNumber: 69, columnNumber: 17 } }))),\n\n\n  ___EmotionJSX(StyledInputContainer, { css: no_margin_bottom, __self: this, __source: { fileName: _jsxFileName, lineNumber: 72, columnNumber: 13 } },\n  ___EmotionJSX(\"div\", { className: \"input-container\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 73, columnNumber: 15 } },\n  ___EmotionJSX(IndeterminateCheckbox, { id: \"allow_multi_schema_metadata_fetch\", indeterminate: false, checked: !!(db != null && db.allow_multi_schema_metadata_fetch), onChange: onInputChange, labelText: t('Allow Multi Schema Metadata Fetch'), __self: this, __source: { fileName: _jsxFileName, lineNumber: 74, columnNumber: 17 } }),\n  ___EmotionJSX(InfoTooltip, { tooltip: t('Allow SQL Lab to fetch a list of all tables and all views across all database ' +\n    'schemas. For large data warehouse with thousands of tables, this can be ' +\n    'expensive and put strain on the system.'), __self: this, __source: { fileName: _jsxFileName, lineNumber: 75, columnNumber: 17 } }))),\n\n\n  ___EmotionJSX(StyledInputContainer, { css: no_margin_bottom, __self: this, __source: { fileName: _jsxFileName, lineNumber: 80, columnNumber: 13 } },\n  ___EmotionJSX(\"div\", { className: \"input-container\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 81, columnNumber: 15 } },\n  ___EmotionJSX(IndeterminateCheckbox, { id: \"cost_estimate_enabled\", indeterminate: false, checked: !!(db != null && (_db$extra_json = db.extra_json) != null && _db$extra_json.cost_estimate_enabled), onChange: onExtraInputChange, labelText: t('Enable query cost estimation'), __self: this, __source: { fileName: _jsxFileName, lineNumber: 82, columnNumber: 17 } }),\n  ___EmotionJSX(InfoTooltip, { tooltip: t('For Presto and Postgres, shows a button to compute cost before running a query.'), __self: this, __source: { fileName: _jsxFileName, lineNumber: 83, columnNumber: 17 } }))),\n\n\n  ___EmotionJSX(StyledInputContainer, { __self: this, __source: { fileName: _jsxFileName, lineNumber: 86, columnNumber: 13 } },\n  ___EmotionJSX(\"div\", { className: \"input-container\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 87, columnNumber: 15 } },\n  ___EmotionJSX(IndeterminateCheckbox, { id: \"allows_virtual_table_explore\", indeterminate: false, checked: !!(db != null && (_db$extra_json2 = db.extra_json) != null && _db$extra_json2.allows_virtual_table_explore), onChange: onExtraInputChange, labelText: t('Allow this database to be explored'), __self: this, __source: { fileName: _jsxFileName, lineNumber: 88, columnNumber: 17 } }),\n  ___EmotionJSX(InfoTooltip, { tooltip: t('When enabled, users are able to visualize SQL Lab results in Explore.'), __self: this, __source: { fileName: _jsxFileName, lineNumber: 89, columnNumber: 17 } })))))),\n\n\n\n\n\n  ___EmotionJSX(Collapse.Panel, { header: ___EmotionJSX(\"div\", { __self: this, __source: { fileName: _jsxFileName, lineNumber: 95, columnNumber: 31 } },\n    ___EmotionJSX(\"h4\", { __self: this, __source: { fileName: _jsxFileName, lineNumber: 96, columnNumber: 13 } }, \"Performance\"),\n    ___EmotionJSX(\"p\", { className: \"helper\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 97, columnNumber: 13 } }, \"Adjust performance settings of this database.\")),\n\n\n    key: \"2\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 95, columnNumber: 7 } },\n  ___EmotionJSX(StyledInputContainer, { className: \"mb-8\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 101, columnNumber: 9 } },\n  ___EmotionJSX(\"div\", { className: \"control-label\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 102, columnNumber: 11 } }, t('Chart cache timeout')),\n  ___EmotionJSX(\"div\", { className: \"input-container\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 103, columnNumber: 11 } },\n  ___EmotionJSX(\"input\", { type: \"number\", name: \"cache_timeout\", value: (db == null ? void 0 : db.cache_timeout) || '', placeholder: t('Enter duration in seconds'), onChange: onInputChange, __self: this, __source: { fileName: _jsxFileName, lineNumber: 104, columnNumber: 13 } })),\n\n  ___EmotionJSX(\"div\", { className: \"helper\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 106, columnNumber: 11 } },\n  t('Duration (in seconds) of the caching timeout for charts of this database.' +\n  ' A timeout of 0 indicates that the cache never expires.' +\n  ' Note this defaults to the global timeout if undefined.'))),\n\n\n  ___EmotionJSX(StyledInputContainer, { __self: this, __source: { fileName: _jsxFileName, lineNumber: 112, columnNumber: 9 } },\n  ___EmotionJSX(\"div\", { className: \"control-label\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 113, columnNumber: 11 } }, t('Schema cache timeout')),\n  ___EmotionJSX(\"div\", { className: \"input-container\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 114, columnNumber: 11 } },\n  ___EmotionJSX(\"input\", { type: \"number\", name: \"schema_cache_timeout\", value: (db == null ? void 0 : (_db$extra_json3 = db.extra_json) == null ? void 0 : (_db$extra_json3$metad = _db$extra_json3.metadata_cache_timeout) == null ? void 0 : _db$extra_json3$metad.schema_cache_timeout) ||\n    '', placeholder: t('Enter duration in seconds'), onChange: onExtraInputChange, \"data-test\": \"schema-cache-timeout-test\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 115, columnNumber: 13 } })),\n\n  ___EmotionJSX(\"div\", { className: \"helper\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 118, columnNumber: 11 } },\n  t('Duration (in seconds) of the metadata caching timeout for schemas of ' +\n  'this database. If left unset, the cache never expires.'))),\n\n\n  ___EmotionJSX(StyledInputContainer, { __self: this, __source: { fileName: _jsxFileName, lineNumber: 123, columnNumber: 9 } },\n  ___EmotionJSX(\"div\", { className: \"control-label\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 124, columnNumber: 11 } }, t('Table cache timeout')),\n  ___EmotionJSX(\"div\", { className: \"input-container\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 125, columnNumber: 11 } },\n  ___EmotionJSX(\"input\", { type: \"number\", name: \"table_cache_timeout\", value: (db == null ? void 0 : (_db$extra_json4 = db.extra_json) == null ? void 0 : (_db$extra_json4$metad = _db$extra_json4.metadata_cache_timeout) == null ? void 0 : _db$extra_json4$metad.table_cache_timeout) ||\n    '', placeholder: t('Enter duration in seconds'), onChange: onExtraInputChange, \"data-test\": \"table-cache-timeout-test\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 126, columnNumber: 13 } })),\n\n  ___EmotionJSX(\"div\", { className: \"helper\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 129, columnNumber: 11 } },\n  t('Duration (in seconds) of the metadata caching timeout for tables of ' +\n  'this database. If left unset, the cache never expires. '))),\n\n\n  ___EmotionJSX(StyledInputContainer, { css: /*#__PURE__*/_css({ no_margin_bottom }, process.env.NODE_ENV === \"production\" ? \"\" : \";label:ExtraOptions;\", process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"), __self: this, __source: { fileName: _jsxFileName, lineNumber: 134, columnNumber: 9 } },\n  ___EmotionJSX(\"div\", { className: \"input-container\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 135, columnNumber: 11 } },\n  ___EmotionJSX(IndeterminateCheckbox, { id: \"allow_run_async\", indeterminate: false, checked: !!(db != null && db.allow_run_async), onChange: onInputChange, labelText: t('Asynchronous query execution'), __self: this, __source: { fileName: _jsxFileName, lineNumber: 136, columnNumber: 13 } }),\n  ___EmotionJSX(InfoTooltip, { tooltip: t('Operate the database in asynchronous mode, meaning that the queries ' +\n    'are executed on remote workers as opposed to on the web server itself. ' +\n    'This assumes that you have a Celery worker setup as well as a results ' +\n    'backend. Refer to the installation docs for more information.'), __self: this, __source: { fileName: _jsxFileName, lineNumber: 137, columnNumber: 13 } }))),\n\n\n  ___EmotionJSX(StyledInputContainer, { css: /*#__PURE__*/_css({ no_margin_bottom }, process.env.NODE_ENV === \"production\" ? \"\" : \";label:ExtraOptions;\", process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"), __self: this, __source: { fileName: _jsxFileName, lineNumber: 143, columnNumber: 9 } },\n  ___EmotionJSX(\"div\", { className: \"input-container\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 144, columnNumber: 11 } },\n  ___EmotionJSX(IndeterminateCheckbox, { id: \"cancel_query_on_windows_unload\", indeterminate: false, checked: !!(db != null && (_db$extra_json5 = db.extra_json) != null && _db$extra_json5.cancel_query_on_windows_unload), onChange: onExtraInputChange, labelText: t('Cancel query on window unload event'), __self: this, __source: { fileName: _jsxFileName, lineNumber: 145, columnNumber: 13 } }),\n  ___EmotionJSX(InfoTooltip, { tooltip: t('Terminate running queries when browser window closed or navigated ' +\n    'to another page. Available for Presto, Hive, MySQL, Postgres and ' +\n    'Snowflake databases.'), __self: this, __source: { fileName: _jsxFileName, lineNumber: 146, columnNumber: 13 } })))),\n\n\n\n  ___EmotionJSX(Collapse.Panel, { header: ___EmotionJSX(\"div\", { __self: this, __source: { fileName: _jsxFileName, lineNumber: 152, columnNumber: 31 } },\n    ___EmotionJSX(\"h4\", { __self: this, __source: { fileName: _jsxFileName, lineNumber: 153, columnNumber: 13 } }, \"Security\"),\n    ___EmotionJSX(\"p\", { className: \"helper\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 154, columnNumber: 13 } }, \"Add extra connection information.\")),\n    key: \"3\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 152, columnNumber: 7 } },\n  ___EmotionJSX(StyledInputContainer, { __self: this, __source: { fileName: _jsxFileName, lineNumber: 156, columnNumber: 9 } },\n  ___EmotionJSX(\"div\", { className: \"control-label\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 157, columnNumber: 11 } }, t('Secure extra')),\n  ___EmotionJSX(\"div\", { className: \"input-container\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 158, columnNumber: 11 } },\n  ___EmotionJSX(StyledJsonEditor, { name: \"encrypted_extra\", value: (db == null ? void 0 : db.encrypted_extra) || '', placeholder: t('Secure extra'), onChange: (json) => onEditorChange({ json, name: 'encrypted_extra' }), width: \"100%\", height: \"160px\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 159, columnNumber: 13 } })),\n\n  ___EmotionJSX(\"div\", { className: \"helper\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 161, columnNumber: 11 } },\n  ___EmotionJSX(\"div\", { __self: this, __source: { fileName: _jsxFileName, lineNumber: 162, columnNumber: 13 } },\n  t('JSON string containing additional connection configuration. ' +\n  'This is used to provide connection information for systems ' +\n  'like Hive, Presto and BigQuery which do not conform to the ' +\n  'username:password syntax normally used by SQLAlchemy.')))),\n\n\n\n  ___EmotionJSX(StyledInputContainer, { __self: this, __source: { fileName: _jsxFileName, lineNumber: 170, columnNumber: 9 } },\n  ___EmotionJSX(\"div\", { className: \"control-label\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 171, columnNumber: 11 } }, t('Root certificate')),\n  ___EmotionJSX(\"div\", { className: \"input-container\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 172, columnNumber: 11 } },\n  ___EmotionJSX(\"textarea\", { name: \"server_cert\", value: (db == null ? void 0 : db.server_cert) || '', placeholder: t('Enter CA_BUNDLE'), onChange: onTextChange, __self: this, __source: { fileName: _jsxFileName, lineNumber: 173, columnNumber: 13 } })),\n\n  ___EmotionJSX(\"div\", { className: \"helper\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 175, columnNumber: 11 } },\n  t('Optional CA_BUNDLE contents to validate HTTPS requests. Only ' +\n  'available on certain database engines.'))),\n\n\n  ___EmotionJSX(StyledInputContainer, { __self: this, __source: { fileName: _jsxFileName, lineNumber: 180, columnNumber: 9 } },\n  ___EmotionJSX(\"div\", { className: \"control-label\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 181, columnNumber: 11 } },\n  t('Schemas allowed for CSV upload')),\n\n  ___EmotionJSX(\"div\", { className: \"input-container\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 184, columnNumber: 11 } },\n  ___EmotionJSX(\"input\", { type: \"text\", name: \"schemas_allowed_for_csv_upload\", value: ((db == null ? void 0 : (_db$extra_json6 = db.extra_json) == null ? void 0 : _db$extra_json6.schemas_allowed_for_csv_upload) || []).join(','), placeholder: \"schema1,schema2\", onChange: onExtraInputChange, __self: this, __source: { fileName: _jsxFileName, lineNumber: 185, columnNumber: 13 } })),\n\n  ___EmotionJSX(\"div\", { className: \"helper\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 187, columnNumber: 11 } },\n  t('A comma-separated list of schemas that CSVs are allowed to upload to.'))),\n\n\n  ___EmotionJSX(StyledInputContainer, { css: /*#__PURE__*/_css({ no_margin_bottom }, process.env.NODE_ENV === \"production\" ? \"\" : \";label:ExtraOptions;\", process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"), __self: this, __source: { fileName: _jsxFileName, lineNumber: 191, columnNumber: 9 } },\n  ___EmotionJSX(\"div\", { className: \"input-container\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 192, columnNumber: 11 } },\n  ___EmotionJSX(IndeterminateCheckbox, { id: \"impersonate_user\", indeterminate: false, checked: !!(db != null && db.impersonate_user), onChange: onInputChange, labelText: t('Impersonate logged in user (Presto, Trino, Drill, Hive, and GSheets)'), __self: this, __source: { fileName: _jsxFileName, lineNumber: 193, columnNumber: 13 } }),\n  ___EmotionJSX(InfoTooltip, { tooltip: t('If Presto or Trino, all the queries in SQL Lab are going to be executed as the ' +\n    'currently logged on user who must have permission to run them. If Hive ' +\n    'and hive.server2.enable.doAs is enabled, will run the queries as ' +\n    'service account, but impersonate the currently logged on user via ' +\n    'hive.server2.proxy.user property.'), __self: this, __source: { fileName: _jsxFileName, lineNumber: 194, columnNumber: 13 } }))),\n\n\n  ___EmotionJSX(StyledInputContainer, { css: /*#__PURE__*/_css({ ...no_margin_bottom }, process.env.NODE_ENV === \"production\" ? \"\" : \";label:ExtraOptions;\", process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"), __self: this, __source: { fileName: _jsxFileName, lineNumber: 201, columnNumber: 9 } },\n  ___EmotionJSX(\"div\", { className: \"input-container\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 202, columnNumber: 11 } },\n  ___EmotionJSX(IndeterminateCheckbox, { id: \"allow_csv_upload\", indeterminate: false, checked: !!(db != null && db.allow_csv_upload), onChange: onInputChange, labelText: t('Allow data upload'), __self: this, __source: { fileName: _jsxFileName, lineNumber: 203, columnNumber: 13 } }),\n  ___EmotionJSX(InfoTooltip, { tooltip: t('If selected, please set the schemas allowed for data upload in Extra.'), __self: this, __source: { fileName: _jsxFileName, lineNumber: 204, columnNumber: 13 } })))),\n\n\n\n  ___EmotionJSX(Collapse.Panel, { header: ___EmotionJSX(\"div\", { __self: this, __source: { fileName: _jsxFileName, lineNumber: 208, columnNumber: 31 } },\n    ___EmotionJSX(\"h4\", { __self: this, __source: { fileName: _jsxFileName, lineNumber: 209, columnNumber: 13 } }, \"Other\"),\n    ___EmotionJSX(\"p\", { className: \"helper\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 210, columnNumber: 13 } }, \"Additional settings.\")),\n    key: \"4\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 208, columnNumber: 7 } },\n  ___EmotionJSX(StyledInputContainer, { __self: this, __source: { fileName: _jsxFileName, lineNumber: 212, columnNumber: 9 } },\n  ___EmotionJSX(\"div\", { className: \"control-label\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 213, columnNumber: 11 } }, t('Metadata Parameters')),\n  ___EmotionJSX(\"div\", { className: \"input-container\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 214, columnNumber: 11 } },\n  ___EmotionJSX(StyledJsonEditor, { name: \"metadata_params\", value: (db == null ? void 0 : (_db$extra_json7 = db.extra_json) == null ? void 0 : _db$extra_json7.metadata_params) || '', placeholder: t('Metadata Parameters'), onChange: (json) => onExtraEditorChange({ json, name: 'metadata_params' }), width: \"100%\", height: \"160px\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 215, columnNumber: 13 } })),\n\n  ___EmotionJSX(\"div\", { className: \"helper\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 217, columnNumber: 11 } },\n  ___EmotionJSX(\"div\", { __self: this, __source: { fileName: _jsxFileName, lineNumber: 218, columnNumber: 13 } },\n  t('The metadata_params object gets unpacked into the sqlalchemy.MetaData call.')))),\n\n\n\n  ___EmotionJSX(StyledInputContainer, { __self: this, __source: { fileName: _jsxFileName, lineNumber: 223, columnNumber: 9 } },\n  ___EmotionJSX(\"div\", { className: \"control-label\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 224, columnNumber: 11 } }, t('Engine Parameters')),\n  ___EmotionJSX(\"div\", { className: \"input-container\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 225, columnNumber: 11 } },\n  ___EmotionJSX(StyledJsonEditor, { name: \"engine_params\", value: (db == null ? void 0 : (_db$extra_json8 = db.extra_json) == null ? void 0 : _db$extra_json8.engine_params) || '', placeholder: t('Engine Parameters'), onChange: (json) => onExtraEditorChange({ json, name: 'engine_params' }), width: \"100%\", height: \"160px\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 226, columnNumber: 13 } })),\n\n  ___EmotionJSX(\"div\", { className: \"helper\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 228, columnNumber: 11 } },\n  ___EmotionJSX(\"div\", { __self: this, __source: { fileName: _jsxFileName, lineNumber: 229, columnNumber: 13 } },\n  t('The engine_params object gets unpacked into the sqlalchemy.create_engine call.')))),\n\n\n\n  ___EmotionJSX(StyledInputContainer, { __self: this, __source: { fileName: _jsxFileName, lineNumber: 234, columnNumber: 9 } },\n  ___EmotionJSX(\"div\", { className: \"control-label\", \"data-test\": \"version-label-test\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 235, columnNumber: 11 } },\n  t('Version')),\n\n  ___EmotionJSX(\"div\", { className: \"input-container\", \"data-test\": \"version-spinbutton-test\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 238, columnNumber: 11 } },\n  ___EmotionJSX(\"input\", { type: \"number\", name: \"version\", value: (db == null ? void 0 : (_db$extra_json9 = db.extra_json) == null ? void 0 : _db$extra_json9.version) || '', placeholder: t('Version number'), onChange: onExtraInputChange, __self: this, __source: { fileName: _jsxFileName, lineNumber: 239, columnNumber: 13 } })),\n\n  ___EmotionJSX(\"div\", { className: \"helper\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 241, columnNumber: 11 } },\n  t('Specify the database version. This should be used with ' +\n  'Presto in order to enable query cost estimation.')))));\n\n\n\n\n};const _default =\nExtraOptions;export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(ExtraOptions, \"ExtraOptions\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/views/CRUD/data/database/DatabaseModal/ExtraOptions.tsx\");reactHotLoader.register(_default, \"default\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/views/CRUD/data/database/DatabaseModal/ExtraOptions.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/home/ubuntu/my_plugin/superset/superset-frontend/src/views/CRUD/data/database/DatabaseModal/ExtraOptions.tsx"],"names":[],"mappings":"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","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { ChangeEvent, EventHandler } from 'react';\nimport cx from 'classnames';\nimport { t, SupersetTheme } from '@superset-ui/core';\nimport InfoTooltip from 'src/components/InfoTooltip';\nimport IndeterminateCheckbox from 'src/components/IndeterminateCheckbox';\nimport Collapse from 'src/components/Collapse';\nimport {\n  StyledInputContainer,\n  StyledJsonEditor,\n  StyledExpandableForm,\n  antdCollapseStyles,\n  no_margin_bottom,\n} from './styles';\nimport { DatabaseObject } from '../types';\n\nconst ExtraOptions = ({\n  db,\n  onInputChange,\n  onTextChange,\n  onEditorChange,\n  onExtraInputChange,\n  onExtraEditorChange,\n}: {\n  db: DatabaseObject | null;\n  onInputChange: EventHandler<ChangeEvent<HTMLInputElement>>;\n  onTextChange: EventHandler<ChangeEvent<HTMLTextAreaElement>>;\n  onEditorChange: Function;\n  onExtraInputChange: EventHandler<ChangeEvent<HTMLInputElement>>;\n  onExtraEditorChange: Function;\n}) => {\n  const expandableModalIsOpen = !!db?.expose_in_sqllab;\n  const createAsOpen = !!(db?.allow_ctas || db?.allow_cvas);\n\n  return (\n    <Collapse\n      expandIconPosition=\"right\"\n      accordion\n      css={(theme: SupersetTheme) => antdCollapseStyles(theme)}\n    >\n      <Collapse.Panel\n        header={\n          <div>\n            <h4>SQL Lab</h4>\n            <p className=\"helper\">\n              Adjust how this database will interact with SQL Lab.\n            </p>\n          </div>\n        }\n        key=\"1\"\n      >\n        <StyledInputContainer css={no_margin_bottom}>\n          <div className=\"input-container\">\n            <IndeterminateCheckbox\n              id=\"expose_in_sqllab\"\n              indeterminate={false}\n              checked={!!db?.expose_in_sqllab}\n              onChange={onInputChange}\n              labelText={t('Expose database in SQL Lab')}\n            />\n            <InfoTooltip\n              tooltip={t('Allow this database to be queried in SQL Lab')}\n            />\n          </div>\n          <StyledExpandableForm\n            className={cx('expandable', {\n              open: expandableModalIsOpen,\n              'ctas-open': createAsOpen,\n            })}\n          >\n            <StyledInputContainer css={no_margin_bottom}>\n              <div className=\"input-container\">\n                <IndeterminateCheckbox\n                  id=\"allow_ctas\"\n                  indeterminate={false}\n                  checked={!!db?.allow_ctas}\n                  onChange={onInputChange}\n                  labelText={t('Allow CREATE TABLE AS')}\n                />\n                <InfoTooltip\n                  tooltip={t('Allow creation of new tables based on queries')}\n                />\n              </div>\n            </StyledInputContainer>\n            <StyledInputContainer css={no_margin_bottom}>\n              <div className=\"input-container\">\n                <IndeterminateCheckbox\n                  id=\"allow_cvas\"\n                  indeterminate={false}\n                  checked={!!db?.allow_cvas}\n                  onChange={onInputChange}\n                  labelText={t('Allow CREATE VIEW AS')}\n                />\n                <InfoTooltip\n                  tooltip={t('Allow creation of new views based on queries')}\n                />\n              </div>\n              <StyledInputContainer\n                className={cx('expandable', { open: createAsOpen })}\n              >\n                <div className=\"control-label\">{t('CTAS & CVAS SCHEMA')}</div>\n                <div className=\"input-container\">\n                  <input\n                    type=\"text\"\n                    name=\"force_ctas_schema\"\n                    value={db?.force_ctas_schema || ''}\n                    placeholder={t('Create or select schema...')}\n                    onChange={onInputChange}\n                  />\n                </div>\n                <div className=\"helper\">\n                  {t(\n                    'Force all tables and views to be created in this schema when clicking CTAS or CVAS in SQL Lab.',\n                  )}\n                </div>\n              </StyledInputContainer>\n            </StyledInputContainer>\n            <StyledInputContainer css={no_margin_bottom}>\n              <div className=\"input-container\">\n                <IndeterminateCheckbox\n                  id=\"allow_dml\"\n                  indeterminate={false}\n                  checked={!!db?.allow_dml}\n                  onChange={onInputChange}\n                  labelText={t('Allow DML')}\n                />\n                <InfoTooltip\n                  tooltip={t(\n                    'Allow manipulation of the database using non-SELECT statements such as UPDATE, DELETE, CREATE, etc.',\n                  )}\n                />\n              </div>\n            </StyledInputContainer>\n            <StyledInputContainer css={no_margin_bottom}>\n              <div className=\"input-container\">\n                <IndeterminateCheckbox\n                  id=\"allow_multi_schema_metadata_fetch\"\n                  indeterminate={false}\n                  checked={!!db?.allow_multi_schema_metadata_fetch}\n                  onChange={onInputChange}\n                  labelText={t('Allow Multi Schema Metadata Fetch')}\n                />\n                <InfoTooltip\n                  tooltip={t(\n                    'Allow SQL Lab to fetch a list of all tables and all views across all database ' +\n                      'schemas. For large data warehouse with thousands of tables, this can be ' +\n                      'expensive and put strain on the system.',\n                  )}\n                />\n              </div>\n            </StyledInputContainer>\n            <StyledInputContainer css={no_margin_bottom}>\n              <div className=\"input-container\">\n                <IndeterminateCheckbox\n                  id=\"cost_estimate_enabled\"\n                  indeterminate={false}\n                  checked={!!db?.extra_json?.cost_estimate_enabled}\n                  onChange={onExtraInputChange}\n                  labelText={t('Enable query cost estimation')}\n                />\n                <InfoTooltip\n                  tooltip={t(\n                    'For Presto and Postgres, shows a button to compute cost before running a query.',\n                  )}\n                />\n              </div>\n            </StyledInputContainer>\n            <StyledInputContainer>\n              <div className=\"input-container\">\n                <IndeterminateCheckbox\n                  id=\"allows_virtual_table_explore\"\n                  indeterminate={false}\n                  checked={!!db?.extra_json?.allows_virtual_table_explore}\n                  onChange={onExtraInputChange}\n                  labelText={t('Allow this database to be explored')}\n                />\n                <InfoTooltip\n                  tooltip={t(\n                    'When enabled, users are able to visualize SQL Lab results in Explore.',\n                  )}\n                />\n              </div>\n            </StyledInputContainer>\n          </StyledExpandableForm>\n        </StyledInputContainer>\n      </Collapse.Panel>\n      <Collapse.Panel\n        header={\n          <div>\n            <h4>Performance</h4>\n            <p className=\"helper\">\n              Adjust performance settings of this database.\n            </p>\n          </div>\n        }\n        key=\"2\"\n      >\n        <StyledInputContainer className=\"mb-8\">\n          <div className=\"control-label\">{t('Chart cache timeout')}</div>\n          <div className=\"input-container\">\n            <input\n              type=\"number\"\n              name=\"cache_timeout\"\n              value={db?.cache_timeout || ''}\n              placeholder={t('Enter duration in seconds')}\n              onChange={onInputChange}\n            />\n          </div>\n          <div className=\"helper\">\n            {t(\n              'Duration (in seconds) of the caching timeout for charts of this database.' +\n                ' A timeout of 0 indicates that the cache never expires.' +\n                ' Note this defaults to the global timeout if undefined.',\n            )}\n          </div>\n        </StyledInputContainer>\n        <StyledInputContainer>\n          <div className=\"control-label\">{t('Schema cache timeout')}</div>\n          <div className=\"input-container\">\n            <input\n              type=\"number\"\n              name=\"schema_cache_timeout\"\n              value={\n                db?.extra_json?.metadata_cache_timeout?.schema_cache_timeout ||\n                ''\n              }\n              placeholder={t('Enter duration in seconds')}\n              onChange={onExtraInputChange}\n              data-test=\"schema-cache-timeout-test\"\n            />\n          </div>\n          <div className=\"helper\">\n            {t(\n              'Duration (in seconds) of the metadata caching timeout for schemas of ' +\n                'this database. If left unset, the cache never expires.',\n            )}\n          </div>\n        </StyledInputContainer>\n        <StyledInputContainer>\n          <div className=\"control-label\">{t('Table cache timeout')}</div>\n          <div className=\"input-container\">\n            <input\n              type=\"number\"\n              name=\"table_cache_timeout\"\n              value={\n                db?.extra_json?.metadata_cache_timeout?.table_cache_timeout ||\n                ''\n              }\n              placeholder={t('Enter duration in seconds')}\n              onChange={onExtraInputChange}\n              data-test=\"table-cache-timeout-test\"\n            />\n          </div>\n          <div className=\"helper\">\n            {t(\n              'Duration (in seconds) of the metadata caching timeout for tables of ' +\n                'this database. If left unset, the cache never expires. ',\n            )}\n          </div>\n        </StyledInputContainer>\n        <StyledInputContainer css={{ no_margin_bottom }}>\n          <div className=\"input-container\">\n            <IndeterminateCheckbox\n              id=\"allow_run_async\"\n              indeterminate={false}\n              checked={!!db?.allow_run_async}\n              onChange={onInputChange}\n              labelText={t('Asynchronous query execution')}\n            />\n            <InfoTooltip\n              tooltip={t(\n                'Operate the database in asynchronous mode, meaning that the queries ' +\n                  'are executed on remote workers as opposed to on the web server itself. ' +\n                  'This assumes that you have a Celery worker setup as well as a results ' +\n                  'backend. Refer to the installation docs for more information.',\n              )}\n            />\n          </div>\n        </StyledInputContainer>\n        <StyledInputContainer css={{ no_margin_bottom }}>\n          <div className=\"input-container\">\n            <IndeterminateCheckbox\n              id=\"cancel_query_on_windows_unload\"\n              indeterminate={false}\n              checked={!!db?.extra_json?.cancel_query_on_windows_unload}\n              onChange={onExtraInputChange}\n              labelText={t('Cancel query on window unload event')}\n            />\n            <InfoTooltip\n              tooltip={t(\n                'Terminate running queries when browser window closed or navigated ' +\n                  'to another page. Available for Presto, Hive, MySQL, Postgres and ' +\n                  'Snowflake databases.',\n              )}\n            />\n          </div>\n        </StyledInputContainer>\n      </Collapse.Panel>\n      <Collapse.Panel\n        header={\n          <div>\n            <h4>Security</h4>\n            <p className=\"helper\">Add extra connection information.</p>\n          </div>\n        }\n        key=\"3\"\n      >\n        <StyledInputContainer>\n          <div className=\"control-label\">{t('Secure extra')}</div>\n          <div className=\"input-container\">\n            <StyledJsonEditor\n              name=\"encrypted_extra\"\n              value={db?.encrypted_extra || ''}\n              placeholder={t('Secure extra')}\n              onChange={(json: string) =>\n                onEditorChange({ json, name: 'encrypted_extra' })\n              }\n              width=\"100%\"\n              height=\"160px\"\n            />\n          </div>\n          <div className=\"helper\">\n            <div>\n              {t(\n                'JSON string containing additional connection configuration. ' +\n                  'This is used to provide connection information for systems ' +\n                  'like Hive, Presto and BigQuery which do not conform to the ' +\n                  'username:password syntax normally used by SQLAlchemy.',\n              )}\n            </div>\n          </div>\n        </StyledInputContainer>\n        <StyledInputContainer>\n          <div className=\"control-label\">{t('Root certificate')}</div>\n          <div className=\"input-container\">\n            <textarea\n              name=\"server_cert\"\n              value={db?.server_cert || ''}\n              placeholder={t('Enter CA_BUNDLE')}\n              onChange={onTextChange}\n            />\n          </div>\n          <div className=\"helper\">\n            {t(\n              'Optional CA_BUNDLE contents to validate HTTPS requests. Only ' +\n                'available on certain database engines.',\n            )}\n          </div>\n        </StyledInputContainer>\n        <StyledInputContainer>\n          <div className=\"control-label\">\n            {t('Schemas allowed for CSV upload')}\n          </div>\n          <div className=\"input-container\">\n            <input\n              type=\"text\"\n              name=\"schemas_allowed_for_csv_upload\"\n              value={(\n                db?.extra_json?.schemas_allowed_for_csv_upload || []\n              ).join(',')}\n              placeholder=\"schema1,schema2\"\n              onChange={onExtraInputChange}\n            />\n          </div>\n          <div className=\"helper\">\n            {t(\n              'A comma-separated list of schemas that CSVs are allowed to upload to.',\n            )}\n          </div>\n        </StyledInputContainer>\n        <StyledInputContainer css={{ no_margin_bottom }}>\n          <div className=\"input-container\">\n            <IndeterminateCheckbox\n              id=\"impersonate_user\"\n              indeterminate={false}\n              checked={!!db?.impersonate_user}\n              onChange={onInputChange}\n              labelText={t(\n                'Impersonate logged in user (Presto, Trino, Drill, Hive, and GSheets)',\n              )}\n            />\n            <InfoTooltip\n              tooltip={t(\n                'If Presto or Trino, all the queries in SQL Lab are going to be executed as the ' +\n                  'currently logged on user who must have permission to run them. If Hive ' +\n                  'and hive.server2.enable.doAs is enabled, will run the queries as ' +\n                  'service account, but impersonate the currently logged on user via ' +\n                  'hive.server2.proxy.user property.',\n              )}\n            />\n          </div>\n        </StyledInputContainer>\n        <StyledInputContainer css={{ ...no_margin_bottom }}>\n          <div className=\"input-container\">\n            <IndeterminateCheckbox\n              id=\"allow_csv_upload\"\n              indeterminate={false}\n              checked={!!db?.allow_csv_upload}\n              onChange={onInputChange}\n              labelText={t('Allow data upload')}\n            />\n            <InfoTooltip\n              tooltip={t(\n                'If selected, please set the schemas allowed for data upload in Extra.',\n              )}\n            />\n          </div>\n        </StyledInputContainer>\n      </Collapse.Panel>\n      <Collapse.Panel\n        header={\n          <div>\n            <h4>Other</h4>\n            <p className=\"helper\">Additional settings.</p>\n          </div>\n        }\n        key=\"4\"\n      >\n        <StyledInputContainer>\n          <div className=\"control-label\">{t('Metadata Parameters')}</div>\n          <div className=\"input-container\">\n            <StyledJsonEditor\n              name=\"metadata_params\"\n              value={db?.extra_json?.metadata_params || ''}\n              placeholder={t('Metadata Parameters')}\n              onChange={(json: string) =>\n                onExtraEditorChange({ json, name: 'metadata_params' })\n              }\n              width=\"100%\"\n              height=\"160px\"\n            />\n          </div>\n          <div className=\"helper\">\n            <div>\n              {t(\n                'The metadata_params object gets unpacked into the sqlalchemy.MetaData call.',\n              )}\n            </div>\n          </div>\n        </StyledInputContainer>\n        <StyledInputContainer>\n          <div className=\"control-label\">{t('Engine Parameters')}</div>\n          <div className=\"input-container\">\n            <StyledJsonEditor\n              name=\"engine_params\"\n              value={db?.extra_json?.engine_params || ''}\n              placeholder={t('Engine Parameters')}\n              onChange={(json: string) =>\n                onExtraEditorChange({ json, name: 'engine_params' })\n              }\n              width=\"100%\"\n              height=\"160px\"\n            />\n          </div>\n          <div className=\"helper\">\n            <div>\n              {t(\n                'The engine_params object gets unpacked into the sqlalchemy.create_engine call.',\n              )}\n            </div>\n          </div>\n        </StyledInputContainer>\n        <StyledInputContainer>\n          <div className=\"control-label\" data-test=\"version-label-test\">\n            {t('Version')}\n          </div>\n          <div className=\"input-container\" data-test=\"version-spinbutton-test\">\n            <input\n              type=\"number\"\n              name=\"version\"\n              value={db?.extra_json?.version || ''}\n              placeholder={t('Version number')}\n              onChange={onExtraInputChange}\n            />\n          </div>\n          <div className=\"helper\">\n            {t(\n              'Specify the database version. This should be used with ' +\n                'Presto in order to enable query cost estimation.',\n            )}\n          </div>\n        </StyledInputContainer>\n      </Collapse.Panel>\n    </Collapse>\n  );\n};\n\nexport default ExtraOptions;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}