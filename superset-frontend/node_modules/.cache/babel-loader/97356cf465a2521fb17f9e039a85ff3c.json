{"ast":null,"code":"import _extends from \"@babel/runtime-corejs3/helpers/extends\";var _jsxFileName = \"/home/ubuntu/my_plugin/superset/superset-frontend/src/explore/components/controls/FilterControl/AdhocFilterControl/index.jsx\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {\nt,\nlogging,\nSupersetClient,\nwithTheme,\nensureIsArray } from\n'@superset-ui/core';\n\nimport ControlHeader from 'src/explore/components/ControlHeader';\nimport adhocMetricType from 'src/explore/components/controls/MetricControl/adhocMetricType';\nimport savedMetricType from 'src/explore/components/controls/MetricControl/savedMetricType';\nimport AdhocMetric from 'src/explore/components/controls/MetricControl/AdhocMetric';\nimport {\nOperators,\nOPERATOR_ENUM_TO_OPERATOR_TYPE } from\n'src/explore/constants';\nimport FilterDefinitionOption from 'src/explore/components/controls/MetricControl/FilterDefinitionOption';\nimport {\nAddControlLabel,\nAddIconButton,\nHeaderContainer,\nLabelsContainer } from\n'src/explore/components/controls/OptionControls';\nimport Icons from 'src/components/Icons';\nimport AdhocFilterPopoverTrigger from 'src/explore/components/controls/FilterControl/AdhocFilterPopoverTrigger';\nimport AdhocFilterOption from 'src/explore/components/controls/FilterControl/AdhocFilterOption';\nimport AdhocFilter, {\nCLAUSES,\nEXPRESSION_TYPES } from\n'src/explore/components/controls/FilterControl/AdhocFilter';\nimport adhocFilterType from 'src/explore/components/controls/FilterControl/adhocFilterType';\nimport columnType from 'src/explore/components/controls/FilterControl/columnType';import { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nconst selectedMetricType = PropTypes.oneOfType([\nPropTypes.string,\nadhocMetricType]);\n\n\nconst propTypes = {\n  label: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),\n  name: PropTypes.string,\n  sections: PropTypes.arrayOf(PropTypes.string),\n  operators: PropTypes.arrayOf(PropTypes.string),\n  onChange: PropTypes.func,\n  value: PropTypes.arrayOf(adhocFilterType),\n  datasource: PropTypes.object,\n  columns: PropTypes.arrayOf(columnType),\n  savedMetrics: PropTypes.arrayOf(savedMetricType),\n  selectedMetrics: PropTypes.oneOfType([\n  selectedMetricType,\n  PropTypes.arrayOf(selectedMetricType)]),\n\n  isLoading: PropTypes.bool };\n\n\nconst defaultProps = {\n  name: '',\n  onChange: () => {},\n  columns: [],\n  savedMetrics: [],\n  selectedMetrics: [] };\n\n\nfunction isDictionaryForAdhocFilter(value) {\n  return value && !(value instanceof AdhocFilter) && value.expressionType;\n}\n\nclass AdhocFilterControl extends React.Component {\n  constructor(props) {\n    super(props);\n    this.optionsForSelect = this.optionsForSelect.bind(this);\n    this.onRemoveFilter = this.onRemoveFilter.bind(this);\n    this.onNewFilter = this.onNewFilter.bind(this);\n    this.onFilterEdit = this.onFilterEdit.bind(this);\n    this.moveLabel = this.moveLabel.bind(this);\n    this.onChange = this.onChange.bind(this);\n    this.mapOption = this.mapOption.bind(this);\n    this.getMetricExpression = this.getMetricExpression.bind(this);\n\n    const filters = (this.props.value || []).map((filter) =>\n    isDictionaryForAdhocFilter(filter) ? new AdhocFilter(filter) : filter);\n\n\n    this.optionRenderer = (option) => ___EmotionJSX(FilterDefinitionOption, { option: option, __source: { fileName: _jsxFileName, lineNumber: 104, columnNumber: 37 } });\n    this.valueRenderer = (adhocFilter, index) =>\n    ___EmotionJSX(AdhocFilterOption, {\n      key: index,\n      index: index,\n      adhocFilter: adhocFilter,\n      onFilterEdit: this.onFilterEdit,\n      options: this.state.options,\n      sections: this.props.sections,\n      operators: this.props.operators,\n      datasource: this.props.datasource,\n      onRemoveFilter: () => this.onRemoveFilter(index),\n      onMoveLabel: this.moveLabel,\n      onDropLabel: () => this.props.onChange(this.state.values),\n      partitionColumn: this.state.partitionColumn, __source: { fileName: _jsxFileName, lineNumber: 106, columnNumber: 7 } });\n\n\n    this.state = {\n      values: filters,\n      options: this.optionsForSelect(this.props),\n      partitionColumn: null };\n\n  }\n\n  componentDidMount() {\n    const { datasource } = this.props;\n    if (datasource && datasource.type === 'table') {var _datasource$database;\n      const dbId = (_datasource$database = datasource.database) == null ? void 0 : _datasource$database.id;\n      const {\n        datasource_name: name,\n        schema,\n        is_sqllab_view: isSqllabView } =\n      datasource;\n\n      if (!isSqllabView && dbId && name && schema) {\n        SupersetClient.get({\n          endpoint: `/superset/extra_table_metadata/${dbId}/${name}/${schema}/` }).\n\n        then(({ json }) => {\n          if (json && json.partitions) {\n            const { partitions } = json;\n            // for now only show latest_partition option\n            // when table datasource has only 1 partition key.\n            if (\n            partitions &&\n            partitions.cols &&\n            Object.keys(partitions.cols).length === 1)\n            {\n              this.setState({ partitionColumn: partitions.cols[0] });\n            }\n          }\n        }).\n        catch((error) => {\n          logging.error('fetch extra_table_metadata:', error.statusText);\n        });\n      }\n    }\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (this.props.columns !== nextProps.columns) {\n      this.setState({ options: this.optionsForSelect(nextProps) });\n    }\n    if (this.props.value !== nextProps.value) {\n      this.setState({\n        values: (nextProps.value || []).map((filter) =>\n        isDictionaryForAdhocFilter(filter) ? new AdhocFilter(filter) : filter) });\n\n\n    }\n  }\n\n  onRemoveFilter(index) {\n    const valuesCopy = [...this.state.values];\n    valuesCopy.splice(index, 1);\n    this.setState((prevState) => ({\n      ...prevState,\n      values: valuesCopy }));\n\n    this.props.onChange(valuesCopy);\n  }\n\n  onNewFilter(newFilter) {\n    const mappedOption = this.mapOption(newFilter);\n    if (mappedOption) {\n      this.setState(\n      (prevState) => ({\n        ...prevState,\n        values: [...prevState.values, mappedOption] }),\n\n      () => {\n        this.props.onChange(this.state.values);\n      });\n\n    }\n  }\n\n  onFilterEdit(changedFilter) {\n    this.props.onChange(\n    this.state.values.map((value) => {\n      if (value.filterOptionName === changedFilter.filterOptionName) {\n        return changedFilter;\n      }\n      return value;\n    }));\n\n  }\n\n  onChange(opts) {\n    const options = (opts || []).\n    map((option) => this.mapOption(option)).\n    filter((option) => option);\n    this.props.onChange(options);\n  }\n\n  getMetricExpression(savedMetricName) {\n    return this.props.savedMetrics.find(\n    (savedMetric) => savedMetric.metric_name === savedMetricName).\n    expression;\n  }\n\n  moveLabel(dragIndex, hoverIndex) {\n    const { values } = this.state;\n\n    const newValues = [...values];\n    [newValues[hoverIndex], newValues[dragIndex]] = [\n    newValues[dragIndex],\n    newValues[hoverIndex]];\n\n    this.setState({ values: newValues });\n  }\n\n  mapOption(option) {\n    // already a AdhocFilter, skip\n    if (option instanceof AdhocFilter) {\n      return option;\n    }\n    // via datasource saved metric\n    if (option.saved_metric_name) {\n      return new AdhocFilter({\n        expressionType:\n        this.props.datasource.type === 'druid' ?\n        EXPRESSION_TYPES.SIMPLE :\n        EXPRESSION_TYPES.SQL,\n        subject:\n        this.props.datasource.type === 'druid' ?\n        option.saved_metric_name :\n        this.getMetricExpression(option.saved_metric_name),\n        operator:\n        OPERATOR_ENUM_TO_OPERATOR_TYPE[Operators.GREATER_THAN].operation,\n        comparator: 0,\n        clause: CLAUSES.HAVING });\n\n    }\n    // has a custom label, meaning it's custom column\n    if (option.label) {\n      return new AdhocFilter({\n        expressionType:\n        this.props.datasource.type === 'druid' ?\n        EXPRESSION_TYPES.SIMPLE :\n        EXPRESSION_TYPES.SQL,\n        subject:\n        this.props.datasource.type === 'druid' ?\n        option.label :\n        new AdhocMetric(option).translateToSql(),\n        operator:\n        OPERATOR_ENUM_TO_OPERATOR_TYPE[Operators.GREATER_THAN].operation,\n        comparator: 0,\n        clause: CLAUSES.HAVING });\n\n    }\n    // add a new filter item\n    if (option.column_name) {\n      return new AdhocFilter({\n        expressionType: EXPRESSION_TYPES.SIMPLE,\n        subject: option.column_name,\n        operator: OPERATOR_ENUM_TO_OPERATOR_TYPE[Operators.EQUALS].operation,\n        comparator: '',\n        clause: CLAUSES.WHERE,\n        isNew: true });\n\n    }\n    return null;\n  }\n\n  optionsForSelect(props) {\n    const options = [\n    ...props.columns,\n    ...ensureIsArray(props.selectedMetrics).map(\n    (metric) =>\n    metric && (\n    typeof metric === 'string' ?\n    { saved_metric_name: metric } :\n    new AdhocMetric(metric)))].\n\n    filter((option) => option);\n\n    return options.\n    reduce((results, option) => {\n      if (option.saved_metric_name) {\n        results.push({\n          ...option,\n          filterOptionName: option.saved_metric_name });\n\n      } else if (option.column_name) {\n        results.push({\n          ...option,\n          filterOptionName: `_col_${option.column_name}` });\n\n      } else if (option instanceof AdhocMetric) {\n        results.push({\n          ...option,\n          filterOptionName: `_adhocmetric_${option.label}` });\n\n      }\n      return results;\n    }, []).\n    sort((a, b) =>\n    (a.saved_metric_name || a.column_name || a.label).localeCompare(\n    b.saved_metric_name || b.column_name || b.label));\n\n\n  }\n\n  addNewFilterPopoverTrigger(trigger) {\n    return (\n      ___EmotionJSX(AdhocFilterPopoverTrigger, {\n        operators: this.props.operators,\n        sections: this.props.sections,\n        adhocFilter: new AdhocFilter({}),\n        datasource: this.props.datasource,\n        options: this.state.options,\n        onFilterEdit: this.onNewFilter,\n        partitionColumn: this.state.partitionColumn, __self: this, __source: { fileName: _jsxFileName, lineNumber: 330, columnNumber: 7 } },\n\n      trigger));\n\n\n  }\n\n  render() {\n    const { theme } = this.props;\n    return (\n      ___EmotionJSX(\"div\", { className: \"metrics-select\", \"data-test\": \"adhoc-filter-control\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 347, columnNumber: 7 } },\n      ___EmotionJSX(HeaderContainer, { __self: this, __source: { fileName: _jsxFileName, lineNumber: 348, columnNumber: 9 } },\n      ___EmotionJSX(ControlHeader, _extends({}, this.props, { __self: this, __source: { fileName: _jsxFileName, lineNumber: 349, columnNumber: 11 } })),\n      this.addNewFilterPopoverTrigger(\n      ___EmotionJSX(AddIconButton, { \"data-test\": \"add-filter-button\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 351, columnNumber: 13 } },\n      ___EmotionJSX(Icons.PlusLarge, {\n        iconSize: \"s\",\n        iconColor: theme.colors.grayscale.light5, __self: this, __source: { fileName: _jsxFileName, lineNumber: 352, columnNumber: 15 } })))),\n\n\n\n\n      ___EmotionJSX(LabelsContainer, { __self: this, __source: { fileName: _jsxFileName, lineNumber: 359, columnNumber: 9 } },\n      this.state.values.length > 0 ?\n      this.state.values.map((value, index) =>\n      this.valueRenderer(value, index)) :\n\n      this.addNewFilterPopoverTrigger(\n      ___EmotionJSX(AddControlLabel, { __self: this, __source: { fileName: _jsxFileName, lineNumber: 365, columnNumber: 17 } },\n      ___EmotionJSX(Icons.PlusSmall, { iconColor: theme.colors.grayscale.light1, __self: this, __source: { fileName: _jsxFileName, lineNumber: 366, columnNumber: 19 } }),\n      t('Add filter'))))));\n\n\n\n\n\n  } // @ts-ignore\n  __reactstandin__regenerateByEval(key, code) {// @ts-ignore\n    this[key] = eval(code);}}\nAdhocFilterControl.propTypes = propTypes;\nAdhocFilterControl.defaultProps = defaultProps;const _default =\n\nwithTheme(AdhocFilterControl);export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(selectedMetricType, \"selectedMetricType\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/explore/components/controls/FilterControl/AdhocFilterControl/index.jsx\");reactHotLoader.register(propTypes, \"propTypes\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/explore/components/controls/FilterControl/AdhocFilterControl/index.jsx\");reactHotLoader.register(defaultProps, \"defaultProps\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/explore/components/controls/FilterControl/AdhocFilterControl/index.jsx\");reactHotLoader.register(isDictionaryForAdhocFilter, \"isDictionaryForAdhocFilter\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/explore/components/controls/FilterControl/AdhocFilterControl/index.jsx\");reactHotLoader.register(AdhocFilterControl, \"AdhocFilterControl\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/explore/components/controls/FilterControl/AdhocFilterControl/index.jsx\");reactHotLoader.register(_default, \"default\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/explore/components/controls/FilterControl/AdhocFilterControl/index.jsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/home/ubuntu/my_plugin/superset/superset-frontend/src/explore/components/controls/FilterControl/AdhocFilterControl/index.jsx"],"names":["React","PropTypes","t","logging","SupersetClient","withTheme","ensureIsArray","ControlHeader","adhocMetricType","savedMetricType","AdhocMetric","Operators","OPERATOR_ENUM_TO_OPERATOR_TYPE","FilterDefinitionOption","AddControlLabel","AddIconButton","HeaderContainer","LabelsContainer","Icons","AdhocFilterPopoverTrigger","AdhocFilterOption","AdhocFilter","CLAUSES","EXPRESSION_TYPES","adhocFilterType","columnType","selectedMetricType","oneOfType","string","propTypes","label","object","name","sections","arrayOf","operators","onChange","func","value","datasource","columns","savedMetrics","selectedMetrics","isLoading","bool","defaultProps","isDictionaryForAdhocFilter","expressionType","AdhocFilterControl","Component","constructor","props","optionsForSelect","bind","onRemoveFilter","onNewFilter","onFilterEdit","moveLabel","mapOption","getMetricExpression","filters","map","filter","optionRenderer","option","valueRenderer","adhocFilter","index","state","options","values","partitionColumn","componentDidMount","type","dbId","database","id","datasource_name","schema","is_sqllab_view","isSqllabView","get","endpoint","then","json","partitions","cols","Object","keys","length","setState","catch","error","statusText","UNSAFE_componentWillReceiveProps","nextProps","valuesCopy","splice","prevState","newFilter","mappedOption","changedFilter","filterOptionName","opts","savedMetricName","find","savedMetric","metric_name","expression","dragIndex","hoverIndex","newValues","saved_metric_name","SIMPLE","SQL","subject","operator","GREATER_THAN","operation","comparator","clause","HAVING","translateToSql","column_name","EQUALS","WHERE","isNew","metric","reduce","results","push","sort","a","b","localeCompare","addNewFilterPopoverTrigger","trigger","render","theme","colors","grayscale","light5","light1"],"mappings":"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","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  t,\n  logging,\n  SupersetClient,\n  withTheme,\n  ensureIsArray,\n} from '@superset-ui/core';\n\nimport ControlHeader from 'src/explore/components/ControlHeader';\nimport adhocMetricType from 'src/explore/components/controls/MetricControl/adhocMetricType';\nimport savedMetricType from 'src/explore/components/controls/MetricControl/savedMetricType';\nimport AdhocMetric from 'src/explore/components/controls/MetricControl/AdhocMetric';\nimport {\n  Operators,\n  OPERATOR_ENUM_TO_OPERATOR_TYPE,\n} from 'src/explore/constants';\nimport FilterDefinitionOption from 'src/explore/components/controls/MetricControl/FilterDefinitionOption';\nimport {\n  AddControlLabel,\n  AddIconButton,\n  HeaderContainer,\n  LabelsContainer,\n} from 'src/explore/components/controls/OptionControls';\nimport Icons from 'src/components/Icons';\nimport AdhocFilterPopoverTrigger from 'src/explore/components/controls/FilterControl/AdhocFilterPopoverTrigger';\nimport AdhocFilterOption from 'src/explore/components/controls/FilterControl/AdhocFilterOption';\nimport AdhocFilter, {\n  CLAUSES,\n  EXPRESSION_TYPES,\n} from 'src/explore/components/controls/FilterControl/AdhocFilter';\nimport adhocFilterType from 'src/explore/components/controls/FilterControl/adhocFilterType';\nimport columnType from 'src/explore/components/controls/FilterControl/columnType';\n\nconst selectedMetricType = PropTypes.oneOfType([\n  PropTypes.string,\n  adhocMetricType,\n]);\n\nconst propTypes = {\n  label: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),\n  name: PropTypes.string,\n  sections: PropTypes.arrayOf(PropTypes.string),\n  operators: PropTypes.arrayOf(PropTypes.string),\n  onChange: PropTypes.func,\n  value: PropTypes.arrayOf(adhocFilterType),\n  datasource: PropTypes.object,\n  columns: PropTypes.arrayOf(columnType),\n  savedMetrics: PropTypes.arrayOf(savedMetricType),\n  selectedMetrics: PropTypes.oneOfType([\n    selectedMetricType,\n    PropTypes.arrayOf(selectedMetricType),\n  ]),\n  isLoading: PropTypes.bool,\n};\n\nconst defaultProps = {\n  name: '',\n  onChange: () => {},\n  columns: [],\n  savedMetrics: [],\n  selectedMetrics: [],\n};\n\nfunction isDictionaryForAdhocFilter(value) {\n  return value && !(value instanceof AdhocFilter) && value.expressionType;\n}\n\nclass AdhocFilterControl extends React.Component {\n  constructor(props) {\n    super(props);\n    this.optionsForSelect = this.optionsForSelect.bind(this);\n    this.onRemoveFilter = this.onRemoveFilter.bind(this);\n    this.onNewFilter = this.onNewFilter.bind(this);\n    this.onFilterEdit = this.onFilterEdit.bind(this);\n    this.moveLabel = this.moveLabel.bind(this);\n    this.onChange = this.onChange.bind(this);\n    this.mapOption = this.mapOption.bind(this);\n    this.getMetricExpression = this.getMetricExpression.bind(this);\n\n    const filters = (this.props.value || []).map(filter =>\n      isDictionaryForAdhocFilter(filter) ? new AdhocFilter(filter) : filter,\n    );\n\n    this.optionRenderer = option => <FilterDefinitionOption option={option} />;\n    this.valueRenderer = (adhocFilter, index) => (\n      <AdhocFilterOption\n        key={index}\n        index={index}\n        adhocFilter={adhocFilter}\n        onFilterEdit={this.onFilterEdit}\n        options={this.state.options}\n        sections={this.props.sections}\n        operators={this.props.operators}\n        datasource={this.props.datasource}\n        onRemoveFilter={() => this.onRemoveFilter(index)}\n        onMoveLabel={this.moveLabel}\n        onDropLabel={() => this.props.onChange(this.state.values)}\n        partitionColumn={this.state.partitionColumn}\n      />\n    );\n    this.state = {\n      values: filters,\n      options: this.optionsForSelect(this.props),\n      partitionColumn: null,\n    };\n  }\n\n  componentDidMount() {\n    const { datasource } = this.props;\n    if (datasource && datasource.type === 'table') {\n      const dbId = datasource.database?.id;\n      const {\n        datasource_name: name,\n        schema,\n        is_sqllab_view: isSqllabView,\n      } = datasource;\n\n      if (!isSqllabView && dbId && name && schema) {\n        SupersetClient.get({\n          endpoint: `/superset/extra_table_metadata/${dbId}/${name}/${schema}/`,\n        })\n          .then(({ json }) => {\n            if (json && json.partitions) {\n              const { partitions } = json;\n              // for now only show latest_partition option\n              // when table datasource has only 1 partition key.\n              if (\n                partitions &&\n                partitions.cols &&\n                Object.keys(partitions.cols).length === 1\n              ) {\n                this.setState({ partitionColumn: partitions.cols[0] });\n              }\n            }\n          })\n          .catch(error => {\n            logging.error('fetch extra_table_metadata:', error.statusText);\n          });\n      }\n    }\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (this.props.columns !== nextProps.columns) {\n      this.setState({ options: this.optionsForSelect(nextProps) });\n    }\n    if (this.props.value !== nextProps.value) {\n      this.setState({\n        values: (nextProps.value || []).map(filter =>\n          isDictionaryForAdhocFilter(filter) ? new AdhocFilter(filter) : filter,\n        ),\n      });\n    }\n  }\n\n  onRemoveFilter(index) {\n    const valuesCopy = [...this.state.values];\n    valuesCopy.splice(index, 1);\n    this.setState(prevState => ({\n      ...prevState,\n      values: valuesCopy,\n    }));\n    this.props.onChange(valuesCopy);\n  }\n\n  onNewFilter(newFilter) {\n    const mappedOption = this.mapOption(newFilter);\n    if (mappedOption) {\n      this.setState(\n        prevState => ({\n          ...prevState,\n          values: [...prevState.values, mappedOption],\n        }),\n        () => {\n          this.props.onChange(this.state.values);\n        },\n      );\n    }\n  }\n\n  onFilterEdit(changedFilter) {\n    this.props.onChange(\n      this.state.values.map(value => {\n        if (value.filterOptionName === changedFilter.filterOptionName) {\n          return changedFilter;\n        }\n        return value;\n      }),\n    );\n  }\n\n  onChange(opts) {\n    const options = (opts || [])\n      .map(option => this.mapOption(option))\n      .filter(option => option);\n    this.props.onChange(options);\n  }\n\n  getMetricExpression(savedMetricName) {\n    return this.props.savedMetrics.find(\n      savedMetric => savedMetric.metric_name === savedMetricName,\n    ).expression;\n  }\n\n  moveLabel(dragIndex, hoverIndex) {\n    const { values } = this.state;\n\n    const newValues = [...values];\n    [newValues[hoverIndex], newValues[dragIndex]] = [\n      newValues[dragIndex],\n      newValues[hoverIndex],\n    ];\n    this.setState({ values: newValues });\n  }\n\n  mapOption(option) {\n    // already a AdhocFilter, skip\n    if (option instanceof AdhocFilter) {\n      return option;\n    }\n    // via datasource saved metric\n    if (option.saved_metric_name) {\n      return new AdhocFilter({\n        expressionType:\n          this.props.datasource.type === 'druid'\n            ? EXPRESSION_TYPES.SIMPLE\n            : EXPRESSION_TYPES.SQL,\n        subject:\n          this.props.datasource.type === 'druid'\n            ? option.saved_metric_name\n            : this.getMetricExpression(option.saved_metric_name),\n        operator:\n          OPERATOR_ENUM_TO_OPERATOR_TYPE[Operators.GREATER_THAN].operation,\n        comparator: 0,\n        clause: CLAUSES.HAVING,\n      });\n    }\n    // has a custom label, meaning it's custom column\n    if (option.label) {\n      return new AdhocFilter({\n        expressionType:\n          this.props.datasource.type === 'druid'\n            ? EXPRESSION_TYPES.SIMPLE\n            : EXPRESSION_TYPES.SQL,\n        subject:\n          this.props.datasource.type === 'druid'\n            ? option.label\n            : new AdhocMetric(option).translateToSql(),\n        operator:\n          OPERATOR_ENUM_TO_OPERATOR_TYPE[Operators.GREATER_THAN].operation,\n        comparator: 0,\n        clause: CLAUSES.HAVING,\n      });\n    }\n    // add a new filter item\n    if (option.column_name) {\n      return new AdhocFilter({\n        expressionType: EXPRESSION_TYPES.SIMPLE,\n        subject: option.column_name,\n        operator: OPERATOR_ENUM_TO_OPERATOR_TYPE[Operators.EQUALS].operation,\n        comparator: '',\n        clause: CLAUSES.WHERE,\n        isNew: true,\n      });\n    }\n    return null;\n  }\n\n  optionsForSelect(props) {\n    const options = [\n      ...props.columns,\n      ...ensureIsArray(props.selectedMetrics).map(\n        metric =>\n          metric &&\n          (typeof metric === 'string'\n            ? { saved_metric_name: metric }\n            : new AdhocMetric(metric)),\n      ),\n    ].filter(option => option);\n\n    return options\n      .reduce((results, option) => {\n        if (option.saved_metric_name) {\n          results.push({\n            ...option,\n            filterOptionName: option.saved_metric_name,\n          });\n        } else if (option.column_name) {\n          results.push({\n            ...option,\n            filterOptionName: `_col_${option.column_name}`,\n          });\n        } else if (option instanceof AdhocMetric) {\n          results.push({\n            ...option,\n            filterOptionName: `_adhocmetric_${option.label}`,\n          });\n        }\n        return results;\n      }, [])\n      .sort((a, b) =>\n        (a.saved_metric_name || a.column_name || a.label).localeCompare(\n          b.saved_metric_name || b.column_name || b.label,\n        ),\n      );\n  }\n\n  addNewFilterPopoverTrigger(trigger) {\n    return (\n      <AdhocFilterPopoverTrigger\n        operators={this.props.operators}\n        sections={this.props.sections}\n        adhocFilter={new AdhocFilter({})}\n        datasource={this.props.datasource}\n        options={this.state.options}\n        onFilterEdit={this.onNewFilter}\n        partitionColumn={this.state.partitionColumn}\n      >\n        {trigger}\n      </AdhocFilterPopoverTrigger>\n    );\n  }\n\n  render() {\n    const { theme } = this.props;\n    return (\n      <div className=\"metrics-select\" data-test=\"adhoc-filter-control\">\n        <HeaderContainer>\n          <ControlHeader {...this.props} />\n          {this.addNewFilterPopoverTrigger(\n            <AddIconButton data-test=\"add-filter-button\">\n              <Icons.PlusLarge\n                iconSize=\"s\"\n                iconColor={theme.colors.grayscale.light5}\n              />\n            </AddIconButton>,\n          )}\n        </HeaderContainer>\n        <LabelsContainer>\n          {this.state.values.length > 0\n            ? this.state.values.map((value, index) =>\n                this.valueRenderer(value, index),\n              )\n            : this.addNewFilterPopoverTrigger(\n                <AddControlLabel>\n                  <Icons.PlusSmall iconColor={theme.colors.grayscale.light1} />\n                  {t('Add filter')}\n                </AddControlLabel>,\n              )}\n        </LabelsContainer>\n      </div>\n    );\n  }\n}\n\nAdhocFilterControl.propTypes = propTypes;\nAdhocFilterControl.defaultProps = defaultProps;\n\nexport default withTheme(AdhocFilterControl);\n"]},"metadata":{},"sourceType":"module"}