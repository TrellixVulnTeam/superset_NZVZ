{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;};(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { t } from '@superset-ui/core';\n\nimport getInitialState from './getInitialState';\nimport * as actions from '../actions/sqlLab';\nimport { now } from '../../modules/dates';\nimport {\naddToObject,\nalterInObject,\nalterInArr,\nremoveFromArr,\ngetFromArr,\naddToArr,\nextendArr } from\n'../../reduxUtils';\n\nexport default function sqlLabReducer(state = {}, action) {\n  const actionHandlers = {\n    [actions.ADD_QUERY_EDITOR]() {\n      const tabHistory = state.tabHistory.slice();\n      tabHistory.push(action.queryEditor.id);\n      const newState = { ...state, tabHistory };\n      return addToArr(newState, 'queryEditors', action.queryEditor);\n    },\n    [actions.QUERY_EDITOR_SAVED]() {\n      const { query, result } = action;\n      const existing = state.queryEditors.find((qe) => qe.id === query.id);\n      return alterInArr(\n      state,\n      'queryEditors',\n      existing,\n      {\n        remoteId: result.remoteId,\n        title: query.title },\n\n      'id');\n\n    },\n    [actions.UPDATE_QUERY_EDITOR]() {\n      const id = action.alterations.remoteId;\n      const existing = state.queryEditors.find((qe) => qe.remoteId === id);\n      if (existing == null) return state;\n      return alterInArr(\n      state,\n      'queryEditors',\n      existing,\n      action.alterations,\n      'remoteId');\n\n    },\n    [actions.CLONE_QUERY_TO_NEW_TAB]() {\n      const progenitor = state.queryEditors.find(\n      (qe) => qe.id === state.tabHistory[state.tabHistory.length - 1]);\n\n      const qe = {\n        remoteId: progenitor.remoteId,\n        title: t('Copy of %s', progenitor.title),\n        dbId: action.query.dbId ? action.query.dbId : null,\n        schema: action.query.schema ? action.query.schema : null,\n        autorun: true,\n        sql: action.query.sql,\n        queryLimit: action.query.queryLimit,\n        maxRow: action.query.maxRow };\n\n      return sqlLabReducer(state, actions.addQueryEditor(qe));\n    },\n    [actions.REMOVE_QUERY_EDITOR]() {\n      let newState = removeFromArr(state, 'queryEditors', action.queryEditor);\n      // List of remaining queryEditor ids\n      const qeIds = newState.queryEditors.map((qe) => qe.id);\n\n      const queries = {};\n      Object.keys(state.queries).forEach((k) => {\n        const query = state.queries[k];\n        if (qeIds.indexOf(query.sqlEditorId) > -1) {\n          queries[k] = query;\n        }\n      });\n\n      let tabHistory = state.tabHistory.slice();\n      tabHistory = tabHistory.filter((id) => qeIds.indexOf(id) > -1);\n\n      // Remove associated table schemas\n      const tables = state.tables.filter(\n      (table) => table.queryEditorId !== action.queryEditor.id);\n\n\n      newState = { ...newState, tabHistory, tables, queries };\n      return newState;\n    },\n    [actions.REMOVE_QUERY]() {\n      const newQueries = { ...state.queries };\n      delete newQueries[action.query.id];\n      return { ...state, queries: newQueries };\n    },\n    [actions.RESET_STATE]() {\n      return { ...getInitialState() };\n    },\n    [actions.MERGE_TABLE]() {\n      const at = { ...action.table };\n      let existingTable;\n      state.tables.forEach((xt) => {\n        if (\n        xt.dbId === at.dbId &&\n        xt.queryEditorId === at.queryEditorId &&\n        xt.schema === at.schema &&\n        xt.name === at.name)\n        {\n          existingTable = xt;\n        }\n      });\n      if (existingTable) {\n        if (action.query) {\n          at.dataPreviewQueryId = action.query.id;\n        }\n        return alterInArr(state, 'tables', existingTable, at);\n      }\n      // for new table, associate Id of query for data preview\n      at.dataPreviewQueryId = null;\n      let newState = addToArr(state, 'tables', at);\n      if (action.query) {\n        newState = alterInArr(newState, 'tables', at, {\n          dataPreviewQueryId: action.query.id });\n\n      }\n      return newState;\n    },\n    [actions.EXPAND_TABLE]() {\n      return alterInArr(state, 'tables', action.table, { expanded: true });\n    },\n    [actions.REMOVE_DATA_PREVIEW]() {\n      const queries = { ...state.queries };\n      delete queries[action.table.dataPreviewQueryId];\n      const newState = alterInArr(state, 'tables', action.table, {\n        dataPreviewQueryId: null });\n\n      return { ...newState, queries };\n    },\n    [actions.CHANGE_DATA_PREVIEW_ID]() {\n      const queries = { ...state.queries };\n      delete queries[action.oldQueryId];\n\n      const newTables = [];\n      state.tables.forEach((xt) => {\n        if (xt.dataPreviewQueryId === action.oldQueryId) {\n          newTables.push({ ...xt, dataPreviewQueryId: action.newQuery.id });\n        } else {\n          newTables.push(xt);\n        }\n      });\n      return {\n        ...state,\n        queries,\n        tables: newTables,\n        activeSouthPaneTab: action.newQuery.id };\n\n    },\n    [actions.COLLAPSE_TABLE]() {\n      return alterInArr(state, 'tables', action.table, { expanded: false });\n    },\n    [actions.REMOVE_TABLE]() {\n      return removeFromArr(state, 'tables', action.table);\n    },\n    [actions.START_QUERY_VALIDATION]() {\n      let newState = { ...state };\n      const sqlEditor = { id: action.query.sqlEditorId };\n      newState = alterInArr(newState, 'queryEditors', sqlEditor, {\n        validationResult: {\n          id: action.query.id,\n          errors: [],\n          completed: false } });\n\n\n      return newState;\n    },\n    [actions.QUERY_VALIDATION_RETURNED]() {\n      // If the server is very slow about answering us, we might get validation\n      // responses back out of order. This check confirms the response we're\n      // handling corresponds to the most recently dispatched request.\n      //\n      // We don't care about any but the most recent because validations are\n      // only valid for the SQL text they correspond to -- once the SQL has\n      // changed, the old validation doesn't tell us anything useful anymore.\n      const qe = getFromArr(state.queryEditors, action.query.sqlEditorId);\n      if (qe.validationResult.id !== action.query.id) {\n        return state;\n      }\n      // Otherwise, persist the results on the queryEditor state\n      let newState = { ...state };\n      const sqlEditor = { id: action.query.sqlEditorId };\n      newState = alterInArr(newState, 'queryEditors', sqlEditor, {\n        validationResult: {\n          id: action.query.id,\n          errors: action.results,\n          completed: true } });\n\n\n      return newState;\n    },\n    [actions.QUERY_VALIDATION_FAILED]() {\n      // If the server is very slow about answering us, we might get validation\n      // responses back out of order. This check confirms the response we're\n      // handling corresponds to the most recently dispatched request.\n      //\n      // We don't care about any but the most recent because validations are\n      // only valid for the SQL text they correspond to -- once the SQL has\n      // changed, the old validation doesn't tell us anything useful anymore.\n      const qe = getFromArr(state.queryEditors, action.query.sqlEditorId);\n      if (qe.validationResult.id !== action.query.id) {\n        return state;\n      }\n      // Otherwise, persist the results on the queryEditor state\n      let newState = { ...state };\n      const sqlEditor = { id: action.query.sqlEditorId };\n      newState = alterInArr(newState, 'queryEditors', sqlEditor, {\n        validationResult: {\n          id: action.query.id,\n          errors: [\n          {\n            line_number: 1,\n            start_column: 1,\n            end_column: 1,\n            message: `The server failed to validate your query.\\n${action.message}` }],\n\n\n          completed: true } });\n\n\n      return newState;\n    },\n    [actions.COST_ESTIMATE_STARTED]() {\n      let newState = { ...state };\n      const sqlEditor = { id: action.query.sqlEditorId };\n      newState = alterInArr(newState, 'queryEditors', sqlEditor, {\n        queryCostEstimate: {\n          completed: false,\n          cost: null,\n          error: null } });\n\n\n      return newState;\n    },\n    [actions.COST_ESTIMATE_RETURNED]() {\n      let newState = { ...state };\n      const sqlEditor = { id: action.query.sqlEditorId };\n      newState = alterInArr(newState, 'queryEditors', sqlEditor, {\n        queryCostEstimate: {\n          completed: true,\n          cost: action.json,\n          error: null } });\n\n\n      return newState;\n    },\n    [actions.COST_ESTIMATE_FAILED]() {\n      let newState = { ...state };\n      const sqlEditor = { id: action.query.sqlEditorId };\n      newState = alterInArr(newState, 'queryEditors', sqlEditor, {\n        queryCostEstimate: {\n          completed: false,\n          cost: null,\n          error: action.error } });\n\n\n      return newState;\n    },\n    [actions.START_QUERY]() {\n      let newState = { ...state };\n      if (action.query.sqlEditorId) {\n        const qe = getFromArr(state.queryEditors, action.query.sqlEditorId);\n        if (qe.latestQueryId && state.queries[qe.latestQueryId]) {\n          const newResults = {\n            ...state.queries[qe.latestQueryId].results,\n            data: [],\n            query: null };\n\n          const q = { ...state.queries[qe.latestQueryId], results: newResults };\n          const queries = { ...state.queries, [q.id]: q };\n          newState = { ...state, queries };\n        }\n      } else {\n        newState.activeSouthPaneTab = action.query.id;\n      }\n      newState = addToObject(newState, 'queries', action.query);\n      const sqlEditor = { id: action.query.sqlEditorId };\n      return alterInArr(newState, 'queryEditors', sqlEditor, {\n        latestQueryId: action.query.id });\n\n    },\n    [actions.STOP_QUERY]() {\n      return alterInObject(state, 'queries', action.query, {\n        state: 'stopped',\n        results: [] });\n\n    },\n    [actions.CLEAR_QUERY_RESULTS]() {\n      const newResults = { ...action.query.results };\n      newResults.data = [];\n      return alterInObject(state, 'queries', action.query, {\n        results: newResults,\n        cached: true });\n\n    },\n    [actions.REQUEST_QUERY_RESULTS]() {\n      return alterInObject(state, 'queries', action.query, {\n        state: 'fetching' });\n\n    },\n    [actions.QUERY_SUCCESS]() {var _action$results, _action$results$data, _action$results2, _action$results2$quer, _action$results3, _action$results3$quer, _action$results4, _action$results4$quer;\n      // prevent race condition were query succeeds shortly after being canceled\n      if (action.query.state === 'stopped') {\n        return state;\n      }\n      const alts = {\n        endDttm: now(),\n        progress: 100,\n        results: action.results,\n        rows: action == null ? void 0 : (_action$results = action.results) == null ? void 0 : (_action$results$data = _action$results.data) == null ? void 0 : _action$results$data.length,\n        state: 'success',\n        limitingFactor: action == null ? void 0 : (_action$results2 = action.results) == null ? void 0 : (_action$results2$quer = _action$results2.query) == null ? void 0 : _action$results2$quer.limitingFactor,\n        tempSchema: action == null ? void 0 : (_action$results3 = action.results) == null ? void 0 : (_action$results3$quer = _action$results3.query) == null ? void 0 : _action$results3$quer.tempSchema,\n        tempTable: action == null ? void 0 : (_action$results4 = action.results) == null ? void 0 : (_action$results4$quer = _action$results4.query) == null ? void 0 : _action$results4$quer.tempTable,\n        errorMessage: null,\n        cached: false };\n\n      return alterInObject(state, 'queries', action.query, alts);\n    },\n    [actions.QUERY_FAILED]() {\n      if (action.query.state === 'stopped') {\n        return state;\n      }\n      const alts = {\n        state: 'failed',\n        errors: action.errors,\n        errorMessage: action.msg,\n        endDttm: now(),\n        link: action.link };\n\n      return alterInObject(state, 'queries', action.query, alts);\n    },\n    [actions.SET_ACTIVE_QUERY_EDITOR]() {\n      const qeIds = state.queryEditors.map((qe) => qe.id);\n      if (\n      qeIds.indexOf(action.queryEditor.id) > -1 &&\n      state.tabHistory[state.tabHistory.length - 1] !== action.queryEditor.id)\n      {\n        const tabHistory = state.tabHistory.slice();\n        tabHistory.push(action.queryEditor.id);\n        return { ...state, tabHistory };\n      }\n      return state;\n    },\n    [actions.LOAD_QUERY_EDITOR]() {\n      return alterInArr(state, 'queryEditors', action.queryEditor, {\n        ...action.queryEditor });\n\n    },\n    [actions.SET_TABLES]() {\n      return extendArr(state, 'tables', action.tables);\n    },\n    [actions.SET_ACTIVE_SOUTHPANE_TAB]() {\n      return { ...state, activeSouthPaneTab: action.tabId };\n    },\n    [actions.MIGRATE_QUERY_EDITOR]() {\n      // remove migrated query editor from localStorage\n      const { sqlLab } = JSON.parse(localStorage.getItem('redux'));\n      sqlLab.queryEditors = sqlLab.queryEditors.filter(\n      (qe) => qe.id !== action.oldQueryEditor.id);\n\n      localStorage.setItem('redux', JSON.stringify({ sqlLab }));\n\n      // replace localStorage query editor with the server backed one\n      return addToArr(\n      removeFromArr(state, 'queryEditors', action.oldQueryEditor),\n      'queryEditors',\n      action.newQueryEditor);\n\n    },\n    [actions.MIGRATE_TABLE]() {\n      // remove migrated table from localStorage\n      const { sqlLab } = JSON.parse(localStorage.getItem('redux'));\n      sqlLab.tables = sqlLab.tables.filter(\n      (table) => table.id !== action.oldTable.id);\n\n      localStorage.setItem('redux', JSON.stringify({ sqlLab }));\n\n      // replace localStorage table with the server backed one\n      return addToArr(\n      removeFromArr(state, 'tables', action.oldTable),\n      'tables',\n      action.newTable);\n\n    },\n    [actions.MIGRATE_TAB_HISTORY]() {\n      // remove migrated tab from localStorage tabHistory\n      const { sqlLab } = JSON.parse(localStorage.getItem('redux'));\n      sqlLab.tabHistory = sqlLab.tabHistory.filter(\n      (tabId) => tabId !== action.oldId);\n\n      localStorage.setItem('redux', JSON.stringify({ sqlLab }));\n      const tabHistory = state.tabHistory.filter(\n      (tabId) => tabId !== action.oldId);\n\n      tabHistory.push(action.newId);\n      return { ...state, tabHistory };\n    },\n    [actions.MIGRATE_QUERY]() {\n      const query = {\n        ...state.queries[action.queryId],\n        // point query to migrated query editor\n        sqlEditorId: action.queryEditorId };\n\n      const queries = { ...state.queries, [query.id]: query };\n      return { ...state, queries };\n    },\n    [actions.QUERY_EDITOR_SETDB]() {\n      return alterInArr(state, 'queryEditors', action.queryEditor, {\n        dbId: action.dbId });\n\n    },\n    [actions.QUERY_EDITOR_SET_FUNCTION_NAMES]() {\n      return alterInArr(state, 'queryEditors', action.queryEditor, {\n        functionNames: action.functionNames });\n\n    },\n    [actions.QUERY_EDITOR_SET_SCHEMA]() {\n      return alterInArr(state, 'queryEditors', action.queryEditor, {\n        schema: action.schema });\n\n    },\n    [actions.QUERY_EDITOR_SET_SCHEMA_OPTIONS]() {\n      return alterInArr(state, 'queryEditors', action.queryEditor, {\n        schemaOptions: action.options });\n\n    },\n    [actions.QUERY_EDITOR_SET_TABLE_OPTIONS]() {\n      return alterInArr(state, 'queryEditors', action.queryEditor, {\n        tableOptions: action.options });\n\n    },\n    [actions.QUERY_EDITOR_SET_TITLE]() {\n      return alterInArr(state, 'queryEditors', action.queryEditor, {\n        title: action.title });\n\n    },\n    [actions.QUERY_EDITOR_SET_SQL]() {\n      return alterInArr(state, 'queryEditors', action.queryEditor, {\n        sql: action.sql });\n\n    },\n    [actions.QUERY_EDITOR_SET_QUERY_LIMIT]() {\n      return alterInArr(state, 'queryEditors', action.queryEditor, {\n        queryLimit: action.queryLimit });\n\n    },\n    [actions.QUERY_EDITOR_SET_TEMPLATE_PARAMS]() {\n      return alterInArr(state, 'queryEditors', action.queryEditor, {\n        templateParams: action.templateParams });\n\n    },\n    [actions.QUERY_EDITOR_SET_SELECTED_TEXT]() {\n      return alterInArr(state, 'queryEditors', action.queryEditor, {\n        selectedText: action.sql });\n\n    },\n    [actions.QUERY_EDITOR_SET_AUTORUN]() {\n      return alterInArr(state, 'queryEditors', action.queryEditor, {\n        autorun: action.autorun });\n\n    },\n    [actions.QUERY_EDITOR_PERSIST_HEIGHT]() {\n      return alterInArr(state, 'queryEditors', action.queryEditor, {\n        northPercent: action.northPercent,\n        southPercent: action.southPercent });\n\n    },\n    [actions.QUERY_EDITOR_TOGGLE_LEFT_BAR]() {\n      return alterInArr(state, 'queryEditors', action.queryEditor, {\n        hideLeftBar: action.hideLeftBar });\n\n    },\n    [actions.SET_DATABASES]() {\n      const databases = {};\n      action.databases.forEach((db) => {\n        databases[db.id] = {\n          ...db,\n          extra_json: JSON.parse(db.extra || '') };\n\n      });\n      return { ...state, databases };\n    },\n    [actions.REFRESH_QUERIES]() {\n      let newQueries = { ...state.queries };\n      // Fetch the updates to the queries present in the store.\n      let change = false;\n      let { queriesLastUpdate } = state;\n      Object.entries(action.alteredQueries).forEach(([id, changedQuery]) => {\n        if (\n        !state.queries.hasOwnProperty(id) ||\n        state.queries[id].state !== 'stopped' &&\n        state.queries[id].state !== 'failed')\n        {var _state$queries$id;\n          if (changedQuery.changedOn > queriesLastUpdate) {\n            queriesLastUpdate = changedQuery.changedOn;\n          }\n          const prevState = (_state$queries$id = state.queries[id]) == null ? void 0 : _state$queries$id.state;\n          const currentState = changedQuery.state;\n          newQueries[id] = {\n            ...state.queries[id],\n            ...changedQuery,\n            // race condition:\n            // because of async behavior, sql lab may still poll a couple of seconds\n            // when it started fetching or finished rendering results\n            state:\n            currentState === 'success' &&\n            ['fetching', 'success'].includes(prevState) ?\n            prevState :\n            currentState };\n\n          change = true;\n        }\n      });\n      if (!change) {\n        newQueries = state.queries;\n      }\n      return { ...state, queries: newQueries, queriesLastUpdate };\n    },\n    [actions.SET_USER_OFFLINE]() {\n      return { ...state, offline: action.offline };\n    },\n    [actions.CREATE_DATASOURCE_STARTED]() {\n      return { ...state, isDatasourceLoading: true, errorMessage: null };\n    },\n    [actions.CREATE_DATASOURCE_SUCCESS]() {\n      return {\n        ...state,\n        isDatasourceLoading: false,\n        errorMessage: null,\n        datasource: action.datasource };\n\n    },\n    [actions.CREATE_DATASOURCE_FAILED]() {\n      return { ...state, isDatasourceLoading: false, errorMessage: action.err };\n    } };\n\n  if (action.type in actionHandlers) {\n    return actionHandlers[action.type]();\n  }\n  return state;\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(sqlLabReducer, \"sqlLabReducer\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/reducers/sqlLab.js\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(__signature__, \"__signature__\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/reducers/sqlLab.js\");reactHotLoader.register(sqlLabReducer, \"sqlLabReducer\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/reducers/sqlLab.js\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/reducers/sqlLab.js"],"names":["sqlLabReducer","state","actionHandlers","actions","tabHistory","action","newState","addToArr","existing","qe","query","alterInArr","remoteId","result","title","id","progenitor","t","dbId","schema","autorun","sql","queryLimit","maxRow","removeFromArr","qeIds","queries","Object","tables","table","newQueries","getInitialState","at","xt","existingTable","dataPreviewQueryId","expanded","newTables","activeSouthPaneTab","sqlEditor","validationResult","errors","completed","getFromArr","line_number","start_column","end_column","message","queryCostEstimate","cost","error","newResults","data","q","results","addToObject","latestQueryId","alterInObject","cached","alts","endDttm","now","progress","rows","limitingFactor","tempSchema","tempTable","errorMessage","link","extendArr","JSON","localStorage","sqlLab","tabId","sqlEditorId","functionNames","schemaOptions","tableOptions","templateParams","selectedText","northPercent","southPercent","hideLeftBar","databases","db","extra_json","change","changedQuery","queriesLastUpdate","prevState","currentState","offline","isDatasourceLoading","datasource"],"mappings":"+kBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAA,CAAA,QAAA,mBAAA;;AAEA,OAAA,eAAA,MAAA,mBAAA;AACA,OAAO,KAAP,OAAA,MAAA,mBAAA;AACA,SAAA,GAAA,QAAA,qBAAA;AACA;AAAA,WAAA;AAAA,aAAA;AAAA,UAAA;AAAA,aAAA;AAAA,UAAA;AAAA,QAAA;AAAA,SAAA;AAAA,kBAAA;;AAUA,eAAe,SAAA,aAAA,CAAuBC,KAAK,GAA5B,EAAA,EAAA,MAAA,EAA2C;AACxD,QAAMC,cAAc,GAAG;AACrB,KAACC,OAAO,CAAR,gBAAA,IAA6B;AAC3B,YAAMC,UAAU,GAAGH,KAAK,CAALA,UAAAA,CAAnB,KAAmBA,EAAnB;AACAG,MAAAA,UAAU,CAAVA,IAAAA,CAAgBC,MAAM,CAANA,WAAAA,CAAhBD,EAAAA;AACA,YAAME,QAAQ,GAAG,EAAE,GAAF,KAAA,EAAjB,UAAiB,EAAjB;AACA,aAAOC,QAAQ,CAAA,QAAA,EAAA,cAAA,EAA2BF,MAAM,CAAhD,WAAe,CAAf;AALmB,KAAA;AAOrB,KAACF,OAAO,CAAR,kBAAA,IAA+B;AAC7B,YAAM,EAAA,KAAA,EAAA,MAAA,KAAN,MAAA;AACA,YAAMK,QAAQ,GAAGP,KAAK,CAALA,YAAAA,CAAAA,IAAAA,CAAwB,CAAA,EAAA,KAAMQ,EAAE,CAAFA,EAAAA,KAAUC,KAAK,CAA9D,EAAiBT,CAAjB;AACA,aAAOU,UAAU;AAAA,MAAA,KAAA;AAAA,oBAAA;AAAA,MAAA,QAAA;AAIf;AACEC,QAAAA,QAAQ,EAAEC,MAAM,CADlB,QAAA;AAEEC,QAAAA,KAAK,EAAEJ,KAAK,CANC,KAIf,EAJe;;AAAjB,UAAiB,CAAjB;;AAVmB,KAAA;AAqBrB,KAACP,OAAO,CAAR,mBAAA,IAAgC;AAC9B,YAAMY,EAAE,GAAGV,MAAM,CAANA,WAAAA,CAAX,QAAA;AACA,YAAMG,QAAQ,GAAGP,KAAK,CAALA,YAAAA,CAAAA,IAAAA,CAAwB,CAAA,EAAA,KAAMQ,EAAE,CAAFA,QAAAA,KAA/C,EAAiBR,CAAjB;AACA,UAAIO,QAAQ,IAAZ,IAAA,EAAsB,OAAA,KAAA;AACtB,aAAOG,UAAU;AAAA,MAAA,KAAA;AAAA,oBAAA;AAAA,MAAA,QAAA;AAIfN,MAAAA,MAAM,CAJS,WAAA;AAAjB,gBAAiB,CAAjB;;AAzBmB,KAAA;AAiCrB,KAACF,OAAO,CAAR,sBAAA,IAAmC;AACjC,YAAMa,UAAU,GAAGf,KAAK,CAALA,YAAAA,CAAAA,IAAAA;AACjB,OAAA,EAAA,KAAMQ,EAAE,CAAFA,EAAAA,KAAUR,KAAK,CAALA,UAAAA,CAAiBA,KAAK,CAALA,UAAAA,CAAAA,MAAAA,GADnC,CACkBA,CADCA,CAAnB;;AAGA,YAAMQ,EAAE,GAAG;AACTG,QAAAA,QAAQ,EAAEI,UAAU,CADX,QAAA;AAETF,QAAAA,KAAK,EAAEG,CAAC,CAAA,YAAA,EAAeD,UAAU,CAFxB,KAED,CAFC;AAGTE,QAAAA,IAAI,EAAEb,MAAM,CAANA,KAAAA,CAAAA,IAAAA,GAAoBA,MAAM,CAANA,KAAAA,CAApBA,IAAAA,GAHG,IAAA;AAITc,QAAAA,MAAM,EAAEd,MAAM,CAANA,KAAAA,CAAAA,MAAAA,GAAsBA,MAAM,CAANA,KAAAA,CAAtBA,MAAAA,GAJC,IAAA;AAKTe,QAAAA,OAAO,EALE,IAAA;AAMTC,QAAAA,GAAG,EAAEhB,MAAM,CAANA,KAAAA,CANI,GAAA;AAOTiB,QAAAA,UAAU,EAAEjB,MAAM,CAANA,KAAAA,CAPH,UAAA;AAQTkB,QAAAA,MAAM,EAAElB,MAAM,CAANA,KAAAA,CARV,MAAW,EAAX;;AAUA,aAAOL,aAAa,CAAA,KAAA,EAAQG,OAAO,CAAPA,cAAAA,CAA5B,EAA4BA,CAAR,CAApB;AA/CmB,KAAA;AAiDrB,KAACA,OAAO,CAAR,mBAAA,IAAgC;AAC9B,UAAIG,QAAQ,GAAGkB,aAAa,CAAA,KAAA,EAAA,cAAA,EAAwBnB,MAAM,CAA1D,WAA4B,CAA5B;AACA;AACA,YAAMoB,KAAK,GAAGnB,QAAQ,CAARA,YAAAA,CAAAA,GAAAA,CAA0B,CAAA,EAAA,KAAMG,EAAE,CAAhD,EAAcH,CAAd;;AAEA,YAAMoB,OAAO,GAAb,EAAA;AACAC,MAAAA,MAAM,CAANA,IAAAA,CAAY1B,KAAK,CAAjB0B,OAAAA,EAAAA,OAAAA,CAAmC,CAAA,CAAA,KAAK;AACtC,cAAMjB,KAAK,GAAGT,KAAK,CAALA,OAAAA,CAAd,CAAcA,CAAd;AACA,YAAIwB,KAAK,CAALA,OAAAA,CAAcf,KAAK,CAAnBe,WAAAA,IAAmC,CAAvC,CAAA,EAA2C;AACzCC,UAAAA,OAAO,CAAPA,CAAO,CAAPA,GAAAA,KAAAA;AACD;AAJHC,OAAAA;;AAOA,UAAIvB,UAAU,GAAGH,KAAK,CAALA,UAAAA,CAAjB,KAAiBA,EAAjB;AACAG,MAAAA,UAAU,GAAGA,UAAU,CAAVA,MAAAA,CAAkB,CAAA,EAAA,KAAMqB,KAAK,CAALA,OAAAA,CAAAA,EAAAA,IAAoB,CAAzDrB,CAAaA,CAAbA;;AAEA;AACA,YAAMwB,MAAM,GAAG3B,KAAK,CAALA,MAAAA,CAAAA,MAAAA;AACb,OAAA,KAAA,KAAS4B,KAAK,CAALA,aAAAA,KAAwBxB,MAAM,CAANA,WAAAA,CADnC,EAAeJ,CAAf;;;AAIAK,MAAAA,QAAQ,GAAG,EAAE,GAAF,QAAA,EAAA,UAAA,EAAA,MAAA,EAAXA,OAAW,EAAXA;AACA,aAAA,QAAA;AAvEmB,KAAA;AAyErB,KAACH,OAAO,CAAR,YAAA,IAAyB;AACvB,YAAM2B,UAAU,GAAG,EAAE,GAAG7B,KAAK,CAA7B,OAAmB,EAAnB;AACA,aAAO6B,UAAU,CAACzB,MAAM,CAANA,KAAAA,CAAlB,EAAiB,CAAjB;AACA,aAAO,EAAE,GAAF,KAAA,EAAYqB,OAAO,EAA1B,UAAO,EAAP;AA5EmB,KAAA;AA8ErB,KAACvB,OAAO,CAAR,WAAA,IAAwB;AACtB,aAAO,EAAE,GAAG4B,eAAZ,EAAO,EAAP;AA/EmB,KAAA;AAiFrB,KAAC5B,OAAO,CAAR,WAAA,IAAwB;AACtB,YAAM6B,EAAE,GAAG,EAAE,GAAG3B,MAAM,CAAtB,KAAW,EAAX;AACA,UAAA,aAAA;AACAJ,MAAAA,KAAK,CAALA,MAAAA,CAAAA,OAAAA,CAAqB,CAAA,EAAA,KAAM;AACzB;AACEgC,QAAAA,EAAE,CAAFA,IAAAA,KAAYD,EAAE,CAAdC,IAAAA;AACAA,QAAAA,EAAE,CAAFA,aAAAA,KAAqBD,EAAE,CADvBC,aAAAA;AAEAA,QAAAA,EAAE,CAAFA,MAAAA,KAAcD,EAAE,CAFhBC,MAAAA;AAGAA,QAAAA,EAAE,CAAFA,IAAAA,KAAYD,EAAE,CAJhB,IAAA;AAKE;AACAE,UAAAA,aAAa,GAAbA,EAAAA;AACD;AARHjC,OAAAA;AAUA,UAAA,aAAA,EAAmB;AACjB,YAAII,MAAM,CAAV,KAAA,EAAkB;AAChB2B,UAAAA,EAAE,CAAFA,kBAAAA,GAAwB3B,MAAM,CAANA,KAAAA,CAAxB2B,EAAAA;AACD;AACD,eAAOrB,UAAU,CAAA,KAAA,EAAA,QAAA,EAAA,aAAA,EAAjB,EAAiB,CAAjB;AACD;AACD;AACAqB,MAAAA,EAAE,CAAFA,kBAAAA,GAAAA,IAAAA;AACA,UAAI1B,QAAQ,GAAGC,QAAQ,CAAA,KAAA,EAAA,QAAA,EAAvB,EAAuB,CAAvB;AACA,UAAIF,MAAM,CAAV,KAAA,EAAkB;AAChBC,QAAAA,QAAQ,GAAGK,UAAU,CAAA,QAAA,EAAA,QAAA,EAAA,EAAA,EAAyB;AAC5CwB,UAAAA,kBAAkB,EAAE9B,MAAM,CAANA,KAAAA,CADtBC,EAA8C,EAAzB,CAArBA;;AAGD;AACD,aAAA,QAAA;AA5GmB,KAAA;AA8GrB,KAACH,OAAO,CAAR,YAAA,IAAyB;AACvB,aAAOQ,UAAU,CAAA,KAAA,EAAA,QAAA,EAAkBN,MAAM,CAAxB,KAAA,EAAgC,EAAE+B,QAAQ,EAA3D,IAAiD,EAAhC,CAAjB;AA/GmB,KAAA;AAiHrB,KAACjC,OAAO,CAAR,mBAAA,IAAgC;AAC9B,YAAMuB,OAAO,GAAG,EAAE,GAAGzB,KAAK,CAA1B,OAAgB,EAAhB;AACA,aAAOyB,OAAO,CAACrB,MAAM,CAANA,KAAAA,CAAf,kBAAc,CAAd;AACA,YAAMC,QAAQ,GAAGK,UAAU,CAAA,KAAA,EAAA,QAAA,EAAkBN,MAAM,CAAxB,KAAA,EAAgC;AACzD8B,QAAAA,kBAAkB,EADpB,IAA2D,EAAhC,CAA3B;;AAGA,aAAO,EAAE,GAAF,QAAA,EAAP,OAAO,EAAP;AAvHmB,KAAA;AAyHrB,KAAChC,OAAO,CAAR,sBAAA,IAAmC;AACjC,YAAMuB,OAAO,GAAG,EAAE,GAAGzB,KAAK,CAA1B,OAAgB,EAAhB;AACA,aAAOyB,OAAO,CAACrB,MAAM,CAArB,UAAc,CAAd;;AAEA,YAAMgC,SAAS,GAAf,EAAA;AACApC,MAAAA,KAAK,CAALA,MAAAA,CAAAA,OAAAA,CAAqB,CAAA,EAAA,KAAM;AACzB,YAAIgC,EAAE,CAAFA,kBAAAA,KAA0B5B,MAAM,CAApC,UAAA,EAAiD;AAC/CgC,UAAAA,SAAS,CAATA,IAAAA,CAAe,EAAE,GAAF,EAAA,EAASF,kBAAkB,EAAE9B,MAAM,CAANA,QAAAA,CAA5CgC,EAAe,EAAfA;AADF,SAAA,MAEO;AACLA,UAAAA,SAAS,CAATA,IAAAA,CAAAA,EAAAA;AACD;AALHpC,OAAAA;AAOA,aAAO;AACL,WADK,KAAA;AAAA,QAAA,OAAA;AAGL2B,QAAAA,MAAM,EAHD,SAAA;AAILU,QAAAA,kBAAkB,EAAEjC,MAAM,CAANA,QAAAA,CAJtB,EAAO,EAAP;;AArImB,KAAA;AA4IrB,KAACF,OAAO,CAAR,cAAA,IAA2B;AACzB,aAAOQ,UAAU,CAAA,KAAA,EAAA,QAAA,EAAkBN,MAAM,CAAxB,KAAA,EAAgC,EAAE+B,QAAQ,EAA3D,KAAiD,EAAhC,CAAjB;AA7ImB,KAAA;AA+IrB,KAACjC,OAAO,CAAR,YAAA,IAAyB;AACvB,aAAOqB,aAAa,CAAA,KAAA,EAAA,QAAA,EAAkBnB,MAAM,CAA5C,KAAoB,CAApB;AAhJmB,KAAA;AAkJrB,KAACF,OAAO,CAAR,sBAAA,IAAmC;AACjC,UAAIG,QAAQ,GAAG,EAAE,GAAjB,KAAe,EAAf;AACA,YAAMiC,SAAS,GAAG,EAAExB,EAAE,EAAEV,MAAM,CAANA,KAAAA,CAAxB,WAAkB,EAAlB;AACAC,MAAAA,QAAQ,GAAGK,UAAU,CAAA,QAAA,EAAA,cAAA,EAAA,SAAA,EAAsC;AACzD6B,QAAAA,gBAAgB,EAAE;AAChBzB,UAAAA,EAAE,EAAEV,MAAM,CAANA,KAAAA,CADY,EAAA;AAEhBoC,UAAAA,MAAM,EAFU,EAAA;AAGhBC,UAAAA,SAAS,EAJbpC,KACoB,EADuC,EAAtC,CAArBA;;;AAOA,aAAA,QAAA;AA5JmB,KAAA;AA8JrB,KAACH,OAAO,CAAR,yBAAA,IAAsC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAMM,EAAE,GAAGkC,UAAU,CAAC1C,KAAK,CAAN,YAAA,EAAqBI,MAAM,CAANA,KAAAA,CAA1C,WAAqB,CAArB;AACA,UAAII,EAAE,CAAFA,gBAAAA,CAAAA,EAAAA,KAA2BJ,MAAM,CAANA,KAAAA,CAA/B,EAAA,EAAgD;AAC9C,eAAA,KAAA;AACD;AACD;AACA,UAAIC,QAAQ,GAAG,EAAE,GAAjB,KAAe,EAAf;AACA,YAAMiC,SAAS,GAAG,EAAExB,EAAE,EAAEV,MAAM,CAANA,KAAAA,CAAxB,WAAkB,EAAlB;AACAC,MAAAA,QAAQ,GAAGK,UAAU,CAAA,QAAA,EAAA,cAAA,EAAA,SAAA,EAAsC;AACzD6B,QAAAA,gBAAgB,EAAE;AAChBzB,UAAAA,EAAE,EAAEV,MAAM,CAANA,KAAAA,CADY,EAAA;AAEhBoC,UAAAA,MAAM,EAAEpC,MAAM,CAFE,OAAA;AAGhBqC,UAAAA,SAAS,EAJbpC,IACoB,EADuC,EAAtC,CAArBA;;;AAOA,aAAA,QAAA;AApLmB,KAAA;AAsLrB,KAACH,OAAO,CAAR,uBAAA,IAAoC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAMM,EAAE,GAAGkC,UAAU,CAAC1C,KAAK,CAAN,YAAA,EAAqBI,MAAM,CAANA,KAAAA,CAA1C,WAAqB,CAArB;AACA,UAAII,EAAE,CAAFA,gBAAAA,CAAAA,EAAAA,KAA2BJ,MAAM,CAANA,KAAAA,CAA/B,EAAA,EAAgD;AAC9C,eAAA,KAAA;AACD;AACD;AACA,UAAIC,QAAQ,GAAG,EAAE,GAAjB,KAAe,EAAf;AACA,YAAMiC,SAAS,GAAG,EAAExB,EAAE,EAAEV,MAAM,CAANA,KAAAA,CAAxB,WAAkB,EAAlB;AACAC,MAAAA,QAAQ,GAAGK,UAAU,CAAA,QAAA,EAAA,cAAA,EAAA,SAAA,EAAsC;AACzD6B,QAAAA,gBAAgB,EAAE;AAChBzB,UAAAA,EAAE,EAAEV,MAAM,CAANA,KAAAA,CADY,EAAA;AAEhBoC,UAAAA,MAAM,EAAE;AACN;AACEG,YAAAA,WAAW,EADb,CAAA;AAEEC,YAAAA,YAAY,EAFd,CAAA;AAGEC,YAAAA,UAAU,EAHZ,CAAA;AAIEC,YAAAA,OAAO,EAAG,8CAA6C1C,MAAM,CAAC0C,OAPlD,EAGd,EADM,CAFQ;;;AAUhBL,UAAAA,SAAS,EAXbpC,IACoB,EADuC,EAAtC,CAArBA;;;AAcA,aAAA,QAAA;AAnNmB,KAAA;AAqNrB,KAACH,OAAO,CAAR,qBAAA,IAAkC;AAChC,UAAIG,QAAQ,GAAG,EAAE,GAAjB,KAAe,EAAf;AACA,YAAMiC,SAAS,GAAG,EAAExB,EAAE,EAAEV,MAAM,CAANA,KAAAA,CAAxB,WAAkB,EAAlB;AACAC,MAAAA,QAAQ,GAAGK,UAAU,CAAA,QAAA,EAAA,cAAA,EAAA,SAAA,EAAsC;AACzDqC,QAAAA,iBAAiB,EAAE;AACjBN,UAAAA,SAAS,EADQ,KAAA;AAEjBO,UAAAA,IAAI,EAFa,IAAA;AAGjBC,UAAAA,KAAK,EAJT5C,IACqB,EADsC,EAAtC,CAArBA;;;AAOA,aAAA,QAAA;AA/NmB,KAAA;AAiOrB,KAACH,OAAO,CAAR,sBAAA,IAAmC;AACjC,UAAIG,QAAQ,GAAG,EAAE,GAAjB,KAAe,EAAf;AACA,YAAMiC,SAAS,GAAG,EAAExB,EAAE,EAAEV,MAAM,CAANA,KAAAA,CAAxB,WAAkB,EAAlB;AACAC,MAAAA,QAAQ,GAAGK,UAAU,CAAA,QAAA,EAAA,cAAA,EAAA,SAAA,EAAsC;AACzDqC,QAAAA,iBAAiB,EAAE;AACjBN,UAAAA,SAAS,EADQ,IAAA;AAEjBO,UAAAA,IAAI,EAAE5C,MAAM,CAFK,IAAA;AAGjB6C,UAAAA,KAAK,EAJT5C,IACqB,EADsC,EAAtC,CAArBA;;;AAOA,aAAA,QAAA;AA3OmB,KAAA;AA6OrB,KAACH,OAAO,CAAR,oBAAA,IAAiC;AAC/B,UAAIG,QAAQ,GAAG,EAAE,GAAjB,KAAe,EAAf;AACA,YAAMiC,SAAS,GAAG,EAAExB,EAAE,EAAEV,MAAM,CAANA,KAAAA,CAAxB,WAAkB,EAAlB;AACAC,MAAAA,QAAQ,GAAGK,UAAU,CAAA,QAAA,EAAA,cAAA,EAAA,SAAA,EAAsC;AACzDqC,QAAAA,iBAAiB,EAAE;AACjBN,UAAAA,SAAS,EADQ,KAAA;AAEjBO,UAAAA,IAAI,EAFa,IAAA;AAGjBC,UAAAA,KAAK,EAAE7C,MAAM,CAJjBC,KACqB,EADsC,EAAtC,CAArBA;;;AAOA,aAAA,QAAA;AAvPmB,KAAA;AAyPrB,KAACH,OAAO,CAAR,WAAA,IAAwB;AACtB,UAAIG,QAAQ,GAAG,EAAE,GAAjB,KAAe,EAAf;AACA,UAAID,MAAM,CAANA,KAAAA,CAAJ,WAAA,EAA8B;AAC5B,cAAMI,EAAE,GAAGkC,UAAU,CAAC1C,KAAK,CAAN,YAAA,EAAqBI,MAAM,CAANA,KAAAA,CAA1C,WAAqB,CAArB;AACA,YAAII,EAAE,CAAFA,aAAAA,IAAoBR,KAAK,CAALA,OAAAA,CAAcQ,EAAE,CAAxC,aAAwBR,CAAxB,EAAyD;AACvD,gBAAMkD,UAAU,GAAG;AACjB,eAAGlD,KAAK,CAALA,OAAAA,CAAcQ,EAAE,CAAhBR,aAAAA,EADc,OAAA;AAEjBmD,YAAAA,IAAI,EAFa,EAAA;AAGjB1C,YAAAA,KAAK,EAHP,IAAmB,EAAnB;;AAKA,gBAAM2C,CAAC,GAAG,EAAE,GAAGpD,KAAK,CAALA,OAAAA,CAAcQ,EAAE,CAArB,aAAKR,CAAL,EAAsCqD,OAAO,EAAvD,UAAU,EAAV;AACA,gBAAM5B,OAAO,GAAG,EAAE,GAAGzB,KAAK,CAAV,OAAA,EAAoB,CAACoD,CAAC,CAAF,EAAA,GAApC,CAAgB,EAAhB;AACA/C,UAAAA,QAAQ,GAAG,EAAE,GAAF,KAAA,EAAXA,OAAW,EAAXA;AACD;AAXH,OAAA,MAYO;AACLA,QAAAA,QAAQ,CAARA,kBAAAA,GAA8BD,MAAM,CAANA,KAAAA,CAA9BC,EAAAA;AACD;AACDA,MAAAA,QAAQ,GAAGiD,WAAW,CAAA,QAAA,EAAA,SAAA,EAAsBlD,MAAM,CAAlDC,KAAsB,CAAtBA;AACA,YAAMiC,SAAS,GAAG,EAAExB,EAAE,EAAEV,MAAM,CAANA,KAAAA,CAAxB,WAAkB,EAAlB;AACA,aAAOM,UAAU,CAAA,QAAA,EAAA,cAAA,EAAA,SAAA,EAAsC;AACrD6C,QAAAA,aAAa,EAAEnD,MAAM,CAANA,KAAAA,CADjB,EAAuD,EAAtC,CAAjB;;AA5QmB,KAAA;AAgRrB,KAACF,OAAO,CAAR,UAAA,IAAuB;AACrB,aAAOsD,aAAa,CAAA,KAAA,EAAA,SAAA,EAAmBpD,MAAM,CAAzB,KAAA,EAAiC;AACnDJ,QAAAA,KAAK,EAD8C,SAAA;AAEnDqD,QAAAA,OAAO,EAFT,EAAqD,EAAjC,CAApB;;AAjRmB,KAAA;AAsRrB,KAACnD,OAAO,CAAR,mBAAA,IAAgC;AAC9B,YAAMgD,UAAU,GAAG,EAAE,GAAG9C,MAAM,CAANA,KAAAA,CAAxB,OAAmB,EAAnB;AACA8C,MAAAA,UAAU,CAAVA,IAAAA,GAAAA,EAAAA;AACA,aAAOM,aAAa,CAAA,KAAA,EAAA,SAAA,EAAmBpD,MAAM,CAAzB,KAAA,EAAiC;AACnDiD,QAAAA,OAAO,EAD4C,UAAA;AAEnDI,QAAAA,MAAM,EAFR,IAAqD,EAAjC,CAApB;;AAzRmB,KAAA;AA8RrB,KAACvD,OAAO,CAAR,qBAAA,IAAkC;AAChC,aAAOsD,aAAa,CAAA,KAAA,EAAA,SAAA,EAAmBpD,MAAM,CAAzB,KAAA,EAAiC;AACnDJ,QAAAA,KAAK,EADP,UAAqD,EAAjC,CAApB;;AA/RmB,KAAA;AAmSrB,KAACE,OAAO,CAAR,aAAA,IAA0B,CAAA,IAAA,eAAA,EAAA,oBAAA,EAAA,gBAAA,EAAA,qBAAA,EAAA,gBAAA,EAAA,qBAAA,EAAA,gBAAA,EAAA,qBAAA;AACxB;AACA,UAAIE,MAAM,CAANA,KAAAA,CAAAA,KAAAA,KAAJ,SAAA,EAAsC;AACpC,eAAA,KAAA;AACD;AACD,YAAMsD,IAAI,GAAG;AACXC,QAAAA,OAAO,EAAEC,GADE,EAAA;AAEXC,QAAAA,QAAQ,EAFG,GAAA;AAGXR,QAAAA,OAAO,EAAEjD,MAAM,CAHJ,OAAA;AAIX0D,QAAAA,IAAI,EAAE1D,MAAF,IAAA,IAAEA,GAAF,KAAA,CAAEA,GAAF,CAAA,eAAA,GAAEA,MAAM,CAAR,OAAA,KAAA,IAAA,GAAA,KAAA,CAAA,GAAA,CAAA,oBAAA,GAAEA,eAAAA,CAAF,IAAA,KAAA,IAAA,GAAA,KAAA,CAAA,GAAEA,oBAAAA,CAJK,MAAA;AAKXJ,QAAAA,KAAK,EALM,SAAA;AAMX+D,QAAAA,cAAc,EAAE3D,MAAF,IAAA,IAAEA,GAAF,KAAA,CAAEA,GAAF,CAAA,gBAAA,GAAEA,MAAM,CAAR,OAAA,KAAA,IAAA,GAAA,KAAA,CAAA,GAAA,CAAA,qBAAA,GAAEA,gBAAAA,CAAF,KAAA,KAAA,IAAA,GAAA,KAAA,CAAA,GAAEA,qBAAAA,CANL,cAAA;AAOX4D,QAAAA,UAAU,EAAE5D,MAAF,IAAA,IAAEA,GAAF,KAAA,CAAEA,GAAF,CAAA,gBAAA,GAAEA,MAAM,CAAR,OAAA,KAAA,IAAA,GAAA,KAAA,CAAA,GAAA,CAAA,qBAAA,GAAEA,gBAAAA,CAAF,KAAA,KAAA,IAAA,GAAA,KAAA,CAAA,GAAEA,qBAAAA,CAPD,UAAA;AAQX6D,QAAAA,SAAS,EAAE7D,MAAF,IAAA,IAAEA,GAAF,KAAA,CAAEA,GAAF,CAAA,gBAAA,GAAEA,MAAM,CAAR,OAAA,KAAA,IAAA,GAAA,KAAA,CAAA,GAAA,CAAA,qBAAA,GAAEA,gBAAAA,CAAF,KAAA,KAAA,IAAA,GAAA,KAAA,CAAA,GAAEA,qBAAAA,CARA,SAAA;AASX8D,QAAAA,YAAY,EATD,IAAA;AAUXT,QAAAA,MAAM,EAVR,KAAa,EAAb;;AAYA,aAAOD,aAAa,CAAA,KAAA,EAAA,SAAA,EAAmBpD,MAAM,CAAzB,KAAA,EAApB,IAAoB,CAApB;AApTmB,KAAA;AAsTrB,KAACF,OAAO,CAAR,YAAA,IAAyB;AACvB,UAAIE,MAAM,CAANA,KAAAA,CAAAA,KAAAA,KAAJ,SAAA,EAAsC;AACpC,eAAA,KAAA;AACD;AACD,YAAMsD,IAAI,GAAG;AACX1D,QAAAA,KAAK,EADM,QAAA;AAEXwC,QAAAA,MAAM,EAAEpC,MAAM,CAFH,MAAA;AAGX8D,QAAAA,YAAY,EAAE9D,MAAM,CAHT,GAAA;AAIXuD,QAAAA,OAAO,EAAEC,GAJE,EAAA;AAKXO,QAAAA,IAAI,EAAE/D,MAAM,CALd,IAAa,EAAb;;AAOA,aAAOoD,aAAa,CAAA,KAAA,EAAA,SAAA,EAAmBpD,MAAM,CAAzB,KAAA,EAApB,IAAoB,CAApB;AAjUmB,KAAA;AAmUrB,KAACF,OAAO,CAAR,uBAAA,IAAoC;AAClC,YAAMsB,KAAK,GAAGxB,KAAK,CAALA,YAAAA,CAAAA,GAAAA,CAAuB,CAAA,EAAA,KAAMQ,EAAE,CAA7C,EAAcR,CAAd;AACA;AACEwB,MAAAA,KAAK,CAALA,OAAAA,CAAcpB,MAAM,CAANA,WAAAA,CAAdoB,EAAAA,IAAuC,CAAvCA,CAAAA;AACAxB,MAAAA,KAAK,CAALA,UAAAA,CAAiBA,KAAK,CAALA,UAAAA,CAAAA,MAAAA,GAAjBA,CAAAA,MAAkDI,MAAM,CAANA,WAAAA,CAFpD,EAAA;AAGE;AACA,cAAMD,UAAU,GAAGH,KAAK,CAALA,UAAAA,CAAnB,KAAmBA,EAAnB;AACAG,QAAAA,UAAU,CAAVA,IAAAA,CAAgBC,MAAM,CAANA,WAAAA,CAAhBD,EAAAA;AACA,eAAO,EAAE,GAAF,KAAA,EAAP,UAAO,EAAP;AACD;AACD,aAAA,KAAA;AA7UmB,KAAA;AA+UrB,KAACD,OAAO,CAAR,iBAAA,IAA8B;AAC5B,aAAOQ,UAAU,CAAA,KAAA,EAAA,cAAA,EAAwBN,MAAM,CAA9B,WAAA,EAA4C;AAC3D,WAAGA,MAAM,CADX,WAA6D,EAA5C,CAAjB;;AAhVmB,KAAA;AAoVrB,KAACF,OAAO,CAAR,UAAA,IAAuB;AACrB,aAAOkE,SAAS,CAAA,KAAA,EAAA,QAAA,EAAkBhE,MAAM,CAAxC,MAAgB,CAAhB;AArVmB,KAAA;AAuVrB,KAACF,OAAO,CAAR,wBAAA,IAAqC;AACnC,aAAO,EAAE,GAAF,KAAA,EAAYmC,kBAAkB,EAAEjC,MAAM,CAA7C,KAAO,EAAP;AAxVmB,KAAA;AA0VrB,KAACF,OAAO,CAAR,oBAAA,IAAiC;AAC/B;AACA,YAAM,EAAA,MAAA,KAAamE,IAAI,CAAJA,KAAAA,CAAWC,YAAY,CAAZA,OAAAA,CAA9B,OAA8BA,CAAXD,CAAnB;AACAE,MAAAA,MAAM,CAANA,YAAAA,GAAsBA,MAAM,CAANA,YAAAA,CAAAA,MAAAA;AACpB,OAAA,EAAA,KAAM/D,EAAE,CAAFA,EAAAA,KAAUJ,MAAM,CAANA,cAAAA,CADlBmE,EAAsBA,CAAtBA;;AAGAD,MAAAA,YAAY,CAAZA,OAAAA,CAAAA,OAAAA,EAA8BD,IAAI,CAAJA,SAAAA,CAAe,EAA7CC,MAA6C,EAAfD,CAA9BC;;AAEA;AACA,aAAOhE,QAAQ;AACbiB,MAAAA,aAAa,CAAA,KAAA,EAAA,cAAA,EAAwBnB,MAAM,CAD9B,cACA,CADA;AAAA,oBAAA;AAGbA,MAAAA,MAAM,CAHR,cAAe,CAAf;;AAnWmB,KAAA;AAyWrB,KAACF,OAAO,CAAR,aAAA,IAA0B;AACxB;AACA,YAAM,EAAA,MAAA,KAAamE,IAAI,CAAJA,KAAAA,CAAWC,YAAY,CAAZA,OAAAA,CAA9B,OAA8BA,CAAXD,CAAnB;AACAE,MAAAA,MAAM,CAANA,MAAAA,GAAgBA,MAAM,CAANA,MAAAA,CAAAA,MAAAA;AACd,OAAA,KAAA,KAAS3C,KAAK,CAALA,EAAAA,KAAaxB,MAAM,CAANA,QAAAA,CADxBmE,EAAgBA,CAAhBA;;AAGAD,MAAAA,YAAY,CAAZA,OAAAA,CAAAA,OAAAA,EAA8BD,IAAI,CAAJA,SAAAA,CAAe,EAA7CC,MAA6C,EAAfD,CAA9BC;;AAEA;AACA,aAAOhE,QAAQ;AACbiB,MAAAA,aAAa,CAAA,KAAA,EAAA,QAAA,EAAkBnB,MAAM,CADxB,QACA,CADA;AAAA,cAAA;AAGbA,MAAAA,MAAM,CAHR,QAAe,CAAf;;AAlXmB,KAAA;AAwXrB,KAACF,OAAO,CAAR,mBAAA,IAAgC;AAC9B;AACA,YAAM,EAAA,MAAA,KAAamE,IAAI,CAAJA,KAAAA,CAAWC,YAAY,CAAZA,OAAAA,CAA9B,OAA8BA,CAAXD,CAAnB;AACAE,MAAAA,MAAM,CAANA,UAAAA,GAAoBA,MAAM,CAANA,UAAAA,CAAAA,MAAAA;AAClB,OAAA,KAAA,KAASC,KAAK,KAAKpE,MAAM,CAD3BmE,KAAoBA,CAApBA;;AAGAD,MAAAA,YAAY,CAAZA,OAAAA,CAAAA,OAAAA,EAA8BD,IAAI,CAAJA,SAAAA,CAAe,EAA7CC,MAA6C,EAAfD,CAA9BC;AACA,YAAMnE,UAAU,GAAGH,KAAK,CAALA,UAAAA,CAAAA,MAAAA;AACjB,OAAA,KAAA,KAASwE,KAAK,KAAKpE,MAAM,CAD3B,KAAmBJ,CAAnB;;AAGAG,MAAAA,UAAU,CAAVA,IAAAA,CAAgBC,MAAM,CAAtBD,KAAAA;AACA,aAAO,EAAE,GAAF,KAAA,EAAP,UAAO,EAAP;AAnYmB,KAAA;AAqYrB,KAACD,OAAO,CAAR,aAAA,IAA0B;AACxB,YAAMO,KAAK,GAAG;AACZ,WAAGT,KAAK,CAALA,OAAAA,CAAcI,MAAM,CADX,OACTJ,CADS;AAEZ;AACAyE,QAAAA,WAAW,EAAErE,MAAM,CAHrB,aAAc,EAAd;;AAKA,YAAMqB,OAAO,GAAG,EAAE,GAAGzB,KAAK,CAAV,OAAA,EAAoB,CAACS,KAAK,CAAN,EAAA,GAApC,KAAgB,EAAhB;AACA,aAAO,EAAE,GAAF,KAAA,EAAP,OAAO,EAAP;AA5YmB,KAAA;AA8YrB,KAACP,OAAO,CAAR,kBAAA,IAA+B;AAC7B,aAAOQ,UAAU,CAAA,KAAA,EAAA,cAAA,EAAwBN,MAAM,CAA9B,WAAA,EAA4C;AAC3Da,QAAAA,IAAI,EAAEb,MAAM,CADd,IAA6D,EAA5C,CAAjB;;AA/YmB,KAAA;AAmZrB,KAACF,OAAO,CAAR,+BAAA,IAA4C;AAC1C,aAAOQ,UAAU,CAAA,KAAA,EAAA,cAAA,EAAwBN,MAAM,CAA9B,WAAA,EAA4C;AAC3DsE,QAAAA,aAAa,EAAEtE,MAAM,CADvB,aAA6D,EAA5C,CAAjB;;AApZmB,KAAA;AAwZrB,KAACF,OAAO,CAAR,uBAAA,IAAoC;AAClC,aAAOQ,UAAU,CAAA,KAAA,EAAA,cAAA,EAAwBN,MAAM,CAA9B,WAAA,EAA4C;AAC3Dc,QAAAA,MAAM,EAAEd,MAAM,CADhB,MAA6D,EAA5C,CAAjB;;AAzZmB,KAAA;AA6ZrB,KAACF,OAAO,CAAR,+BAAA,IAA4C;AAC1C,aAAOQ,UAAU,CAAA,KAAA,EAAA,cAAA,EAAwBN,MAAM,CAA9B,WAAA,EAA4C;AAC3DuE,QAAAA,aAAa,EAAEvE,MAAM,CADvB,OAA6D,EAA5C,CAAjB;;AA9ZmB,KAAA;AAkarB,KAACF,OAAO,CAAR,8BAAA,IAA2C;AACzC,aAAOQ,UAAU,CAAA,KAAA,EAAA,cAAA,EAAwBN,MAAM,CAA9B,WAAA,EAA4C;AAC3DwE,QAAAA,YAAY,EAAExE,MAAM,CADtB,OAA6D,EAA5C,CAAjB;;AAnamB,KAAA;AAuarB,KAACF,OAAO,CAAR,sBAAA,IAAmC;AACjC,aAAOQ,UAAU,CAAA,KAAA,EAAA,cAAA,EAAwBN,MAAM,CAA9B,WAAA,EAA4C;AAC3DS,QAAAA,KAAK,EAAET,MAAM,CADf,KAA6D,EAA5C,CAAjB;;AAxamB,KAAA;AA4arB,KAACF,OAAO,CAAR,oBAAA,IAAiC;AAC/B,aAAOQ,UAAU,CAAA,KAAA,EAAA,cAAA,EAAwBN,MAAM,CAA9B,WAAA,EAA4C;AAC3DgB,QAAAA,GAAG,EAAEhB,MAAM,CADb,GAA6D,EAA5C,CAAjB;;AA7amB,KAAA;AAibrB,KAACF,OAAO,CAAR,4BAAA,IAAyC;AACvC,aAAOQ,UAAU,CAAA,KAAA,EAAA,cAAA,EAAwBN,MAAM,CAA9B,WAAA,EAA4C;AAC3DiB,QAAAA,UAAU,EAAEjB,MAAM,CADpB,UAA6D,EAA5C,CAAjB;;AAlbmB,KAAA;AAsbrB,KAACF,OAAO,CAAR,gCAAA,IAA6C;AAC3C,aAAOQ,UAAU,CAAA,KAAA,EAAA,cAAA,EAAwBN,MAAM,CAA9B,WAAA,EAA4C;AAC3DyE,QAAAA,cAAc,EAAEzE,MAAM,CADxB,cAA6D,EAA5C,CAAjB;;AAvbmB,KAAA;AA2brB,KAACF,OAAO,CAAR,8BAAA,IAA2C;AACzC,aAAOQ,UAAU,CAAA,KAAA,EAAA,cAAA,EAAwBN,MAAM,CAA9B,WAAA,EAA4C;AAC3D0E,QAAAA,YAAY,EAAE1E,MAAM,CADtB,GAA6D,EAA5C,CAAjB;;AA5bmB,KAAA;AAgcrB,KAACF,OAAO,CAAR,wBAAA,IAAqC;AACnC,aAAOQ,UAAU,CAAA,KAAA,EAAA,cAAA,EAAwBN,MAAM,CAA9B,WAAA,EAA4C;AAC3De,QAAAA,OAAO,EAAEf,MAAM,CADjB,OAA6D,EAA5C,CAAjB;;AAjcmB,KAAA;AAqcrB,KAACF,OAAO,CAAR,2BAAA,IAAwC;AACtC,aAAOQ,UAAU,CAAA,KAAA,EAAA,cAAA,EAAwBN,MAAM,CAA9B,WAAA,EAA4C;AAC3D2E,QAAAA,YAAY,EAAE3E,MAAM,CADuC,YAAA;AAE3D4E,QAAAA,YAAY,EAAE5E,MAAM,CAFtB,YAA6D,EAA5C,CAAjB;;AAtcmB,KAAA;AA2crB,KAACF,OAAO,CAAR,4BAAA,IAAyC;AACvC,aAAOQ,UAAU,CAAA,KAAA,EAAA,cAAA,EAAwBN,MAAM,CAA9B,WAAA,EAA4C;AAC3D6E,QAAAA,WAAW,EAAE7E,MAAM,CADrB,WAA6D,EAA5C,CAAjB;;AA5cmB,KAAA;AAgdrB,KAACF,OAAO,CAAR,aAAA,IAA0B;AACxB,YAAMgF,SAAS,GAAf,EAAA;AACA9E,MAAAA,MAAM,CAANA,SAAAA,CAAAA,OAAAA,CAAyB,CAAA,EAAA,KAAM;AAC7B8E,QAAAA,SAAS,CAACC,EAAE,CAAZD,EAAS,CAATA,GAAmB;AACjB,aADiB,EAAA;AAEjBE,UAAAA,UAAU,EAAEf,IAAI,CAAJA,KAAAA,CAAWc,EAAE,CAAFA,KAAAA,IAFzBD,EAEcb,CAFK,EAAnBa;;AADF9E,OAAAA;AAMA,aAAO,EAAE,GAAF,KAAA,EAAP,SAAO,EAAP;AAxdmB,KAAA;AA0drB,KAACF,OAAO,CAAR,eAAA,IAA4B;AAC1B,UAAI2B,UAAU,GAAG,EAAE,GAAG7B,KAAK,CAA3B,OAAiB,EAAjB;AACA;AACA,UAAIqF,MAAM,GAAV,KAAA;AACA,UAAI,EAAA,iBAAA,KAAJ,KAAA;AACA3D,MAAAA,MAAM,CAANA,OAAAA,CAAetB,MAAM,CAArBsB,cAAAA,EAAAA,OAAAA,CAA8C,CAAC,CAAA,EAAA,EAAD,YAAC,CAAD,KAAwB;AACpE;AACE,SAAC1B,KAAK,CAALA,OAAAA,CAAAA,cAAAA,CAAD,EAACA,CAAD;AACCA,QAAAA,KAAK,CAALA,OAAAA,CAAAA,EAAAA,EAAAA,KAAAA,KAAAA,SAAAA;AACCA,QAAAA,KAAK,CAALA,OAAAA,CAAAA,EAAAA,EAAAA,KAAAA,KAHJ,QAAA;AAIE,SAAA,IAAA,iBAAA;AACA,cAAIsF,YAAY,CAAZA,SAAAA,GAAJ,iBAAA,EAAgD;AAC9CC,YAAAA,iBAAiB,GAAGD,YAAY,CAAhCC,SAAAA;AACD;AACD,gBAAMC,SAAS,GAAA,CAAA,iBAAA,GAAGxF,KAAK,CAALA,OAAAA,CAAH,EAAGA,CAAH,KAAA,IAAA,GAAA,KAAA,CAAA,GAAGA,iBAAAA,CAAlB,KAAA;AACA,gBAAMyF,YAAY,GAAGH,YAAY,CAAjC,KAAA;AACAzD,UAAAA,UAAU,CAAVA,EAAU,CAAVA,GAAiB;AACf,eAAG7B,KAAK,CAALA,OAAAA,CADY,EACZA,CADY;AAEf,eAFe,YAAA;AAGf;AACA;AACA;AACAA,YAAAA,KAAK;AACHyF,YAAAA,YAAY,KAAZA,SAAAA;AACA,aAAA,UAAA,EAAA,SAAA,EAAA,QAAA,CADAA,SACA,CADAA;AAAAA,YAAAA,SAAAA;AAPJ5D,YAAAA,YAAiB,EAAjBA;;AAYAwD,UAAAA,MAAM,GAANA,IAAAA;AACD;AAxBH3D,OAAAA;AA0BA,UAAI,CAAJ,MAAA,EAAa;AACXG,QAAAA,UAAU,GAAG7B,KAAK,CAAlB6B,OAAAA;AACD;AACD,aAAO,EAAE,GAAF,KAAA,EAAYJ,OAAO,EAAnB,UAAA,EAAP,iBAAO,EAAP;AA5fmB,KAAA;AA8frB,KAACvB,OAAO,CAAR,gBAAA,IAA6B;AAC3B,aAAO,EAAE,GAAF,KAAA,EAAYwF,OAAO,EAAEtF,MAAM,CAAlC,OAAO,EAAP;AA/fmB,KAAA;AAigBrB,KAACF,OAAO,CAAR,yBAAA,IAAsC;AACpC,aAAO,EAAE,GAAF,KAAA,EAAYyF,mBAAmB,EAA/B,IAAA,EAAuCzB,YAAY,EAA1D,IAAO,EAAP;AAlgBmB,KAAA;AAogBrB,KAAChE,OAAO,CAAR,yBAAA,IAAsC;AACpC,aAAO;AACL,WADK,KAAA;AAELyF,QAAAA,mBAAmB,EAFd,KAAA;AAGLzB,QAAAA,YAAY,EAHP,IAAA;AAIL0B,QAAAA,UAAU,EAAExF,MAAM,CAJpB,UAAO,EAAP;;AArgBmB,KAAA;AA4gBrB,KAACF,OAAO,CAAR,wBAAA,IAAqC;AACnC,aAAO,EAAE,GAAF,KAAA,EAAYyF,mBAAmB,EAA/B,KAAA,EAAwCzB,YAAY,EAAE9D,MAAM,CAAnE,GAAO,EAAP;AA7gBJ,KAAuB,EAAvB;;AAghBA,MAAIA,MAAM,CAANA,IAAAA,IAAJ,cAAA,EAAmC;AACjC,WAAOH,cAAc,CAACG,MAAM,CAA5B,IAAqB,CAAdH,EAAP;AACD;AACD,SAAA,KAAA;kLAphBsBF,a,2kBAAT,a","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { t } from '@superset-ui/core';\n\nimport getInitialState from './getInitialState';\nimport * as actions from '../actions/sqlLab';\nimport { now } from '../../modules/dates';\nimport {\n  addToObject,\n  alterInObject,\n  alterInArr,\n  removeFromArr,\n  getFromArr,\n  addToArr,\n  extendArr,\n} from '../../reduxUtils';\n\nexport default function sqlLabReducer(state = {}, action) {\n  const actionHandlers = {\n    [actions.ADD_QUERY_EDITOR]() {\n      const tabHistory = state.tabHistory.slice();\n      tabHistory.push(action.queryEditor.id);\n      const newState = { ...state, tabHistory };\n      return addToArr(newState, 'queryEditors', action.queryEditor);\n    },\n    [actions.QUERY_EDITOR_SAVED]() {\n      const { query, result } = action;\n      const existing = state.queryEditors.find(qe => qe.id === query.id);\n      return alterInArr(\n        state,\n        'queryEditors',\n        existing,\n        {\n          remoteId: result.remoteId,\n          title: query.title,\n        },\n        'id',\n      );\n    },\n    [actions.UPDATE_QUERY_EDITOR]() {\n      const id = action.alterations.remoteId;\n      const existing = state.queryEditors.find(qe => qe.remoteId === id);\n      if (existing == null) return state;\n      return alterInArr(\n        state,\n        'queryEditors',\n        existing,\n        action.alterations,\n        'remoteId',\n      );\n    },\n    [actions.CLONE_QUERY_TO_NEW_TAB]() {\n      const progenitor = state.queryEditors.find(\n        qe => qe.id === state.tabHistory[state.tabHistory.length - 1],\n      );\n      const qe = {\n        remoteId: progenitor.remoteId,\n        title: t('Copy of %s', progenitor.title),\n        dbId: action.query.dbId ? action.query.dbId : null,\n        schema: action.query.schema ? action.query.schema : null,\n        autorun: true,\n        sql: action.query.sql,\n        queryLimit: action.query.queryLimit,\n        maxRow: action.query.maxRow,\n      };\n      return sqlLabReducer(state, actions.addQueryEditor(qe));\n    },\n    [actions.REMOVE_QUERY_EDITOR]() {\n      let newState = removeFromArr(state, 'queryEditors', action.queryEditor);\n      // List of remaining queryEditor ids\n      const qeIds = newState.queryEditors.map(qe => qe.id);\n\n      const queries = {};\n      Object.keys(state.queries).forEach(k => {\n        const query = state.queries[k];\n        if (qeIds.indexOf(query.sqlEditorId) > -1) {\n          queries[k] = query;\n        }\n      });\n\n      let tabHistory = state.tabHistory.slice();\n      tabHistory = tabHistory.filter(id => qeIds.indexOf(id) > -1);\n\n      // Remove associated table schemas\n      const tables = state.tables.filter(\n        table => table.queryEditorId !== action.queryEditor.id,\n      );\n\n      newState = { ...newState, tabHistory, tables, queries };\n      return newState;\n    },\n    [actions.REMOVE_QUERY]() {\n      const newQueries = { ...state.queries };\n      delete newQueries[action.query.id];\n      return { ...state, queries: newQueries };\n    },\n    [actions.RESET_STATE]() {\n      return { ...getInitialState() };\n    },\n    [actions.MERGE_TABLE]() {\n      const at = { ...action.table };\n      let existingTable;\n      state.tables.forEach(xt => {\n        if (\n          xt.dbId === at.dbId &&\n          xt.queryEditorId === at.queryEditorId &&\n          xt.schema === at.schema &&\n          xt.name === at.name\n        ) {\n          existingTable = xt;\n        }\n      });\n      if (existingTable) {\n        if (action.query) {\n          at.dataPreviewQueryId = action.query.id;\n        }\n        return alterInArr(state, 'tables', existingTable, at);\n      }\n      // for new table, associate Id of query for data preview\n      at.dataPreviewQueryId = null;\n      let newState = addToArr(state, 'tables', at);\n      if (action.query) {\n        newState = alterInArr(newState, 'tables', at, {\n          dataPreviewQueryId: action.query.id,\n        });\n      }\n      return newState;\n    },\n    [actions.EXPAND_TABLE]() {\n      return alterInArr(state, 'tables', action.table, { expanded: true });\n    },\n    [actions.REMOVE_DATA_PREVIEW]() {\n      const queries = { ...state.queries };\n      delete queries[action.table.dataPreviewQueryId];\n      const newState = alterInArr(state, 'tables', action.table, {\n        dataPreviewQueryId: null,\n      });\n      return { ...newState, queries };\n    },\n    [actions.CHANGE_DATA_PREVIEW_ID]() {\n      const queries = { ...state.queries };\n      delete queries[action.oldQueryId];\n\n      const newTables = [];\n      state.tables.forEach(xt => {\n        if (xt.dataPreviewQueryId === action.oldQueryId) {\n          newTables.push({ ...xt, dataPreviewQueryId: action.newQuery.id });\n        } else {\n          newTables.push(xt);\n        }\n      });\n      return {\n        ...state,\n        queries,\n        tables: newTables,\n        activeSouthPaneTab: action.newQuery.id,\n      };\n    },\n    [actions.COLLAPSE_TABLE]() {\n      return alterInArr(state, 'tables', action.table, { expanded: false });\n    },\n    [actions.REMOVE_TABLE]() {\n      return removeFromArr(state, 'tables', action.table);\n    },\n    [actions.START_QUERY_VALIDATION]() {\n      let newState = { ...state };\n      const sqlEditor = { id: action.query.sqlEditorId };\n      newState = alterInArr(newState, 'queryEditors', sqlEditor, {\n        validationResult: {\n          id: action.query.id,\n          errors: [],\n          completed: false,\n        },\n      });\n      return newState;\n    },\n    [actions.QUERY_VALIDATION_RETURNED]() {\n      // If the server is very slow about answering us, we might get validation\n      // responses back out of order. This check confirms the response we're\n      // handling corresponds to the most recently dispatched request.\n      //\n      // We don't care about any but the most recent because validations are\n      // only valid for the SQL text they correspond to -- once the SQL has\n      // changed, the old validation doesn't tell us anything useful anymore.\n      const qe = getFromArr(state.queryEditors, action.query.sqlEditorId);\n      if (qe.validationResult.id !== action.query.id) {\n        return state;\n      }\n      // Otherwise, persist the results on the queryEditor state\n      let newState = { ...state };\n      const sqlEditor = { id: action.query.sqlEditorId };\n      newState = alterInArr(newState, 'queryEditors', sqlEditor, {\n        validationResult: {\n          id: action.query.id,\n          errors: action.results,\n          completed: true,\n        },\n      });\n      return newState;\n    },\n    [actions.QUERY_VALIDATION_FAILED]() {\n      // If the server is very slow about answering us, we might get validation\n      // responses back out of order. This check confirms the response we're\n      // handling corresponds to the most recently dispatched request.\n      //\n      // We don't care about any but the most recent because validations are\n      // only valid for the SQL text they correspond to -- once the SQL has\n      // changed, the old validation doesn't tell us anything useful anymore.\n      const qe = getFromArr(state.queryEditors, action.query.sqlEditorId);\n      if (qe.validationResult.id !== action.query.id) {\n        return state;\n      }\n      // Otherwise, persist the results on the queryEditor state\n      let newState = { ...state };\n      const sqlEditor = { id: action.query.sqlEditorId };\n      newState = alterInArr(newState, 'queryEditors', sqlEditor, {\n        validationResult: {\n          id: action.query.id,\n          errors: [\n            {\n              line_number: 1,\n              start_column: 1,\n              end_column: 1,\n              message: `The server failed to validate your query.\\n${action.message}`,\n            },\n          ],\n          completed: true,\n        },\n      });\n      return newState;\n    },\n    [actions.COST_ESTIMATE_STARTED]() {\n      let newState = { ...state };\n      const sqlEditor = { id: action.query.sqlEditorId };\n      newState = alterInArr(newState, 'queryEditors', sqlEditor, {\n        queryCostEstimate: {\n          completed: false,\n          cost: null,\n          error: null,\n        },\n      });\n      return newState;\n    },\n    [actions.COST_ESTIMATE_RETURNED]() {\n      let newState = { ...state };\n      const sqlEditor = { id: action.query.sqlEditorId };\n      newState = alterInArr(newState, 'queryEditors', sqlEditor, {\n        queryCostEstimate: {\n          completed: true,\n          cost: action.json,\n          error: null,\n        },\n      });\n      return newState;\n    },\n    [actions.COST_ESTIMATE_FAILED]() {\n      let newState = { ...state };\n      const sqlEditor = { id: action.query.sqlEditorId };\n      newState = alterInArr(newState, 'queryEditors', sqlEditor, {\n        queryCostEstimate: {\n          completed: false,\n          cost: null,\n          error: action.error,\n        },\n      });\n      return newState;\n    },\n    [actions.START_QUERY]() {\n      let newState = { ...state };\n      if (action.query.sqlEditorId) {\n        const qe = getFromArr(state.queryEditors, action.query.sqlEditorId);\n        if (qe.latestQueryId && state.queries[qe.latestQueryId]) {\n          const newResults = {\n            ...state.queries[qe.latestQueryId].results,\n            data: [],\n            query: null,\n          };\n          const q = { ...state.queries[qe.latestQueryId], results: newResults };\n          const queries = { ...state.queries, [q.id]: q };\n          newState = { ...state, queries };\n        }\n      } else {\n        newState.activeSouthPaneTab = action.query.id;\n      }\n      newState = addToObject(newState, 'queries', action.query);\n      const sqlEditor = { id: action.query.sqlEditorId };\n      return alterInArr(newState, 'queryEditors', sqlEditor, {\n        latestQueryId: action.query.id,\n      });\n    },\n    [actions.STOP_QUERY]() {\n      return alterInObject(state, 'queries', action.query, {\n        state: 'stopped',\n        results: [],\n      });\n    },\n    [actions.CLEAR_QUERY_RESULTS]() {\n      const newResults = { ...action.query.results };\n      newResults.data = [];\n      return alterInObject(state, 'queries', action.query, {\n        results: newResults,\n        cached: true,\n      });\n    },\n    [actions.REQUEST_QUERY_RESULTS]() {\n      return alterInObject(state, 'queries', action.query, {\n        state: 'fetching',\n      });\n    },\n    [actions.QUERY_SUCCESS]() {\n      // prevent race condition were query succeeds shortly after being canceled\n      if (action.query.state === 'stopped') {\n        return state;\n      }\n      const alts = {\n        endDttm: now(),\n        progress: 100,\n        results: action.results,\n        rows: action?.results?.data?.length,\n        state: 'success',\n        limitingFactor: action?.results?.query?.limitingFactor,\n        tempSchema: action?.results?.query?.tempSchema,\n        tempTable: action?.results?.query?.tempTable,\n        errorMessage: null,\n        cached: false,\n      };\n      return alterInObject(state, 'queries', action.query, alts);\n    },\n    [actions.QUERY_FAILED]() {\n      if (action.query.state === 'stopped') {\n        return state;\n      }\n      const alts = {\n        state: 'failed',\n        errors: action.errors,\n        errorMessage: action.msg,\n        endDttm: now(),\n        link: action.link,\n      };\n      return alterInObject(state, 'queries', action.query, alts);\n    },\n    [actions.SET_ACTIVE_QUERY_EDITOR]() {\n      const qeIds = state.queryEditors.map(qe => qe.id);\n      if (\n        qeIds.indexOf(action.queryEditor.id) > -1 &&\n        state.tabHistory[state.tabHistory.length - 1] !== action.queryEditor.id\n      ) {\n        const tabHistory = state.tabHistory.slice();\n        tabHistory.push(action.queryEditor.id);\n        return { ...state, tabHistory };\n      }\n      return state;\n    },\n    [actions.LOAD_QUERY_EDITOR]() {\n      return alterInArr(state, 'queryEditors', action.queryEditor, {\n        ...action.queryEditor,\n      });\n    },\n    [actions.SET_TABLES]() {\n      return extendArr(state, 'tables', action.tables);\n    },\n    [actions.SET_ACTIVE_SOUTHPANE_TAB]() {\n      return { ...state, activeSouthPaneTab: action.tabId };\n    },\n    [actions.MIGRATE_QUERY_EDITOR]() {\n      // remove migrated query editor from localStorage\n      const { sqlLab } = JSON.parse(localStorage.getItem('redux'));\n      sqlLab.queryEditors = sqlLab.queryEditors.filter(\n        qe => qe.id !== action.oldQueryEditor.id,\n      );\n      localStorage.setItem('redux', JSON.stringify({ sqlLab }));\n\n      // replace localStorage query editor with the server backed one\n      return addToArr(\n        removeFromArr(state, 'queryEditors', action.oldQueryEditor),\n        'queryEditors',\n        action.newQueryEditor,\n      );\n    },\n    [actions.MIGRATE_TABLE]() {\n      // remove migrated table from localStorage\n      const { sqlLab } = JSON.parse(localStorage.getItem('redux'));\n      sqlLab.tables = sqlLab.tables.filter(\n        table => table.id !== action.oldTable.id,\n      );\n      localStorage.setItem('redux', JSON.stringify({ sqlLab }));\n\n      // replace localStorage table with the server backed one\n      return addToArr(\n        removeFromArr(state, 'tables', action.oldTable),\n        'tables',\n        action.newTable,\n      );\n    },\n    [actions.MIGRATE_TAB_HISTORY]() {\n      // remove migrated tab from localStorage tabHistory\n      const { sqlLab } = JSON.parse(localStorage.getItem('redux'));\n      sqlLab.tabHistory = sqlLab.tabHistory.filter(\n        tabId => tabId !== action.oldId,\n      );\n      localStorage.setItem('redux', JSON.stringify({ sqlLab }));\n      const tabHistory = state.tabHistory.filter(\n        tabId => tabId !== action.oldId,\n      );\n      tabHistory.push(action.newId);\n      return { ...state, tabHistory };\n    },\n    [actions.MIGRATE_QUERY]() {\n      const query = {\n        ...state.queries[action.queryId],\n        // point query to migrated query editor\n        sqlEditorId: action.queryEditorId,\n      };\n      const queries = { ...state.queries, [query.id]: query };\n      return { ...state, queries };\n    },\n    [actions.QUERY_EDITOR_SETDB]() {\n      return alterInArr(state, 'queryEditors', action.queryEditor, {\n        dbId: action.dbId,\n      });\n    },\n    [actions.QUERY_EDITOR_SET_FUNCTION_NAMES]() {\n      return alterInArr(state, 'queryEditors', action.queryEditor, {\n        functionNames: action.functionNames,\n      });\n    },\n    [actions.QUERY_EDITOR_SET_SCHEMA]() {\n      return alterInArr(state, 'queryEditors', action.queryEditor, {\n        schema: action.schema,\n      });\n    },\n    [actions.QUERY_EDITOR_SET_SCHEMA_OPTIONS]() {\n      return alterInArr(state, 'queryEditors', action.queryEditor, {\n        schemaOptions: action.options,\n      });\n    },\n    [actions.QUERY_EDITOR_SET_TABLE_OPTIONS]() {\n      return alterInArr(state, 'queryEditors', action.queryEditor, {\n        tableOptions: action.options,\n      });\n    },\n    [actions.QUERY_EDITOR_SET_TITLE]() {\n      return alterInArr(state, 'queryEditors', action.queryEditor, {\n        title: action.title,\n      });\n    },\n    [actions.QUERY_EDITOR_SET_SQL]() {\n      return alterInArr(state, 'queryEditors', action.queryEditor, {\n        sql: action.sql,\n      });\n    },\n    [actions.QUERY_EDITOR_SET_QUERY_LIMIT]() {\n      return alterInArr(state, 'queryEditors', action.queryEditor, {\n        queryLimit: action.queryLimit,\n      });\n    },\n    [actions.QUERY_EDITOR_SET_TEMPLATE_PARAMS]() {\n      return alterInArr(state, 'queryEditors', action.queryEditor, {\n        templateParams: action.templateParams,\n      });\n    },\n    [actions.QUERY_EDITOR_SET_SELECTED_TEXT]() {\n      return alterInArr(state, 'queryEditors', action.queryEditor, {\n        selectedText: action.sql,\n      });\n    },\n    [actions.QUERY_EDITOR_SET_AUTORUN]() {\n      return alterInArr(state, 'queryEditors', action.queryEditor, {\n        autorun: action.autorun,\n      });\n    },\n    [actions.QUERY_EDITOR_PERSIST_HEIGHT]() {\n      return alterInArr(state, 'queryEditors', action.queryEditor, {\n        northPercent: action.northPercent,\n        southPercent: action.southPercent,\n      });\n    },\n    [actions.QUERY_EDITOR_TOGGLE_LEFT_BAR]() {\n      return alterInArr(state, 'queryEditors', action.queryEditor, {\n        hideLeftBar: action.hideLeftBar,\n      });\n    },\n    [actions.SET_DATABASES]() {\n      const databases = {};\n      action.databases.forEach(db => {\n        databases[db.id] = {\n          ...db,\n          extra_json: JSON.parse(db.extra || ''),\n        };\n      });\n      return { ...state, databases };\n    },\n    [actions.REFRESH_QUERIES]() {\n      let newQueries = { ...state.queries };\n      // Fetch the updates to the queries present in the store.\n      let change = false;\n      let { queriesLastUpdate } = state;\n      Object.entries(action.alteredQueries).forEach(([id, changedQuery]) => {\n        if (\n          !state.queries.hasOwnProperty(id) ||\n          (state.queries[id].state !== 'stopped' &&\n            state.queries[id].state !== 'failed')\n        ) {\n          if (changedQuery.changedOn > queriesLastUpdate) {\n            queriesLastUpdate = changedQuery.changedOn;\n          }\n          const prevState = state.queries[id]?.state;\n          const currentState = changedQuery.state;\n          newQueries[id] = {\n            ...state.queries[id],\n            ...changedQuery,\n            // race condition:\n            // because of async behavior, sql lab may still poll a couple of seconds\n            // when it started fetching or finished rendering results\n            state:\n              currentState === 'success' &&\n              ['fetching', 'success'].includes(prevState)\n                ? prevState\n                : currentState,\n          };\n          change = true;\n        }\n      });\n      if (!change) {\n        newQueries = state.queries;\n      }\n      return { ...state, queries: newQueries, queriesLastUpdate };\n    },\n    [actions.SET_USER_OFFLINE]() {\n      return { ...state, offline: action.offline };\n    },\n    [actions.CREATE_DATASOURCE_STARTED]() {\n      return { ...state, isDatasourceLoading: true, errorMessage: null };\n    },\n    [actions.CREATE_DATASOURCE_SUCCESS]() {\n      return {\n        ...state,\n        isDatasourceLoading: false,\n        errorMessage: null,\n        datasource: action.datasource,\n      };\n    },\n    [actions.CREATE_DATASOURCE_FAILED]() {\n      return { ...state, isDatasourceLoading: false, errorMessage: action.err };\n    },\n  };\n  if (action.type in actionHandlers) {\n    return actionHandlers[action.type]();\n  }\n  return state;\n}\n"]},"metadata":{},"sourceType":"module"}