{"ast":null,"code":"import _extends from \"@babel/runtime-corejs3/helpers/extends\";var _jsxFileName = \"/home/ubuntu/my_plugin/superset/superset-frontend/src/explore/components/controls/DndColumnSelectControl/DndFilterSelect.tsx\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with work for additional information\n * regarding copyright ownership.  The ASF licenses file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { FeatureFlag, isFeatureEnabled, logging, SupersetClient, t } from '@superset-ui/core';\nimport { OPERATOR_ENUM_TO_OPERATOR_TYPE, Operators } from 'src/explore/constants';\nimport AdhocFilterPopoverTrigger from 'src/explore/components/controls/FilterControl/AdhocFilterPopoverTrigger';\nimport OptionWrapper from 'src/explore/components/controls/DndColumnSelectControl/OptionWrapper';\nimport DndSelectLabel from 'src/explore/components/controls/DndColumnSelectControl/DndSelectLabel';\nimport AdhocFilter, { CLAUSES, EXPRESSION_TYPES } from 'src/explore/components/controls/FilterControl/AdhocFilter';\nimport AdhocMetric from 'src/explore/components/controls/MetricControl/AdhocMetric';\nimport { isSavedMetric } from 'src/explore/components/DatasourcePanel/types';\nimport { DndItemType } from 'src/explore/components/DndItemType';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst EMPTY_OBJECT = {};\nconst DND_ACCEPTED_TYPES = [\nDndItemType.Column,\nDndItemType.Metric,\nDndItemType.MetricOption,\nDndItemType.AdhocMetricOption];\n\nconst isDictionaryForAdhocFilter = (value) => !(value instanceof AdhocFilter) && (value == null ? void 0 : value.expressionType);\nexport const DndFilterSelect = (props) => {var _props$value;\n  const { datasource, onChange = () => {}, name: controlName } = props;\n  const propsValues = Array.from((_props$value = props.value) != null ? _props$value : []);\n  const [values, setValues] = useState(propsValues.map((filter) => isDictionaryForAdhocFilter(filter) ? new AdhocFilter(filter) : filter));\n  const [partitionColumn, setPartitionColumn] = useState(undefined);\n  const [newFilterPopoverVisible, setNewFilterPopoverVisible] = useState(false);\n  const [droppedItem, setDroppedItem] = useState({});\n  const optionsForSelect = (columns, formData) => {\n    const options = [\n    ...columns,\n    ...[...((formData == null ? void 0 : formData.metrics) || []), formData == null ? void 0 : formData.metric].map((metric) => metric && (\n    typeof metric === 'string' ?\n    { saved_metric_name: metric } :\n    new AdhocMetric(metric)))].\n    filter((option) => option);\n    return options.\n    reduce((results, option) => {\n      if ('saved_metric_name' in option && option.saved_metric_name) {\n        results.push({\n          ...option,\n          filterOptionName: option.saved_metric_name });\n\n      } else\n      if ('column_name' in option && option.column_name) {\n        results.push({\n          ...option,\n          filterOptionName: `_col_${option.column_name}` });\n\n      } else\n      if (option instanceof AdhocMetric) {\n        results.push({\n          ...option,\n          filterOptionName: `_adhocmetric_${option.label}` });\n\n      }\n      return results;\n    }, []).\n    sort((a, b) => {var _localeCompare, _ref;return (_localeCompare = (_ref = a.saved_metric_name || a.column_name || a.label) == null ? void 0 : _ref.localeCompare(b.saved_metric_name || b.column_name || b.label || '')) != null ? _localeCompare : 0;});\n  };\n  const [options, setOptions] = useState(optionsForSelect(props.columns, props.formData));\n  useEffect(() => {\n    if (datasource && datasource.type === 'table') {var _datasource$database;\n      const dbId = (_datasource$database = datasource.database) == null ? void 0 : _datasource$database.id;\n      const { datasource_name: name, schema, is_sqllab_view: isSqllabView } = datasource;\n      if (!isSqllabView && dbId && name && schema) {\n        SupersetClient.get({\n          endpoint: `/superset/extra_table_metadata/${dbId}/${name}/${schema}/` }).\n\n        then(({ json }) => {\n          if (json && json.partitions) {\n            const { partitions } = json;\n            // for now only show latest_partition option\n            // when table datasource has only 1 partition key.\n            if (partitions &&\n            partitions.cols &&\n            Object.keys(partitions.cols).length === 1) {\n              setPartitionColumn(partitions.cols[0]);\n            }\n          }\n        }).\n        catch((error) => {\n          logging.error('fetch extra_table_metadata:', error.statusText);\n        });\n      }\n    }\n  }, [datasource]);\n  useEffect(() => {\n    setOptions(optionsForSelect(props.columns, props.formData));\n  }, [props.columns, props.formData]);\n  useEffect(() => {\n    setValues((props.value || []).map((filter) => isDictionaryForAdhocFilter(filter) ? new AdhocFilter(filter) : filter));\n  }, [props.value]);\n  const onClickClose = useCallback((index) => {\n    const valuesCopy = [...values];\n    valuesCopy.splice(index, 1);\n    setValues(valuesCopy);\n    onChange(valuesCopy);\n  }, [onChange, values]);\n  const onShiftOptions = useCallback((dragIndex, hoverIndex) => {\n    const newValues = [...values];\n    [newValues[hoverIndex], newValues[dragIndex]] = [\n    newValues[dragIndex],\n    newValues[hoverIndex]];\n\n    setValues(newValues);\n  }, [values]);\n  const getMetricExpression = useCallback((savedMetricName) => {var _props$savedMetrics$f;return (_props$savedMetrics$f = props.savedMetrics.find((savedMetric) => savedMetric.metric_name === savedMetricName)) == null ? void 0 : _props$savedMetrics$f.expression;}, [props.savedMetrics]);\n  const mapOption = useCallback((option) => {\n    // already a AdhocFilter, skip\n    if (option instanceof AdhocFilter) {\n      return option;\n    }\n    const filterOptions = option;\n    // via datasource saved metric\n    if (filterOptions.saved_metric_name) {\n      return new AdhocFilter({\n        expressionType: datasource.type === 'druid' ?\n        EXPRESSION_TYPES.SIMPLE :\n        EXPRESSION_TYPES.SQL,\n        subject: datasource.type === 'druid' ?\n        filterOptions.saved_metric_name :\n        getMetricExpression(filterOptions.saved_metric_name),\n        operator: OPERATOR_ENUM_TO_OPERATOR_TYPE[Operators.GREATER_THAN].operation,\n        operatorId: Operators.GREATER_THAN,\n        comparator: 0,\n        clause: CLAUSES.HAVING });\n\n    }\n    // has a custom label, meaning it's custom column\n    if (filterOptions.label) {\n      return new AdhocFilter({\n        expressionType: datasource.type === 'druid' ?\n        EXPRESSION_TYPES.SIMPLE :\n        EXPRESSION_TYPES.SQL,\n        subject: datasource.type === 'druid' ?\n        filterOptions.label :\n        new AdhocMetric(option).translateToSql(),\n        operator: OPERATOR_ENUM_TO_OPERATOR_TYPE[Operators.GREATER_THAN].operation,\n        operatorId: Operators.GREATER_THAN,\n        comparator: 0,\n        clause: CLAUSES.HAVING });\n\n    }\n    // add a new filter item\n    if (filterOptions.column_name) {\n      return new AdhocFilter({\n        expressionType: EXPRESSION_TYPES.SIMPLE,\n        subject: filterOptions.column_name,\n        operator: OPERATOR_ENUM_TO_OPERATOR_TYPE[Operators.EQUALS].operation,\n        operatorId: Operators.EQUALS,\n        comparator: '',\n        clause: CLAUSES.WHERE,\n        isNew: true });\n\n    }\n    return null;\n  }, [datasource.type, getMetricExpression]);\n  const onFilterEdit = useCallback((changedFilter) => {\n    onChange(values.map((value) => {\n      if (value.filterOptionName === changedFilter.filterOptionName) {\n        return changedFilter;\n      }\n      return value;\n    }));\n  }, [onChange, values]);\n  const onNewFilter = useCallback((newFilter) => {\n    const mappedOption = mapOption(newFilter);\n    if (mappedOption) {\n      const newValues = [...values, mappedOption];\n      setValues(newValues);\n      onChange(newValues);\n    }\n  }, [mapOption, onChange, values]);\n  const togglePopover = useCallback((visible) => {\n    setNewFilterPopoverVisible(visible);\n  }, []);\n  const closePopover = useCallback(() => {\n    togglePopover(false);\n  }, [togglePopover]);\n  const valuesRenderer = useCallback(() => values.map((adhocFilter, index) => {\n    const label = adhocFilter.getDefaultLabel();\n    const tooltipTitle = adhocFilter.getTooltipTitle();\n    return ___EmotionJSX(AdhocFilterPopoverTrigger, { key: index, adhocFilter: adhocFilter, options: options, datasource: datasource, onFilterEdit: onFilterEdit, partitionColumn: partitionColumn, __self: this, __source: { fileName: _jsxFileName, lineNumber: 199, columnNumber: 17 } },\n    ___EmotionJSX(OptionWrapper, { key: index, index: index, label: label, tooltipTitle: tooltipTitle, clickClose: onClickClose, onShiftOptions: onShiftOptions, type: DndItemType.FilterOption, withCaret: true, isExtra: adhocFilter.isExtra, __self: this, __source: { fileName: _jsxFileName, lineNumber: 200, columnNumber: 13 } }));\n\n  }), [\n  onClickClose,\n  onFilterEdit,\n  onShiftOptions,\n  options,\n  partitionColumn,\n  datasource,\n  values]);\n\n  const handleClickGhostButton = useCallback(() => {\n    setDroppedItem({});\n    togglePopover(true);\n  }, [togglePopover]);\n  const adhocFilter = useMemo(() => {\n    if (isSavedMetric(droppedItem)) {\n      return new AdhocFilter({\n        expressionType: EXPRESSION_TYPES.SQL,\n        clause: CLAUSES.HAVING,\n        sqlExpression: droppedItem == null ? void 0 : droppedItem.expression });\n\n    }\n    if (droppedItem instanceof AdhocMetric) {\n      return new AdhocFilter({\n        expressionType: EXPRESSION_TYPES.SQL,\n        clause: CLAUSES.HAVING,\n        sqlExpression: droppedItem == null ? void 0 : droppedItem.translateToSql() });\n\n    }\n    const config = {\n      subject: droppedItem == null ? void 0 : droppedItem.column_name };\n\n    if (config.subject && isFeatureEnabled(FeatureFlag.UX_BETA)) {\n      config.operator = OPERATOR_ENUM_TO_OPERATOR_TYPE[Operators.IN].operation;\n      config.operatorId = Operators.IN;\n    }\n    return new AdhocFilter(config);\n  }, [droppedItem]);\n  const canDrop = useCallback(() => true, []);\n  const handleDrop = useCallback((item) => {\n    setDroppedItem(item.value);\n    togglePopover(true);\n  }, [controlName, togglePopover]);\n  const ghostButtonText = isFeatureEnabled(FeatureFlag.ENABLE_DND_WITH_CLICK_UX) ?\n  t('Drop columns/metrics here or click') :\n  t('Drop columns or metrics here');\n  return ___EmotionJSX(React.Fragment, null,\n  ___EmotionJSX(DndSelectLabel, _extends({ onDrop: handleDrop, canDrop: canDrop, valuesRenderer: valuesRenderer, accept: DND_ACCEPTED_TYPES, ghostButtonText: ghostButtonText, onClickGhostButton: isFeatureEnabled(FeatureFlag.ENABLE_DND_WITH_CLICK_UX) ?\n    handleClickGhostButton :\n    undefined }, props, { __self: this, __source: { fileName: _jsxFileName, lineNumber: 248, columnNumber: 7 } })),\n  ___EmotionJSX(AdhocFilterPopoverTrigger, { adhocFilter: adhocFilter, options: options, datasource: datasource, onFilterEdit: onNewFilter, partitionColumn: partitionColumn, isControlledComponent: true, visible: newFilterPopoverVisible, togglePopover: togglePopover, closePopover: closePopover, __self: this, __source: { fileName: _jsxFileName, lineNumber: 251, columnNumber: 7 } },\n  ___EmotionJSX(\"div\", { __self: this, __source: { fileName: _jsxFileName, lineNumber: 252, columnNumber: 9 } })));\n\n\n};__signature__(DndFilterSelect, \"useState{[values, setValues](propsValues.map((filter) => isDictionaryForAdhocFilter(filter) ? new AdhocFilter(filter) : filter))}\\nuseState{[partitionColumn, setPartitionColumn](undefined)}\\nuseState{[newFilterPopoverVisible, setNewFilterPopoverVisible](false)}\\nuseState{[droppedItem, setDroppedItem]({})}\\nuseState{[options, setOptions](optionsForSelect(props.columns, props.formData))}\\nuseEffect{}\\nuseEffect{}\\nuseEffect{}\\nuseCallback{onClickClose}\\nuseCallback{onShiftOptions}\\nuseCallback{getMetricExpression}\\nuseCallback{mapOption}\\nuseCallback{onFilterEdit}\\nuseCallback{onNewFilter}\\nuseCallback{togglePopover}\\nuseCallback{closePopover}\\nuseCallback{valuesRenderer}\\nuseCallback{handleClickGhostButton}\\nuseMemo{adhocFilter}\\nuseCallback{canDrop}\\nuseCallback{handleDrop}\");;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(EMPTY_OBJECT, \"EMPTY_OBJECT\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/explore/components/controls/DndColumnSelectControl/DndFilterSelect.tsx\");reactHotLoader.register(DND_ACCEPTED_TYPES, \"DND_ACCEPTED_TYPES\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/explore/components/controls/DndColumnSelectControl/DndFilterSelect.tsx\");reactHotLoader.register(isDictionaryForAdhocFilter, \"isDictionaryForAdhocFilter\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/explore/components/controls/DndColumnSelectControl/DndFilterSelect.tsx\");reactHotLoader.register(DndFilterSelect, \"DndFilterSelect\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/explore/components/controls/DndColumnSelectControl/DndFilterSelect.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/home/ubuntu/my_plugin/superset/superset-frontend/src/explore/components/controls/DndColumnSelectControl/DndFilterSelect.tsx"],"names":[],"mappings":"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","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with work for additional information\n * regarding copyright ownership.  The ASF licenses file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport {\n  FeatureFlag,\n  isFeatureEnabled,\n  logging,\n  Metric,\n  QueryFormData,\n  QueryFormMetric,\n  SupersetClient,\n  t,\n} from '@superset-ui/core';\nimport { ColumnMeta } from '@superset-ui/chart-controls';\nimport {\n  OPERATOR_ENUM_TO_OPERATOR_TYPE,\n  Operators,\n} from 'src/explore/constants';\nimport { Datasource, OptionSortType } from 'src/explore/types';\nimport { OptionValueType } from 'src/explore/components/controls/DndColumnSelectControl/types';\nimport AdhocFilterPopoverTrigger from 'src/explore/components/controls/FilterControl/AdhocFilterPopoverTrigger';\nimport OptionWrapper from 'src/explore/components/controls/DndColumnSelectControl/OptionWrapper';\nimport DndSelectLabel from 'src/explore/components/controls/DndColumnSelectControl/DndSelectLabel';\nimport AdhocFilter, {\n  CLAUSES,\n  EXPRESSION_TYPES,\n} from 'src/explore/components/controls/FilterControl/AdhocFilter';\nimport AdhocMetric from 'src/explore/components/controls/MetricControl/AdhocMetric';\nimport {\n  DatasourcePanelDndItem,\n  DndItemValue,\n  isSavedMetric,\n} from 'src/explore/components/DatasourcePanel/types';\nimport { DndItemType } from 'src/explore/components/DndItemType';\nimport { ControlComponentProps } from 'src/explore/components/Control';\n\nconst EMPTY_OBJECT = {};\nconst DND_ACCEPTED_TYPES = [\n  DndItemType.Column,\n  DndItemType.Metric,\n  DndItemType.MetricOption,\n  DndItemType.AdhocMetricOption,\n];\n\nconst isDictionaryForAdhocFilter = (value: OptionValueType) =>\n  !(value instanceof AdhocFilter) && value?.expressionType;\n\nexport interface DndFilterSelectProps\n  extends ControlComponentProps<OptionValueType[]> {\n  columns: ColumnMeta[];\n  savedMetrics: Metric[];\n  selectedMetrics: QueryFormMetric[];\n  datasource: Datasource;\n}\n\nexport const DndFilterSelect = (props: DndFilterSelectProps) => {\n  const { datasource, onChange = () => {}, name: controlName } = props;\n\n  const propsValues = Array.from(props.value ?? []);\n  const [values, setValues] = useState(\n    propsValues.map((filter: OptionValueType) =>\n      isDictionaryForAdhocFilter(filter) ? new AdhocFilter(filter) : filter,\n    ),\n  );\n  const [partitionColumn, setPartitionColumn] = useState(undefined);\n  const [newFilterPopoverVisible, setNewFilterPopoverVisible] = useState(false);\n  const [droppedItem, setDroppedItem] = useState<\n    DndItemValue | typeof EMPTY_OBJECT\n  >({});\n\n  const optionsForSelect = (\n    columns: ColumnMeta[],\n    formData: QueryFormData | null | undefined,\n  ) => {\n    const options: OptionSortType[] = [\n      ...columns,\n      ...[...(formData?.metrics || []), formData?.metric].map(\n        metric =>\n          metric &&\n          (typeof metric === 'string'\n            ? { saved_metric_name: metric }\n            : new AdhocMetric(metric)),\n      ),\n    ].filter(option => option);\n\n    return options\n      .reduce(\n        (\n          results: (OptionSortType & { filterOptionName: string })[],\n          option,\n        ) => {\n          if ('saved_metric_name' in option && option.saved_metric_name) {\n            results.push({\n              ...option,\n              filterOptionName: option.saved_metric_name,\n            });\n          } else if ('column_name' in option && option.column_name) {\n            results.push({\n              ...option,\n              filterOptionName: `_col_${option.column_name}`,\n            });\n          } else if (option instanceof AdhocMetric) {\n            results.push({\n              ...option,\n              filterOptionName: `_adhocmetric_${option.label}`,\n            });\n          }\n          return results;\n        },\n        [],\n      )\n      .sort(\n        (a: OptionSortType, b: OptionSortType) =>\n          (a.saved_metric_name || a.column_name || a.label)?.localeCompare(\n            b.saved_metric_name || b.column_name || b.label || '',\n          ) ?? 0,\n      );\n  };\n  const [options, setOptions] = useState(\n    optionsForSelect(props.columns, props.formData),\n  );\n\n  useEffect(() => {\n    if (datasource && datasource.type === 'table') {\n      const dbId = datasource.database?.id;\n      const {\n        datasource_name: name,\n        schema,\n        is_sqllab_view: isSqllabView,\n      } = datasource;\n\n      if (!isSqllabView && dbId && name && schema) {\n        SupersetClient.get({\n          endpoint: `/superset/extra_table_metadata/${dbId}/${name}/${schema}/`,\n        })\n          .then(({ json }: { json: Record<string, any> }) => {\n            if (json && json.partitions) {\n              const { partitions } = json;\n              // for now only show latest_partition option\n              // when table datasource has only 1 partition key.\n              if (\n                partitions &&\n                partitions.cols &&\n                Object.keys(partitions.cols).length === 1\n              ) {\n                setPartitionColumn(partitions.cols[0]);\n              }\n            }\n          })\n          .catch((error: Record<string, any>) => {\n            logging.error('fetch extra_table_metadata:', error.statusText);\n          });\n      }\n    }\n  }, [datasource]);\n\n  useEffect(() => {\n    setOptions(optionsForSelect(props.columns, props.formData));\n  }, [props.columns, props.formData]);\n\n  useEffect(() => {\n    setValues(\n      (props.value || []).map((filter: OptionValueType) =>\n        isDictionaryForAdhocFilter(filter) ? new AdhocFilter(filter) : filter,\n      ),\n    );\n  }, [props.value]);\n\n  const onClickClose = useCallback(\n    (index: number) => {\n      const valuesCopy = [...values];\n      valuesCopy.splice(index, 1);\n      setValues(valuesCopy);\n      onChange(valuesCopy);\n    },\n    [onChange, values],\n  );\n\n  const onShiftOptions = useCallback(\n    (dragIndex: number, hoverIndex: number) => {\n      const newValues = [...values];\n      [newValues[hoverIndex], newValues[dragIndex]] = [\n        newValues[dragIndex],\n        newValues[hoverIndex],\n      ];\n      setValues(newValues);\n    },\n    [values],\n  );\n\n  const getMetricExpression = useCallback(\n    (savedMetricName: string) =>\n      props.savedMetrics.find(\n        (savedMetric: Metric) => savedMetric.metric_name === savedMetricName,\n      )?.expression,\n    [props.savedMetrics],\n  );\n\n  const mapOption = useCallback(\n    (option: OptionValueType) => {\n      // already a AdhocFilter, skip\n      if (option instanceof AdhocFilter) {\n        return option;\n      }\n      const filterOptions = option as Record<string, any>;\n      // via datasource saved metric\n      if (filterOptions.saved_metric_name) {\n        return new AdhocFilter({\n          expressionType:\n            datasource.type === 'druid'\n              ? EXPRESSION_TYPES.SIMPLE\n              : EXPRESSION_TYPES.SQL,\n          subject:\n            datasource.type === 'druid'\n              ? filterOptions.saved_metric_name\n              : getMetricExpression(filterOptions.saved_metric_name),\n          operator:\n            OPERATOR_ENUM_TO_OPERATOR_TYPE[Operators.GREATER_THAN].operation,\n          operatorId: Operators.GREATER_THAN,\n          comparator: 0,\n          clause: CLAUSES.HAVING,\n        });\n      }\n      // has a custom label, meaning it's custom column\n      if (filterOptions.label) {\n        return new AdhocFilter({\n          expressionType:\n            datasource.type === 'druid'\n              ? EXPRESSION_TYPES.SIMPLE\n              : EXPRESSION_TYPES.SQL,\n          subject:\n            datasource.type === 'druid'\n              ? filterOptions.label\n              : new AdhocMetric(option).translateToSql(),\n          operator:\n            OPERATOR_ENUM_TO_OPERATOR_TYPE[Operators.GREATER_THAN].operation,\n          operatorId: Operators.GREATER_THAN,\n          comparator: 0,\n          clause: CLAUSES.HAVING,\n        });\n      }\n      // add a new filter item\n      if (filterOptions.column_name) {\n        return new AdhocFilter({\n          expressionType: EXPRESSION_TYPES.SIMPLE,\n          subject: filterOptions.column_name,\n          operator: OPERATOR_ENUM_TO_OPERATOR_TYPE[Operators.EQUALS].operation,\n          operatorId: Operators.EQUALS,\n          comparator: '',\n          clause: CLAUSES.WHERE,\n          isNew: true,\n        });\n      }\n      return null;\n    },\n    [datasource.type, getMetricExpression],\n  );\n\n  const onFilterEdit = useCallback(\n    (changedFilter: AdhocFilter) => {\n      onChange(\n        values.map((value: AdhocFilter) => {\n          if (value.filterOptionName === changedFilter.filterOptionName) {\n            return changedFilter;\n          }\n          return value;\n        }),\n      );\n    },\n    [onChange, values],\n  );\n\n  const onNewFilter = useCallback(\n    (newFilter: AdhocFilter) => {\n      const mappedOption = mapOption(newFilter);\n      if (mappedOption) {\n        const newValues = [...values, mappedOption];\n        setValues(newValues);\n        onChange(newValues);\n      }\n    },\n    [mapOption, onChange, values],\n  );\n\n  const togglePopover = useCallback((visible: boolean) => {\n    setNewFilterPopoverVisible(visible);\n  }, []);\n\n  const closePopover = useCallback(() => {\n    togglePopover(false);\n  }, [togglePopover]);\n\n  const valuesRenderer = useCallback(\n    () =>\n      values.map((adhocFilter: AdhocFilter, index: number) => {\n        const label = adhocFilter.getDefaultLabel();\n        const tooltipTitle = adhocFilter.getTooltipTitle();\n        return (\n          <AdhocFilterPopoverTrigger\n            key={index}\n            adhocFilter={adhocFilter}\n            options={options}\n            datasource={datasource}\n            onFilterEdit={onFilterEdit}\n            partitionColumn={partitionColumn}\n          >\n            <OptionWrapper\n              key={index}\n              index={index}\n              label={label}\n              tooltipTitle={tooltipTitle}\n              clickClose={onClickClose}\n              onShiftOptions={onShiftOptions}\n              type={DndItemType.FilterOption}\n              withCaret\n              isExtra={adhocFilter.isExtra}\n            />\n          </AdhocFilterPopoverTrigger>\n        );\n      }),\n    [\n      onClickClose,\n      onFilterEdit,\n      onShiftOptions,\n      options,\n      partitionColumn,\n      datasource,\n      values,\n    ],\n  );\n\n  const handleClickGhostButton = useCallback(() => {\n    setDroppedItem({});\n    togglePopover(true);\n  }, [togglePopover]);\n\n  const adhocFilter = useMemo(() => {\n    if (isSavedMetric(droppedItem)) {\n      return new AdhocFilter({\n        expressionType: EXPRESSION_TYPES.SQL,\n        clause: CLAUSES.HAVING,\n        sqlExpression: droppedItem?.expression,\n      });\n    }\n    if (droppedItem instanceof AdhocMetric) {\n      return new AdhocFilter({\n        expressionType: EXPRESSION_TYPES.SQL,\n        clause: CLAUSES.HAVING,\n        sqlExpression: (droppedItem as AdhocMetric)?.translateToSql(),\n      });\n    }\n    const config: Partial<AdhocFilter> = {\n      subject: (droppedItem as ColumnMeta)?.column_name,\n    };\n    if (config.subject && isFeatureEnabled(FeatureFlag.UX_BETA)) {\n      config.operator = OPERATOR_ENUM_TO_OPERATOR_TYPE[Operators.IN].operation;\n      config.operatorId = Operators.IN;\n    }\n    return new AdhocFilter(config);\n  }, [droppedItem]);\n\n  const canDrop = useCallback(() => true, []);\n  const handleDrop = useCallback(\n    (item: DatasourcePanelDndItem) => {\n      setDroppedItem(item.value);\n      togglePopover(true);\n    },\n    [controlName, togglePopover],\n  );\n\n  const ghostButtonText = isFeatureEnabled(FeatureFlag.ENABLE_DND_WITH_CLICK_UX)\n    ? t('Drop columns/metrics here or click')\n    : t('Drop columns or metrics here');\n\n  return (\n    <>\n      <DndSelectLabel\n        onDrop={handleDrop}\n        canDrop={canDrop}\n        valuesRenderer={valuesRenderer}\n        accept={DND_ACCEPTED_TYPES}\n        ghostButtonText={ghostButtonText}\n        onClickGhostButton={\n          isFeatureEnabled(FeatureFlag.ENABLE_DND_WITH_CLICK_UX)\n            ? handleClickGhostButton\n            : undefined\n        }\n        {...props}\n      />\n      <AdhocFilterPopoverTrigger\n        adhocFilter={adhocFilter}\n        options={options}\n        datasource={datasource}\n        onFilterEdit={onNewFilter}\n        partitionColumn={partitionColumn}\n        isControlledComponent\n        visible={newFilterPopoverVisible}\n        togglePopover={togglePopover}\n        closePopover={closePopover}\n      >\n        <div />\n      </AdhocFilterPopoverTrigger>\n    </>\n  );\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}