{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;};(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n/* eslint-disable camelcase */\n/* eslint prefer-const: 2 */\nimport shortid from 'shortid';\nimport { SupersetClient } from '@superset-ui/core';\n\nimport { safeStringify } from '../utils/safeStringify';\nimport { LOG_EVENT } from '../logger/actions';\nimport { LOG_EVENT_TYPE_TIMING } from '../logger/LogUtils';\nimport DebouncedMessageQueue from '../utils/DebouncedMessageQueue';\n\nconst LOG_ENDPOINT = '/superset/log/?explode=events';\nconst sendBeacon = (events) => {\n  if (events.length <= 0) {\n    return;\n  }\n\n  let endpoint = LOG_ENDPOINT;\n  const { source, source_id } = events[0];\n  // backend logs treat these request params as first-class citizens\n  if (source === 'dashboard') {\n    endpoint += `&dashboard_id=${source_id}`;\n  } else if (source === 'slice') {\n    endpoint += `&slice_id=${source_id}`;\n  }\n\n  if (navigator.sendBeacon) {\n    const formData = new FormData();\n    formData.append('events', safeStringify(events));\n    navigator.sendBeacon(endpoint, formData);\n  } else {\n    SupersetClient.post({\n      endpoint,\n      postPayload: { events },\n      parseMethod: null });\n\n  }\n};\n\n// beacon API has data size limit = 2^16.\n// assume avg each log entry has 2^6 characters\nconst MAX_EVENTS_PER_REQUEST = 1024;\nconst logMessageQueue = new DebouncedMessageQueue({\n  callback: sendBeacon,\n  sizeThreshold: MAX_EVENTS_PER_REQUEST,\n  delayThreshold: 1000 });\n\nlet lastEventId = 0;\nconst loggerMiddleware = (store) => (next) => (action) => {var _dashboardLayout$pres;\n  if (action.type !== LOG_EVENT) {\n    return next(action);\n  }\n\n  const {\n    dashboardInfo,\n    explore,\n    impressionId,\n    dashboardLayout } =\n  store.getState();\n  let logMetadata = {\n    impression_id: impressionId,\n    version: 'v2' };\n\n  if (dashboardInfo) {\n    logMetadata = {\n      source: 'dashboard',\n      source_id: dashboardInfo.id,\n      ...logMetadata };\n\n  } else if (explore) {\n    logMetadata = {\n      source: 'explore',\n      source_id: explore.slice ? explore.slice.slice_id : 0,\n      ...logMetadata };\n\n  }\n\n  const { eventName } = action.payload;\n  let { eventData = {} } = action.payload;\n  eventData = {\n    ...logMetadata,\n    ts: new Date().getTime(),\n    event_name: eventName,\n    ...eventData };\n\n  if (LOG_EVENT_TYPE_TIMING.has(eventName)) {\n    eventData = {\n      ...eventData,\n      event_type: 'timing',\n      trigger_event: lastEventId };\n\n  } else {\n    lastEventId = shortid.generate();\n    eventData = {\n      ...eventData,\n      event_type: 'user',\n      event_id: lastEventId,\n      visibility: document.visibilityState };\n\n  }\n\n  if (eventData.target_id && dashboardLayout != null && (_dashboardLayout$pres = dashboardLayout.present) != null && _dashboardLayout$pres[eventData.target_id]) {\n    const { meta } = dashboardLayout.present[eventData.target_id];\n    // chart name or tab/header text\n    eventData.target_name = meta.chartId ? meta.sliceName : meta.text;\n  }\n\n  logMessageQueue.append(eventData);\n  return eventData;\n};const _default =\n\nloggerMiddleware;const _default2 = _default;export default _default2;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(LOG_ENDPOINT, \"LOG_ENDPOINT\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/middleware/loggerMiddleware.js\");reactHotLoader.register(sendBeacon, \"sendBeacon\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/middleware/loggerMiddleware.js\");reactHotLoader.register(MAX_EVENTS_PER_REQUEST, \"MAX_EVENTS_PER_REQUEST\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/middleware/loggerMiddleware.js\");reactHotLoader.register(logMessageQueue, \"logMessageQueue\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/middleware/loggerMiddleware.js\");reactHotLoader.register(lastEventId, \"lastEventId\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/middleware/loggerMiddleware.js\");reactHotLoader.register(loggerMiddleware, \"loggerMiddleware\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/middleware/loggerMiddleware.js\");reactHotLoader.register(_default, \"default\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/middleware/loggerMiddleware.js\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(__signature__, \"__signature__\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/middleware/loggerMiddleware.js\");reactHotLoader.register(LOG_ENDPOINT, \"LOG_ENDPOINT\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/middleware/loggerMiddleware.js\");reactHotLoader.register(sendBeacon, \"sendBeacon\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/middleware/loggerMiddleware.js\");reactHotLoader.register(MAX_EVENTS_PER_REQUEST, \"MAX_EVENTS_PER_REQUEST\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/middleware/loggerMiddleware.js\");reactHotLoader.register(logMessageQueue, \"logMessageQueue\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/middleware/loggerMiddleware.js\");reactHotLoader.register(lastEventId, \"lastEventId\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/middleware/loggerMiddleware.js\");reactHotLoader.register(loggerMiddleware, \"loggerMiddleware\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/middleware/loggerMiddleware.js\");reactHotLoader.register(_default, \"_default\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/middleware/loggerMiddleware.js\");reactHotLoader.register(_default2, \"default\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/middleware/loggerMiddleware.js\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/home/ubuntu/my_plugin/superset/superset-frontend/src/middleware/loggerMiddleware.js"],"names":["LOG_ENDPOINT","sendBeacon","events","endpoint","source","source_id","navigator","formData","safeStringify","SupersetClient","postPayload","parseMethod","MAX_EVENTS_PER_REQUEST","logMessageQueue","callback","sizeThreshold","delayThreshold","lastEventId","loggerMiddleware","action","next","store","logMetadata","impression_id","version","dashboardInfo","explore","eventData","ts","event_name","LOG_EVENT_TYPE_TIMING","event_type","trigger_event","shortid","event_id","visibility","document","dashboardLayout","meta"],"mappings":"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","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint-disable camelcase */\n/* eslint prefer-const: 2 */\nimport shortid from 'shortid';\nimport { SupersetClient } from '@superset-ui/core';\n\nimport { safeStringify } from '../utils/safeStringify';\nimport { LOG_EVENT } from '../logger/actions';\nimport { LOG_EVENT_TYPE_TIMING } from '../logger/LogUtils';\nimport DebouncedMessageQueue from '../utils/DebouncedMessageQueue';\n\nconst LOG_ENDPOINT = '/superset/log/?explode=events';\nconst sendBeacon = events => {\n  if (events.length <= 0) {\n    return;\n  }\n\n  let endpoint = LOG_ENDPOINT;\n  const { source, source_id } = events[0];\n  // backend logs treat these request params as first-class citizens\n  if (source === 'dashboard') {\n    endpoint += `&dashboard_id=${source_id}`;\n  } else if (source === 'slice') {\n    endpoint += `&slice_id=${source_id}`;\n  }\n\n  if (navigator.sendBeacon) {\n    const formData = new FormData();\n    formData.append('events', safeStringify(events));\n    navigator.sendBeacon(endpoint, formData);\n  } else {\n    SupersetClient.post({\n      endpoint,\n      postPayload: { events },\n      parseMethod: null,\n    });\n  }\n};\n\n// beacon API has data size limit = 2^16.\n// assume avg each log entry has 2^6 characters\nconst MAX_EVENTS_PER_REQUEST = 1024;\nconst logMessageQueue = new DebouncedMessageQueue({\n  callback: sendBeacon,\n  sizeThreshold: MAX_EVENTS_PER_REQUEST,\n  delayThreshold: 1000,\n});\nlet lastEventId = 0;\nconst loggerMiddleware = store => next => action => {\n  if (action.type !== LOG_EVENT) {\n    return next(action);\n  }\n\n  const {\n    dashboardInfo,\n    explore,\n    impressionId,\n    dashboardLayout,\n  } = store.getState();\n  let logMetadata = {\n    impression_id: impressionId,\n    version: 'v2',\n  };\n  if (dashboardInfo) {\n    logMetadata = {\n      source: 'dashboard',\n      source_id: dashboardInfo.id,\n      ...logMetadata,\n    };\n  } else if (explore) {\n    logMetadata = {\n      source: 'explore',\n      source_id: explore.slice ? explore.slice.slice_id : 0,\n      ...logMetadata,\n    };\n  }\n\n  const { eventName } = action.payload;\n  let { eventData = {} } = action.payload;\n  eventData = {\n    ...logMetadata,\n    ts: new Date().getTime(),\n    event_name: eventName,\n    ...eventData,\n  };\n  if (LOG_EVENT_TYPE_TIMING.has(eventName)) {\n    eventData = {\n      ...eventData,\n      event_type: 'timing',\n      trigger_event: lastEventId,\n    };\n  } else {\n    lastEventId = shortid.generate();\n    eventData = {\n      ...eventData,\n      event_type: 'user',\n      event_id: lastEventId,\n      visibility: document.visibilityState,\n    };\n  }\n\n  if (eventData.target_id && dashboardLayout?.present?.[eventData.target_id]) {\n    const { meta } = dashboardLayout.present[eventData.target_id];\n    // chart name or tab/header text\n    eventData.target_name = meta.chartId ? meta.sliceName : meta.text;\n  }\n\n  logMessageQueue.append(eventData);\n  return eventData;\n};\n\nexport default loggerMiddleware;\n"]},"metadata":{},"sourceType":"module"}