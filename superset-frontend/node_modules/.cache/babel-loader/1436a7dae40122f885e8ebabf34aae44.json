{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; // the values should align with the database\n// model enum in superset/superset/models/core.py\nexport var CONFIGURATION_METHOD;\n(function (CONFIGURATION_METHOD) {\n  CONFIGURATION_METHOD[\"SQLALCHEMY_URI\"] = \"sqlalchemy_form\";\n  CONFIGURATION_METHOD[\"DYNAMIC_FORM\"] = \"dynamic_form\";\n})(CONFIGURATION_METHOD || (CONFIGURATION_METHOD = {}));;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(CONFIGURATION_METHOD, \"CONFIGURATION_METHOD\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/views/CRUD/data/database/types.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/home/ubuntu/my_plugin/superset/superset-frontend/src/views/CRUD/data/database/types.ts"],"names":[],"mappings":"wSAsJA;AACA;AACA,OAAA,IAAY,oBAAZ;AAAA,CAAA,UAAY,oBAAZ,EAAgC;AAC9B,EAAA,oBAAA,CAAA,gBAAA,CAAA,GAAA,iBAAA;AACA,EAAA,oBAAA,CAAA,cAAA,CAAA,GAAA,cAAA;AACD,CAHD,EAAY,oBAAoB,KAApB,oBAAoB,GAAA,EAAA,CAAhC,E,iLAAY,oB","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\ntype DatabaseUser = {\n  first_name: string;\n  last_name: string;\n};\n\nexport type CatalogObject = {\n  name: string;\n  value: string;\n};\n\nexport type DatabaseObject = {\n  // Connection + general\n  id?: number;\n  database_name: string;\n  name: string; // synonym to database_name\n  sqlalchemy_uri?: string;\n  backend?: string;\n  created_by?: null | DatabaseUser;\n  changed_on_delta_humanized?: string;\n  changed_on?: string;\n  parameters?: {\n    database_name?: string;\n    host?: string;\n    port?: number;\n    database?: string;\n    username?: string;\n    password?: string;\n    encryption?: boolean;\n    credentials_info?: string;\n    service_account_info?: string;\n    query?: Record<string, string>;\n    catalog?: Record<string, string>;\n    properties?: Record<string, any>;\n  };\n  configuration_method: CONFIGURATION_METHOD;\n  engine?: string;\n  paramProperties?: Record<string, any>;\n\n  // Performance\n  cache_timeout?: string;\n  allow_run_async?: boolean;\n\n  // SQL Lab\n  expose_in_sqllab?: boolean;\n  allow_ctas?: boolean;\n  allow_cvas?: boolean;\n  allow_dml?: boolean;\n  allow_multi_schema_metadata_fetch?: boolean;\n  force_ctas_schema?: string;\n\n  // Security\n  encrypted_extra?: string;\n  server_cert?: string;\n  allow_csv_upload?: boolean;\n  impersonate_user?: boolean;\n  parameters_schema?: Record<string, any>;\n\n  // Extra\n  extra_json?: {\n    engine_params?: {\n      catalog: Record<any, any> | string;\n    };\n    metadata_params?: {} | string;\n    metadata_cache_timeout?: {\n      schema_cache_timeout?: number; // in Performance\n      table_cache_timeout?: number; // in Performance\n    }; // No field, holds schema and table timeout\n    allows_virtual_table_explore?: boolean; // in SQL Lab\n    schemas_allowed_for_csv_upload?: string[]; // in Security\n    cancel_query_on_windows_unload?: boolean; // in Performance\n\n    version?: string;\n    cost_estimate_enabled?: boolean; // in SQL Lab\n  };\n\n  // Temporary storage\n  catalog?: Array<CatalogObject>;\n  query_input?: string;\n  extra?: string;\n};\n\nexport type DatabaseForm = {\n  engine: string;\n  name: string;\n  parameters: {\n    properties: {\n      database: {\n        description: string;\n        type: string;\n      };\n      host: {\n        description: string;\n        type: string;\n      };\n      password: {\n        description: string;\n        nullable: boolean;\n        type: string;\n      };\n      port: {\n        description: string;\n        format: string;\n        type: string;\n      };\n      query: {\n        additionalProperties: {};\n        description: string;\n        type: string;\n      };\n      username: {\n        description: string;\n        nullable: boolean;\n        type: string;\n      };\n      credentials_info: {\n        description: string;\n        nullable: boolean;\n        type: string;\n      };\n      service_account_info: {\n        description: string;\n        nullable: boolean;\n        type: string;\n      };\n    };\n    required: string[];\n    type: string;\n  };\n  preferred: boolean;\n  sqlalchemy_uri_placeholder: string;\n};\n\n// the values should align with the database\n// model enum in superset/superset/models/core.py\nexport enum CONFIGURATION_METHOD {\n  SQLALCHEMY_URI = 'sqlalchemy_form',\n  DYNAMIC_FORM = 'dynamic_form',\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}