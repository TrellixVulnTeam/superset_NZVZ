{"ast":null,"code":"import _flatMapDeep from \"lodash/flatMapDeep\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport React from 'react';\nimport { ensureIsArray, GenericDataType } from '@superset-ui/core';\nconst FILTERS_FIELD_NAME = 'filters';\nexport const FILTER_SUPPORTED_TYPES = {\n  filter_time: [GenericDataType.TEMPORAL],\n  filter_timegrain: [GenericDataType.TEMPORAL],\n  filter_timecolumn: [GenericDataType.TEMPORAL],\n  filter_select: [\n  GenericDataType.BOOLEAN,\n  GenericDataType.STRING,\n  GenericDataType.NUMERIC,\n  GenericDataType.TEMPORAL],\n\n  filter_range: [GenericDataType.NUMERIC] };\n\nexport const useForceUpdate = () => {\n  const [, updateState] = React.useState({});\n  return React.useCallback(() => updateState({}), []);\n};__signature__(useForceUpdate, \"useState{[, updateState]({})}\\nuseCallback{}\");\nexport const setNativeFilterFieldValues = (form, filterId, values) => {\n  const formFilters = form.getFieldValue(FILTERS_FIELD_NAME) || {};\n  form.setFields([\n  {\n    name: FILTERS_FIELD_NAME,\n    value: {\n      ...formFilters,\n      [filterId]: {\n        ...formFilters[filterId],\n        ...values } } }]);\n\n\n\n\n};\nexport const getControlItems = (controlConfig = {}) => {var _flatMapDeep$reduce, _flatMapDeep2;return (_flatMapDeep$reduce = (_flatMapDeep2 = _flatMapDeep(controlConfig.controlPanelSections)) == null ? void 0 : _flatMapDeep2.reduce((acc, { controlSetRows = [] }) => [\n  ...acc,\n  ..._flatMapDeep(controlSetRows)],\n  [])) != null ? _flatMapDeep$reduce : [];};\nexport const datasetToSelectOption = (item) => ({\n  value: item.id,\n  label: item.table_name });\n\n// TODO: add column_types field to DatasourceMeta\n// We return true if column_types is undefined or empty as a precaution against backend failing to return column_types\nexport const hasTemporalColumns = (dataset) => {\n  const columnTypes = ensureIsArray(dataset == null ? void 0 : dataset.column_types);\n  return columnTypes.length === 0 || columnTypes.includes(GenericDataType.TEMPORAL);\n};\nexport const doesColumnMatchFilterType = (filterType, column) => {var _FILTER_SUPPORTED_TYP;return !column.type_generic ||\n  !(filterType in FILTER_SUPPORTED_TYPES) || ((_FILTER_SUPPORTED_TYP =\n  FILTER_SUPPORTED_TYPES[filterType]) == null ? void 0 : _FILTER_SUPPORTED_TYP.includes(column.type_generic));};\nexport const mostUsedDataset = (datasets, charts) => {var _datasets$mostUsedDat;\n  const map = new Map();\n  let mostUsedDataset = '';\n  let maxCount = 0;\n  Object.values(charts).forEach((chart) => {\n    const { formData } = chart;\n    if (formData) {\n      const { datasource } = formData;\n      const count = (map.get(datasource) || 0) + 1;\n      map.set(datasource, count);\n      if (count > maxCount) {\n        maxCount = count;\n        mostUsedDataset = datasource;\n      }\n    }\n  });\n  return (_datasets$mostUsedDat = datasets[mostUsedDataset]) == null ? void 0 : _datasets$mostUsedDat.id;\n};;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(FILTERS_FIELD_NAME, \"FILTERS_FIELD_NAME\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/components/nativeFilters/FiltersConfigModal/FiltersConfigForm/utils.ts\");reactHotLoader.register(FILTER_SUPPORTED_TYPES, \"FILTER_SUPPORTED_TYPES\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/components/nativeFilters/FiltersConfigModal/FiltersConfigForm/utils.ts\");reactHotLoader.register(useForceUpdate, \"useForceUpdate\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/components/nativeFilters/FiltersConfigModal/FiltersConfigForm/utils.ts\");reactHotLoader.register(setNativeFilterFieldValues, \"setNativeFilterFieldValues\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/components/nativeFilters/FiltersConfigModal/FiltersConfigForm/utils.ts\");reactHotLoader.register(getControlItems, \"getControlItems\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/components/nativeFilters/FiltersConfigModal/FiltersConfigForm/utils.ts\");reactHotLoader.register(datasetToSelectOption, \"datasetToSelectOption\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/components/nativeFilters/FiltersConfigModal/FiltersConfigForm/utils.ts\");reactHotLoader.register(hasTemporalColumns, \"hasTemporalColumns\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/components/nativeFilters/FiltersConfigModal/FiltersConfigForm/utils.ts\");reactHotLoader.register(doesColumnMatchFilterType, \"doesColumnMatchFilterType\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/components/nativeFilters/FiltersConfigModal/FiltersConfigForm/utils.ts\");reactHotLoader.register(mostUsedDataset, \"mostUsedDataset\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/components/nativeFilters/FiltersConfigModal/FiltersConfigForm/utils.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/components/nativeFilters/FiltersConfigModal/FiltersConfigForm/utils.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { flatMapDeep } from 'lodash';\nimport { FormInstance } from 'antd/lib/form';\nimport React from 'react';\nimport { CustomControlItem, DatasourceMeta } from '@superset-ui/chart-controls';\nimport { Column, ensureIsArray, GenericDataType } from '@superset-ui/core';\nimport { DatasourcesState, ChartsState } from 'src/dashboard/types';\n\nconst FILTERS_FIELD_NAME = 'filters';\n\nexport const FILTER_SUPPORTED_TYPES = {\n  filter_time: [GenericDataType.TEMPORAL],\n  filter_timegrain: [GenericDataType.TEMPORAL],\n  filter_timecolumn: [GenericDataType.TEMPORAL],\n  filter_select: [\n    GenericDataType.BOOLEAN,\n    GenericDataType.STRING,\n    GenericDataType.NUMERIC,\n    GenericDataType.TEMPORAL,\n  ],\n  filter_range: [GenericDataType.NUMERIC],\n};\n\nexport const useForceUpdate = () => {\n  const [, updateState] = React.useState({});\n  return React.useCallback(() => updateState({}), []);\n};\n\nexport const setNativeFilterFieldValues = (\n  form: FormInstance,\n  filterId: string,\n  values: object,\n) => {\n  const formFilters = form.getFieldValue(FILTERS_FIELD_NAME) || {};\n  form.setFields([\n    {\n      name: FILTERS_FIELD_NAME,\n      value: {\n        ...formFilters,\n        [filterId]: {\n          ...formFilters[filterId],\n          ...values,\n        },\n      },\n    },\n  ]);\n};\n\nexport const getControlItems = (\n  controlConfig: { [key: string]: any } = {},\n): CustomControlItem[] =>\n  (flatMapDeep(controlConfig.controlPanelSections)?.reduce(\n    (acc: any, { controlSetRows = [] }: any) => [\n      ...acc,\n      ...flatMapDeep(controlSetRows),\n    ],\n    [],\n  ) as CustomControlItem[]) ?? [];\n\ntype DatasetSelectValue = {\n  value: number;\n  label: string;\n};\n\nexport const datasetToSelectOption = (\n  item: DatasourceMeta & { table_name: string },\n): DatasetSelectValue => ({\n  value: item.id,\n  label: item.table_name,\n});\n\n// TODO: add column_types field to DatasourceMeta\n// We return true if column_types is undefined or empty as a precaution against backend failing to return column_types\nexport const hasTemporalColumns = (\n  dataset: DatasourceMeta & { column_types: GenericDataType[] },\n) => {\n  const columnTypes = ensureIsArray(dataset?.column_types);\n  return (\n    columnTypes.length === 0 || columnTypes.includes(GenericDataType.TEMPORAL)\n  );\n};\n\nexport const doesColumnMatchFilterType = (filterType: string, column: Column) =>\n  !column.type_generic ||\n  !(filterType in FILTER_SUPPORTED_TYPES) ||\n  FILTER_SUPPORTED_TYPES[filterType]?.includes(column.type_generic);\n\nexport const mostUsedDataset = (\n  datasets: DatasourcesState,\n  charts: ChartsState,\n) => {\n  const map = new Map<string, number>();\n  let mostUsedDataset = '';\n  let maxCount = 0;\n\n  Object.values(charts).forEach(chart => {\n    const { formData } = chart;\n    if (formData) {\n      const { datasource } = formData;\n      const count = (map.get(datasource) || 0) + 1;\n      map.set(datasource, count);\n\n      if (count > maxCount) {\n        maxCount = count;\n        mostUsedDataset = datasource;\n      }\n    }\n  });\n\n  return datasets[mostUsedDataset]?.id;\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}