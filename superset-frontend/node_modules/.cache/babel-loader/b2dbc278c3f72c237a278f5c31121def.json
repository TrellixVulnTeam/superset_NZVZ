{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n// https://en.wikipedia.org/wiki/Linear_congruential_generator\nfunction stringAsciiPRNG(value, m) {\n  // Xn+1 = (a * Xn + c) % m\n  // 0 < a < m\n  // 0 <= c < m\n  // 0 <= X0 < m\n  const charCodes = [...value].map((letter) => letter.charCodeAt(0));\n  const len = charCodes.length;\n  const a = len % (m - 1) + 1;\n  const c = charCodes.reduce((current, next) => current + next) % m;\n  let random = charCodes[0] % m;\n  [...new Array(len)].forEach(() => {\n    random = (a * random + c) % m;\n  });\n  return random;\n}\nexport function getRandomColor(sampleValue, colorList) {\n  // if no value is passed, always return transparent color for consistency\n  if (!sampleValue)\n  return 'transparent';\n  // value based random color index,\n  // ensuring the same sampleValue always resolves to the same color\n  return colorList[stringAsciiPRNG(sampleValue, colorList.length)];\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(stringAsciiPRNG, \"stringAsciiPRNG\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/components/FacePile/utils.tsx\");reactHotLoader.register(getRandomColor, \"getRandomColor\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/components/FacePile/utils.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/home/ubuntu/my_plugin/superset/superset-frontend/src/components/FacePile/utils.tsx"],"names":[],"mappings":"wSAAA;;;;;;;;;;;;;;;;;AAiBG;AAEH;AACA,SAAS,eAAT,CAAyB,KAAzB,EAAwC,CAAxC,EAAiD;AAC/C;AACA;AACA;AACA;AAEA,QAAM,SAAS,GAAG,CAAC,GAAG,KAAJ,EAAW,GAAX,CAAe,CAAA,MAAM,KAAI,MAAM,CAAC,UAAP,CAAkB,CAAlB,CAAzB,CAAlB;AACA,QAAM,GAAG,GAAG,SAAS,CAAC,MAAtB;AAEA,QAAM,CAAC,GAAI,GAAG,IAAI,CAAC,GAAG,CAAR,CAAJ,GAAkB,CAA5B;AACA,QAAM,CAAC,GAAG,SAAS,CAAC,MAAV,CAAiB,CAAC,OAAD,EAAU,IAAV,KAAmB,OAAO,GAAG,IAA9C,IAAsD,CAAhE;AAEA,MAAI,MAAM,GAAG,SAAS,CAAC,CAAD,CAAT,GAAe,CAA5B;AAEA,GAAC,GAAG,IAAI,KAAJ,CAAU,GAAV,CAAJ,EAAoB,OAApB,CAA4B,MAAK;AAC/B,IAAA,MAAM,GAAG,CAAC,CAAC,GAAG,MAAJ,GAAa,CAAd,IAAmB,CAA5B;AACD,GAFD;AAIA,SAAO,MAAP;AACD;AAED,OAAM,SAAU,cAAV,CAAyB,WAAzB,EAA8C,SAA9C,EAAiE;AACrE;AACA,MAAI,CAAC,WAAL;AAAkB,SAAO,aAAP;AAElB;AACA;AACA,SAAO,SAAS,CAAC,eAAe,CAAC,WAAD,EAAc,SAAS,CAAC,MAAxB,CAAhB,CAAhB;AACD,C,iLA5BQ,e,oIAqBO,c","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n// https://en.wikipedia.org/wiki/Linear_congruential_generator\nfunction stringAsciiPRNG(value: string, m: number) {\n  // Xn+1 = (a * Xn + c) % m\n  // 0 < a < m\n  // 0 <= c < m\n  // 0 <= X0 < m\n\n  const charCodes = [...value].map(letter => letter.charCodeAt(0));\n  const len = charCodes.length;\n\n  const a = (len % (m - 1)) + 1;\n  const c = charCodes.reduce((current, next) => current + next) % m;\n\n  let random = charCodes[0] % m;\n\n  [...new Array(len)].forEach(() => {\n    random = (a * random + c) % m;\n  });\n\n  return random;\n}\n\nexport function getRandomColor(sampleValue: string, colorList: string[]) {\n  // if no value is passed, always return transparent color for consistency\n  if (!sampleValue) return 'transparent';\n\n  // value based random color index,\n  // ensuring the same sampleValue always resolves to the same color\n  return colorList[stringAsciiPRNG(sampleValue, colorList.length)];\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}