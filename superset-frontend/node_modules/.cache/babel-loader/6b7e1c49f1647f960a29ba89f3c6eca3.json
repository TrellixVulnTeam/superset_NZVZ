{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint-disable camelcase */\nimport {\nFILTER_CONFIG_ATTRIBUTES,\nTIME_FILTER_LABELS,\nTIME_FILTER_MAP } from\n'src/explore/constants';\n\nexport default function getFilterConfigsFromFormdata(form_data = {}) {\n  const {\n    date_filter,\n    filter_configs = [],\n    show_druid_time_granularity,\n    show_druid_time_origin,\n    show_sqla_time_column,\n    show_sqla_time_granularity } =\n  form_data;\n  let configs = filter_configs.reduce(\n  ({ columns, labels }, config) => {\n    let defaultValues = config[FILTER_CONFIG_ATTRIBUTES.DEFAULT_VALUE];\n\n    // treat empty string as null (no default value)\n    if (defaultValues === '') {\n      defaultValues = null;\n    }\n\n    // defaultValue could be ; separated values,\n    // could be null or ''\n    if (defaultValues && config[FILTER_CONFIG_ATTRIBUTES.MULTIPLE]) {\n      defaultValues = config.defaultValue.split(';');\n    }\n\n    const updatedColumns = {\n      ...columns,\n      [config.column]: config.vals || defaultValues };\n\n    const updatedLabels = {\n      ...labels,\n      [config.column]: config.label };\n\n\n    return {\n      columns: updatedColumns,\n      labels: updatedLabels };\n\n  },\n  { columns: {}, labels: {} });\n\n\n  if (date_filter) {\n    let updatedColumns = {\n      ...configs.columns,\n      [TIME_FILTER_MAP.time_range]: form_data.time_range };\n\n    const updatedLabels = {\n      ...configs.labels,\n      ...Object.entries(TIME_FILTER_MAP).reduce(\n      (map, [key, value]) => ({\n        ...map,\n        [value]: TIME_FILTER_LABELS[key] }),\n\n      {}) };\n\n\n\n    if (show_sqla_time_granularity) {\n      updatedColumns = {\n        ...updatedColumns,\n        [TIME_FILTER_MAP.time_grain_sqla]: form_data.time_grain_sqla };\n\n    }\n\n    if (show_sqla_time_column) {\n      updatedColumns = {\n        ...updatedColumns,\n        [TIME_FILTER_MAP.granularity_sqla]: form_data.granularity_sqla };\n\n    }\n\n    if (show_druid_time_granularity) {\n      updatedColumns = {\n        ...updatedColumns,\n        [TIME_FILTER_MAP.granularity]: form_data.granularity };\n\n    }\n\n    if (show_druid_time_origin) {\n      updatedColumns = {\n        ...updatedColumns,\n        [TIME_FILTER_MAP.druid_time_origin]: form_data.druid_time_origin };\n\n    }\n\n    configs = {\n      ...configs,\n      columns: updatedColumns,\n      labels: updatedLabels };\n\n  }\n  return configs;\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(getFilterConfigsFromFormdata, \"getFilterConfigsFromFormdata\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/util/getFilterConfigsFromFormdata.js\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/util/getFilterConfigsFromFormdata.js"],"names":["FILTER_CONFIG_ATTRIBUTES","TIME_FILTER_LABELS","TIME_FILTER_MAP","getFilterConfigsFromFormdata","form_data","date_filter","filter_configs","show_druid_time_granularity","show_druid_time_origin","show_sqla_time_column","show_sqla_time_granularity","configs","reduce","columns","labels","config","defaultValues","DEFAULT_VALUE","MULTIPLE","defaultValue","split","updatedColumns","column","vals","updatedLabels","label","time_range","Object","entries","map","key","value","time_grain_sqla","granularity_sqla","granularity","druid_time_origin"],"mappings":"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","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint-disable camelcase */\nimport {\n  FILTER_CONFIG_ATTRIBUTES,\n  TIME_FILTER_LABELS,\n  TIME_FILTER_MAP,\n} from 'src/explore/constants';\n\nexport default function getFilterConfigsFromFormdata(form_data = {}) {\n  const {\n    date_filter,\n    filter_configs = [],\n    show_druid_time_granularity,\n    show_druid_time_origin,\n    show_sqla_time_column,\n    show_sqla_time_granularity,\n  } = form_data;\n  let configs = filter_configs.reduce(\n    ({ columns, labels }, config) => {\n      let defaultValues = config[FILTER_CONFIG_ATTRIBUTES.DEFAULT_VALUE];\n\n      // treat empty string as null (no default value)\n      if (defaultValues === '') {\n        defaultValues = null;\n      }\n\n      // defaultValue could be ; separated values,\n      // could be null or ''\n      if (defaultValues && config[FILTER_CONFIG_ATTRIBUTES.MULTIPLE]) {\n        defaultValues = config.defaultValue.split(';');\n      }\n\n      const updatedColumns = {\n        ...columns,\n        [config.column]: config.vals || defaultValues,\n      };\n      const updatedLabels = {\n        ...labels,\n        [config.column]: config.label,\n      };\n\n      return {\n        columns: updatedColumns,\n        labels: updatedLabels,\n      };\n    },\n    { columns: {}, labels: {} },\n  );\n\n  if (date_filter) {\n    let updatedColumns = {\n      ...configs.columns,\n      [TIME_FILTER_MAP.time_range]: form_data.time_range,\n    };\n    const updatedLabels = {\n      ...configs.labels,\n      ...Object.entries(TIME_FILTER_MAP).reduce(\n        (map, [key, value]) => ({\n          ...map,\n          [value]: TIME_FILTER_LABELS[key],\n        }),\n        {},\n      ),\n    };\n\n    if (show_sqla_time_granularity) {\n      updatedColumns = {\n        ...updatedColumns,\n        [TIME_FILTER_MAP.time_grain_sqla]: form_data.time_grain_sqla,\n      };\n    }\n\n    if (show_sqla_time_column) {\n      updatedColumns = {\n        ...updatedColumns,\n        [TIME_FILTER_MAP.granularity_sqla]: form_data.granularity_sqla,\n      };\n    }\n\n    if (show_druid_time_granularity) {\n      updatedColumns = {\n        ...updatedColumns,\n        [TIME_FILTER_MAP.granularity]: form_data.granularity,\n      };\n    }\n\n    if (show_druid_time_origin) {\n      updatedColumns = {\n        ...updatedColumns,\n        [TIME_FILTER_MAP.druid_time_origin]: form_data.druid_time_origin,\n      };\n    }\n\n    configs = {\n      ...configs,\n      columns: updatedColumns,\n      labels: updatedLabels,\n    };\n  }\n  return configs;\n}\n"]},"metadata":{},"sourceType":"module"}