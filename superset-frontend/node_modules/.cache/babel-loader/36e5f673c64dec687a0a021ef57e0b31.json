{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/components/DashboardGrid.jsx\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { componentShape } from '../util/propShapes';\nimport DashboardComponent from '../containers/DashboardComponent';\nimport DragDroppable from './dnd/DragDroppable';\n\nimport { GRID_GUTTER_SIZE, GRID_COLUMN_COUNT } from '../util/constants';import { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nconst propTypes = {\n  depth: PropTypes.number.isRequired,\n  editMode: PropTypes.bool.isRequired,\n  gridComponent: componentShape.isRequired,\n  handleComponentDrop: PropTypes.func.isRequired,\n  isComponentVisible: PropTypes.bool.isRequired,\n  resizeComponent: PropTypes.func.isRequired,\n  setDirectPathToChild: PropTypes.func.isRequired,\n  width: PropTypes.number.isRequired };\n\n\nconst defaultProps = {};\n\nconst renderDraggableContentBottom = (dropProps) =>\ndropProps.dropIndicatorProps &&\n___EmotionJSX(\"div\", { className: \"drop-indicator drop-indicator--bottom\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 43, columnNumber: 5 } });\n\n\nconst renderDraggableContentTop = (dropProps) =>\ndropProps.dropIndicatorProps &&\n___EmotionJSX(\"div\", { className: \"drop-indicator drop-indicator--top\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 48, columnNumber: 5 } });\n\n\nclass DashboardGrid extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isResizing: false,\n      rowGuideTop: null };\n\n\n    this.handleResizeStart = this.handleResizeStart.bind(this);\n    this.handleResize = this.handleResize.bind(this);\n    this.handleResizeStop = this.handleResizeStop.bind(this);\n    this.handleTopDropTargetDrop = this.handleTopDropTargetDrop.bind(this);\n    this.getRowGuidePosition = this.getRowGuidePosition.bind(this);\n    this.setGridRef = this.setGridRef.bind(this);\n    this.handleChangeTab = this.handleChangeTab.bind(this);\n  }\n\n  getRowGuidePosition(resizeRef) {\n    if (resizeRef && this.grid) {\n      return (\n        resizeRef.getBoundingClientRect().bottom -\n        this.grid.getBoundingClientRect().top -\n        2);\n\n    }\n    return null;\n  }\n\n  setGridRef(ref) {\n    this.grid = ref;\n  }\n\n  handleResizeStart({ ref, direction }) {\n    let rowGuideTop = null;\n    if (direction === 'bottom' || direction === 'bottomRight') {\n      rowGuideTop = this.getRowGuidePosition(ref);\n    }\n\n    this.setState(() => ({\n      isResizing: true,\n      rowGuideTop }));\n\n  }\n\n  handleResize({ ref, direction }) {\n    if (direction === 'bottom' || direction === 'bottomRight') {\n      this.setState(() => ({ rowGuideTop: this.getRowGuidePosition(ref) }));\n    }\n  }\n\n  handleResizeStop({ id, widthMultiple: width, heightMultiple: height }) {\n    this.props.resizeComponent({ id, width, height });\n\n    this.setState(() => ({\n      isResizing: false,\n      rowGuideTop: null }));\n\n  }\n\n  handleTopDropTargetDrop(dropResult) {\n    if (dropResult) {\n      this.props.handleComponentDrop({\n        ...dropResult,\n        destination: {\n          ...dropResult.destination,\n          // force appending as the first child if top drop target\n          index: 0 } });\n\n\n    }\n  }\n\n  handleChangeTab({ pathToTabIndex }) {\n    this.props.setDirectPathToChild(pathToTabIndex);\n  }\n\n  render() {\n    const {\n      gridComponent,\n      handleComponentDrop,\n      depth,\n      editMode,\n      width,\n      isComponentVisible } =\n    this.props;\n    const columnPlusGutterWidth =\n    (width + GRID_GUTTER_SIZE) / GRID_COLUMN_COUNT;\n\n    const columnWidth = columnPlusGutterWidth - GRID_GUTTER_SIZE;\n    const { isResizing, rowGuideTop } = this.state;\n\n    return width < 100 ? null :\n    ___EmotionJSX(\"div\", { className: \"dashboard-grid\", ref: this.setGridRef, __self: this, __source: { fileName: _jsxFileName, lineNumber: 143, columnNumber: 7 } },\n    ___EmotionJSX(\"div\", { className: \"grid-content\", \"data-test\": \"grid-content\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 144, columnNumber: 9 } },\n\n    editMode &&\n    ___EmotionJSX(DragDroppable, {\n      component: gridComponent,\n      depth: depth,\n      parentComponent: null,\n      index: 0,\n      orientation: \"column\",\n      onDrop: this.handleTopDropTargetDrop,\n      className: \"empty-droptarget\",\n      editMode: true, __self: this, __source: { fileName: _jsxFileName, lineNumber: 147, columnNumber: 13 } },\n\n    renderDraggableContentBottom),\n\n\n\n    gridComponent.children.map((id, index) =>\n    ___EmotionJSX(DashboardComponent, {\n      key: id,\n      id: id,\n      parentId: gridComponent.id,\n      depth: depth + 1,\n      index: index,\n      availableColumnCount: GRID_COLUMN_COUNT,\n      columnWidth: columnWidth,\n      isComponentVisible: isComponentVisible,\n      onResizeStart: this.handleResizeStart,\n      onResize: this.handleResize,\n      onResizeStop: this.handleResizeStop,\n      onChangeTab: this.handleChangeTab, __self: this, __source: { fileName: _jsxFileName, lineNumber: 162, columnNumber: 13 } })),\n\n\n\n\n    editMode && gridComponent.children.length > 0 &&\n    ___EmotionJSX(DragDroppable, {\n      component: gridComponent,\n      depth: depth,\n      parentComponent: null,\n      index: gridComponent.children.length,\n      orientation: \"column\",\n      onDrop: handleComponentDrop,\n      className: \"empty-droptarget\",\n      editMode: true, __self: this, __source: { fileName: _jsxFileName, lineNumber: 180, columnNumber: 13 } },\n\n    renderDraggableContentTop),\n\n\n\n    isResizing &&\n    Array(GRID_COLUMN_COUNT).\n    fill(null).\n    map((_, i) =>\n    ___EmotionJSX(\"div\", {\n      key: `grid-column-${i}`,\n      className: \"grid-column-guide\",\n      style: {\n        left: i * GRID_GUTTER_SIZE + i * columnWidth,\n        width: columnWidth }, __self: this, __source: { fileName: _jsxFileName, lineNumber: 198, columnNumber: 17 } })),\n\n\n\n\n    isResizing && rowGuideTop &&\n    ___EmotionJSX(\"div\", {\n      className: \"grid-row-guide\",\n      style: {\n        top: rowGuideTop,\n        width }, __self: this, __source: { fileName: _jsxFileName, lineNumber: 209, columnNumber: 13 } })));\n\n\n\n\n\n\n  } // @ts-ignore\n  __reactstandin__regenerateByEval(key, code) {// @ts-ignore\n    this[key] = eval(code);}}\nDashboardGrid.propTypes = propTypes;\nDashboardGrid.defaultProps = defaultProps;const _default =\n\nDashboardGrid;export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(propTypes, \"propTypes\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/components/DashboardGrid.jsx\");reactHotLoader.register(defaultProps, \"defaultProps\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/components/DashboardGrid.jsx\");reactHotLoader.register(renderDraggableContentBottom, \"renderDraggableContentBottom\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/components/DashboardGrid.jsx\");reactHotLoader.register(renderDraggableContentTop, \"renderDraggableContentTop\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/components/DashboardGrid.jsx\");reactHotLoader.register(DashboardGrid, \"DashboardGrid\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/components/DashboardGrid.jsx\");reactHotLoader.register(_default, \"default\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/components/DashboardGrid.jsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/components/DashboardGrid.jsx"],"names":["React","PropTypes","componentShape","DashboardComponent","DragDroppable","GRID_GUTTER_SIZE","GRID_COLUMN_COUNT","propTypes","depth","number","isRequired","editMode","bool","gridComponent","handleComponentDrop","func","isComponentVisible","resizeComponent","setDirectPathToChild","width","defaultProps","renderDraggableContentBottom","dropProps","dropIndicatorProps","renderDraggableContentTop","DashboardGrid","PureComponent","constructor","props","state","isResizing","rowGuideTop","handleResizeStart","bind","handleResize","handleResizeStop","handleTopDropTargetDrop","getRowGuidePosition","setGridRef","handleChangeTab","resizeRef","grid","getBoundingClientRect","bottom","top","ref","direction","setState","id","widthMultiple","heightMultiple","height","dropResult","destination","index","pathToTabIndex","render","columnPlusGutterWidth","columnWidth","children","map","length","Array","fill","_","i","left"],"mappings":"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","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { componentShape } from '../util/propShapes';\nimport DashboardComponent from '../containers/DashboardComponent';\nimport DragDroppable from './dnd/DragDroppable';\n\nimport { GRID_GUTTER_SIZE, GRID_COLUMN_COUNT } from '../util/constants';\n\nconst propTypes = {\n  depth: PropTypes.number.isRequired,\n  editMode: PropTypes.bool.isRequired,\n  gridComponent: componentShape.isRequired,\n  handleComponentDrop: PropTypes.func.isRequired,\n  isComponentVisible: PropTypes.bool.isRequired,\n  resizeComponent: PropTypes.func.isRequired,\n  setDirectPathToChild: PropTypes.func.isRequired,\n  width: PropTypes.number.isRequired,\n};\n\nconst defaultProps = {};\n\nconst renderDraggableContentBottom = dropProps =>\n  dropProps.dropIndicatorProps && (\n    <div className=\"drop-indicator drop-indicator--bottom\" />\n  );\n\nconst renderDraggableContentTop = dropProps =>\n  dropProps.dropIndicatorProps && (\n    <div className=\"drop-indicator drop-indicator--top\" />\n  );\n\nclass DashboardGrid extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isResizing: false,\n      rowGuideTop: null,\n    };\n\n    this.handleResizeStart = this.handleResizeStart.bind(this);\n    this.handleResize = this.handleResize.bind(this);\n    this.handleResizeStop = this.handleResizeStop.bind(this);\n    this.handleTopDropTargetDrop = this.handleTopDropTargetDrop.bind(this);\n    this.getRowGuidePosition = this.getRowGuidePosition.bind(this);\n    this.setGridRef = this.setGridRef.bind(this);\n    this.handleChangeTab = this.handleChangeTab.bind(this);\n  }\n\n  getRowGuidePosition(resizeRef) {\n    if (resizeRef && this.grid) {\n      return (\n        resizeRef.getBoundingClientRect().bottom -\n        this.grid.getBoundingClientRect().top -\n        2\n      );\n    }\n    return null;\n  }\n\n  setGridRef(ref) {\n    this.grid = ref;\n  }\n\n  handleResizeStart({ ref, direction }) {\n    let rowGuideTop = null;\n    if (direction === 'bottom' || direction === 'bottomRight') {\n      rowGuideTop = this.getRowGuidePosition(ref);\n    }\n\n    this.setState(() => ({\n      isResizing: true,\n      rowGuideTop,\n    }));\n  }\n\n  handleResize({ ref, direction }) {\n    if (direction === 'bottom' || direction === 'bottomRight') {\n      this.setState(() => ({ rowGuideTop: this.getRowGuidePosition(ref) }));\n    }\n  }\n\n  handleResizeStop({ id, widthMultiple: width, heightMultiple: height }) {\n    this.props.resizeComponent({ id, width, height });\n\n    this.setState(() => ({\n      isResizing: false,\n      rowGuideTop: null,\n    }));\n  }\n\n  handleTopDropTargetDrop(dropResult) {\n    if (dropResult) {\n      this.props.handleComponentDrop({\n        ...dropResult,\n        destination: {\n          ...dropResult.destination,\n          // force appending as the first child if top drop target\n          index: 0,\n        },\n      });\n    }\n  }\n\n  handleChangeTab({ pathToTabIndex }) {\n    this.props.setDirectPathToChild(pathToTabIndex);\n  }\n\n  render() {\n    const {\n      gridComponent,\n      handleComponentDrop,\n      depth,\n      editMode,\n      width,\n      isComponentVisible,\n    } = this.props;\n    const columnPlusGutterWidth =\n      (width + GRID_GUTTER_SIZE) / GRID_COLUMN_COUNT;\n\n    const columnWidth = columnPlusGutterWidth - GRID_GUTTER_SIZE;\n    const { isResizing, rowGuideTop } = this.state;\n\n    return width < 100 ? null : (\n      <div className=\"dashboard-grid\" ref={this.setGridRef}>\n        <div className=\"grid-content\" data-test=\"grid-content\">\n          {/* make the area above components droppable */}\n          {editMode && (\n            <DragDroppable\n              component={gridComponent}\n              depth={depth}\n              parentComponent={null}\n              index={0}\n              orientation=\"column\"\n              onDrop={this.handleTopDropTargetDrop}\n              className=\"empty-droptarget\"\n              editMode\n            >\n              {renderDraggableContentBottom}\n            </DragDroppable>\n          )}\n\n          {gridComponent.children.map((id, index) => (\n            <DashboardComponent\n              key={id}\n              id={id}\n              parentId={gridComponent.id}\n              depth={depth + 1}\n              index={index}\n              availableColumnCount={GRID_COLUMN_COUNT}\n              columnWidth={columnWidth}\n              isComponentVisible={isComponentVisible}\n              onResizeStart={this.handleResizeStart}\n              onResize={this.handleResize}\n              onResizeStop={this.handleResizeStop}\n              onChangeTab={this.handleChangeTab}\n            />\n          ))}\n\n          {/* make the area below components droppable */}\n          {editMode && gridComponent.children.length > 0 && (\n            <DragDroppable\n              component={gridComponent}\n              depth={depth}\n              parentComponent={null}\n              index={gridComponent.children.length}\n              orientation=\"column\"\n              onDrop={handleComponentDrop}\n              className=\"empty-droptarget\"\n              editMode\n            >\n              {renderDraggableContentTop}\n            </DragDroppable>\n          )}\n\n          {isResizing &&\n            Array(GRID_COLUMN_COUNT)\n              .fill(null)\n              .map((_, i) => (\n                <div\n                  key={`grid-column-${i}`}\n                  className=\"grid-column-guide\"\n                  style={{\n                    left: i * GRID_GUTTER_SIZE + i * columnWidth,\n                    width: columnWidth,\n                  }}\n                />\n              ))}\n\n          {isResizing && rowGuideTop && (\n            <div\n              className=\"grid-row-guide\"\n              style={{\n                top: rowGuideTop,\n                width,\n              }}\n            />\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nDashboardGrid.propTypes = propTypes;\nDashboardGrid.defaultProps = defaultProps;\n\nexport default DashboardGrid;\n"]},"metadata":{},"sourceType":"module"}