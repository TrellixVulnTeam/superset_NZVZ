{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;};(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { getChartIdAndColumnFromFilterKey } from './getDashboardFilterKey';\n\n// input: { [id_column1]: values, [id_column2]: values }\n// output: { column1: values, column2: values }\nexport default function getFilterValuesByFilterId({\n  activeFilters = {},\n  filterId })\n{\n  return Object.entries(activeFilters).reduce((map, entry) => {\n    const [filterKey, { values }] = entry;\n    const { chartId, column } = getChartIdAndColumnFromFilterKey(filterKey);\n    if (chartId === filterId) {\n      return {\n        ...map,\n        [column]: values };\n\n    }\n    return map;\n  }, {});\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(getFilterValuesByFilterId, \"getFilterValuesByFilterId\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/util/getFilterValuesByFilterId.js\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(__signature__, \"__signature__\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/util/getFilterValuesByFilterId.js\");reactHotLoader.register(getFilterValuesByFilterId, \"getFilterValuesByFilterId\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/util/getFilterValuesByFilterId.js\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/util/getFilterValuesByFilterId.js"],"names":["getFilterValuesByFilterId","activeFilters","getChartIdAndColumnFromFilterKey","chartId"],"mappings":"+kBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAA,gCAAA,QAAA,yBAAA;;AAEA;AACA;AACA,eAAe,SAAA,yBAAA,CAAmC;AAChDC,EAAAA,aAAa,GADmC,EAAA;AAAnC,EAAA,QAAmC,EAAnC;AAGZ;AACD,SAAO,MAAM,CAAN,OAAA,CAAA,aAAA,EAAA,MAAA,CAAqC,CAAA,GAAA,EAAA,KAAA,KAAgB;AAC1D,UAAM,CAAA,SAAA,EAAY,EAAZ,MAAY,EAAZ,IAAN,KAAA;AACA,UAAM,EAAA,OAAA,EAAA,MAAA,KAAsBC,gCAAgC,CAA5D,SAA4D,CAA5D;AACA,QAAIC,OAAO,KAAX,QAAA,EAA0B;AACxB,aAAO;AACL,WADK,GAAA;AAEL,SAAA,MAAA,GAFF,MAAO,EAAP;;AAID;AACD,WAAA,GAAA;AATK,GAAA,EAAP,EAAO,CAAP;kLAJsBH,yB,2nBAAT,yB","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { getChartIdAndColumnFromFilterKey } from './getDashboardFilterKey';\n\n// input: { [id_column1]: values, [id_column2]: values }\n// output: { column1: values, column2: values }\nexport default function getFilterValuesByFilterId({\n  activeFilters = {},\n  filterId,\n}) {\n  return Object.entries(activeFilters).reduce((map, entry) => {\n    const [filterKey, { values }] = entry;\n    const { chartId, column } = getChartIdAndColumnFromFilterKey(filterKey);\n    if (chartId === filterId) {\n      return {\n        ...map,\n        [column]: values,\n      };\n    }\n    return map;\n  }, {});\n}\n"]},"metadata":{},"sourceType":"module"}