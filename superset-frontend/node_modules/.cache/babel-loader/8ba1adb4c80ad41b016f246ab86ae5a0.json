{"ast":null,"code":"import { css as _css } from \"@emotion/react\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport cx from 'classnames';\nimport { t } from '@superset-ui/core';\nimport InfoTooltip from 'src/components/InfoTooltip';\nimport IndeterminateCheckbox from 'src/components/IndeterminateCheckbox';\nimport Collapse from 'src/components/Collapse';\nimport { StyledInputContainer, StyledJsonEditor, StyledExpandableForm, antdCollapseStyles, no_margin_bottom } from './styles';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst ExtraOptions = ({ db, onInputChange, onTextChange, onEditorChange, onExtraInputChange, onExtraEditorChange }) => {var _db$extra_json, _db$extra_json2, _db$extra_json3, _db$extra_json3$metad, _db$extra_json4, _db$extra_json4$metad, _db$extra_json5, _db$extra_json6, _db$extra_json7, _db$extra_json8, _db$extra_json9;\n  const expandableModalIsOpen = !!(db != null && db.expose_in_sqllab);\n  const createAsOpen = !!(db != null && db.allow_ctas || db != null && db.allow_cvas);\n  return ___EmotionJSX(Collapse, { expandIconPosition: \"right\", accordion: true, css: (theme) => antdCollapseStyles(theme) },\n  ___EmotionJSX(Collapse.Panel, { header: ___EmotionJSX(\"div\", null,\n    ___EmotionJSX(\"h4\", null, \"SQL Lab\"),\n    ___EmotionJSX(\"p\", { className: \"helper\" }, \"Adjust how this database will interact with SQL Lab.\")),\n\n\n    key: \"1\" },\n  ___EmotionJSX(StyledInputContainer, { css: no_margin_bottom },\n  ___EmotionJSX(\"div\", { className: \"input-container\" },\n  ___EmotionJSX(IndeterminateCheckbox, { id: \"expose_in_sqllab\", indeterminate: false, checked: !!(db != null && db.expose_in_sqllab), onChange: onInputChange, labelText: t('Expose database in SQL Lab') }),\n  ___EmotionJSX(InfoTooltip, { tooltip: t('Allow this database to be queried in SQL Lab') })),\n\n  ___EmotionJSX(StyledExpandableForm, { className: cx('expandable', {\n      open: expandableModalIsOpen,\n      'ctas-open': createAsOpen }) },\n\n  ___EmotionJSX(StyledInputContainer, { css: no_margin_bottom },\n  ___EmotionJSX(\"div\", { className: \"input-container\" },\n  ___EmotionJSX(IndeterminateCheckbox, { id: \"allow_ctas\", indeterminate: false, checked: !!(db != null && db.allow_ctas), onChange: onInputChange, labelText: t('Allow CREATE TABLE AS') }),\n  ___EmotionJSX(InfoTooltip, { tooltip: t('Allow creation of new tables based on queries') }))),\n\n\n  ___EmotionJSX(StyledInputContainer, { css: no_margin_bottom },\n  ___EmotionJSX(\"div\", { className: \"input-container\" },\n  ___EmotionJSX(IndeterminateCheckbox, { id: \"allow_cvas\", indeterminate: false, checked: !!(db != null && db.allow_cvas), onChange: onInputChange, labelText: t('Allow CREATE VIEW AS') }),\n  ___EmotionJSX(InfoTooltip, { tooltip: t('Allow creation of new views based on queries') })),\n\n  ___EmotionJSX(StyledInputContainer, { className: cx('expandable', { open: createAsOpen }) },\n  ___EmotionJSX(\"div\", { className: \"control-label\" }, t('CTAS & CVAS SCHEMA')),\n  ___EmotionJSX(\"div\", { className: \"input-container\" },\n  ___EmotionJSX(\"input\", { type: \"text\", name: \"force_ctas_schema\", value: (db == null ? void 0 : db.force_ctas_schema) || '', placeholder: t('Create or select schema...'), onChange: onInputChange })),\n\n  ___EmotionJSX(\"div\", { className: \"helper\" },\n  t('Force all tables and views to be created in this schema when clicking CTAS or CVAS in SQL Lab.')))),\n\n\n\n  ___EmotionJSX(StyledInputContainer, { css: no_margin_bottom },\n  ___EmotionJSX(\"div\", { className: \"input-container\" },\n  ___EmotionJSX(IndeterminateCheckbox, { id: \"allow_dml\", indeterminate: false, checked: !!(db != null && db.allow_dml), onChange: onInputChange, labelText: t('Allow DML') }),\n  ___EmotionJSX(InfoTooltip, { tooltip: t('Allow manipulation of the database using non-SELECT statements such as UPDATE, DELETE, CREATE, etc.') }))),\n\n\n  ___EmotionJSX(StyledInputContainer, { css: no_margin_bottom },\n  ___EmotionJSX(\"div\", { className: \"input-container\" },\n  ___EmotionJSX(IndeterminateCheckbox, { id: \"allow_multi_schema_metadata_fetch\", indeterminate: false, checked: !!(db != null && db.allow_multi_schema_metadata_fetch), onChange: onInputChange, labelText: t('Allow Multi Schema Metadata Fetch') }),\n  ___EmotionJSX(InfoTooltip, { tooltip: t('Allow SQL Lab to fetch a list of all tables and all views across all database ' +\n    'schemas. For large data warehouse with thousands of tables, this can be ' +\n    'expensive and put strain on the system.') }))),\n\n\n  ___EmotionJSX(StyledInputContainer, { css: no_margin_bottom },\n  ___EmotionJSX(\"div\", { className: \"input-container\" },\n  ___EmotionJSX(IndeterminateCheckbox, { id: \"cost_estimate_enabled\", indeterminate: false, checked: !!(db != null && (_db$extra_json = db.extra_json) != null && _db$extra_json.cost_estimate_enabled), onChange: onExtraInputChange, labelText: t('Enable query cost estimation') }),\n  ___EmotionJSX(InfoTooltip, { tooltip: t('For Presto and Postgres, shows a button to compute cost before running a query.') }))),\n\n\n  ___EmotionJSX(StyledInputContainer, null,\n  ___EmotionJSX(\"div\", { className: \"input-container\" },\n  ___EmotionJSX(IndeterminateCheckbox, { id: \"allows_virtual_table_explore\", indeterminate: false, checked: !!(db != null && (_db$extra_json2 = db.extra_json) != null && _db$extra_json2.allows_virtual_table_explore), onChange: onExtraInputChange, labelText: t('Allow this database to be explored') }),\n  ___EmotionJSX(InfoTooltip, { tooltip: t('When enabled, users are able to visualize SQL Lab results in Explore.') })))))),\n\n\n\n\n\n  ___EmotionJSX(Collapse.Panel, { header: ___EmotionJSX(\"div\", null,\n    ___EmotionJSX(\"h4\", null, \"Performance\"),\n    ___EmotionJSX(\"p\", { className: \"helper\" }, \"Adjust performance settings of this database.\")),\n\n\n    key: \"2\" },\n  ___EmotionJSX(StyledInputContainer, { className: \"mb-8\" },\n  ___EmotionJSX(\"div\", { className: \"control-label\" }, t('Chart cache timeout')),\n  ___EmotionJSX(\"div\", { className: \"input-container\" },\n  ___EmotionJSX(\"input\", { type: \"number\", name: \"cache_timeout\", value: (db == null ? void 0 : db.cache_timeout) || '', placeholder: t('Enter duration in seconds'), onChange: onInputChange })),\n\n  ___EmotionJSX(\"div\", { className: \"helper\" },\n  t('Duration (in seconds) of the caching timeout for charts of this database.' +\n  ' A timeout of 0 indicates that the cache never expires.' +\n  ' Note this defaults to the global timeout if undefined.'))),\n\n\n  ___EmotionJSX(StyledInputContainer, null,\n  ___EmotionJSX(\"div\", { className: \"control-label\" }, t('Schema cache timeout')),\n  ___EmotionJSX(\"div\", { className: \"input-container\" },\n  ___EmotionJSX(\"input\", { type: \"number\", name: \"schema_cache_timeout\", value: (db == null ? void 0 : (_db$extra_json3 = db.extra_json) == null ? void 0 : (_db$extra_json3$metad = _db$extra_json3.metadata_cache_timeout) == null ? void 0 : _db$extra_json3$metad.schema_cache_timeout) ||\n    '', placeholder: t('Enter duration in seconds'), onChange: onExtraInputChange })),\n\n  ___EmotionJSX(\"div\", { className: \"helper\" },\n  t('Duration (in seconds) of the metadata caching timeout for schemas of ' +\n  'this database. If left unset, the cache never expires.'))),\n\n\n  ___EmotionJSX(StyledInputContainer, null,\n  ___EmotionJSX(\"div\", { className: \"control-label\" }, t('Table cache timeout')),\n  ___EmotionJSX(\"div\", { className: \"input-container\" },\n  ___EmotionJSX(\"input\", { type: \"number\", name: \"table_cache_timeout\", value: (db == null ? void 0 : (_db$extra_json4 = db.extra_json) == null ? void 0 : (_db$extra_json4$metad = _db$extra_json4.metadata_cache_timeout) == null ? void 0 : _db$extra_json4$metad.table_cache_timeout) ||\n    '', placeholder: t('Enter duration in seconds'), onChange: onExtraInputChange })),\n\n  ___EmotionJSX(\"div\", { className: \"helper\" },\n  t('Duration (in seconds) of the metadata caching timeout for tables of ' +\n  'this database. If left unset, the cache never expires. '))),\n\n\n  ___EmotionJSX(StyledInputContainer, { css: /*#__PURE__*/_css({ no_margin_bottom }, process.env.NODE_ENV === \"production\" ? \"\" : \";label:ExtraOptions;\", process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3VidW50dS9teV9wbHVnaW4vc3VwZXJzZXQvc3VwZXJzZXQtZnJvbnRlbmQvc3JjL3ZpZXdzL0NSVUQvZGF0YS9kYXRhYmFzZS9EYXRhYmFzZU1vZGFsL0V4dHJhT3B0aW9ucy50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBcUk4QiIsImZpbGUiOiIvaG9tZS91YnVudHUvbXlfcGx1Z2luL3N1cGVyc2V0L3N1cGVyc2V0LWZyb250ZW5kL3NyYy92aWV3cy9DUlVEL2RhdGEvZGF0YWJhc2UvRGF0YWJhc2VNb2RhbC9FeHRyYU9wdGlvbnMudHN4Iiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4gKiBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbiAqIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4gKiByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4gKiB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4gKiBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2VcbiAqIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbiAqIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4gKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuICogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4gKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4gKiB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjeCBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCB7IHQgfSBmcm9tICdAc3VwZXJzZXQtdWkvY29yZSc7XG5pbXBvcnQgSW5mb1Rvb2x0aXAgZnJvbSAnc3JjL2NvbXBvbmVudHMvSW5mb1Rvb2x0aXAnO1xuaW1wb3J0IEluZGV0ZXJtaW5hdGVDaGVja2JveCBmcm9tICdzcmMvY29tcG9uZW50cy9JbmRldGVybWluYXRlQ2hlY2tib3gnO1xuaW1wb3J0IENvbGxhcHNlIGZyb20gJ3NyYy9jb21wb25lbnRzL0NvbGxhcHNlJztcbmltcG9ydCB7IFN0eWxlZElucHV0Q29udGFpbmVyLCBTdHlsZWRKc29uRWRpdG9yLCBTdHlsZWRFeHBhbmRhYmxlRm9ybSwgYW50ZENvbGxhcHNlU3R5bGVzLCBub19tYXJnaW5fYm90dG9tLCB9IGZyb20gJy4vc3R5bGVzJztcbmNvbnN0IEV4dHJhT3B0aW9ucyA9ICh7IGRiLCBvbklucHV0Q2hhbmdlLCBvblRleHRDaGFuZ2UsIG9uRWRpdG9yQ2hhbmdlLCBvbkV4dHJhSW5wdXRDaGFuZ2UsIG9uRXh0cmFFZGl0b3JDaGFuZ2UsIH0pID0+IHtcbiAgICBjb25zdCBleHBhbmRhYmxlTW9kYWxJc09wZW4gPSAhIWRiPy5leHBvc2VfaW5fc3FsbGFiO1xuICAgIGNvbnN0IGNyZWF0ZUFzT3BlbiA9ICEhKGRiPy5hbGxvd19jdGFzIHx8IGRiPy5hbGxvd19jdmFzKTtcbiAgICByZXR1cm4gKDxDb2xsYXBzZSBleHBhbmRJY29uUG9zaXRpb249XCJyaWdodFwiIGFjY29yZGlvbiBjc3M9eyh0aGVtZSkgPT4gYW50ZENvbGxhcHNlU3R5bGVzKHRoZW1lKX0+XG4gICAgICA8Q29sbGFwc2UuUGFuZWwgaGVhZGVyPXs8ZGl2PlxuICAgICAgICAgICAgPGg0PlNRTCBMYWI8L2g0PlxuICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwiaGVscGVyXCI+XG4gICAgICAgICAgICAgIEFkanVzdCBob3cgdGhpcyBkYXRhYmFzZSB3aWxsIGludGVyYWN0IHdpdGggU1FMIExhYi5cbiAgICAgICAgICAgIDwvcD5cbiAgICAgICAgICA8L2Rpdj59IGtleT1cIjFcIj5cbiAgICAgICAgPFN0eWxlZElucHV0Q29udGFpbmVyIGNzcz17bm9fbWFyZ2luX2JvdHRvbX0+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJpbnB1dC1jb250YWluZXJcIj5cbiAgICAgICAgICAgIDxJbmRldGVybWluYXRlQ2hlY2tib3ggaWQ9XCJleHBvc2VfaW5fc3FsbGFiXCIgaW5kZXRlcm1pbmF0ZT17ZmFsc2V9IGNoZWNrZWQ9eyEhZGI/LmV4cG9zZV9pbl9zcWxsYWJ9IG9uQ2hhbmdlPXtvbklucHV0Q2hhbmdlfSBsYWJlbFRleHQ9e3QoJ0V4cG9zZSBkYXRhYmFzZSBpbiBTUUwgTGFiJyl9Lz5cbiAgICAgICAgICAgIDxJbmZvVG9vbHRpcCB0b29sdGlwPXt0KCdBbGxvdyB0aGlzIGRhdGFiYXNlIHRvIGJlIHF1ZXJpZWQgaW4gU1FMIExhYicpfS8+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPFN0eWxlZEV4cGFuZGFibGVGb3JtIGNsYXNzTmFtZT17Y3goJ2V4cGFuZGFibGUnLCB7XG4gICAgICAgICAgICBvcGVuOiBleHBhbmRhYmxlTW9kYWxJc09wZW4sXG4gICAgICAgICAgICAnY3Rhcy1vcGVuJzogY3JlYXRlQXNPcGVuLFxuICAgICAgICB9KX0+XG4gICAgICAgICAgICA8U3R5bGVkSW5wdXRDb250YWluZXIgY3NzPXtub19tYXJnaW5fYm90dG9tfT5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJpbnB1dC1jb250YWluZXJcIj5cbiAgICAgICAgICAgICAgICA8SW5kZXRlcm1pbmF0ZUNoZWNrYm94IGlkPVwiYWxsb3dfY3Rhc1wiIGluZGV0ZXJtaW5hdGU9e2ZhbHNlfSBjaGVja2VkPXshIWRiPy5hbGxvd19jdGFzfSBvbkNoYW5nZT17b25JbnB1dENoYW5nZX0gbGFiZWxUZXh0PXt0KCdBbGxvdyBDUkVBVEUgVEFCTEUgQVMnKX0vPlxuICAgICAgICAgICAgICAgIDxJbmZvVG9vbHRpcCB0b29sdGlwPXt0KCdBbGxvdyBjcmVhdGlvbiBvZiBuZXcgdGFibGVzIGJhc2VkIG9uIHF1ZXJpZXMnKX0vPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvU3R5bGVkSW5wdXRDb250YWluZXI+XG4gICAgICAgICAgICA8U3R5bGVkSW5wdXRDb250YWluZXIgY3NzPXtub19tYXJnaW5fYm90dG9tfT5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJpbnB1dC1jb250YWluZXJcIj5cbiAgICAgICAgICAgICAgICA8SW5kZXRlcm1pbmF0ZUNoZWNrYm94IGlkPVwiYWxsb3dfY3Zhc1wiIGluZGV0ZXJtaW5hdGU9e2ZhbHNlfSBjaGVja2VkPXshIWRiPy5hbGxvd19jdmFzfSBvbkNoYW5nZT17b25JbnB1dENoYW5nZX0gbGFiZWxUZXh0PXt0KCdBbGxvdyBDUkVBVEUgVklFVyBBUycpfS8+XG4gICAgICAgICAgICAgICAgPEluZm9Ub29sdGlwIHRvb2x0aXA9e3QoJ0FsbG93IGNyZWF0aW9uIG9mIG5ldyB2aWV3cyBiYXNlZCBvbiBxdWVyaWVzJyl9Lz5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgIDxTdHlsZWRJbnB1dENvbnRhaW5lciBjbGFzc05hbWU9e2N4KCdleHBhbmRhYmxlJywgeyBvcGVuOiBjcmVhdGVBc09wZW4gfSl9PlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29udHJvbC1sYWJlbFwiPnt0KCdDVEFTICYgQ1ZBUyBTQ0hFTUEnKX08L2Rpdj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImlucHV0LWNvbnRhaW5lclwiPlxuICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmFtZT1cImZvcmNlX2N0YXNfc2NoZW1hXCIgdmFsdWU9e2RiPy5mb3JjZV9jdGFzX3NjaGVtYSB8fCAnJ30gcGxhY2Vob2xkZXI9e3QoJ0NyZWF0ZSBvciBzZWxlY3Qgc2NoZW1hLi4uJyl9IG9uQ2hhbmdlPXtvbklucHV0Q2hhbmdlfS8+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJoZWxwZXJcIj5cbiAgICAgICAgICAgICAgICAgIHt0KCdGb3JjZSBhbGwgdGFibGVzIGFuZCB2aWV3cyB0byBiZSBjcmVhdGVkIGluIHRoaXMgc2NoZW1hIHdoZW4gY2xpY2tpbmcgQ1RBUyBvciBDVkFTIGluIFNRTCBMYWIuJyl9XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgIDwvU3R5bGVkSW5wdXRDb250YWluZXI+XG4gICAgICAgICAgICA8L1N0eWxlZElucHV0Q29udGFpbmVyPlxuICAgICAgICAgICAgPFN0eWxlZElucHV0Q29udGFpbmVyIGNzcz17bm9fbWFyZ2luX2JvdHRvbX0+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaW5wdXQtY29udGFpbmVyXCI+XG4gICAgICAgICAgICAgICAgPEluZGV0ZXJtaW5hdGVDaGVja2JveCBpZD1cImFsbG93X2RtbFwiIGluZGV0ZXJtaW5hdGU9e2ZhbHNlfSBjaGVja2VkPXshIWRiPy5hbGxvd19kbWx9IG9uQ2hhbmdlPXtvbklucHV0Q2hhbmdlfSBsYWJlbFRleHQ9e3QoJ0FsbG93IERNTCcpfS8+XG4gICAgICAgICAgICAgICAgPEluZm9Ub29sdGlwIHRvb2x0aXA9e3QoJ0FsbG93IG1hbmlwdWxhdGlvbiBvZiB0aGUgZGF0YWJhc2UgdXNpbmcgbm9uLVNFTEVDVCBzdGF0ZW1lbnRzIHN1Y2ggYXMgVVBEQVRFLCBERUxFVEUsIENSRUFURSwgZXRjLicpfS8+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9TdHlsZWRJbnB1dENvbnRhaW5lcj5cbiAgICAgICAgICAgIDxTdHlsZWRJbnB1dENvbnRhaW5lciBjc3M9e25vX21hcmdpbl9ib3R0b219PlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImlucHV0LWNvbnRhaW5lclwiPlxuICAgICAgICAgICAgICAgIDxJbmRldGVybWluYXRlQ2hlY2tib3ggaWQ9XCJhbGxvd19tdWx0aV9zY2hlbWFfbWV0YWRhdGFfZmV0Y2hcIiBpbmRldGVybWluYXRlPXtmYWxzZX0gY2hlY2tlZD17ISFkYj8uYWxsb3dfbXVsdGlfc2NoZW1hX21ldGFkYXRhX2ZldGNofSBvbkNoYW5nZT17b25JbnB1dENoYW5nZX0gbGFiZWxUZXh0PXt0KCdBbGxvdyBNdWx0aSBTY2hlbWEgTWV0YWRhdGEgRmV0Y2gnKX0vPlxuICAgICAgICAgICAgICAgIDxJbmZvVG9vbHRpcCB0b29sdGlwPXt0KCdBbGxvdyBTUUwgTGFiIHRvIGZldGNoIGEgbGlzdCBvZiBhbGwgdGFibGVzIGFuZCBhbGwgdmlld3MgYWNyb3NzIGFsbCBkYXRhYmFzZSAnICtcbiAgICAgICAgICAgICdzY2hlbWFzLiBGb3IgbGFyZ2UgZGF0YSB3YXJlaG91c2Ugd2l0aCB0aG91c2FuZHMgb2YgdGFibGVzLCB0aGlzIGNhbiBiZSAnICtcbiAgICAgICAgICAgICdleHBlbnNpdmUgYW5kIHB1dCBzdHJhaW4gb24gdGhlIHN5c3RlbS4nKX0vPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvU3R5bGVkSW5wdXRDb250YWluZXI+XG4gICAgICAgICAgICA8U3R5bGVkSW5wdXRDb250YWluZXIgY3NzPXtub19tYXJnaW5fYm90dG9tfT5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJpbnB1dC1jb250YWluZXJcIj5cbiAgICAgICAgICAgICAgICA8SW5kZXRlcm1pbmF0ZUNoZWNrYm94IGlkPVwiY29zdF9lc3RpbWF0ZV9lbmFibGVkXCIgaW5kZXRlcm1pbmF0ZT17ZmFsc2V9IGNoZWNrZWQ9eyEhZGI/LmV4dHJhX2pzb24/LmNvc3RfZXN0aW1hdGVfZW5hYmxlZH0gb25DaGFuZ2U9e29uRXh0cmFJbnB1dENoYW5nZX0gbGFiZWxUZXh0PXt0KCdFbmFibGUgcXVlcnkgY29zdCBlc3RpbWF0aW9uJyl9Lz5cbiAgICAgICAgICAgICAgICA8SW5mb1Rvb2x0aXAgdG9vbHRpcD17dCgnRm9yIFByZXN0byBhbmQgUG9zdGdyZXMsIHNob3dzIGEgYnV0dG9uIHRvIGNvbXB1dGUgY29zdCBiZWZvcmUgcnVubmluZyBhIHF1ZXJ5LicpfS8+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9TdHlsZWRJbnB1dENvbnRhaW5lcj5cbiAgICAgICAgICAgIDxTdHlsZWRJbnB1dENvbnRhaW5lcj5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJpbnB1dC1jb250YWluZXJcIj5cbiAgICAgICAgICAgICAgICA8SW5kZXRlcm1pbmF0ZUNoZWNrYm94IGlkPVwiYWxsb3dzX3ZpcnR1YWxfdGFibGVfZXhwbG9yZVwiIGluZGV0ZXJtaW5hdGU9e2ZhbHNlfSBjaGVja2VkPXshIWRiPy5leHRyYV9qc29uPy5hbGxvd3NfdmlydHVhbF90YWJsZV9leHBsb3JlfSBvbkNoYW5nZT17b25FeHRyYUlucHV0Q2hhbmdlfSBsYWJlbFRleHQ9e3QoJ0FsbG93IHRoaXMgZGF0YWJhc2UgdG8gYmUgZXhwbG9yZWQnKX0vPlxuICAgICAgICAgICAgICAgIDxJbmZvVG9vbHRpcCB0b29sdGlwPXt0KCdXaGVuIGVuYWJsZWQsIHVzZXJzIGFyZSBhYmxlIHRvIHZpc3VhbGl6ZSBTUUwgTGFiIHJlc3VsdHMgaW4gRXhwbG9yZS4nKX0vPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvU3R5bGVkSW5wdXRDb250YWluZXI+XG4gICAgICAgICAgPC9TdHlsZWRFeHBhbmRhYmxlRm9ybT5cbiAgICAgICAgPC9TdHlsZWRJbnB1dENvbnRhaW5lcj5cbiAgICAgIDwvQ29sbGFwc2UuUGFuZWw+XG4gICAgICA8Q29sbGFwc2UuUGFuZWwgaGVhZGVyPXs8ZGl2PlxuICAgICAgICAgICAgPGg0PlBlcmZvcm1hbmNlPC9oND5cbiAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cImhlbHBlclwiPlxuICAgICAgICAgICAgICBBZGp1c3QgcGVyZm9ybWFuY2Ugc2V0dGluZ3Mgb2YgdGhpcyBkYXRhYmFzZS5cbiAgICAgICAgICAgIDwvcD5cbiAgICAgICAgICA8L2Rpdj59IGtleT1cIjJcIj5cbiAgICAgICAgPFN0eWxlZElucHV0Q29udGFpbmVyIGNsYXNzTmFtZT1cIm1iLThcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbnRyb2wtbGFiZWxcIj57dCgnQ2hhcnQgY2FjaGUgdGltZW91dCcpfTwvZGl2PlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaW5wdXQtY29udGFpbmVyXCI+XG4gICAgICAgICAgICA8aW5wdXQgdHlwZT1cIm51bWJlclwiIG5hbWU9XCJjYWNoZV90aW1lb3V0XCIgdmFsdWU9e2RiPy5jYWNoZV90aW1lb3V0IHx8ICcnfSBwbGFjZWhvbGRlcj17dCgnRW50ZXIgZHVyYXRpb24gaW4gc2Vjb25kcycpfSBvbkNoYW5nZT17b25JbnB1dENoYW5nZX0vPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaGVscGVyXCI+XG4gICAgICAgICAgICB7dCgnRHVyYXRpb24gKGluIHNlY29uZHMpIG9mIHRoZSBjYWNoaW5nIHRpbWVvdXQgZm9yIGNoYXJ0cyBvZiB0aGlzIGRhdGFiYXNlLicgK1xuICAgICAgICAgICAgJyBBIHRpbWVvdXQgb2YgMCBpbmRpY2F0ZXMgdGhhdCB0aGUgY2FjaGUgbmV2ZXIgZXhwaXJlcy4nICtcbiAgICAgICAgICAgICcgTm90ZSB0aGlzIGRlZmF1bHRzIHRvIHRoZSBnbG9iYWwgdGltZW91dCBpZiB1bmRlZmluZWQuJyl9XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvU3R5bGVkSW5wdXRDb250YWluZXI+XG4gICAgICAgIDxTdHlsZWRJbnB1dENvbnRhaW5lcj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbnRyb2wtbGFiZWxcIj57dCgnU2NoZW1hIGNhY2hlIHRpbWVvdXQnKX08L2Rpdj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImlucHV0LWNvbnRhaW5lclwiPlxuICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJudW1iZXJcIiBuYW1lPVwic2NoZW1hX2NhY2hlX3RpbWVvdXRcIiB2YWx1ZT17ZGI/LmV4dHJhX2pzb24/Lm1ldGFkYXRhX2NhY2hlX3RpbWVvdXQ/LnNjaGVtYV9jYWNoZV90aW1lb3V0IHx8XG4gICAgICAgICAgICAnJ30gcGxhY2Vob2xkZXI9e3QoJ0VudGVyIGR1cmF0aW9uIGluIHNlY29uZHMnKX0gb25DaGFuZ2U9e29uRXh0cmFJbnB1dENoYW5nZX0gZGF0YS10ZXN0PVwic2NoZW1hLWNhY2hlLXRpbWVvdXQtdGVzdFwiLz5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImhlbHBlclwiPlxuICAgICAgICAgICAge3QoJ0R1cmF0aW9uIChpbiBzZWNvbmRzKSBvZiB0aGUgbWV0YWRhdGEgY2FjaGluZyB0aW1lb3V0IGZvciBzY2hlbWFzIG9mICcgK1xuICAgICAgICAgICAgJ3RoaXMgZGF0YWJhc2UuIElmIGxlZnQgdW5zZXQsIHRoZSBjYWNoZSBuZXZlciBleHBpcmVzLicpfVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L1N0eWxlZElucHV0Q29udGFpbmVyPlxuICAgICAgICA8U3R5bGVkSW5wdXRDb250YWluZXI+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb250cm9sLWxhYmVsXCI+e3QoJ1RhYmxlIGNhY2hlIHRpbWVvdXQnKX08L2Rpdj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImlucHV0LWNvbnRhaW5lclwiPlxuICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJudW1iZXJcIiBuYW1lPVwidGFibGVfY2FjaGVfdGltZW91dFwiIHZhbHVlPXtkYj8uZXh0cmFfanNvbj8ubWV0YWRhdGFfY2FjaGVfdGltZW91dD8udGFibGVfY2FjaGVfdGltZW91dCB8fFxuICAgICAgICAgICAgJyd9IHBsYWNlaG9sZGVyPXt0KCdFbnRlciBkdXJhdGlvbiBpbiBzZWNvbmRzJyl9IG9uQ2hhbmdlPXtvbkV4dHJhSW5wdXRDaGFuZ2V9IGRhdGEtdGVzdD1cInRhYmxlLWNhY2hlLXRpbWVvdXQtdGVzdFwiLz5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImhlbHBlclwiPlxuICAgICAgICAgICAge3QoJ0R1cmF0aW9uIChpbiBzZWNvbmRzKSBvZiB0aGUgbWV0YWRhdGEgY2FjaGluZyB0aW1lb3V0IGZvciB0YWJsZXMgb2YgJyArXG4gICAgICAgICAgICAndGhpcyBkYXRhYmFzZS4gSWYgbGVmdCB1bnNldCwgdGhlIGNhY2hlIG5ldmVyIGV4cGlyZXMuICcpfVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L1N0eWxlZElucHV0Q29udGFpbmVyPlxuICAgICAgICA8U3R5bGVkSW5wdXRDb250YWluZXIgY3NzPXt7IG5vX21hcmdpbl9ib3R0b20gfX0+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJpbnB1dC1jb250YWluZXJcIj5cbiAgICAgICAgICAgIDxJbmRldGVybWluYXRlQ2hlY2tib3ggaWQ9XCJhbGxvd19ydW5fYXN5bmNcIiBpbmRldGVybWluYXRlPXtmYWxzZX0gY2hlY2tlZD17ISFkYj8uYWxsb3dfcnVuX2FzeW5jfSBvbkNoYW5nZT17b25JbnB1dENoYW5nZX0gbGFiZWxUZXh0PXt0KCdBc3luY2hyb25vdXMgcXVlcnkgZXhlY3V0aW9uJyl9Lz5cbiAgICAgICAgICAgIDxJbmZvVG9vbHRpcCB0b29sdGlwPXt0KCdPcGVyYXRlIHRoZSBkYXRhYmFzZSBpbiBhc3luY2hyb25vdXMgbW9kZSwgbWVhbmluZyB0aGF0IHRoZSBxdWVyaWVzICcgK1xuICAgICAgICAgICAgJ2FyZSBleGVjdXRlZCBvbiByZW1vdGUgd29ya2VycyBhcyBvcHBvc2VkIHRvIG9uIHRoZSB3ZWIgc2VydmVyIGl0c2VsZi4gJyArXG4gICAgICAgICAgICAnVGhpcyBhc3N1bWVzIHRoYXQgeW91IGhhdmUgYSBDZWxlcnkgd29ya2VyIHNldHVwIGFzIHdlbGwgYXMgYSByZXN1bHRzICcgK1xuICAgICAgICAgICAgJ2JhY2tlbmQuIFJlZmVyIHRvIHRoZSBpbnN0YWxsYXRpb24gZG9jcyBmb3IgbW9yZSBpbmZvcm1hdGlvbi4nKX0vPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L1N0eWxlZElucHV0Q29udGFpbmVyPlxuICAgICAgICA8U3R5bGVkSW5wdXRDb250YWluZXIgY3NzPXt7IG5vX21hcmdpbl9ib3R0b20gfX0+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJpbnB1dC1jb250YWluZXJcIj5cbiAgICAgICAgICAgIDxJbmRldGVybWluYXRlQ2hlY2tib3ggaWQ9XCJjYW5jZWxfcXVlcnlfb25fd2luZG93c191bmxvYWRcIiBpbmRldGVybWluYXRlPXtmYWxzZX0gY2hlY2tlZD17ISFkYj8uZXh0cmFfanNvbj8uY2FuY2VsX3F1ZXJ5X29uX3dpbmRvd3NfdW5sb2FkfSBvbkNoYW5nZT17b25FeHRyYUlucHV0Q2hhbmdlfSBsYWJlbFRleHQ9e3QoJ0NhbmNlbCBxdWVyeSBvbiB3aW5kb3cgdW5sb2FkIGV2ZW50Jyl9Lz5cbiAgICAgICAgICAgIDxJbmZvVG9vbHRpcCB0b29sdGlwPXt0KCdUZXJtaW5hdGUgcnVubmluZyBxdWVyaWVzIHdoZW4gYnJvd3NlciB3aW5kb3cgY2xvc2VkIG9yIG5hdmlnYXRlZCAnICtcbiAgICAgICAgICAgICd0byBhbm90aGVyIHBhZ2UuIEF2YWlsYWJsZSBmb3IgUHJlc3RvLCBIaXZlLCBNeVNRTCwgUG9zdGdyZXMgYW5kICcgK1xuICAgICAgICAgICAgJ1Nub3dmbGFrZSBkYXRhYmFzZXMuJyl9Lz5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9TdHlsZWRJbnB1dENvbnRhaW5lcj5cbiAgICAgIDwvQ29sbGFwc2UuUGFuZWw+XG4gICAgICA8Q29sbGFwc2UuUGFuZWwgaGVhZGVyPXs8ZGl2PlxuICAgICAgICAgICAgPGg0PlNlY3VyaXR5PC9oND5cbiAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cImhlbHBlclwiPkFkZCBleHRyYSBjb25uZWN0aW9uIGluZm9ybWF0aW9uLjwvcD5cbiAgICAgICAgICA8L2Rpdj59IGtleT1cIjNcIj5cbiAgICAgICAgPFN0eWxlZElucHV0Q29udGFpbmVyPlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29udHJvbC1sYWJlbFwiPnt0KCdTZWN1cmUgZXh0cmEnKX08L2Rpdj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImlucHV0LWNvbnRhaW5lclwiPlxuICAgICAgICAgICAgPFN0eWxlZEpzb25FZGl0b3IgbmFtZT1cImVuY3J5cHRlZF9leHRyYVwiIHZhbHVlPXtkYj8uZW5jcnlwdGVkX2V4dHJhIHx8ICcnfSBwbGFjZWhvbGRlcj17dCgnU2VjdXJlIGV4dHJhJyl9IG9uQ2hhbmdlPXsoanNvbikgPT4gb25FZGl0b3JDaGFuZ2UoeyBqc29uLCBuYW1lOiAnZW5jcnlwdGVkX2V4dHJhJyB9KX0gd2lkdGg9XCIxMDAlXCIgaGVpZ2h0PVwiMTYwcHhcIi8+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJoZWxwZXJcIj5cbiAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgIHt0KCdKU09OIHN0cmluZyBjb250YWluaW5nIGFkZGl0aW9uYWwgY29ubmVjdGlvbiBjb25maWd1cmF0aW9uLiAnICtcbiAgICAgICAgICAgICdUaGlzIGlzIHVzZWQgdG8gcHJvdmlkZSBjb25uZWN0aW9uIGluZm9ybWF0aW9uIGZvciBzeXN0ZW1zICcgK1xuICAgICAgICAgICAgJ2xpa2UgSGl2ZSwgUHJlc3RvIGFuZCBCaWdRdWVyeSB3aGljaCBkbyBub3QgY29uZm9ybSB0byB0aGUgJyArXG4gICAgICAgICAgICAndXNlcm5hbWU6cGFzc3dvcmQgc3ludGF4IG5vcm1hbGx5IHVzZWQgYnkgU1FMQWxjaGVteS4nKX1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L1N0eWxlZElucHV0Q29udGFpbmVyPlxuICAgICAgICA8U3R5bGVkSW5wdXRDb250YWluZXI+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb250cm9sLWxhYmVsXCI+e3QoJ1Jvb3QgY2VydGlmaWNhdGUnKX08L2Rpdj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImlucHV0LWNvbnRhaW5lclwiPlxuICAgICAgICAgICAgPHRleHRhcmVhIG5hbWU9XCJzZXJ2ZXJfY2VydFwiIHZhbHVlPXtkYj8uc2VydmVyX2NlcnQgfHwgJyd9IHBsYWNlaG9sZGVyPXt0KCdFbnRlciBDQV9CVU5ETEUnKX0gb25DaGFuZ2U9e29uVGV4dENoYW5nZX0vPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaGVscGVyXCI+XG4gICAgICAgICAgICB7dCgnT3B0aW9uYWwgQ0FfQlVORExFIGNvbnRlbnRzIHRvIHZhbGlkYXRlIEhUVFBTIHJlcXVlc3RzLiBPbmx5ICcgK1xuICAgICAgICAgICAgJ2F2YWlsYWJsZSBvbiBjZXJ0YWluIGRhdGFiYXNlIGVuZ2luZXMuJyl9XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvU3R5bGVkSW5wdXRDb250YWluZXI+XG4gICAgICAgIDxTdHlsZWRJbnB1dENvbnRhaW5lcj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbnRyb2wtbGFiZWxcIj5cbiAgICAgICAgICAgIHt0KCdTY2hlbWFzIGFsbG93ZWQgZm9yIENTViB1cGxvYWQnKX1cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImlucHV0LWNvbnRhaW5lclwiPlxuICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmFtZT1cInNjaGVtYXNfYWxsb3dlZF9mb3JfY3N2X3VwbG9hZFwiIHZhbHVlPXsoZGI/LmV4dHJhX2pzb24/LnNjaGVtYXNfYWxsb3dlZF9mb3JfY3N2X3VwbG9hZCB8fCBbXSkuam9pbignLCcpfSBwbGFjZWhvbGRlcj1cInNjaGVtYTEsc2NoZW1hMlwiIG9uQ2hhbmdlPXtvbkV4dHJhSW5wdXRDaGFuZ2V9Lz5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImhlbHBlclwiPlxuICAgICAgICAgICAge3QoJ0EgY29tbWEtc2VwYXJhdGVkIGxpc3Qgb2Ygc2NoZW1hcyB0aGF0IENTVnMgYXJlIGFsbG93ZWQgdG8gdXBsb2FkIHRvLicpfVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L1N0eWxlZElucHV0Q29udGFpbmVyPlxuICAgICAgICA8U3R5bGVkSW5wdXRDb250YWluZXIgY3NzPXt7IG5vX21hcmdpbl9ib3R0b20gfX0+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJpbnB1dC1jb250YWluZXJcIj5cbiAgICAgICAgICAgIDxJbmRldGVybWluYXRlQ2hlY2tib3ggaWQ9XCJpbXBlcnNvbmF0ZV91c2VyXCIgaW5kZXRlcm1pbmF0ZT17ZmFsc2V9IGNoZWNrZWQ9eyEhZGI/LmltcGVyc29uYXRlX3VzZXJ9IG9uQ2hhbmdlPXtvbklucHV0Q2hhbmdlfSBsYWJlbFRleHQ9e3QoJ0ltcGVyc29uYXRlIGxvZ2dlZCBpbiB1c2VyIChQcmVzdG8sIFRyaW5vLCBEcmlsbCwgSGl2ZSwgYW5kIEdTaGVldHMpJyl9Lz5cbiAgICAgICAgICAgIDxJbmZvVG9vbHRpcCB0b29sdGlwPXt0KCdJZiBQcmVzdG8gb3IgVHJpbm8sIGFsbCB0aGUgcXVlcmllcyBpbiBTUUwgTGFiIGFyZSBnb2luZyB0byBiZSBleGVjdXRlZCBhcyB0aGUgJyArXG4gICAgICAgICAgICAnY3VycmVudGx5IGxvZ2dlZCBvbiB1c2VyIHdobyBtdXN0IGhhdmUgcGVybWlzc2lvbiB0byBydW4gdGhlbS4gSWYgSGl2ZSAnICtcbiAgICAgICAgICAgICdhbmQgaGl2ZS5zZXJ2ZXIyLmVuYWJsZS5kb0FzIGlzIGVuYWJsZWQsIHdpbGwgcnVuIHRoZSBxdWVyaWVzIGFzICcgK1xuICAgICAgICAgICAgJ3NlcnZpY2UgYWNjb3VudCwgYnV0IGltcGVyc29uYXRlIHRoZSBjdXJyZW50bHkgbG9nZ2VkIG9uIHVzZXIgdmlhICcgK1xuICAgICAgICAgICAgJ2hpdmUuc2VydmVyMi5wcm94eS51c2VyIHByb3BlcnR5LicpfS8+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvU3R5bGVkSW5wdXRDb250YWluZXI+XG4gICAgICAgIDxTdHlsZWRJbnB1dENvbnRhaW5lciBjc3M9e3sgLi4ubm9fbWFyZ2luX2JvdHRvbSB9fT5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImlucHV0LWNvbnRhaW5lclwiPlxuICAgICAgICAgICAgPEluZGV0ZXJtaW5hdGVDaGVja2JveCBpZD1cImFsbG93X2Nzdl91cGxvYWRcIiBpbmRldGVybWluYXRlPXtmYWxzZX0gY2hlY2tlZD17ISFkYj8uYWxsb3dfY3N2X3VwbG9hZH0gb25DaGFuZ2U9e29uSW5wdXRDaGFuZ2V9IGxhYmVsVGV4dD17dCgnQWxsb3cgZGF0YSB1cGxvYWQnKX0vPlxuICAgICAgICAgICAgPEluZm9Ub29sdGlwIHRvb2x0aXA9e3QoJ0lmIHNlbGVjdGVkLCBwbGVhc2Ugc2V0IHRoZSBzY2hlbWFzIGFsbG93ZWQgZm9yIGRhdGEgdXBsb2FkIGluIEV4dHJhLicpfS8+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvU3R5bGVkSW5wdXRDb250YWluZXI+XG4gICAgICA8L0NvbGxhcHNlLlBhbmVsPlxuICAgICAgPENvbGxhcHNlLlBhbmVsIGhlYWRlcj17PGRpdj5cbiAgICAgICAgICAgIDxoND5PdGhlcjwvaDQ+XG4gICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJoZWxwZXJcIj5BZGRpdGlvbmFsIHNldHRpbmdzLjwvcD5cbiAgICAgICAgICA8L2Rpdj59IGtleT1cIjRcIj5cbiAgICAgICAgPFN0eWxlZElucHV0Q29udGFpbmVyPlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29udHJvbC1sYWJlbFwiPnt0KCdNZXRhZGF0YSBQYXJhbWV0ZXJzJyl9PC9kaXY+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJpbnB1dC1jb250YWluZXJcIj5cbiAgICAgICAgICAgIDxTdHlsZWRKc29uRWRpdG9yIG5hbWU9XCJtZXRhZGF0YV9wYXJhbXNcIiB2YWx1ZT17ZGI/LmV4dHJhX2pzb24/Lm1ldGFkYXRhX3BhcmFtcyB8fCAnJ30gcGxhY2Vob2xkZXI9e3QoJ01ldGFkYXRhIFBhcmFtZXRlcnMnKX0gb25DaGFuZ2U9eyhqc29uKSA9PiBvbkV4dHJhRWRpdG9yQ2hhbmdlKHsganNvbiwgbmFtZTogJ21ldGFkYXRhX3BhcmFtcycgfSl9IHdpZHRoPVwiMTAwJVwiIGhlaWdodD1cIjE2MHB4XCIvPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaGVscGVyXCI+XG4gICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICB7dCgnVGhlIG1ldGFkYXRhX3BhcmFtcyBvYmplY3QgZ2V0cyB1bnBhY2tlZCBpbnRvIHRoZSBzcWxhbGNoZW15Lk1ldGFEYXRhIGNhbGwuJyl9XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9TdHlsZWRJbnB1dENvbnRhaW5lcj5cbiAgICAgICAgPFN0eWxlZElucHV0Q29udGFpbmVyPlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29udHJvbC1sYWJlbFwiPnt0KCdFbmdpbmUgUGFyYW1ldGVycycpfTwvZGl2PlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaW5wdXQtY29udGFpbmVyXCI+XG4gICAgICAgICAgICA8U3R5bGVkSnNvbkVkaXRvciBuYW1lPVwiZW5naW5lX3BhcmFtc1wiIHZhbHVlPXtkYj8uZXh0cmFfanNvbj8uZW5naW5lX3BhcmFtcyB8fCAnJ30gcGxhY2Vob2xkZXI9e3QoJ0VuZ2luZSBQYXJhbWV0ZXJzJyl9IG9uQ2hhbmdlPXsoanNvbikgPT4gb25FeHRyYUVkaXRvckNoYW5nZSh7IGpzb24sIG5hbWU6ICdlbmdpbmVfcGFyYW1zJyB9KX0gd2lkdGg9XCIxMDAlXCIgaGVpZ2h0PVwiMTYwcHhcIi8+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJoZWxwZXJcIj5cbiAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgIHt0KCdUaGUgZW5naW5lX3BhcmFtcyBvYmplY3QgZ2V0cyB1bnBhY2tlZCBpbnRvIHRoZSBzcWxhbGNoZW15LmNyZWF0ZV9lbmdpbmUgY2FsbC4nKX1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L1N0eWxlZElucHV0Q29udGFpbmVyPlxuICAgICAgICA8U3R5bGVkSW5wdXRDb250YWluZXI+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb250cm9sLWxhYmVsXCIgZGF0YS10ZXN0PVwidmVyc2lvbi1sYWJlbC10ZXN0XCI+XG4gICAgICAgICAgICB7dCgnVmVyc2lvbicpfVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaW5wdXQtY29udGFpbmVyXCIgZGF0YS10ZXN0PVwidmVyc2lvbi1zcGluYnV0dG9uLXRlc3RcIj5cbiAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwibnVtYmVyXCIgbmFtZT1cInZlcnNpb25cIiB2YWx1ZT17ZGI/LmV4dHJhX2pzb24/LnZlcnNpb24gfHwgJyd9IHBsYWNlaG9sZGVyPXt0KCdWZXJzaW9uIG51bWJlcicpfSBvbkNoYW5nZT17b25FeHRyYUlucHV0Q2hhbmdlfS8+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJoZWxwZXJcIj5cbiAgICAgICAgICAgIHt0KCdTcGVjaWZ5IHRoZSBkYXRhYmFzZSB2ZXJzaW9uLiBUaGlzIHNob3VsZCBiZSB1c2VkIHdpdGggJyArXG4gICAgICAgICAgICAnUHJlc3RvIGluIG9yZGVyIHRvIGVuYWJsZSBxdWVyeSBjb3N0IGVzdGltYXRpb24uJyl9XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvU3R5bGVkSW5wdXRDb250YWluZXI+XG4gICAgICA8L0NvbGxhcHNlLlBhbmVsPlxuICAgIDwvQ29sbGFwc2U+KTtcbn07XG5leHBvcnQgZGVmYXVsdCBFeHRyYU9wdGlvbnM7XG4iXX0= */\") },\n  ___EmotionJSX(\"div\", { className: \"input-container\" },\n  ___EmotionJSX(IndeterminateCheckbox, { id: \"allow_run_async\", indeterminate: false, checked: !!(db != null && db.allow_run_async), onChange: onInputChange, labelText: t('Asynchronous query execution') }),\n  ___EmotionJSX(InfoTooltip, { tooltip: t('Operate the database in asynchronous mode, meaning that the queries ' +\n    'are executed on remote workers as opposed to on the web server itself. ' +\n    'This assumes that you have a Celery worker setup as well as a results ' +\n    'backend. Refer to the installation docs for more information.') }))),\n\n\n  ___EmotionJSX(StyledInputContainer, { css: /*#__PURE__*/_css({ no_margin_bottom }, process.env.NODE_ENV === \"production\" ? \"\" : \";label:ExtraOptions;\", process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\") },\n  ___EmotionJSX(\"div\", { className: \"input-container\" },\n  ___EmotionJSX(IndeterminateCheckbox, { id: \"cancel_query_on_windows_unload\", indeterminate: false, checked: !!(db != null && (_db$extra_json5 = db.extra_json) != null && _db$extra_json5.cancel_query_on_windows_unload), onChange: onExtraInputChange, labelText: t('Cancel query on window unload event') }),\n  ___EmotionJSX(InfoTooltip, { tooltip: t('Terminate running queries when browser window closed or navigated ' +\n    'to another page. Available for Presto, Hive, MySQL, Postgres and ' +\n    'Snowflake databases.') })))),\n\n\n\n  ___EmotionJSX(Collapse.Panel, { header: ___EmotionJSX(\"div\", null,\n    ___EmotionJSX(\"h4\", null, \"Security\"),\n    ___EmotionJSX(\"p\", { className: \"helper\" }, \"Add extra connection information.\")),\n    key: \"3\" },\n  ___EmotionJSX(StyledInputContainer, null,\n  ___EmotionJSX(\"div\", { className: \"control-label\" }, t('Secure extra')),\n  ___EmotionJSX(\"div\", { className: \"input-container\" },\n  ___EmotionJSX(StyledJsonEditor, { name: \"encrypted_extra\", value: (db == null ? void 0 : db.encrypted_extra) || '', placeholder: t('Secure extra'), onChange: (json) => onEditorChange({ json, name: 'encrypted_extra' }), width: \"100%\", height: \"160px\" })),\n\n  ___EmotionJSX(\"div\", { className: \"helper\" },\n  ___EmotionJSX(\"div\", null,\n  t('JSON string containing additional connection configuration. ' +\n  'This is used to provide connection information for systems ' +\n  'like Hive, Presto and BigQuery which do not conform to the ' +\n  'username:password syntax normally used by SQLAlchemy.')))),\n\n\n\n  ___EmotionJSX(StyledInputContainer, null,\n  ___EmotionJSX(\"div\", { className: \"control-label\" }, t('Root certificate')),\n  ___EmotionJSX(\"div\", { className: \"input-container\" },\n  ___EmotionJSX(\"textarea\", { name: \"server_cert\", value: (db == null ? void 0 : db.server_cert) || '', placeholder: t('Enter CA_BUNDLE'), onChange: onTextChange })),\n\n  ___EmotionJSX(\"div\", { className: \"helper\" },\n  t('Optional CA_BUNDLE contents to validate HTTPS requests. Only ' +\n  'available on certain database engines.'))),\n\n\n  ___EmotionJSX(StyledInputContainer, null,\n  ___EmotionJSX(\"div\", { className: \"control-label\" },\n  t('Schemas allowed for CSV upload')),\n\n  ___EmotionJSX(\"div\", { className: \"input-container\" },\n  ___EmotionJSX(\"input\", { type: \"text\", name: \"schemas_allowed_for_csv_upload\", value: ((db == null ? void 0 : (_db$extra_json6 = db.extra_json) == null ? void 0 : _db$extra_json6.schemas_allowed_for_csv_upload) || []).join(','), placeholder: \"schema1,schema2\", onChange: onExtraInputChange })),\n\n  ___EmotionJSX(\"div\", { className: \"helper\" },\n  t('A comma-separated list of schemas that CSVs are allowed to upload to.'))),\n\n\n  ___EmotionJSX(StyledInputContainer, { css: /*#__PURE__*/_css({ no_margin_bottom }, process.env.NODE_ENV === \"production\" ? \"\" : \";label:ExtraOptions;\", process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\") },\n  ___EmotionJSX(\"div\", { className: \"input-container\" },\n  ___EmotionJSX(IndeterminateCheckbox, { id: \"impersonate_user\", indeterminate: false, checked: !!(db != null && db.impersonate_user), onChange: onInputChange, labelText: t('Impersonate logged in user (Presto, Trino, Drill, Hive, and GSheets)') }),\n  ___EmotionJSX(InfoTooltip, { tooltip: t('If Presto or Trino, all the queries in SQL Lab are going to be executed as the ' +\n    'currently logged on user who must have permission to run them. If Hive ' +\n    'and hive.server2.enable.doAs is enabled, will run the queries as ' +\n    'service account, but impersonate the currently logged on user via ' +\n    'hive.server2.proxy.user property.') }))),\n\n\n  ___EmotionJSX(StyledInputContainer, { css: /*#__PURE__*/_css({ ...no_margin_bottom }, process.env.NODE_ENV === \"production\" ? \"\" : \";label:ExtraOptions;\", process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\") },\n  ___EmotionJSX(\"div\", { className: \"input-container\" },\n  ___EmotionJSX(IndeterminateCheckbox, { id: \"allow_csv_upload\", indeterminate: false, checked: !!(db != null && db.allow_csv_upload), onChange: onInputChange, labelText: t('Allow data upload') }),\n  ___EmotionJSX(InfoTooltip, { tooltip: t('If selected, please set the schemas allowed for data upload in Extra.') })))),\n\n\n\n  ___EmotionJSX(Collapse.Panel, { header: ___EmotionJSX(\"div\", null,\n    ___EmotionJSX(\"h4\", null, \"Other\"),\n    ___EmotionJSX(\"p\", { className: \"helper\" }, \"Additional settings.\")),\n    key: \"4\" },\n  ___EmotionJSX(StyledInputContainer, null,\n  ___EmotionJSX(\"div\", { className: \"control-label\" }, t('Metadata Parameters')),\n  ___EmotionJSX(\"div\", { className: \"input-container\" },\n  ___EmotionJSX(StyledJsonEditor, { name: \"metadata_params\", value: (db == null ? void 0 : (_db$extra_json7 = db.extra_json) == null ? void 0 : _db$extra_json7.metadata_params) || '', placeholder: t('Metadata Parameters'), onChange: (json) => onExtraEditorChange({ json, name: 'metadata_params' }), width: \"100%\", height: \"160px\" })),\n\n  ___EmotionJSX(\"div\", { className: \"helper\" },\n  ___EmotionJSX(\"div\", null,\n  t('The metadata_params object gets unpacked into the sqlalchemy.MetaData call.')))),\n\n\n\n  ___EmotionJSX(StyledInputContainer, null,\n  ___EmotionJSX(\"div\", { className: \"control-label\" }, t('Engine Parameters')),\n  ___EmotionJSX(\"div\", { className: \"input-container\" },\n  ___EmotionJSX(StyledJsonEditor, { name: \"engine_params\", value: (db == null ? void 0 : (_db$extra_json8 = db.extra_json) == null ? void 0 : _db$extra_json8.engine_params) || '', placeholder: t('Engine Parameters'), onChange: (json) => onExtraEditorChange({ json, name: 'engine_params' }), width: \"100%\", height: \"160px\" })),\n\n  ___EmotionJSX(\"div\", { className: \"helper\" },\n  ___EmotionJSX(\"div\", null,\n  t('The engine_params object gets unpacked into the sqlalchemy.create_engine call.')))),\n\n\n\n  ___EmotionJSX(StyledInputContainer, null,\n  ___EmotionJSX(\"div\", { className: \"control-label\" },\n  t('Version')),\n\n  ___EmotionJSX(\"div\", { className: \"input-container\" },\n  ___EmotionJSX(\"input\", { type: \"number\", name: \"version\", value: (db == null ? void 0 : (_db$extra_json9 = db.extra_json) == null ? void 0 : _db$extra_json9.version) || '', placeholder: t('Version number'), onChange: onExtraInputChange })),\n\n  ___EmotionJSX(\"div\", { className: \"helper\" },\n  t('Specify the database version. This should be used with ' +\n  'Presto in order to enable query cost estimation.')))));\n\n\n\n\n};\nexport default ExtraOptions;","map":null,"metadata":{},"sourceType":"module"}