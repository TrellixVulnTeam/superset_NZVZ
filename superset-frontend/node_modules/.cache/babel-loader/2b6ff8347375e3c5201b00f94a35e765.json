{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport { SupersetClient } from '@superset-ui/core';\nimport * as Actions from 'src/SqlLab/actions/sqlLab';\n\nconst QUERY_UPDATE_FREQ = 2000;\nconst QUERY_UPDATE_BUFFER_MS = 5000;\nconst MAX_QUERY_AGE_TO_POLL = 21600000;\nconst QUERY_TIMEOUT_LIMIT = 10000;\n\nclass QueryAutoRefresh extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      offline: props.offline };\n\n  }\n\n  UNSAFE_componentWillMount() {\n    this.startTimer();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.offline !== this.state.offline) {\n      this.props.actions.setUserOffline(this.state.offline);\n    }\n  }\n\n  componentWillUnmount() {\n    this.stopTimer();\n  }\n\n  shouldCheckForQueries() {\n    // if there are started or running queries, this method should return true\n    const { queries } = this.props;\n    const now = new Date().getTime();\n    const isQueryRunning = (q) =>\n    ['running', 'started', 'pending', 'fetching'].indexOf(q.state) >= 0;\n\n    return Object.values(queries).some(\n    (q) => isQueryRunning(q) && now - q.startDttm < MAX_QUERY_AGE_TO_POLL);\n\n  }\n\n  startTimer() {\n    if (!this.timer) {\n      this.timer = setInterval(this.stopwatch.bind(this), QUERY_UPDATE_FREQ);\n    }\n  }\n\n  stopTimer() {\n    clearInterval(this.timer);\n    this.timer = null;\n  }\n\n  stopwatch() {\n    // only poll /superset/queries/ if there are started or running queries\n    if (this.shouldCheckForQueries()) {\n      SupersetClient.get({\n        endpoint: `/superset/queries/${\n        this.props.queriesLastUpdate - QUERY_UPDATE_BUFFER_MS\n        }`,\n        timeout: QUERY_TIMEOUT_LIMIT }).\n\n      then(({ json }) => {\n        if (Object.keys(json).length > 0) {\n          this.props.actions.refreshQueries(json);\n        }\n        this.setState({ offline: false });\n      }).\n      catch(() => {\n        this.setState({ offline: true });\n      });\n    } else {\n      this.setState({ offline: false });\n    }\n  }\n\n  render() {\n    return null;\n  } // @ts-ignore\n  __reactstandin__regenerateByEval(key, code) {// @ts-ignore\n    this[key] = eval(code);}}QueryAutoRefresh.propTypes = {\n  offline: PropTypes.bool.isRequired,\n  queries: PropTypes.object.isRequired,\n  actions: PropTypes.object.isRequired,\n  queriesLastUpdate: PropTypes.number.isRequired };\n\n\nfunction mapStateToProps({ sqlLab }) {\n  return {\n    offline: sqlLab.offline,\n    queries: sqlLab.queries,\n    queriesLastUpdate: sqlLab.queriesLastUpdate };\n\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    actions: bindActionCreators(Actions, dispatch) };\n\n}const _default =\n\nconnect(mapStateToProps, mapDispatchToProps)(QueryAutoRefresh);export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(QUERY_UPDATE_FREQ, \"QUERY_UPDATE_FREQ\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/components/QueryAutoRefresh/index.jsx\");reactHotLoader.register(QUERY_UPDATE_BUFFER_MS, \"QUERY_UPDATE_BUFFER_MS\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/components/QueryAutoRefresh/index.jsx\");reactHotLoader.register(MAX_QUERY_AGE_TO_POLL, \"MAX_QUERY_AGE_TO_POLL\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/components/QueryAutoRefresh/index.jsx\");reactHotLoader.register(QUERY_TIMEOUT_LIMIT, \"QUERY_TIMEOUT_LIMIT\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/components/QueryAutoRefresh/index.jsx\");reactHotLoader.register(QueryAutoRefresh, \"QueryAutoRefresh\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/components/QueryAutoRefresh/index.jsx\");reactHotLoader.register(mapStateToProps, \"mapStateToProps\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/components/QueryAutoRefresh/index.jsx\");reactHotLoader.register(mapDispatchToProps, \"mapDispatchToProps\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/components/QueryAutoRefresh/index.jsx\");reactHotLoader.register(_default, \"default\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/components/QueryAutoRefresh/index.jsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/components/QueryAutoRefresh/index.jsx"],"names":["React","PropTypes","bindActionCreators","connect","SupersetClient","Actions","QUERY_UPDATE_FREQ","QUERY_UPDATE_BUFFER_MS","MAX_QUERY_AGE_TO_POLL","QUERY_TIMEOUT_LIMIT","QueryAutoRefresh","PureComponent","constructor","props","state","offline","UNSAFE_componentWillMount","startTimer","componentDidUpdate","prevProps","actions","setUserOffline","componentWillUnmount","stopTimer","shouldCheckForQueries","queries","now","Date","getTime","isQueryRunning","q","indexOf","Object","values","some","startDttm","timer","setInterval","stopwatch","bind","clearInterval","get","endpoint","queriesLastUpdate","timeout","then","json","keys","length","refreshQueries","setState","catch","render","propTypes","bool","isRequired","object","number","mapStateToProps","sqlLab","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport { SupersetClient } from '@superset-ui/core';\nimport * as Actions from 'src/SqlLab/actions/sqlLab';\n\nconst QUERY_UPDATE_FREQ = 2000;\nconst QUERY_UPDATE_BUFFER_MS = 5000;\nconst MAX_QUERY_AGE_TO_POLL = 21600000;\nconst QUERY_TIMEOUT_LIMIT = 10000;\n\nclass QueryAutoRefresh extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      offline: props.offline,\n    };\n  }\n\n  UNSAFE_componentWillMount() {\n    this.startTimer();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.offline !== this.state.offline) {\n      this.props.actions.setUserOffline(this.state.offline);\n    }\n  }\n\n  componentWillUnmount() {\n    this.stopTimer();\n  }\n\n  shouldCheckForQueries() {\n    // if there are started or running queries, this method should return true\n    const { queries } = this.props;\n    const now = new Date().getTime();\n    const isQueryRunning = q =>\n      ['running', 'started', 'pending', 'fetching'].indexOf(q.state) >= 0;\n\n    return Object.values(queries).some(\n      q => isQueryRunning(q) && now - q.startDttm < MAX_QUERY_AGE_TO_POLL,\n    );\n  }\n\n  startTimer() {\n    if (!this.timer) {\n      this.timer = setInterval(this.stopwatch.bind(this), QUERY_UPDATE_FREQ);\n    }\n  }\n\n  stopTimer() {\n    clearInterval(this.timer);\n    this.timer = null;\n  }\n\n  stopwatch() {\n    // only poll /superset/queries/ if there are started or running queries\n    if (this.shouldCheckForQueries()) {\n      SupersetClient.get({\n        endpoint: `/superset/queries/${\n          this.props.queriesLastUpdate - QUERY_UPDATE_BUFFER_MS\n        }`,\n        timeout: QUERY_TIMEOUT_LIMIT,\n      })\n        .then(({ json }) => {\n          if (Object.keys(json).length > 0) {\n            this.props.actions.refreshQueries(json);\n          }\n          this.setState({ offline: false });\n        })\n        .catch(() => {\n          this.setState({ offline: true });\n        });\n    } else {\n      this.setState({ offline: false });\n    }\n  }\n\n  render() {\n    return null;\n  }\n}\nQueryAutoRefresh.propTypes = {\n  offline: PropTypes.bool.isRequired,\n  queries: PropTypes.object.isRequired,\n  actions: PropTypes.object.isRequired,\n  queriesLastUpdate: PropTypes.number.isRequired,\n};\n\nfunction mapStateToProps({ sqlLab }) {\n  return {\n    offline: sqlLab.offline,\n    queries: sqlLab.queries,\n    queriesLastUpdate: sqlLab.queriesLastUpdate,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    actions: bindActionCreators(Actions, dispatch),\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(QueryAutoRefresh);\n"]},"metadata":{},"sourceType":"module"}