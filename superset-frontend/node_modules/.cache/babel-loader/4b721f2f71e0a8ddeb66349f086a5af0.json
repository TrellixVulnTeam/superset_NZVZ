{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/my_plugin/superset/superset-frontend/src/components/DatabaseSelector/index.tsx\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState, useMemo, useEffect } from 'react';\nimport { styled, SupersetClient, t } from '@superset-ui/core';\nimport rison from 'rison';\nimport { Select } from 'src/components';\nimport Label from 'src/components/Label';\nimport { FormLabel } from 'src/components/Form';\nimport RefreshLabel from 'src/components/RefreshLabel';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst DatabaseSelectorWrapper = styled.div`\n  ${({ theme }) => `\n    .refresh {\n      display: flex;\n      align-items: center;\n      width: 30px;\n      margin-left: ${theme.gridUnit}px;\n      margin-top: ${theme.gridUnit * 5}px;\n    }\n\n    .section {\n      display: flex;\n      flex-direction: row;\n      align-items: center;\n    }\n\n    .select {\n      flex: 1;\n    }\n\n    & > div {\n      margin-bottom: ${theme.gridUnit * 4}px;\n    }\n  `}\n`;\nconst LabelStyle = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  margin-left: ${({ theme }) => theme.gridUnit - 2}px;\n`;\nconst SelectLabel = ({ backend, databaseName }) => ___EmotionJSX(LabelStyle, { __self: this, __source: { fileName: _jsxFileName, lineNumber: 57, columnNumber: 54 } },\n___EmotionJSX(Label, { __self: this, __source: { fileName: _jsxFileName, lineNumber: 58, columnNumber: 5 } }, backend),\ndatabaseName);\n\nexport default function DatabaseSelector({ db, formMode = false, getDbList, handleError, isDatabaseSelectEnabled = true, onDbChange, onSchemaChange, onSchemasLoad, readOnly = false, schema, sqlLabMode = false }) {\n  const [loadingSchemas, setLoadingSchemas] = useState(false);\n  const [schemaOptions, setSchemaOptions] = useState([]);\n  const [currentDb, setCurrentDb] = useState(db ?\n  {\n    label: ___EmotionJSX(SelectLabel, { backend: db.backend, databaseName: db.database_name, __self: this, __source: { fileName: _jsxFileName, lineNumber: 66, columnNumber: 21 } }),\n    value: db.id,\n    ...db } :\n\n  undefined);\n  const [currentSchema, setCurrentSchema] = useState(schema ? { label: schema, value: schema } : undefined);\n  const [refresh, setRefresh] = useState(0);\n  const loadDatabases = useMemo(() => async (search, page, pageSize) => {\n    const queryParams = rison.encode({\n      order_columns: 'database_name',\n      order_direction: 'asc',\n      page,\n      page_size: pageSize,\n      ...(formMode || !sqlLabMode ?\n      { filters: [{ col: 'database_name', opr: 'ct', value: search }] } :\n      {\n        filters: [\n        { col: 'database_name', opr: 'ct', value: search },\n        {\n          col: 'expose_in_sqllab',\n          opr: 'eq',\n          value: true }] }) });\n\n\n\n\n    const endpoint = `/api/v1/database/?q=${queryParams}`;\n    return SupersetClient.get({ endpoint }).then(({ json }) => {\n      const { result } = json;\n      if (getDbList) {\n        getDbList(result);\n      }\n      if (result.length === 0) {\n        handleError(t(\"It seems you don't have access to any database\"));\n      }\n      const options = result.map((row) => ({\n        label: ___EmotionJSX(SelectLabel, { backend: row.backend, databaseName: row.database_name, __self: this, __source: { fileName: _jsxFileName, lineNumber: 102, columnNumber: 25 } }),\n        value: row.id,\n        id: row.id,\n        database_name: row.database_name,\n        backend: row.backend,\n        allow_multi_schema_metadata_fetch: row.allow_multi_schema_metadata_fetch }));\n\n      return {\n        data: options,\n        totalCount: options.length };\n\n    });\n  }, [formMode, getDbList, handleError, sqlLabMode]);\n  useEffect(() => {\n    if (currentDb) {\n      setLoadingSchemas(true);\n      const queryParams = rison.encode({ force: refresh > 0 });\n      const endpoint = `/api/v1/database/${currentDb.value}/schemas/?q=${queryParams}`;\n      // TODO: Would be nice to add pagination in a follow-up. Needs endpoint changes.\n      SupersetClient.get({ endpoint }).\n      then(({ json }) => {\n        const options = json.result.\n        map((s) => ({\n          value: s,\n          label: s,\n          title: s })).\n\n        sort((a, b) => a.label.localeCompare(b.label));\n        if (onSchemasLoad) {\n          onSchemasLoad(options);\n        }\n        setSchemaOptions(options);\n        setLoadingSchemas(false);\n      }).\n      catch((e) => {\n        setLoadingSchemas(false);\n        handleError(t('There was an error loading the schemas'));\n      });\n    }\n  }, [currentDb, onSchemasLoad, refresh]);\n  function changeDataBase(value, database) {\n    setCurrentDb(database);\n    setCurrentSchema(undefined);\n    if (onDbChange) {\n      onDbChange(database);\n    }\n    if (onSchemaChange) {\n      onSchemaChange(undefined);\n    }\n  }\n  function changeSchema(schema) {\n    setCurrentSchema(schema);\n    if (onSchemaChange) {\n      onSchemaChange(schema.value);\n    }\n  }\n  function renderSelectRow(select, refreshBtn) {\n    return ___EmotionJSX(\"div\", { className: \"section\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 159, columnNumber: 17 } },\n    ___EmotionJSX(\"span\", { className: \"select\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 160, columnNumber: 9 } }, select),\n    ___EmotionJSX(\"span\", { className: \"refresh\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 161, columnNumber: 9 } }, refreshBtn));\n\n  }\n  function renderDatabaseSelect() {\n    return renderSelectRow(___EmotionJSX(Select, { ariaLabel: t('Select database or type database name'), optionFilterProps: ['database_name', 'value'], \"data-test\": \"select-database\", header: ___EmotionJSX(FormLabel, { __self: this, __source: { fileName: _jsxFileName, lineNumber: 165, columnNumber: 178 } }, t('Database')), lazyLoading: false, onChange: changeDataBase, value: currentDb, placeholder: t('Select database or type database name'), disabled: !isDatabaseSelectEnabled || readOnly, options: loadDatabases, __self: this, __source: { fileName: _jsxFileName, lineNumber: 165, columnNumber: 32 } }), null);\n  }\n  function renderSchemaSelect() {\n    const refreshIcon = !formMode && !readOnly && ___EmotionJSX(RefreshLabel, { onClick: () => setRefresh(refresh + 1), tooltipContent: t('Force refresh schema list'), __self: this, __source: { fileName: _jsxFileName, lineNumber: 168, columnNumber: 56 } });\n    return renderSelectRow(___EmotionJSX(Select, { ariaLabel: t('Select schema or type schema name'), disabled: readOnly, header: ___EmotionJSX(FormLabel, { __self: this, __source: { fileName: _jsxFileName, lineNumber: 169, columnNumber: 119 } }, t('Schema')), labelInValue: true, lazyLoading: false, loading: loadingSchemas, name: \"select-schema\", placeholder: t('Select schema or type schema name'), onChange: (item) => changeSchema(item), options: schemaOptions, showSearch: true, value: currentSchema, __self: this, __source: { fileName: _jsxFileName, lineNumber: 169, columnNumber: 32 } }), refreshIcon);\n  }\n  return ___EmotionJSX(DatabaseSelectorWrapper, { \"data-test\": \"DatabaseSelector\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 171, columnNumber: 13 } },\n  renderDatabaseSelect(),\n  renderSchemaSelect());\n\n}__signature__(DatabaseSelector, \"useState{[loadingSchemas, setLoadingSchemas](false)}\\nuseState{[schemaOptions, setSchemaOptions]([])}\\nuseState{[currentDb, setCurrentDb](db\\n        ? {\\n            label: (<SelectLabel backend={db.backend} databaseName={db.database_name}/>),\\n            value: db.id,\\n            ...db,\\n        }\\n        : undefined)}\\nuseState{[currentSchema, setCurrentSchema](schema ? { label: schema, value: schema } : undefined)}\\nuseState{[refresh, setRefresh](0)}\\nuseMemo{loadDatabases}\\nuseEffect{}\");;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(DatabaseSelectorWrapper, \"DatabaseSelectorWrapper\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/components/DatabaseSelector/index.tsx\");reactHotLoader.register(LabelStyle, \"LabelStyle\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/components/DatabaseSelector/index.tsx\");reactHotLoader.register(SelectLabel, \"SelectLabel\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/components/DatabaseSelector/index.tsx\");reactHotLoader.register(DatabaseSelector, \"DatabaseSelector\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/components/DatabaseSelector/index.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/home/ubuntu/my_plugin/superset/superset-frontend/src/components/DatabaseSelector/index.tsx"],"names":[],"mappings":"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","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { ReactNode, useState, useMemo, useEffect } from 'react';\nimport { styled, SupersetClient, t } from '@superset-ui/core';\nimport rison from 'rison';\nimport { Select } from 'src/components';\nimport Label from 'src/components/Label';\nimport { FormLabel } from 'src/components/Form';\nimport RefreshLabel from 'src/components/RefreshLabel';\n\nconst DatabaseSelectorWrapper = styled.div`\n  ${({ theme }) => `\n    .refresh {\n      display: flex;\n      align-items: center;\n      width: 30px;\n      margin-left: ${theme.gridUnit}px;\n      margin-top: ${theme.gridUnit * 5}px;\n    }\n\n    .section {\n      display: flex;\n      flex-direction: row;\n      align-items: center;\n    }\n\n    .select {\n      flex: 1;\n    }\n\n    & > div {\n      margin-bottom: ${theme.gridUnit * 4}px;\n    }\n  `}\n`;\n\nconst LabelStyle = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  margin-left: ${({ theme }) => theme.gridUnit - 2}px;\n`;\n\ntype DatabaseValue = {\n  label: React.ReactNode;\n  value: number;\n  id: number;\n  database_name: string;\n  backend: string;\n  allow_multi_schema_metadata_fetch: boolean;\n};\n\nexport type DatabaseObject = {\n  id: number;\n  database_name: string;\n  backend: string;\n  allow_multi_schema_metadata_fetch: boolean;\n};\n\ntype SchemaValue = { label: string; value: string };\n\ninterface DatabaseSelectorProps {\n  db?: DatabaseObject;\n  formMode?: boolean;\n  getDbList?: (arg0: any) => {};\n  handleError: (msg: string) => void;\n  isDatabaseSelectEnabled?: boolean;\n  onDbChange?: (db: DatabaseObject) => void;\n  onSchemaChange?: (schema?: string) => void;\n  onSchemasLoad?: (schemas: Array<object>) => void;\n  readOnly?: boolean;\n  schema?: string;\n  sqlLabMode?: boolean;\n}\n\nconst SelectLabel = ({\n  backend,\n  databaseName,\n}: {\n  backend: string;\n  databaseName: string;\n}) => (\n  <LabelStyle>\n    <Label>{backend}</Label>\n    {databaseName}\n  </LabelStyle>\n);\n\nexport default function DatabaseSelector({\n  db,\n  formMode = false,\n  getDbList,\n  handleError,\n  isDatabaseSelectEnabled = true,\n  onDbChange,\n  onSchemaChange,\n  onSchemasLoad,\n  readOnly = false,\n  schema,\n  sqlLabMode = false,\n}: DatabaseSelectorProps) {\n  const [loadingSchemas, setLoadingSchemas] = useState(false);\n  const [schemaOptions, setSchemaOptions] = useState<SchemaValue[]>([]);\n  const [currentDb, setCurrentDb] = useState<DatabaseValue | undefined>(\n    db\n      ? {\n          label: (\n            <SelectLabel backend={db.backend} databaseName={db.database_name} />\n          ),\n          value: db.id,\n          ...db,\n        }\n      : undefined,\n  );\n  const [currentSchema, setCurrentSchema] = useState<SchemaValue | undefined>(\n    schema ? { label: schema, value: schema } : undefined,\n  );\n  const [refresh, setRefresh] = useState(0);\n\n  const loadDatabases = useMemo(\n    () => async (\n      search: string,\n      page: number,\n      pageSize: number,\n    ): Promise<{\n      data: DatabaseValue[];\n      totalCount: number;\n    }> => {\n      const queryParams = rison.encode({\n        order_columns: 'database_name',\n        order_direction: 'asc',\n        page,\n        page_size: pageSize,\n        ...(formMode || !sqlLabMode\n          ? { filters: [{ col: 'database_name', opr: 'ct', value: search }] }\n          : {\n              filters: [\n                { col: 'database_name', opr: 'ct', value: search },\n                {\n                  col: 'expose_in_sqllab',\n                  opr: 'eq',\n                  value: true,\n                },\n              ],\n            }),\n      });\n      const endpoint = `/api/v1/database/?q=${queryParams}`;\n      return SupersetClient.get({ endpoint }).then(({ json }) => {\n        const { result } = json;\n        if (getDbList) {\n          getDbList(result);\n        }\n        if (result.length === 0) {\n          handleError(t(\"It seems you don't have access to any database\"));\n        }\n        const options = result.map((row: DatabaseObject) => ({\n          label: (\n            <SelectLabel\n              backend={row.backend}\n              databaseName={row.database_name}\n            />\n          ),\n          value: row.id,\n          id: row.id,\n          database_name: row.database_name,\n          backend: row.backend,\n          allow_multi_schema_metadata_fetch:\n            row.allow_multi_schema_metadata_fetch,\n        }));\n        return {\n          data: options,\n          totalCount: options.length,\n        };\n      });\n    },\n    [formMode, getDbList, handleError, sqlLabMode],\n  );\n\n  useEffect(() => {\n    if (currentDb) {\n      setLoadingSchemas(true);\n      const queryParams = rison.encode({ force: refresh > 0 });\n      const endpoint = `/api/v1/database/${currentDb.value}/schemas/?q=${queryParams}`;\n\n      // TODO: Would be nice to add pagination in a follow-up. Needs endpoint changes.\n      SupersetClient.get({ endpoint })\n        .then(({ json }) => {\n          const options = json.result\n            .map((s: string) => ({\n              value: s,\n              label: s,\n              title: s,\n            }))\n            .sort((a: { label: string }, b: { label: string }) =>\n              a.label.localeCompare(b.label),\n            );\n          if (onSchemasLoad) {\n            onSchemasLoad(options);\n          }\n          setSchemaOptions(options);\n          setLoadingSchemas(false);\n        })\n        .catch(e => {\n          setLoadingSchemas(false);\n          handleError(t('There was an error loading the schemas'));\n        });\n    }\n  }, [currentDb, onSchemasLoad, refresh]);\n\n  function changeDataBase(\n    value: { label: string; value: number },\n    database: DatabaseValue,\n  ) {\n    setCurrentDb(database);\n    setCurrentSchema(undefined);\n    if (onDbChange) {\n      onDbChange(database);\n    }\n    if (onSchemaChange) {\n      onSchemaChange(undefined);\n    }\n  }\n\n  function changeSchema(schema: SchemaValue) {\n    setCurrentSchema(schema);\n    if (onSchemaChange) {\n      onSchemaChange(schema.value);\n    }\n  }\n\n  function renderSelectRow(select: ReactNode, refreshBtn: ReactNode) {\n    return (\n      <div className=\"section\">\n        <span className=\"select\">{select}</span>\n        <span className=\"refresh\">{refreshBtn}</span>\n      </div>\n    );\n  }\n\n  function renderDatabaseSelect() {\n    return renderSelectRow(\n      <Select\n        ariaLabel={t('Select database or type database name')}\n        optionFilterProps={['database_name', 'value']}\n        data-test=\"select-database\"\n        header={<FormLabel>{t('Database')}</FormLabel>}\n        lazyLoading={false}\n        onChange={changeDataBase}\n        value={currentDb}\n        placeholder={t('Select database or type database name')}\n        disabled={!isDatabaseSelectEnabled || readOnly}\n        options={loadDatabases}\n      />,\n      null,\n    );\n  }\n\n  function renderSchemaSelect() {\n    const refreshIcon = !formMode && !readOnly && (\n      <RefreshLabel\n        onClick={() => setRefresh(refresh + 1)}\n        tooltipContent={t('Force refresh schema list')}\n      />\n    );\n\n    return renderSelectRow(\n      <Select\n        ariaLabel={t('Select schema or type schema name')}\n        disabled={readOnly}\n        header={<FormLabel>{t('Schema')}</FormLabel>}\n        labelInValue\n        lazyLoading={false}\n        loading={loadingSchemas}\n        name=\"select-schema\"\n        placeholder={t('Select schema or type schema name')}\n        onChange={item => changeSchema(item as SchemaValue)}\n        options={schemaOptions}\n        showSearch\n        value={currentSchema}\n      />,\n      refreshIcon,\n    );\n  }\n\n  return (\n    <DatabaseSelectorWrapper data-test=\"DatabaseSelector\">\n      {renderDatabaseSelect()}\n      {renderSchemaSelect()}\n    </DatabaseSelectorWrapper>\n  );\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}