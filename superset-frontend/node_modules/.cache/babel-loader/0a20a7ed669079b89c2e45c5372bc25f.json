{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { t } from '@superset-ui/core';\n\nimport getInitialState from './getInitialState';\nimport * as actions from '../actions/sqlLab';\nimport { now } from '../../modules/dates';\nimport {\naddToObject,\nalterInObject,\nalterInArr,\nremoveFromArr,\ngetFromArr,\naddToArr,\nextendArr } from\n'../../reduxUtils';\n\nexport default function sqlLabReducer(state = {}, action) {\n  const actionHandlers = {\n    [actions.ADD_QUERY_EDITOR]() {\n      const tabHistory = state.tabHistory.slice();\n      tabHistory.push(action.queryEditor.id);\n      const newState = { ...state, tabHistory };\n      return addToArr(newState, 'queryEditors', action.queryEditor);\n    },\n    [actions.QUERY_EDITOR_SAVED]() {\n      const { query, result } = action;\n      const existing = state.queryEditors.find((qe) => qe.id === query.id);\n      return alterInArr(\n      state,\n      'queryEditors',\n      existing,\n      {\n        remoteId: result.remoteId,\n        title: query.title },\n\n      'id');\n\n    },\n    [actions.UPDATE_QUERY_EDITOR]() {\n      const id = action.alterations.remoteId;\n      const existing = state.queryEditors.find((qe) => qe.remoteId === id);\n      if (existing == null) return state;\n      return alterInArr(\n      state,\n      'queryEditors',\n      existing,\n      action.alterations,\n      'remoteId');\n\n    },\n    [actions.CLONE_QUERY_TO_NEW_TAB]() {\n      const progenitor = state.queryEditors.find(\n      (qe) => qe.id === state.tabHistory[state.tabHistory.length - 1]);\n\n      const qe = {\n        remoteId: progenitor.remoteId,\n        title: t('Copy of %s', progenitor.title),\n        dbId: action.query.dbId ? action.query.dbId : null,\n        schema: action.query.schema ? action.query.schema : null,\n        autorun: true,\n        sql: action.query.sql,\n        queryLimit: action.query.queryLimit,\n        maxRow: action.query.maxRow };\n\n      return sqlLabReducer(state, actions.addQueryEditor(qe));\n    },\n    [actions.REMOVE_QUERY_EDITOR]() {\n      let newState = removeFromArr(state, 'queryEditors', action.queryEditor);\n      // List of remaining queryEditor ids\n      const qeIds = newState.queryEditors.map((qe) => qe.id);\n\n      const queries = {};\n      Object.keys(state.queries).forEach((k) => {\n        const query = state.queries[k];\n        if (qeIds.indexOf(query.sqlEditorId) > -1) {\n          queries[k] = query;\n        }\n      });\n\n      let tabHistory = state.tabHistory.slice();\n      tabHistory = tabHistory.filter((id) => qeIds.indexOf(id) > -1);\n\n      // Remove associated table schemas\n      const tables = state.tables.filter(\n      (table) => table.queryEditorId !== action.queryEditor.id);\n\n\n      newState = { ...newState, tabHistory, tables, queries };\n      return newState;\n    },\n    [actions.REMOVE_QUERY]() {\n      const newQueries = { ...state.queries };\n      delete newQueries[action.query.id];\n      return { ...state, queries: newQueries };\n    },\n    [actions.RESET_STATE]() {\n      return { ...getInitialState() };\n    },\n    [actions.MERGE_TABLE]() {\n      const at = { ...action.table };\n      let existingTable;\n      state.tables.forEach((xt) => {\n        if (\n        xt.dbId === at.dbId &&\n        xt.queryEditorId === at.queryEditorId &&\n        xt.schema === at.schema &&\n        xt.name === at.name)\n        {\n          existingTable = xt;\n        }\n      });\n      if (existingTable) {\n        if (action.query) {\n          at.dataPreviewQueryId = action.query.id;\n        }\n        return alterInArr(state, 'tables', existingTable, at);\n      }\n      // for new table, associate Id of query for data preview\n      at.dataPreviewQueryId = null;\n      let newState = addToArr(state, 'tables', at);\n      if (action.query) {\n        newState = alterInArr(newState, 'tables', at, {\n          dataPreviewQueryId: action.query.id });\n\n      }\n      return newState;\n    },\n    [actions.EXPAND_TABLE]() {\n      return alterInArr(state, 'tables', action.table, { expanded: true });\n    },\n    [actions.REMOVE_DATA_PREVIEW]() {\n      const queries = { ...state.queries };\n      delete queries[action.table.dataPreviewQueryId];\n      const newState = alterInArr(state, 'tables', action.table, {\n        dataPreviewQueryId: null });\n\n      return { ...newState, queries };\n    },\n    [actions.CHANGE_DATA_PREVIEW_ID]() {\n      const queries = { ...state.queries };\n      delete queries[action.oldQueryId];\n\n      const newTables = [];\n      state.tables.forEach((xt) => {\n        if (xt.dataPreviewQueryId === action.oldQueryId) {\n          newTables.push({ ...xt, dataPreviewQueryId: action.newQuery.id });\n        } else {\n          newTables.push(xt);\n        }\n      });\n      return {\n        ...state,\n        queries,\n        tables: newTables,\n        activeSouthPaneTab: action.newQuery.id };\n\n    },\n    [actions.COLLAPSE_TABLE]() {\n      return alterInArr(state, 'tables', action.table, { expanded: false });\n    },\n    [actions.REMOVE_TABLE]() {\n      return removeFromArr(state, 'tables', action.table);\n    },\n    [actions.START_QUERY_VALIDATION]() {\n      let newState = { ...state };\n      const sqlEditor = { id: action.query.sqlEditorId };\n      newState = alterInArr(newState, 'queryEditors', sqlEditor, {\n        validationResult: {\n          id: action.query.id,\n          errors: [],\n          completed: false } });\n\n\n      return newState;\n    },\n    [actions.QUERY_VALIDATION_RETURNED]() {\n      // If the server is very slow about answering us, we might get validation\n      // responses back out of order. This check confirms the response we're\n      // handling corresponds to the most recently dispatched request.\n      //\n      // We don't care about any but the most recent because validations are\n      // only valid for the SQL text they correspond to -- once the SQL has\n      // changed, the old validation doesn't tell us anything useful anymore.\n      const qe = getFromArr(state.queryEditors, action.query.sqlEditorId);\n      if (qe.validationResult.id !== action.query.id) {\n        return state;\n      }\n      // Otherwise, persist the results on the queryEditor state\n      let newState = { ...state };\n      const sqlEditor = { id: action.query.sqlEditorId };\n      newState = alterInArr(newState, 'queryEditors', sqlEditor, {\n        validationResult: {\n          id: action.query.id,\n          errors: action.results,\n          completed: true } });\n\n\n      return newState;\n    },\n    [actions.QUERY_VALIDATION_FAILED]() {\n      // If the server is very slow about answering us, we might get validation\n      // responses back out of order. This check confirms the response we're\n      // handling corresponds to the most recently dispatched request.\n      //\n      // We don't care about any but the most recent because validations are\n      // only valid for the SQL text they correspond to -- once the SQL has\n      // changed, the old validation doesn't tell us anything useful anymore.\n      const qe = getFromArr(state.queryEditors, action.query.sqlEditorId);\n      if (qe.validationResult.id !== action.query.id) {\n        return state;\n      }\n      // Otherwise, persist the results on the queryEditor state\n      let newState = { ...state };\n      const sqlEditor = { id: action.query.sqlEditorId };\n      newState = alterInArr(newState, 'queryEditors', sqlEditor, {\n        validationResult: {\n          id: action.query.id,\n          errors: [\n          {\n            line_number: 1,\n            start_column: 1,\n            end_column: 1,\n            message: `The server failed to validate your query.\\n${action.message}` }],\n\n\n          completed: true } });\n\n\n      return newState;\n    },\n    [actions.COST_ESTIMATE_STARTED]() {\n      let newState = { ...state };\n      const sqlEditor = { id: action.query.sqlEditorId };\n      newState = alterInArr(newState, 'queryEditors', sqlEditor, {\n        queryCostEstimate: {\n          completed: false,\n          cost: null,\n          error: null } });\n\n\n      return newState;\n    },\n    [actions.COST_ESTIMATE_RETURNED]() {\n      let newState = { ...state };\n      const sqlEditor = { id: action.query.sqlEditorId };\n      newState = alterInArr(newState, 'queryEditors', sqlEditor, {\n        queryCostEstimate: {\n          completed: true,\n          cost: action.json,\n          error: null } });\n\n\n      return newState;\n    },\n    [actions.COST_ESTIMATE_FAILED]() {\n      let newState = { ...state };\n      const sqlEditor = { id: action.query.sqlEditorId };\n      newState = alterInArr(newState, 'queryEditors', sqlEditor, {\n        queryCostEstimate: {\n          completed: false,\n          cost: null,\n          error: action.error } });\n\n\n      return newState;\n    },\n    [actions.START_QUERY]() {\n      let newState = { ...state };\n      if (action.query.sqlEditorId) {\n        const qe = getFromArr(state.queryEditors, action.query.sqlEditorId);\n        if (qe.latestQueryId && state.queries[qe.latestQueryId]) {\n          const newResults = {\n            ...state.queries[qe.latestQueryId].results,\n            data: [],\n            query: null };\n\n          const q = { ...state.queries[qe.latestQueryId], results: newResults };\n          const queries = { ...state.queries, [q.id]: q };\n          newState = { ...state, queries };\n        }\n      } else {\n        newState.activeSouthPaneTab = action.query.id;\n      }\n      newState = addToObject(newState, 'queries', action.query);\n      const sqlEditor = { id: action.query.sqlEditorId };\n      return alterInArr(newState, 'queryEditors', sqlEditor, {\n        latestQueryId: action.query.id });\n\n    },\n    [actions.STOP_QUERY]() {\n      return alterInObject(state, 'queries', action.query, {\n        state: 'stopped',\n        results: [] });\n\n    },\n    [actions.CLEAR_QUERY_RESULTS]() {\n      const newResults = { ...action.query.results };\n      newResults.data = [];\n      return alterInObject(state, 'queries', action.query, {\n        results: newResults,\n        cached: true });\n\n    },\n    [actions.REQUEST_QUERY_RESULTS]() {\n      return alterInObject(state, 'queries', action.query, {\n        state: 'fetching' });\n\n    },\n    [actions.QUERY_SUCCESS]() {var _action$results, _action$results$data, _action$results2, _action$results2$quer, _action$results3, _action$results3$quer, _action$results4, _action$results4$quer;\n      // prevent race condition were query succeeds shortly after being canceled\n      if (action.query.state === 'stopped') {\n        return state;\n      }\n      const alts = {\n        endDttm: now(),\n        progress: 100,\n        results: action.results,\n        rows: action == null ? void 0 : (_action$results = action.results) == null ? void 0 : (_action$results$data = _action$results.data) == null ? void 0 : _action$results$data.length,\n        state: 'success',\n        limitingFactor: action == null ? void 0 : (_action$results2 = action.results) == null ? void 0 : (_action$results2$quer = _action$results2.query) == null ? void 0 : _action$results2$quer.limitingFactor,\n        tempSchema: action == null ? void 0 : (_action$results3 = action.results) == null ? void 0 : (_action$results3$quer = _action$results3.query) == null ? void 0 : _action$results3$quer.tempSchema,\n        tempTable: action == null ? void 0 : (_action$results4 = action.results) == null ? void 0 : (_action$results4$quer = _action$results4.query) == null ? void 0 : _action$results4$quer.tempTable,\n        errorMessage: null,\n        cached: false };\n\n      return alterInObject(state, 'queries', action.query, alts);\n    },\n    [actions.QUERY_FAILED]() {\n      if (action.query.state === 'stopped') {\n        return state;\n      }\n      const alts = {\n        state: 'failed',\n        errors: action.errors,\n        errorMessage: action.msg,\n        endDttm: now(),\n        link: action.link };\n\n      return alterInObject(state, 'queries', action.query, alts);\n    },\n    [actions.SET_ACTIVE_QUERY_EDITOR]() {\n      const qeIds = state.queryEditors.map((qe) => qe.id);\n      if (\n      qeIds.indexOf(action.queryEditor.id) > -1 &&\n      state.tabHistory[state.tabHistory.length - 1] !== action.queryEditor.id)\n      {\n        const tabHistory = state.tabHistory.slice();\n        tabHistory.push(action.queryEditor.id);\n        return { ...state, tabHistory };\n      }\n      return state;\n    },\n    [actions.LOAD_QUERY_EDITOR]() {\n      return alterInArr(state, 'queryEditors', action.queryEditor, {\n        ...action.queryEditor });\n\n    },\n    [actions.SET_TABLES]() {\n      return extendArr(state, 'tables', action.tables);\n    },\n    [actions.SET_ACTIVE_SOUTHPANE_TAB]() {\n      return { ...state, activeSouthPaneTab: action.tabId };\n    },\n    [actions.MIGRATE_QUERY_EDITOR]() {\n      // remove migrated query editor from localStorage\n      const { sqlLab } = JSON.parse(localStorage.getItem('redux'));\n      sqlLab.queryEditors = sqlLab.queryEditors.filter(\n      (qe) => qe.id !== action.oldQueryEditor.id);\n\n      localStorage.setItem('redux', JSON.stringify({ sqlLab }));\n\n      // replace localStorage query editor with the server backed one\n      return addToArr(\n      removeFromArr(state, 'queryEditors', action.oldQueryEditor),\n      'queryEditors',\n      action.newQueryEditor);\n\n    },\n    [actions.MIGRATE_TABLE]() {\n      // remove migrated table from localStorage\n      const { sqlLab } = JSON.parse(localStorage.getItem('redux'));\n      sqlLab.tables = sqlLab.tables.filter(\n      (table) => table.id !== action.oldTable.id);\n\n      localStorage.setItem('redux', JSON.stringify({ sqlLab }));\n\n      // replace localStorage table with the server backed one\n      return addToArr(\n      removeFromArr(state, 'tables', action.oldTable),\n      'tables',\n      action.newTable);\n\n    },\n    [actions.MIGRATE_TAB_HISTORY]() {\n      // remove migrated tab from localStorage tabHistory\n      const { sqlLab } = JSON.parse(localStorage.getItem('redux'));\n      sqlLab.tabHistory = sqlLab.tabHistory.filter(\n      (tabId) => tabId !== action.oldId);\n\n      localStorage.setItem('redux', JSON.stringify({ sqlLab }));\n      const tabHistory = state.tabHistory.filter(\n      (tabId) => tabId !== action.oldId);\n\n      tabHistory.push(action.newId);\n      return { ...state, tabHistory };\n    },\n    [actions.MIGRATE_QUERY]() {\n      const query = {\n        ...state.queries[action.queryId],\n        // point query to migrated query editor\n        sqlEditorId: action.queryEditorId };\n\n      const queries = { ...state.queries, [query.id]: query };\n      return { ...state, queries };\n    },\n    [actions.QUERY_EDITOR_SETDB]() {\n      return alterInArr(state, 'queryEditors', action.queryEditor, {\n        dbId: action.dbId });\n\n    },\n    [actions.QUERY_EDITOR_SET_FUNCTION_NAMES]() {\n      return alterInArr(state, 'queryEditors', action.queryEditor, {\n        functionNames: action.functionNames });\n\n    },\n    [actions.QUERY_EDITOR_SET_SCHEMA]() {\n      return alterInArr(state, 'queryEditors', action.queryEditor, {\n        schema: action.schema });\n\n    },\n    [actions.QUERY_EDITOR_SET_SCHEMA_OPTIONS]() {\n      return alterInArr(state, 'queryEditors', action.queryEditor, {\n        schemaOptions: action.options });\n\n    },\n    [actions.QUERY_EDITOR_SET_TABLE_OPTIONS]() {\n      return alterInArr(state, 'queryEditors', action.queryEditor, {\n        tableOptions: action.options });\n\n    },\n    [actions.QUERY_EDITOR_SET_TITLE]() {\n      return alterInArr(state, 'queryEditors', action.queryEditor, {\n        title: action.title });\n\n    },\n    [actions.QUERY_EDITOR_SET_SQL]() {\n      return alterInArr(state, 'queryEditors', action.queryEditor, {\n        sql: action.sql });\n\n    },\n    [actions.QUERY_EDITOR_SET_QUERY_LIMIT]() {\n      return alterInArr(state, 'queryEditors', action.queryEditor, {\n        queryLimit: action.queryLimit });\n\n    },\n    [actions.QUERY_EDITOR_SET_TEMPLATE_PARAMS]() {\n      return alterInArr(state, 'queryEditors', action.queryEditor, {\n        templateParams: action.templateParams });\n\n    },\n    [actions.QUERY_EDITOR_SET_SELECTED_TEXT]() {\n      return alterInArr(state, 'queryEditors', action.queryEditor, {\n        selectedText: action.sql });\n\n    },\n    [actions.QUERY_EDITOR_SET_AUTORUN]() {\n      return alterInArr(state, 'queryEditors', action.queryEditor, {\n        autorun: action.autorun });\n\n    },\n    [actions.QUERY_EDITOR_PERSIST_HEIGHT]() {\n      return alterInArr(state, 'queryEditors', action.queryEditor, {\n        northPercent: action.northPercent,\n        southPercent: action.southPercent });\n\n    },\n    [actions.QUERY_EDITOR_TOGGLE_LEFT_BAR]() {\n      return alterInArr(state, 'queryEditors', action.queryEditor, {\n        hideLeftBar: action.hideLeftBar });\n\n    },\n    [actions.SET_DATABASES]() {\n      const databases = {};\n      action.databases.forEach((db) => {\n        databases[db.id] = {\n          ...db,\n          extra_json: JSON.parse(db.extra || '') };\n\n      });\n      return { ...state, databases };\n    },\n    [actions.REFRESH_QUERIES]() {\n      let newQueries = { ...state.queries };\n      // Fetch the updates to the queries present in the store.\n      let change = false;\n      let { queriesLastUpdate } = state;\n      Object.entries(action.alteredQueries).forEach(([id, changedQuery]) => {\n        if (\n        !state.queries.hasOwnProperty(id) ||\n        state.queries[id].state !== 'stopped' &&\n        state.queries[id].state !== 'failed')\n        {var _state$queries$id;\n          if (changedQuery.changedOn > queriesLastUpdate) {\n            queriesLastUpdate = changedQuery.changedOn;\n          }\n          const prevState = (_state$queries$id = state.queries[id]) == null ? void 0 : _state$queries$id.state;\n          const currentState = changedQuery.state;\n          newQueries[id] = {\n            ...state.queries[id],\n            ...changedQuery,\n            // race condition:\n            // because of async behavior, sql lab may still poll a couple of seconds\n            // when it started fetching or finished rendering results\n            state:\n            currentState === 'success' &&\n            ['fetching', 'success'].includes(prevState) ?\n            prevState :\n            currentState };\n\n          change = true;\n        }\n      });\n      if (!change) {\n        newQueries = state.queries;\n      }\n      return { ...state, queries: newQueries, queriesLastUpdate };\n    },\n    [actions.SET_USER_OFFLINE]() {\n      return { ...state, offline: action.offline };\n    },\n    [actions.CREATE_DATASOURCE_STARTED]() {\n      return { ...state, isDatasourceLoading: true, errorMessage: null };\n    },\n    [actions.CREATE_DATASOURCE_SUCCESS]() {\n      return {\n        ...state,\n        isDatasourceLoading: false,\n        errorMessage: null,\n        datasource: action.datasource };\n\n    },\n    [actions.CREATE_DATASOURCE_FAILED]() {\n      return { ...state, isDatasourceLoading: false, errorMessage: action.err };\n    } };\n\n  if (action.type in actionHandlers) {\n    return actionHandlers[action.type]();\n  }\n  return state;\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(sqlLabReducer, \"sqlLabReducer\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/reducers/sqlLab.js\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/reducers/sqlLab.js"],"names":["t","getInitialState","actions","now","addToObject","alterInObject","alterInArr","removeFromArr","getFromArr","addToArr","extendArr","sqlLabReducer","state","action","actionHandlers","ADD_QUERY_EDITOR","tabHistory","slice","push","queryEditor","id","newState","QUERY_EDITOR_SAVED","query","result","existing","queryEditors","find","qe","remoteId","title","UPDATE_QUERY_EDITOR","alterations","CLONE_QUERY_TO_NEW_TAB","progenitor","length","dbId","schema","autorun","sql","queryLimit","maxRow","addQueryEditor","REMOVE_QUERY_EDITOR","qeIds","map","queries","Object","keys","forEach","k","indexOf","sqlEditorId","filter","tables","table","queryEditorId","REMOVE_QUERY","newQueries","RESET_STATE","MERGE_TABLE","at","existingTable","xt","name","dataPreviewQueryId","EXPAND_TABLE","expanded","REMOVE_DATA_PREVIEW","CHANGE_DATA_PREVIEW_ID","oldQueryId","newTables","newQuery","activeSouthPaneTab","COLLAPSE_TABLE","REMOVE_TABLE","START_QUERY_VALIDATION","sqlEditor","validationResult","errors","completed","QUERY_VALIDATION_RETURNED","results","QUERY_VALIDATION_FAILED","line_number","start_column","end_column","message","COST_ESTIMATE_STARTED","queryCostEstimate","cost","error","COST_ESTIMATE_RETURNED","json","COST_ESTIMATE_FAILED","START_QUERY","latestQueryId","newResults","data","q","STOP_QUERY","CLEAR_QUERY_RESULTS","cached","REQUEST_QUERY_RESULTS","QUERY_SUCCESS","alts","endDttm","progress","rows","limitingFactor","tempSchema","tempTable","errorMessage","QUERY_FAILED","msg","link","SET_ACTIVE_QUERY_EDITOR","LOAD_QUERY_EDITOR","SET_TABLES","SET_ACTIVE_SOUTHPANE_TAB","tabId","MIGRATE_QUERY_EDITOR","sqlLab","JSON","parse","localStorage","getItem","oldQueryEditor","setItem","stringify","newQueryEditor","MIGRATE_TABLE","oldTable","newTable","MIGRATE_TAB_HISTORY","oldId","newId","MIGRATE_QUERY","queryId","QUERY_EDITOR_SETDB","QUERY_EDITOR_SET_FUNCTION_NAMES","functionNames","QUERY_EDITOR_SET_SCHEMA","QUERY_EDITOR_SET_SCHEMA_OPTIONS","schemaOptions","options","QUERY_EDITOR_SET_TABLE_OPTIONS","tableOptions","QUERY_EDITOR_SET_TITLE","QUERY_EDITOR_SET_SQL","QUERY_EDITOR_SET_QUERY_LIMIT","QUERY_EDITOR_SET_TEMPLATE_PARAMS","templateParams","QUERY_EDITOR_SET_SELECTED_TEXT","selectedText","QUERY_EDITOR_SET_AUTORUN","QUERY_EDITOR_PERSIST_HEIGHT","northPercent","southPercent","QUERY_EDITOR_TOGGLE_LEFT_BAR","hideLeftBar","SET_DATABASES","databases","db","extra_json","extra","REFRESH_QUERIES","change","queriesLastUpdate","entries","alteredQueries","changedQuery","hasOwnProperty","changedOn","prevState","currentState","includes","SET_USER_OFFLINE","offline","CREATE_DATASOURCE_STARTED","isDatasourceLoading","CREATE_DATASOURCE_SUCCESS","datasource","CREATE_DATASOURCE_FAILED","err","type"],"mappings":"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","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { t } from '@superset-ui/core';\n\nimport getInitialState from './getInitialState';\nimport * as actions from '../actions/sqlLab';\nimport { now } from '../../modules/dates';\nimport {\n  addToObject,\n  alterInObject,\n  alterInArr,\n  removeFromArr,\n  getFromArr,\n  addToArr,\n  extendArr,\n} from '../../reduxUtils';\n\nexport default function sqlLabReducer(state = {}, action) {\n  const actionHandlers = {\n    [actions.ADD_QUERY_EDITOR]() {\n      const tabHistory = state.tabHistory.slice();\n      tabHistory.push(action.queryEditor.id);\n      const newState = { ...state, tabHistory };\n      return addToArr(newState, 'queryEditors', action.queryEditor);\n    },\n    [actions.QUERY_EDITOR_SAVED]() {\n      const { query, result } = action;\n      const existing = state.queryEditors.find(qe => qe.id === query.id);\n      return alterInArr(\n        state,\n        'queryEditors',\n        existing,\n        {\n          remoteId: result.remoteId,\n          title: query.title,\n        },\n        'id',\n      );\n    },\n    [actions.UPDATE_QUERY_EDITOR]() {\n      const id = action.alterations.remoteId;\n      const existing = state.queryEditors.find(qe => qe.remoteId === id);\n      if (existing == null) return state;\n      return alterInArr(\n        state,\n        'queryEditors',\n        existing,\n        action.alterations,\n        'remoteId',\n      );\n    },\n    [actions.CLONE_QUERY_TO_NEW_TAB]() {\n      const progenitor = state.queryEditors.find(\n        qe => qe.id === state.tabHistory[state.tabHistory.length - 1],\n      );\n      const qe = {\n        remoteId: progenitor.remoteId,\n        title: t('Copy of %s', progenitor.title),\n        dbId: action.query.dbId ? action.query.dbId : null,\n        schema: action.query.schema ? action.query.schema : null,\n        autorun: true,\n        sql: action.query.sql,\n        queryLimit: action.query.queryLimit,\n        maxRow: action.query.maxRow,\n      };\n      return sqlLabReducer(state, actions.addQueryEditor(qe));\n    },\n    [actions.REMOVE_QUERY_EDITOR]() {\n      let newState = removeFromArr(state, 'queryEditors', action.queryEditor);\n      // List of remaining queryEditor ids\n      const qeIds = newState.queryEditors.map(qe => qe.id);\n\n      const queries = {};\n      Object.keys(state.queries).forEach(k => {\n        const query = state.queries[k];\n        if (qeIds.indexOf(query.sqlEditorId) > -1) {\n          queries[k] = query;\n        }\n      });\n\n      let tabHistory = state.tabHistory.slice();\n      tabHistory = tabHistory.filter(id => qeIds.indexOf(id) > -1);\n\n      // Remove associated table schemas\n      const tables = state.tables.filter(\n        table => table.queryEditorId !== action.queryEditor.id,\n      );\n\n      newState = { ...newState, tabHistory, tables, queries };\n      return newState;\n    },\n    [actions.REMOVE_QUERY]() {\n      const newQueries = { ...state.queries };\n      delete newQueries[action.query.id];\n      return { ...state, queries: newQueries };\n    },\n    [actions.RESET_STATE]() {\n      return { ...getInitialState() };\n    },\n    [actions.MERGE_TABLE]() {\n      const at = { ...action.table };\n      let existingTable;\n      state.tables.forEach(xt => {\n        if (\n          xt.dbId === at.dbId &&\n          xt.queryEditorId === at.queryEditorId &&\n          xt.schema === at.schema &&\n          xt.name === at.name\n        ) {\n          existingTable = xt;\n        }\n      });\n      if (existingTable) {\n        if (action.query) {\n          at.dataPreviewQueryId = action.query.id;\n        }\n        return alterInArr(state, 'tables', existingTable, at);\n      }\n      // for new table, associate Id of query for data preview\n      at.dataPreviewQueryId = null;\n      let newState = addToArr(state, 'tables', at);\n      if (action.query) {\n        newState = alterInArr(newState, 'tables', at, {\n          dataPreviewQueryId: action.query.id,\n        });\n      }\n      return newState;\n    },\n    [actions.EXPAND_TABLE]() {\n      return alterInArr(state, 'tables', action.table, { expanded: true });\n    },\n    [actions.REMOVE_DATA_PREVIEW]() {\n      const queries = { ...state.queries };\n      delete queries[action.table.dataPreviewQueryId];\n      const newState = alterInArr(state, 'tables', action.table, {\n        dataPreviewQueryId: null,\n      });\n      return { ...newState, queries };\n    },\n    [actions.CHANGE_DATA_PREVIEW_ID]() {\n      const queries = { ...state.queries };\n      delete queries[action.oldQueryId];\n\n      const newTables = [];\n      state.tables.forEach(xt => {\n        if (xt.dataPreviewQueryId === action.oldQueryId) {\n          newTables.push({ ...xt, dataPreviewQueryId: action.newQuery.id });\n        } else {\n          newTables.push(xt);\n        }\n      });\n      return {\n        ...state,\n        queries,\n        tables: newTables,\n        activeSouthPaneTab: action.newQuery.id,\n      };\n    },\n    [actions.COLLAPSE_TABLE]() {\n      return alterInArr(state, 'tables', action.table, { expanded: false });\n    },\n    [actions.REMOVE_TABLE]() {\n      return removeFromArr(state, 'tables', action.table);\n    },\n    [actions.START_QUERY_VALIDATION]() {\n      let newState = { ...state };\n      const sqlEditor = { id: action.query.sqlEditorId };\n      newState = alterInArr(newState, 'queryEditors', sqlEditor, {\n        validationResult: {\n          id: action.query.id,\n          errors: [],\n          completed: false,\n        },\n      });\n      return newState;\n    },\n    [actions.QUERY_VALIDATION_RETURNED]() {\n      // If the server is very slow about answering us, we might get validation\n      // responses back out of order. This check confirms the response we're\n      // handling corresponds to the most recently dispatched request.\n      //\n      // We don't care about any but the most recent because validations are\n      // only valid for the SQL text they correspond to -- once the SQL has\n      // changed, the old validation doesn't tell us anything useful anymore.\n      const qe = getFromArr(state.queryEditors, action.query.sqlEditorId);\n      if (qe.validationResult.id !== action.query.id) {\n        return state;\n      }\n      // Otherwise, persist the results on the queryEditor state\n      let newState = { ...state };\n      const sqlEditor = { id: action.query.sqlEditorId };\n      newState = alterInArr(newState, 'queryEditors', sqlEditor, {\n        validationResult: {\n          id: action.query.id,\n          errors: action.results,\n          completed: true,\n        },\n      });\n      return newState;\n    },\n    [actions.QUERY_VALIDATION_FAILED]() {\n      // If the server is very slow about answering us, we might get validation\n      // responses back out of order. This check confirms the response we're\n      // handling corresponds to the most recently dispatched request.\n      //\n      // We don't care about any but the most recent because validations are\n      // only valid for the SQL text they correspond to -- once the SQL has\n      // changed, the old validation doesn't tell us anything useful anymore.\n      const qe = getFromArr(state.queryEditors, action.query.sqlEditorId);\n      if (qe.validationResult.id !== action.query.id) {\n        return state;\n      }\n      // Otherwise, persist the results on the queryEditor state\n      let newState = { ...state };\n      const sqlEditor = { id: action.query.sqlEditorId };\n      newState = alterInArr(newState, 'queryEditors', sqlEditor, {\n        validationResult: {\n          id: action.query.id,\n          errors: [\n            {\n              line_number: 1,\n              start_column: 1,\n              end_column: 1,\n              message: `The server failed to validate your query.\\n${action.message}`,\n            },\n          ],\n          completed: true,\n        },\n      });\n      return newState;\n    },\n    [actions.COST_ESTIMATE_STARTED]() {\n      let newState = { ...state };\n      const sqlEditor = { id: action.query.sqlEditorId };\n      newState = alterInArr(newState, 'queryEditors', sqlEditor, {\n        queryCostEstimate: {\n          completed: false,\n          cost: null,\n          error: null,\n        },\n      });\n      return newState;\n    },\n    [actions.COST_ESTIMATE_RETURNED]() {\n      let newState = { ...state };\n      const sqlEditor = { id: action.query.sqlEditorId };\n      newState = alterInArr(newState, 'queryEditors', sqlEditor, {\n        queryCostEstimate: {\n          completed: true,\n          cost: action.json,\n          error: null,\n        },\n      });\n      return newState;\n    },\n    [actions.COST_ESTIMATE_FAILED]() {\n      let newState = { ...state };\n      const sqlEditor = { id: action.query.sqlEditorId };\n      newState = alterInArr(newState, 'queryEditors', sqlEditor, {\n        queryCostEstimate: {\n          completed: false,\n          cost: null,\n          error: action.error,\n        },\n      });\n      return newState;\n    },\n    [actions.START_QUERY]() {\n      let newState = { ...state };\n      if (action.query.sqlEditorId) {\n        const qe = getFromArr(state.queryEditors, action.query.sqlEditorId);\n        if (qe.latestQueryId && state.queries[qe.latestQueryId]) {\n          const newResults = {\n            ...state.queries[qe.latestQueryId].results,\n            data: [],\n            query: null,\n          };\n          const q = { ...state.queries[qe.latestQueryId], results: newResults };\n          const queries = { ...state.queries, [q.id]: q };\n          newState = { ...state, queries };\n        }\n      } else {\n        newState.activeSouthPaneTab = action.query.id;\n      }\n      newState = addToObject(newState, 'queries', action.query);\n      const sqlEditor = { id: action.query.sqlEditorId };\n      return alterInArr(newState, 'queryEditors', sqlEditor, {\n        latestQueryId: action.query.id,\n      });\n    },\n    [actions.STOP_QUERY]() {\n      return alterInObject(state, 'queries', action.query, {\n        state: 'stopped',\n        results: [],\n      });\n    },\n    [actions.CLEAR_QUERY_RESULTS]() {\n      const newResults = { ...action.query.results };\n      newResults.data = [];\n      return alterInObject(state, 'queries', action.query, {\n        results: newResults,\n        cached: true,\n      });\n    },\n    [actions.REQUEST_QUERY_RESULTS]() {\n      return alterInObject(state, 'queries', action.query, {\n        state: 'fetching',\n      });\n    },\n    [actions.QUERY_SUCCESS]() {\n      // prevent race condition were query succeeds shortly after being canceled\n      if (action.query.state === 'stopped') {\n        return state;\n      }\n      const alts = {\n        endDttm: now(),\n        progress: 100,\n        results: action.results,\n        rows: action?.results?.data?.length,\n        state: 'success',\n        limitingFactor: action?.results?.query?.limitingFactor,\n        tempSchema: action?.results?.query?.tempSchema,\n        tempTable: action?.results?.query?.tempTable,\n        errorMessage: null,\n        cached: false,\n      };\n      return alterInObject(state, 'queries', action.query, alts);\n    },\n    [actions.QUERY_FAILED]() {\n      if (action.query.state === 'stopped') {\n        return state;\n      }\n      const alts = {\n        state: 'failed',\n        errors: action.errors,\n        errorMessage: action.msg,\n        endDttm: now(),\n        link: action.link,\n      };\n      return alterInObject(state, 'queries', action.query, alts);\n    },\n    [actions.SET_ACTIVE_QUERY_EDITOR]() {\n      const qeIds = state.queryEditors.map(qe => qe.id);\n      if (\n        qeIds.indexOf(action.queryEditor.id) > -1 &&\n        state.tabHistory[state.tabHistory.length - 1] !== action.queryEditor.id\n      ) {\n        const tabHistory = state.tabHistory.slice();\n        tabHistory.push(action.queryEditor.id);\n        return { ...state, tabHistory };\n      }\n      return state;\n    },\n    [actions.LOAD_QUERY_EDITOR]() {\n      return alterInArr(state, 'queryEditors', action.queryEditor, {\n        ...action.queryEditor,\n      });\n    },\n    [actions.SET_TABLES]() {\n      return extendArr(state, 'tables', action.tables);\n    },\n    [actions.SET_ACTIVE_SOUTHPANE_TAB]() {\n      return { ...state, activeSouthPaneTab: action.tabId };\n    },\n    [actions.MIGRATE_QUERY_EDITOR]() {\n      // remove migrated query editor from localStorage\n      const { sqlLab } = JSON.parse(localStorage.getItem('redux'));\n      sqlLab.queryEditors = sqlLab.queryEditors.filter(\n        qe => qe.id !== action.oldQueryEditor.id,\n      );\n      localStorage.setItem('redux', JSON.stringify({ sqlLab }));\n\n      // replace localStorage query editor with the server backed one\n      return addToArr(\n        removeFromArr(state, 'queryEditors', action.oldQueryEditor),\n        'queryEditors',\n        action.newQueryEditor,\n      );\n    },\n    [actions.MIGRATE_TABLE]() {\n      // remove migrated table from localStorage\n      const { sqlLab } = JSON.parse(localStorage.getItem('redux'));\n      sqlLab.tables = sqlLab.tables.filter(\n        table => table.id !== action.oldTable.id,\n      );\n      localStorage.setItem('redux', JSON.stringify({ sqlLab }));\n\n      // replace localStorage table with the server backed one\n      return addToArr(\n        removeFromArr(state, 'tables', action.oldTable),\n        'tables',\n        action.newTable,\n      );\n    },\n    [actions.MIGRATE_TAB_HISTORY]() {\n      // remove migrated tab from localStorage tabHistory\n      const { sqlLab } = JSON.parse(localStorage.getItem('redux'));\n      sqlLab.tabHistory = sqlLab.tabHistory.filter(\n        tabId => tabId !== action.oldId,\n      );\n      localStorage.setItem('redux', JSON.stringify({ sqlLab }));\n      const tabHistory = state.tabHistory.filter(\n        tabId => tabId !== action.oldId,\n      );\n      tabHistory.push(action.newId);\n      return { ...state, tabHistory };\n    },\n    [actions.MIGRATE_QUERY]() {\n      const query = {\n        ...state.queries[action.queryId],\n        // point query to migrated query editor\n        sqlEditorId: action.queryEditorId,\n      };\n      const queries = { ...state.queries, [query.id]: query };\n      return { ...state, queries };\n    },\n    [actions.QUERY_EDITOR_SETDB]() {\n      return alterInArr(state, 'queryEditors', action.queryEditor, {\n        dbId: action.dbId,\n      });\n    },\n    [actions.QUERY_EDITOR_SET_FUNCTION_NAMES]() {\n      return alterInArr(state, 'queryEditors', action.queryEditor, {\n        functionNames: action.functionNames,\n      });\n    },\n    [actions.QUERY_EDITOR_SET_SCHEMA]() {\n      return alterInArr(state, 'queryEditors', action.queryEditor, {\n        schema: action.schema,\n      });\n    },\n    [actions.QUERY_EDITOR_SET_SCHEMA_OPTIONS]() {\n      return alterInArr(state, 'queryEditors', action.queryEditor, {\n        schemaOptions: action.options,\n      });\n    },\n    [actions.QUERY_EDITOR_SET_TABLE_OPTIONS]() {\n      return alterInArr(state, 'queryEditors', action.queryEditor, {\n        tableOptions: action.options,\n      });\n    },\n    [actions.QUERY_EDITOR_SET_TITLE]() {\n      return alterInArr(state, 'queryEditors', action.queryEditor, {\n        title: action.title,\n      });\n    },\n    [actions.QUERY_EDITOR_SET_SQL]() {\n      return alterInArr(state, 'queryEditors', action.queryEditor, {\n        sql: action.sql,\n      });\n    },\n    [actions.QUERY_EDITOR_SET_QUERY_LIMIT]() {\n      return alterInArr(state, 'queryEditors', action.queryEditor, {\n        queryLimit: action.queryLimit,\n      });\n    },\n    [actions.QUERY_EDITOR_SET_TEMPLATE_PARAMS]() {\n      return alterInArr(state, 'queryEditors', action.queryEditor, {\n        templateParams: action.templateParams,\n      });\n    },\n    [actions.QUERY_EDITOR_SET_SELECTED_TEXT]() {\n      return alterInArr(state, 'queryEditors', action.queryEditor, {\n        selectedText: action.sql,\n      });\n    },\n    [actions.QUERY_EDITOR_SET_AUTORUN]() {\n      return alterInArr(state, 'queryEditors', action.queryEditor, {\n        autorun: action.autorun,\n      });\n    },\n    [actions.QUERY_EDITOR_PERSIST_HEIGHT]() {\n      return alterInArr(state, 'queryEditors', action.queryEditor, {\n        northPercent: action.northPercent,\n        southPercent: action.southPercent,\n      });\n    },\n    [actions.QUERY_EDITOR_TOGGLE_LEFT_BAR]() {\n      return alterInArr(state, 'queryEditors', action.queryEditor, {\n        hideLeftBar: action.hideLeftBar,\n      });\n    },\n    [actions.SET_DATABASES]() {\n      const databases = {};\n      action.databases.forEach(db => {\n        databases[db.id] = {\n          ...db,\n          extra_json: JSON.parse(db.extra || ''),\n        };\n      });\n      return { ...state, databases };\n    },\n    [actions.REFRESH_QUERIES]() {\n      let newQueries = { ...state.queries };\n      // Fetch the updates to the queries present in the store.\n      let change = false;\n      let { queriesLastUpdate } = state;\n      Object.entries(action.alteredQueries).forEach(([id, changedQuery]) => {\n        if (\n          !state.queries.hasOwnProperty(id) ||\n          (state.queries[id].state !== 'stopped' &&\n            state.queries[id].state !== 'failed')\n        ) {\n          if (changedQuery.changedOn > queriesLastUpdate) {\n            queriesLastUpdate = changedQuery.changedOn;\n          }\n          const prevState = state.queries[id]?.state;\n          const currentState = changedQuery.state;\n          newQueries[id] = {\n            ...state.queries[id],\n            ...changedQuery,\n            // race condition:\n            // because of async behavior, sql lab may still poll a couple of seconds\n            // when it started fetching or finished rendering results\n            state:\n              currentState === 'success' &&\n              ['fetching', 'success'].includes(prevState)\n                ? prevState\n                : currentState,\n          };\n          change = true;\n        }\n      });\n      if (!change) {\n        newQueries = state.queries;\n      }\n      return { ...state, queries: newQueries, queriesLastUpdate };\n    },\n    [actions.SET_USER_OFFLINE]() {\n      return { ...state, offline: action.offline };\n    },\n    [actions.CREATE_DATASOURCE_STARTED]() {\n      return { ...state, isDatasourceLoading: true, errorMessage: null };\n    },\n    [actions.CREATE_DATASOURCE_SUCCESS]() {\n      return {\n        ...state,\n        isDatasourceLoading: false,\n        errorMessage: null,\n        datasource: action.datasource,\n      };\n    },\n    [actions.CREATE_DATASOURCE_FAILED]() {\n      return { ...state, isDatasourceLoading: false, errorMessage: action.err };\n    },\n  };\n  if (action.type in actionHandlers) {\n    return actionHandlers[action.type]();\n  }\n  return state;\n}\n"]},"metadata":{},"sourceType":"module"}