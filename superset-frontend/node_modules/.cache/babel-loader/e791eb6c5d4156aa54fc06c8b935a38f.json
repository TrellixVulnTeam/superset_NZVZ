{"ast":null,"code":"import _extends from \"@babel/runtime-corejs3/helpers/extends\";import _debounce from \"lodash/debounce\";function _EMOTION_STRINGIFIED_CSS_ERROR__() {return \"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\";} /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState } from 'react';\nimport Collapse from 'src/components/Collapse';\nimport Card from 'src/components/Card';\nimport ButtonGroup from 'src/components/ButtonGroup';\nimport { t, styled } from '@superset-ui/core';\n\nimport { Tooltip } from 'src/components/Tooltip';\nimport CopyToClipboard from 'src/components/CopyToClipboard';\nimport { IconTooltip } from 'src/components/IconTooltip';\nimport ModalTrigger from 'src/components/ModalTrigger';\nimport Loading from 'src/components/Loading';\nimport ColumnElement from '../ColumnElement';\nimport ShowSQL from '../ShowSQL';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst StyledSpan = styled.span`\n  color: ${({ theme }) => theme.colors.primary.dark1};\n  &: hover {\n    color: ${({ theme }) => theme.colors.primary.dark2};\n  }\n  cursor: pointer;\n`;\nconst Fade = styled.div`\n  transition: all ${({ theme }) => theme.transitionTiming}s;\n  opacity: ${(props) => props.hovered ? 1 : 0};\n`;var _ref = process.env.NODE_ENV === \"production\" ? { name: \"1hs1mx1\", styles: \"padding-top:6px\" } : { name: \"14hmmm7-metadata\", styles: \"padding-top:6px;label:metadata;\", map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\", toString: _EMOTION_STRINGIFIED_CSS_ERROR__ };\nconst TableElement = ({ table, actions, ...props }) => {\n  const [sortColumns, setSortColumns] = useState(false);\n  const [hovered, setHovered] = useState(false);\n  const tableNameRef = React.useRef(null);\n  const setHover = (hovered) => {\n    _debounce(() => setHovered(hovered), 100)();\n  };\n  const removeTable = () => {\n    actions.removeDataPreview(table);\n    actions.removeTable(table);\n  };\n  const toggleSortColumns = () => {\n    setSortColumns((prevState) => !prevState);\n  };\n  const renderWell = () => {\n    let partitions;\n    let metadata;\n    if (table.partitions) {var _table$partitions;\n      let partitionQuery;\n      let partitionClipBoard;\n      if (table.partitions.partitionQuery) {\n        ({ partitionQuery } = table.partitions);\n        const tt = t('Copy partition query to clipboard');\n        partitionClipBoard = ___EmotionJSX(CopyToClipboard, { text: partitionQuery, shouldShowText: false, tooltipText: tt, copyNode: ___EmotionJSX(\"i\", { className: \"fa fa-clipboard\" }) });\n      }\n      const latest = Object.entries(((_table$partitions = table.partitions) == null ? void 0 : _table$partitions.latest) || []).\n      map(([key, value]) => `${key}=${value}`).\n      join('/');\n      partitions = ___EmotionJSX(\"div\", null,\n      ___EmotionJSX(\"small\", null,\n      t('latest partition:'), \" \", latest),\n      ' ',\n      partitionClipBoard);\n\n    }\n    if (table.metadata) {\n      metadata = Object.entries(table.metadata).map(([key, value]) => ___EmotionJSX(\"div\", null,\n      ___EmotionJSX(\"small\", null,\n      ___EmotionJSX(\"strong\", null, key, \":\"), \" \", value)));\n\n\n    }\n    if (!partitions && (!metadata || !metadata.length)) {\n      // hide partition and metadata card view\n      return null;\n    }\n    return ___EmotionJSX(Card, { size: \"small\" },\n    partitions,\n    metadata);\n\n  };\n  const renderControls = () => {var _table$indexes;\n    let keyLink;\n    if (table != null && (_table$indexes = table.indexes) != null && _table$indexes.length) {\n      keyLink = ___EmotionJSX(ModalTrigger, { modalTitle: ___EmotionJSX(\"div\", null,\n        t('Keys for table'), \" \", ___EmotionJSX(\"strong\", null, table.name)),\n        modalBody: table.indexes.map((ix, i) => ___EmotionJSX(\"pre\", { key: i }, JSON.stringify(ix, null, '  '))), triggerNode: ___EmotionJSX(IconTooltip, { className: \"fa fa-key pull-left m-l-2\", tooltip: t('View keys & indexes (%s)', table.indexes.length) }) });\n    }\n    return ___EmotionJSX(ButtonGroup, { className: \"ws-el-controls\" },\n    keyLink,\n    ___EmotionJSX(IconTooltip, { className: `fa fa-sort-${sortColumns ? 'numeric' : 'alpha'}-asc ` +\n      'pull-left sort-cols m-l-2 pointer', onClick: toggleSortColumns, tooltip: sortColumns ?\n      t('Original table column order') :\n      t('Sort columns alphabetically') }),\n    table.selectStar && ___EmotionJSX(CopyToClipboard, { copyNode: ___EmotionJSX(IconTooltip, { \"aria-label\": \"Copy\", tooltip: t('Copy SELECT statement to the clipboard') },\n      ___EmotionJSX(\"i\", { \"aria-hidden\": true, className: \"fa fa-clipboard pull-left m-l-2\" })),\n      text: table.selectStar, shouldShowText: false }),\n    table.view && ___EmotionJSX(ShowSQL, { sql: table.view, tooltipText: t('Show CREATE VIEW statement'), title: t('CREATE VIEW statement') }),\n    ___EmotionJSX(IconTooltip, { className: \"fa fa-times table-remove pull-left m-l-2 pointer\", onClick: removeTable, tooltip: t('Remove table preview') }));\n\n  };\n  const renderHeader = () => {\n    const element = tableNameRef.current;\n    let trigger = [];\n    if (element && element.offsetWidth < element.scrollWidth) {\n      trigger = ['hover'];\n    }\n    return ___EmotionJSX(\"div\", { className: \"clearfix header-container\", onMouseEnter: () => setHover(true), onMouseLeave: () => setHover(false) },\n    ___EmotionJSX(Tooltip, { id: \"copy-to-clipboard-tooltip\", style: { cursor: 'pointer' }, title: table.name, trigger: trigger },\n    ___EmotionJSX(StyledSpan, { ref: tableNameRef, className: \"table-name\" },\n    ___EmotionJSX(\"strong\", null, table.name))),\n\n\n\n    ___EmotionJSX(\"div\", { className: \"pull-right header-right-side\" },\n    table.isMetadataLoading || table.isExtraMetadataLoading ? ___EmotionJSX(Loading, { position: \"inline\" }) : ___EmotionJSX(Fade, { hovered: hovered, onClick: (e) => e.stopPropagation() },\n    renderControls())));\n\n\n\n  };\n  const renderBody = () => {var _cols;\n    let cols;\n    if (table.columns) {\n      cols = table.columns.slice();\n      if (sortColumns) {\n        cols.sort((a, b) => {\n          const colA = a.name.toUpperCase();\n          const colB = b.name.toUpperCase();\n          return colA < colB ? -1 : colA > colB ? 1 : 0;\n        });\n      }\n    }\n    const metadata = ___EmotionJSX(\"div\", { onMouseEnter: () => setHover(true), onMouseLeave: () => setHover(false), css: _ref },\n    renderWell(),\n    ___EmotionJSX(\"div\", null, (_cols =\n    cols) == null ? void 0 : _cols.map((col) => ___EmotionJSX(ColumnElement, { column: col, key: col.name }))));\n\n\n    return metadata;\n  };\n  return ___EmotionJSX(Collapse.Panel, _extends({}, props, { key: table.id, header: renderHeader(), className: \"TableElement\", forceRender: true }),\n  renderBody());\n\n};\nexport default TableElement;","map":null,"metadata":{},"sourceType":"module"}