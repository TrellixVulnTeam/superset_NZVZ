{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;};import { bisect } from \"d3-array\";\nimport { interpolate as interpolateValue, interpolateNumber, interpolateRound } from \"d3-interpolate\";\nimport constant from \"./constant.js\";\nimport number from \"./number.js\";\n\nvar unit = [0, 1];\n\nexport function identity(x) {\n  return x;\n}\n\nfunction normalize(a, b) {\n  return (b -= a = +a) ?\n  function (x) {return (x - a) / b;} :\n  constant(isNaN(b) ? NaN : 0.5);\n}\n\nfunction clamper(a, b) {\n  var t;\n  if (a > b) t = a, a = b, b = t;\n  return function (x) {return Math.max(a, Math.min(b, x));};\n}\n\n// normalize(a, b)(x) takes a domain value x in [a,b] and returns the corresponding parameter t in [0,1].\n// interpolate(a, b)(t) takes a parameter t in [0,1] and returns the corresponding range value x in [a,b].\nfunction bimap(domain, range, interpolate) {\n  var d0 = domain[0],d1 = domain[1],r0 = range[0],r1 = range[1];\n  if (d1 < d0) d0 = normalize(d1, d0), r0 = interpolate(r1, r0);else\n  d0 = normalize(d0, d1), r0 = interpolate(r0, r1);\n  return function (x) {return r0(d0(x));};\n}\n\nfunction polymap(domain, range, interpolate) {\n  var j = Math.min(domain.length, range.length) - 1,\n  d = new Array(j),\n  r = new Array(j),\n  i = -1;\n\n  // Reverse descending domains.\n  if (domain[j] < domain[0]) {\n    domain = domain.slice().reverse();\n    range = range.slice().reverse();\n  }\n\n  while (++i < j) {\n    d[i] = normalize(domain[i], domain[i + 1]);\n    r[i] = interpolate(range[i], range[i + 1]);\n  }\n\n  return function (x) {\n    var i = bisect(domain, x, 1, j) - 1;\n    return r[i](d[i](x));\n  };\n}\n\nexport function copy(source, target) {\n  return target.\n  domain(source.domain()).\n  range(source.range()).\n  interpolate(source.interpolate()).\n  clamp(source.clamp()).\n  unknown(source.unknown());\n}\n\nexport function transformer() {\n  var domain = unit,\n  range = unit,\n  interpolate = interpolateValue,\n  transform,\n  untransform,\n  unknown,\n  clamp = identity,\n  piecewise,\n  output,\n  input;\n\n  function rescale() {\n    var n = Math.min(domain.length, range.length);\n    if (clamp !== identity) clamp = clamper(domain[0], domain[n - 1]);\n    piecewise = n > 2 ? polymap : bimap;\n    output = input = null;\n    return scale;\n  }\n\n  function scale(x) {\n    return x == null || isNaN(x = +x) ? unknown : (output || (output = piecewise(domain.map(transform), range, interpolate)))(transform(clamp(x)));\n  }\n\n  scale.invert = function (y) {\n    return clamp(untransform((input || (input = piecewise(range, domain.map(transform), interpolateNumber)))(y)));\n  };\n\n  scale.domain = function (_) {\n    return arguments.length ? (domain = Array.from(_, number), rescale()) : domain.slice();\n  };\n\n  scale.range = function (_) {\n    return arguments.length ? (range = Array.from(_), rescale()) : range.slice();\n  };\n\n  scale.rangeRound = function (_) {\n    return range = Array.from(_), interpolate = interpolateRound, rescale();\n  };\n\n  scale.clamp = function (_) {\n    return arguments.length ? (clamp = _ ? true : identity, rescale()) : clamp !== identity;\n  };\n\n  scale.interpolate = function (_) {\n    return arguments.length ? (interpolate = _, rescale()) : interpolate;\n  };\n\n  scale.unknown = function (_) {\n    return arguments.length ? (unknown = _, scale) : unknown;\n  };\n\n  return function (t, u) {\n    transform = t, untransform = u;\n    return rescale();\n  };\n}\n\nexport default function continuous() {\n  return transformer()(identity, identity);\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(unit, \"unit\", \"/home/ubuntu/my_plugin/superset/superset-frontend/node_modules/@encodable/color/node_modules/d3-scale/src/continuous.js\");reactHotLoader.register(identity, \"identity\", \"/home/ubuntu/my_plugin/superset/superset-frontend/node_modules/@encodable/color/node_modules/d3-scale/src/continuous.js\");reactHotLoader.register(normalize, \"normalize\", \"/home/ubuntu/my_plugin/superset/superset-frontend/node_modules/@encodable/color/node_modules/d3-scale/src/continuous.js\");reactHotLoader.register(clamper, \"clamper\", \"/home/ubuntu/my_plugin/superset/superset-frontend/node_modules/@encodable/color/node_modules/d3-scale/src/continuous.js\");reactHotLoader.register(bimap, \"bimap\", \"/home/ubuntu/my_plugin/superset/superset-frontend/node_modules/@encodable/color/node_modules/d3-scale/src/continuous.js\");reactHotLoader.register(polymap, \"polymap\", \"/home/ubuntu/my_plugin/superset/superset-frontend/node_modules/@encodable/color/node_modules/d3-scale/src/continuous.js\");reactHotLoader.register(copy, \"copy\", \"/home/ubuntu/my_plugin/superset/superset-frontend/node_modules/@encodable/color/node_modules/d3-scale/src/continuous.js\");reactHotLoader.register(transformer, \"transformer\", \"/home/ubuntu/my_plugin/superset/superset-frontend/node_modules/@encodable/color/node_modules/d3-scale/src/continuous.js\");reactHotLoader.register(continuous, \"continuous\", \"/home/ubuntu/my_plugin/superset/superset-frontend/node_modules/@encodable/color/node_modules/d3-scale/src/continuous.js\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/home/ubuntu/my_plugin/superset/superset-frontend/node_modules/@encodable/color/node_modules/d3-scale/src/continuous.js"],"names":["bisect","interpolate","interpolateValue","interpolateNumber","interpolateRound","constant","number","unit","identity","x","normalize","a","b","isNaN","NaN","clamper","t","Math","max","min","bimap","domain","range","d0","d1","r0","r1","polymap","j","length","d","Array","r","i","slice","reverse","copy","source","target","clamp","unknown","transformer","transform","untransform","piecewise","output","input","rescale","n","scale","map","invert","y","_","arguments","from","rangeRound","u","continuous"],"mappings":"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","sourcesContent":["import {bisect} from \"d3-array\";\nimport {interpolate as interpolateValue, interpolateNumber, interpolateRound} from \"d3-interpolate\";\nimport constant from \"./constant.js\";\nimport number from \"./number.js\";\n\nvar unit = [0, 1];\n\nexport function identity(x) {\n  return x;\n}\n\nfunction normalize(a, b) {\n  return (b -= (a = +a))\n      ? function(x) { return (x - a) / b; }\n      : constant(isNaN(b) ? NaN : 0.5);\n}\n\nfunction clamper(a, b) {\n  var t;\n  if (a > b) t = a, a = b, b = t;\n  return function(x) { return Math.max(a, Math.min(b, x)); };\n}\n\n// normalize(a, b)(x) takes a domain value x in [a,b] and returns the corresponding parameter t in [0,1].\n// interpolate(a, b)(t) takes a parameter t in [0,1] and returns the corresponding range value x in [a,b].\nfunction bimap(domain, range, interpolate) {\n  var d0 = domain[0], d1 = domain[1], r0 = range[0], r1 = range[1];\n  if (d1 < d0) d0 = normalize(d1, d0), r0 = interpolate(r1, r0);\n  else d0 = normalize(d0, d1), r0 = interpolate(r0, r1);\n  return function(x) { return r0(d0(x)); };\n}\n\nfunction polymap(domain, range, interpolate) {\n  var j = Math.min(domain.length, range.length) - 1,\n      d = new Array(j),\n      r = new Array(j),\n      i = -1;\n\n  // Reverse descending domains.\n  if (domain[j] < domain[0]) {\n    domain = domain.slice().reverse();\n    range = range.slice().reverse();\n  }\n\n  while (++i < j) {\n    d[i] = normalize(domain[i], domain[i + 1]);\n    r[i] = interpolate(range[i], range[i + 1]);\n  }\n\n  return function(x) {\n    var i = bisect(domain, x, 1, j) - 1;\n    return r[i](d[i](x));\n  };\n}\n\nexport function copy(source, target) {\n  return target\n      .domain(source.domain())\n      .range(source.range())\n      .interpolate(source.interpolate())\n      .clamp(source.clamp())\n      .unknown(source.unknown());\n}\n\nexport function transformer() {\n  var domain = unit,\n      range = unit,\n      interpolate = interpolateValue,\n      transform,\n      untransform,\n      unknown,\n      clamp = identity,\n      piecewise,\n      output,\n      input;\n\n  function rescale() {\n    var n = Math.min(domain.length, range.length);\n    if (clamp !== identity) clamp = clamper(domain[0], domain[n - 1]);\n    piecewise = n > 2 ? polymap : bimap;\n    output = input = null;\n    return scale;\n  }\n\n  function scale(x) {\n    return x == null || isNaN(x = +x) ? unknown : (output || (output = piecewise(domain.map(transform), range, interpolate)))(transform(clamp(x)));\n  }\n\n  scale.invert = function(y) {\n    return clamp(untransform((input || (input = piecewise(range, domain.map(transform), interpolateNumber)))(y)));\n  };\n\n  scale.domain = function(_) {\n    return arguments.length ? (domain = Array.from(_, number), rescale()) : domain.slice();\n  };\n\n  scale.range = function(_) {\n    return arguments.length ? (range = Array.from(_), rescale()) : range.slice();\n  };\n\n  scale.rangeRound = function(_) {\n    return range = Array.from(_), interpolate = interpolateRound, rescale();\n  };\n\n  scale.clamp = function(_) {\n    return arguments.length ? (clamp = _ ? true : identity, rescale()) : clamp !== identity;\n  };\n\n  scale.interpolate = function(_) {\n    return arguments.length ? (interpolate = _, rescale()) : interpolate;\n  };\n\n  scale.unknown = function(_) {\n    return arguments.length ? (unknown = _, scale) : unknown;\n  };\n\n  return function(t, u) {\n    transform = t, untransform = u;\n    return rescale();\n  };\n}\n\nexport default function continuous() {\n  return transformer()(identity, identity);\n}\n"]},"metadata":{},"sourceType":"module"}