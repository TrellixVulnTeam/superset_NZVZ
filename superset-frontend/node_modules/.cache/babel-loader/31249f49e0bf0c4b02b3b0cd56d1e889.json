{"ast":null,"code":"import _debounce from \"lodash/debounce\";var _jsxFileName = \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/components/ResultSet/index.tsx\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport ButtonGroup from 'src/components/ButtonGroup';\nimport Alert from 'src/components/Alert';\nimport ProgressBar from 'src/components/ProgressBar';\nimport moment from 'moment';\nimport Button from 'src/components/Button';\nimport shortid from 'shortid';\nimport rison from 'rison';\nimport { styled, t, makeApi, SupersetClient } from '@superset-ui/core';\n\nimport ErrorMessageWithStackTrace from 'src/components/ErrorMessage/ErrorMessageWithStackTrace';\nimport { SaveDatasetModal } from 'src/SqlLab/components/SaveDatasetModal';\nimport Loading from 'src/components/Loading';\nimport FilterableTable from 'src/components/FilterableTable/FilterableTable';\nimport CopyToClipboard from 'src/components/CopyToClipboard';\nimport { prepareCopyToClipboardTabularData } from 'src/utils/common';\nimport { exploreChart } from 'src/explore/exploreUtils';\nimport { CtasEnum } from 'src/SqlLab/actions/sqlLab';\nimport ExploreCtasResultsButton from '../ExploreCtasResultsButton';\nimport ExploreResultsButton from '../ExploreResultsButton';\nimport HighlightedSql from '../HighlightedSql';\nimport QueryStateLabel from '../QueryStateLabel';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nvar DatasetRadioState;\n(function (DatasetRadioState) {\n  DatasetRadioState[DatasetRadioState[\"SAVE_NEW\"] = 1] = \"SAVE_NEW\";\n  DatasetRadioState[DatasetRadioState[\"OVERWRITE_DATASET\"] = 2] = \"OVERWRITE_DATASET\";\n})(DatasetRadioState || (DatasetRadioState = {}));\nconst EXPLORE_CHART_DEFAULT = {\n  metrics: [],\n  groupby: [],\n  time_range: 'No filter',\n  viz_type: 'table' };\n\nvar LIMITING_FACTOR;\n(function (LIMITING_FACTOR) {\n  LIMITING_FACTOR[\"QUERY\"] = \"QUERY\";\n  LIMITING_FACTOR[\"QUERY_AND_DROPDOWN\"] = \"QUERY_AND_DROPDOWN\";\n  LIMITING_FACTOR[\"DROPDOWN\"] = \"DROPDOWN\";\n  LIMITING_FACTOR[\"NOT_LIMITED\"] = \"NOT_LIMITED\";\n})(LIMITING_FACTOR || (LIMITING_FACTOR = {}));\nconst LOADING_STYLES = { position: 'relative', minHeight: 100 };\n// Making text render line breaks/tabs as is as monospace,\n// but wrapping text too so text doesn't overflow\nconst MonospaceDiv = styled.div`\n  font-family: ${({ theme }) => theme.typography.families.monospace};\n  white-space: pre;\n  word-break: break-word;\n  overflow-x: auto;\n  white-space: pre-wrap;\n`;\nconst ReturnedRows = styled.div`\n  font-size: 13px;\n  line-height: 24px;\n  .limitMessage {\n    color: ${({ theme }) => theme.colors.secondary.light1};\n    margin-left: ${({ theme }) => theme.gridUnit * 2}px;\n  }\n`;\nconst ResultSetControls = styled.div`\n  display: flex;\n  justify-content: space-between;\n  padding: ${({ theme }) => 2 * theme.gridUnit}px 0;\n`;\nconst ResultSetButtons = styled.div`\n  display: grid;\n  grid-auto-flow: column;\n  padding-right: ${({ theme }) => 2 * theme.gridUnit}px;\n`;\nconst ResultSetErrorMessage = styled.div`\n  padding-top: ${({ theme }) => 4 * theme.gridUnit}px;\n`;\nconst updateDataset = async (datasetId, sql, columns, owners, overrideColumns) => {\n  const endpoint = `api/v1/dataset/${datasetId}?override_columns=${overrideColumns}`;\n  const headers = { 'Content-Type': 'application/json' };\n  const body = JSON.stringify({\n    sql,\n    columns,\n    owners });\n\n  const data = await SupersetClient.put({\n    endpoint,\n    headers,\n    body });\n\n  return data.json.result;\n};\nexport default class ResultSet extends React.PureComponent {\n\n\n\n\n\n\n\n\n  constructor(props) {\n    super(props);this.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    calculateAlertRefHeight = (alertElement) => {\n      if (alertElement) {\n        this.setState({ alertIsOpen: true });\n      } else\n      {\n        this.setState({ alertIsOpen: false });\n      }\n    };this.\n    getDefaultDatasetName = () => `${this.props.query.tab} ${moment().format('MM/DD/YYYY HH:mm:ss')}`;this.\n    handleOnChangeAutoComplete = () => {\n      this.setState({ datasetToOverwrite: {} });\n    };this.\n    handleOverwriteDataset = async () => {\n      const { sql, results } = this.props.query;\n      const { datasetToOverwrite } = this.state;\n      await updateDataset(datasetToOverwrite.datasetId, sql, results.selected_columns.map((d) => ({ column_name: d.name })), datasetToOverwrite.owners.map((o) => o.id), true);\n      this.setState({\n        showSaveDatasetModal: false,\n        shouldOverwriteDataSet: false,\n        datasetToOverwrite: {},\n        newSaveDatasetName: this.getDefaultDatasetName() });\n\n      exploreChart({\n        ...EXPLORE_CHART_DEFAULT,\n        datasource: `${datasetToOverwrite.datasetId}__table`,\n        all_columns: results.selected_columns.map((d) => d.name) });\n\n    };this.\n    handleSaveInDataset = () => {var _this$props$query, _this$props$query$res;\n      // if user wants to overwrite a dataset we need to prompt them\n      if (this.state.saveDatasetRadioBtnState ===\n      DatasetRadioState.OVERWRITE_DATASET) {\n        this.setState({ shouldOverwriteDataSet: true });\n        return;\n      }\n      const { schema, sql, dbId } = this.props.query;\n      let { templateParams } = this.props.query;\n      const selectedColumns = ((_this$props$query = this.props.query) == null ? void 0 : (_this$props$query$res = _this$props$query.results) == null ? void 0 : _this$props$query$res.selected_columns) || [];\n      // The filters param is only used to test jinja templates.\n      // Remove the special filters entry from the templateParams\n      // before saving the dataset.\n      if (templateParams) {\n        const p = JSON.parse(templateParams);\n        /* eslint-disable-next-line no-underscore-dangle */\n        if (p._filters) {\n          /* eslint-disable-next-line no-underscore-dangle */\n          delete p._filters;\n          templateParams = JSON.stringify(p);\n        }\n      }\n      this.props.actions.\n      createDatasource({\n        schema,\n        sql,\n        dbId,\n        templateParams,\n        datasourceName: this.state.newSaveDatasetName,\n        columns: selectedColumns }).\n\n      then((data) => {\n        exploreChart({\n          datasource: `${data.table_id}__table`,\n          metrics: [],\n          groupby: [],\n          time_range: 'No filter',\n          viz_type: 'table',\n          all_columns: selectedColumns.map((c) => c.name),\n          row_limit: 1000 });\n\n      }).\n      catch(() => {\n        this.props.actions.addDangerToast(t('An error occurred saving dataset'));\n      });\n      this.setState({\n        showSaveDatasetModal: false,\n        newSaveDatasetName: this.getDefaultDatasetName() });\n\n    };this.\n    handleOverwriteDatasetOption = (_data, option) => {\n      this.setState({ datasetToOverwrite: option });\n    };this.\n    handleDatasetNameChange = (e) => {\n      // @ts-expect-error\n      this.setState({ newSaveDatasetName: e.target.value });\n    };this.\n    handleHideSaveModal = () => {\n      this.setState({\n        showSaveDatasetModal: false,\n        shouldOverwriteDataSet: false });\n\n    };this.\n    handleSaveDatasetRadioBtnState = (e) => {\n      this.setState({ saveDatasetRadioBtnState: Number(e.target.value) });\n    };this.\n    handleOverwriteCancel = () => {\n      this.setState({ shouldOverwriteDataSet: false, datasetToOverwrite: {} });\n    };this.\n    handleExploreBtnClick = () => {\n      this.setState({\n        showSaveDatasetModal: true });\n\n    };this.\n    getUserDatasets = async (searchText = '') => {\n      // Making sure that autocomplete input has a value before rendering the dropdown\n      // Transforming the userDatasetsOwned data for SaveModalComponent)\n      const { userId } = this.props.user;\n      if (userId) {\n        const queryParams = rison.encode({\n          filters: [\n          {\n            col: 'table_name',\n            opr: 'ct',\n            value: searchText },\n\n          {\n            col: 'owners',\n            opr: 'rel_m_m',\n            value: userId }],\n\n\n          order_column: 'changed_on_delta_humanized',\n          order_direction: 'desc' });\n\n        const response = await makeApi({\n          method: 'GET',\n          endpoint: '/api/v1/dataset' })(\n        `q=${queryParams}`);\n        return response.result.map((r) => ({\n          value: r.table_name,\n          datasetId: r.id,\n          owners: r.owners }));\n\n      }\n      return null;\n    };this.\n    handleSaveDatasetModalSearch = async (searchText) => {\n      const userDatasetsOwned = await this.getUserDatasets(searchText);\n      this.setState({ userDatasetOptions: userDatasetsOwned });\n    };this.\n    handleFilterAutocompleteOption = (inputValue, option) => option.value.toLowerCase().includes(inputValue.toLowerCase());this.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    onAlertClose = () => {\n      this.setState({ alertIsOpen: false });\n    };this.state = { searchText: '', showExploreResultsButton: false, data: [], showSaveDatasetModal: false, newSaveDatasetName: this.getDefaultDatasetName(), saveDatasetRadioBtnState: DatasetRadioState.SAVE_NEW, shouldOverwriteDataSet: false, datasetToOverwrite: {}, saveModalAutocompleteValue: '', userDatasetOptions: [], alertIsOpen: false };this.changeSearch = this.changeSearch.bind(this);this.fetchResults = this.fetchResults.bind(this);this.popSelectStar = this.popSelectStar.bind(this);this.reFetchQueryResults = this.reFetchQueryResults.bind(this);this.toggleExploreResultsButton = this.toggleExploreResultsButton.bind(this);this.handleSaveInDataset = this.handleSaveInDataset.bind(this);this.handleHideSaveModal = this.handleHideSaveModal.bind(this);this.handleDatasetNameChange = this.handleDatasetNameChange.bind(this);this.handleSaveDatasetRadioBtnState = this.handleSaveDatasetRadioBtnState.bind(this);this.handleOverwriteCancel = this.handleOverwriteCancel.bind(this);this.handleOverwriteDataset = this.handleOverwriteDataset.bind(this);this.handleOverwriteDatasetOption = this.handleOverwriteDatasetOption.bind(this);this.handleSaveDatasetModalSearch = _debounce(this.handleSaveDatasetModalSearch.bind(this), 1000);this.handleFilterAutocompleteOption = this.handleFilterAutocompleteOption.bind(this);this.handleOnChangeAutoComplete = this.handleOnChangeAutoComplete.bind(this);this.handleExploreBtnClick = this.handleExploreBtnClick.bind(this);}async componentDidMount() {// only do this the first time the component is rendered/mounted\n    this.reRunQueryIfSessionTimeoutErrorOnMount();const userDatasetsOwned = await this.getUserDatasets();this.setState({ userDatasetOptions: userDatasetsOwned });}UNSAFE_componentWillReceiveProps(nextProps) {// when new results comes in, save them locally and clear in store\n    if (this.props.cache && !nextProps.query.cached && nextProps.query.results && nextProps.query.results.data && nextProps.query.results.data.length > 0) {this.setState({ data: nextProps.query.results.data }, () => this.clearQueryResults(nextProps.query));}if (nextProps.query.resultsKey && nextProps.query.resultsKey !== this.props.query.resultsKey) {this.fetchResults(nextProps.query);}}clearQueryResults(query) {this.props.actions.clearQueryResults(query);}popSelectStar(tempSchema, tempTable) {const qe = { id: shortid.generate(), title: tempTable, autorun: false, dbId: this.props.query.dbId, sql: `SELECT * FROM ${tempSchema ? `${tempSchema}.` : ''}${tempTable}` };this.props.actions.addQueryEditor(qe);}toggleExploreResultsButton() {this.setState((prevState) => ({ showExploreResultsButton: !prevState.showExploreResultsButton }));}changeSearch(event) {this.setState({ searchText: event.target.value });}fetchResults(query) {this.props.actions.fetchQueryResults(query, this.props.displayLimit);}reFetchQueryResults(query) {this.props.actions.reFetchQueryResults(query);}reRunQueryIfSessionTimeoutErrorOnMount() {const { query } = this.props;if (query.errorMessage && query.errorMessage.indexOf('session timed out') > 0) {this.props.actions.reRunQuery(query);}}renderControls() {if (this.props.search || this.props.visualize || this.props.csv) {let { data } = this.props.query.results;if (this.props.cache && this.props.query.cached) {({ data } = this.state);}const { columns } = this.props.query.results; // Added compute logic to stop user from being able to Save & Explore\n      const { saveDatasetRadioBtnState, newSaveDatasetName, datasetToOverwrite, saveModalAutocompleteValue, shouldOverwriteDataSet, userDatasetOptions, showSaveDatasetModal } = this.state;const disableSaveAndExploreBtn = saveDatasetRadioBtnState === DatasetRadioState.SAVE_NEW && newSaveDatasetName.length === 0 || saveDatasetRadioBtnState === DatasetRadioState.OVERWRITE_DATASET && Object.keys(datasetToOverwrite).length === 0 && saveModalAutocompleteValue.length === 0;return ___EmotionJSX(ResultSetControls, { __self: this, __source: { fileName: _jsxFileName, lineNumber: 354, columnNumber: 21 } }, ___EmotionJSX(SaveDatasetModal, { visible: showSaveDatasetModal, onOk: this.handleSaveInDataset, saveDatasetRadioBtnState: saveDatasetRadioBtnState, shouldOverwriteDataset: shouldOverwriteDataSet, defaultCreateDatasetValue: newSaveDatasetName, userDatasetOptions: userDatasetOptions, disableSaveAndExploreBtn: disableSaveAndExploreBtn, onHide: this.handleHideSaveModal, handleDatasetNameChange: this.handleDatasetNameChange, handleSaveDatasetRadioBtnState: this.handleSaveDatasetRadioBtnState, handleOverwriteCancel: this.handleOverwriteCancel, handleOverwriteDataset: this.handleOverwriteDataset, handleOverwriteDatasetOption: this.handleOverwriteDatasetOption, handleSaveDatasetModalSearch: this.handleSaveDatasetModalSearch, filterAutocompleteOption: this.handleFilterAutocompleteOption, onChangeAutoComplete: this.handleOnChangeAutoComplete, __self: this, __source: { fileName: _jsxFileName, lineNumber: 355, columnNumber: 11 } }), ___EmotionJSX(ResultSetButtons, { __self: this, __source: { fileName: _jsxFileName, lineNumber: 356, columnNumber: 11 } }, this.props.visualize && this.props.database && this.props.database.allows_virtual_table_explore && ___EmotionJSX(ExploreResultsButton // @ts-ignore Redux types are difficult to work with, ignoring for now\n      , { query: this.props.query, database: this.props.database, actions: this.props.actions, onClick: this.handleExploreBtnClick, __self: this, __source: { fileName: _jsxFileName, lineNumber: 359, columnNumber: 74 } }), this.props.csv && ___EmotionJSX(Button, { buttonSize: \"small\", href: `/superset/csv/${this.props.query.id}`, __self: this, __source: { fileName: _jsxFileName, lineNumber: 362, columnNumber: 33 } }, ___EmotionJSX(\"i\", { className: \"fa fa-file-text-o\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 363, columnNumber: 17 } }), \" \", t('Download to CSV')), ___EmotionJSX(CopyToClipboard, { text: prepareCopyToClipboardTabularData(data, columns), wrapped: false, copyNode: ___EmotionJSX(Button, { buttonSize: \"small\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 366, columnNumber: 112 } }, ___EmotionJSX(\"i\", { className: \"fa fa-clipboard\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 367, columnNumber: 19 } }), \" \", t('Copy to Clipboard')), __self: this, __source: { fileName: _jsxFileName, lineNumber: 366, columnNumber: 13 } })), this.props.search && ___EmotionJSX(\"input\", { type: \"text\", onChange: this.changeSearch, value: this.state.searchText, className: \"form-control input-sm\", placeholder: t('Filter results'), __self: this, __source: { fileName: _jsxFileName, lineNumber: 370, columnNumber: 34 } }));}return ___EmotionJSX(\"div\", { __self: this, __source: { fileName: _jsxFileName, lineNumber: 373, columnNumber: 16 } });}renderRowsReturned() {var _this$props$user, _this$props$user$role;const { results, rows, queryLimit, limitingFactor } = this.props.query;let limitMessage;const limitReached = results == null ? void 0 : results.displayLimitReached;\n    const limit = queryLimit || results.query.limit;\n    const isAdmin = !!((_this$props$user = this.props.user) != null && (_this$props$user$role = _this$props$user.roles) != null && _this$props$user$role.Admin);\n    const displayMaxRowsReachedMessage = {\n      withAdmin: t(`The number of results displayed is limited to %(rows)d by the configuration DISPLAY_MAX_ROWS. `, { rows }).concat(t(`Please add additional limits/filters or download to csv to see more rows up to `), t(`the %(limit)d limit.`, { limit })),\n      withoutAdmin: t(`The number of results displayed is limited to %(rows)d. `, { rows }).concat(t(`Please add additional limits/filters, download to csv, or contact an admin `), t(`to see more rows up to the %(limit)d limit.`, {\n        limit })) };\n\n\n    const shouldUseDefaultDropdownAlert = limit === this.props.defaultQueryLimit &&\n    limitingFactor === LIMITING_FACTOR.DROPDOWN;\n    if (limitingFactor === LIMITING_FACTOR.QUERY && this.props.csv) {\n      limitMessage = ___EmotionJSX(\"span\", { className: \"limitMessage\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 393, columnNumber: 29 } },\n      t(`The number of rows displayed is limited to %(rows)d by the query`, { rows }));\n\n    } else\n    if (limitingFactor === LIMITING_FACTOR.DROPDOWN &&\n    !shouldUseDefaultDropdownAlert) {\n      limitMessage = ___EmotionJSX(\"span\", { className: \"limitMessage\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 399, columnNumber: 29 } },\n      t(`The number of rows displayed is limited to %(rows)d by the limit dropdown.`, { rows }));\n\n    } else\n    if (limitingFactor === LIMITING_FACTOR.QUERY_AND_DROPDOWN) {\n      limitMessage = ___EmotionJSX(\"span\", { className: \"limitMessage\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 404, columnNumber: 29 } },\n      t(`The number of rows displayed is limited to %(rows)d by the query and limit dropdown.`, { rows }));\n\n    }\n    return ___EmotionJSX(ReturnedRows, { __self: this, __source: { fileName: _jsxFileName, lineNumber: 408, columnNumber: 17 } },\n    !limitReached && !shouldUseDefaultDropdownAlert && ___EmotionJSX(\"span\", { __self: this, __source: { fileName: _jsxFileName, lineNumber: 409, columnNumber: 62 } },\n    t(`%(rows)d rows returned`, { rows }), \" \", limitMessage),\n\n    !limitReached && shouldUseDefaultDropdownAlert && ___EmotionJSX(\"div\", { ref: this.calculateAlertRefHeight, __self: this, __source: { fileName: _jsxFileName, lineNumber: 412, columnNumber: 61 } },\n    ___EmotionJSX(Alert, { type: \"warning\", message: t(`%(rows)d rows returned`, { rows }), onClose: this.onAlertClose, description: t(`The number of rows displayed is limited to %s by the dropdown.`, rows), __self: this, __source: { fileName: _jsxFileName, lineNumber: 413, columnNumber: 13 } })),\n\n    limitReached && ___EmotionJSX(\"div\", { ref: this.calculateAlertRefHeight, __self: this, __source: { fileName: _jsxFileName, lineNumber: 415, columnNumber: 27 } },\n    ___EmotionJSX(Alert, { type: \"warning\", onClose: this.onAlertClose, message: t(`%(rows)d rows returned`, { rows }), description: isAdmin ?\n      displayMaxRowsReachedMessage.withAdmin :\n      displayMaxRowsReachedMessage.withoutAdmin, __self: this, __source: { fileName: _jsxFileName, lineNumber: 416, columnNumber: 13 } })));\n\n\n  }\n  render() {\n    const { query } = this.props;\n    let sql;\n    let exploreDBId = query.dbId;\n    if (this.props.database && this.props.database.explore_database_id) {\n      exploreDBId = this.props.database.explore_database_id;\n    }\n    if (this.props.showSql) {\n      sql = ___EmotionJSX(HighlightedSql, { sql: query.sql, __self: this, __source: { fileName: _jsxFileName, lineNumber: 430, columnNumber: 19 } });\n    }\n    if (query.state === 'stopped') {\n      return ___EmotionJSX(Alert, { type: \"warning\", message: t('Query was stopped'), __self: this, __source: { fileName: _jsxFileName, lineNumber: 433, columnNumber: 20 } });\n    }\n    if (query.state === 'failed') {var _query$errors;\n      return ___EmotionJSX(ResultSetErrorMessage, { __self: this, __source: { fileName: _jsxFileName, lineNumber: 436, columnNumber: 21 } },\n      ___EmotionJSX(ErrorMessageWithStackTrace, { title: t('Database error'), error: query == null ? void 0 : (_query$errors = query.errors) == null ? void 0 : _query$errors[0], subtitle: ___EmotionJSX(MonospaceDiv, { __self: this, __source: { fileName: _jsxFileName, lineNumber: 437, columnNumber: 104 } }, query.errorMessage), copyText: query.errorMessage || undefined, link: query.link, source: \"sqllab\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 437, columnNumber: 11 } }));\n\n    }\n    if (query.state === 'success' && query.ctas) {\n      const { tempSchema, tempTable } = query;\n      let object = 'Table';\n      if (query.ctas_method === CtasEnum.VIEW) {\n        object = 'View';\n      }\n      return ___EmotionJSX(\"div\", { __self: this, __source: { fileName: _jsxFileName, lineNumber: 446, columnNumber: 21 } },\n      ___EmotionJSX(Alert, { type: \"info\", message: ___EmotionJSX(React.Fragment, null,\n        t(object), \" [\",\n        ___EmotionJSX(\"strong\", { __self: this, __source: { fileName: _jsxFileName, lineNumber: 449, columnNumber: 17 } },\n        tempSchema ? `${tempSchema}.` : '',\n        tempTable), \"] \",\n\n        t('was created'), \" \\xA0\",\n        ___EmotionJSX(ButtonGroup, { __self: this, __source: { fileName: _jsxFileName, lineNumber: 454, columnNumber: 17 } },\n        ___EmotionJSX(Button, { buttonSize: \"small\", className: \"m-r-5\", onClick: () => this.popSelectStar(tempSchema, tempTable), __self: this, __source: { fileName: _jsxFileName, lineNumber: 455, columnNumber: 19 } },\n        t('Query in a new tab')),\n\n        ___EmotionJSX(ExploreCtasResultsButton\n        // @ts-ignore Redux types are difficult to work with, ignoring for now\n        , { table: tempTable, schema: tempSchema, dbId: exploreDBId, database: this.props.database, actions: this.props.actions, __self: this, __source: { fileName: _jsxFileName, lineNumber: 458, columnNumber: 19 } }))), __self: this, __source: { fileName: _jsxFileName, lineNumber: 447, columnNumber: 11 } }));\n\n\n\n    }\n    if (query.state === 'success' && query.results) {\n      const { results } = query;\n      const height = this.state.alertIsOpen ?\n      this.props.height - 70 :\n      this.props.height;\n      let data;\n      if (this.props.cache && query.cached) {\n        ({ data } = this.state);\n      } else\n      if (results && results.data) {\n        ({ data } = results);\n      }\n      if (data && data.length > 0) {\n        const expandedColumns = results.expanded_columns ?\n        results.expanded_columns.map((col) => col.name) :\n        [];\n        return ___EmotionJSX(React.Fragment, null,\n        this.renderControls(),\n        this.renderRowsReturned(),\n        sql,\n        ___EmotionJSX(FilterableTable, { data: data, orderedColumnKeys: results.columns.map((col) => col.name), height: height, filterText: this.state.searchText, expandedColumns: expandedColumns, __self: this, __source: { fileName: _jsxFileName, lineNumber: 485, columnNumber: 13 } }));\n\n      }\n      if (data && data.length === 0) {\n        return ___EmotionJSX(Alert, { type: \"warning\", message: t('The query returned no data'), __self: this, __source: { fileName: _jsxFileName, lineNumber: 489, columnNumber: 25 } });\n      }\n    }\n    if (query.cached || query.state === 'success' && !query.results) {\n      if (query.isDataPreview) {\n        return ___EmotionJSX(Button, { buttonSize: \"small\", buttonStyle: \"primary\", onClick: () => this.reFetchQueryResults({\n            ...query,\n            isDataPreview: true }), __self: this, __source: { fileName: _jsxFileName, lineNumber: 494, columnNumber: 25 } },\n\n        t('Fetch data preview'));\n\n      }\n      if (query.resultsKey) {\n        return ___EmotionJSX(Button, { buttonSize: \"small\", buttonStyle: \"primary\", onClick: () => this.fetchResults(query), __self: this, __source: { fileName: _jsxFileName, lineNumber: 502, columnNumber: 25 } },\n        t('Refetch results'));\n\n      }\n    }\n    let progressBar;\n    let trackingUrl;\n    if (query.progress > 0) {\n      progressBar = ___EmotionJSX(ProgressBar, { percent: parseInt(query.progress.toFixed(0), 10), striped: true, __self: this, __source: { fileName: _jsxFileName, lineNumber: 510, columnNumber: 28 } });\n    }\n    if (query.trackingUrl) {\n      trackingUrl = ___EmotionJSX(Button, { buttonSize: \"small\", onClick: () => query.trackingUrl && window.open(query.trackingUrl), __self: this, __source: { fileName: _jsxFileName, lineNumber: 513, columnNumber: 28 } },\n      t('Track job'));\n\n    }\n    const progressMsg = query && query.extra && query.extra.progress ?\n    query.extra.progress :\n    null;\n    return ___EmotionJSX(\"div\", { style: LOADING_STYLES, __self: this, __source: { fileName: _jsxFileName, lineNumber: 520, columnNumber: 17 } },\n    ___EmotionJSX(\"div\", { __self: this, __source: { fileName: _jsxFileName, lineNumber: 521, columnNumber: 9 } }, !progressBar && ___EmotionJSX(Loading, { position: \"normal\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 521, columnNumber: 31 } })),\n    ___EmotionJSX(QueryStateLabel, { query: query, __self: this, __source: { fileName: _jsxFileName, lineNumber: 522, columnNumber: 9 } }),\n    ___EmotionJSX(\"div\", { __self: this, __source: { fileName: _jsxFileName, lineNumber: 523, columnNumber: 9 } },\n    progressMsg && ___EmotionJSX(Alert, { type: \"success\", message: progressMsg, __self: this, __source: { fileName: _jsxFileName, lineNumber: 524, columnNumber: 27 } })),\n\n    ___EmotionJSX(\"div\", { __self: this, __source: { fileName: _jsxFileName, lineNumber: 526, columnNumber: 9 } }, progressBar),\n    ___EmotionJSX(\"div\", { __self: this, __source: { fileName: _jsxFileName, lineNumber: 527, columnNumber: 9 } }, trackingUrl));\n\n  } // @ts-ignore\n  __reactstandin__regenerateByEval(key, code) {// @ts-ignore\n    this[key] = eval(code);}}ResultSet.defaultProps = { cache: false, csv: true, database: {}, search: true, showSql: false, visualize: true };;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(DatasetRadioState, \"DatasetRadioState\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/components/ResultSet/index.tsx\");reactHotLoader.register(EXPLORE_CHART_DEFAULT, \"EXPLORE_CHART_DEFAULT\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/components/ResultSet/index.tsx\");reactHotLoader.register(LIMITING_FACTOR, \"LIMITING_FACTOR\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/components/ResultSet/index.tsx\");reactHotLoader.register(LOADING_STYLES, \"LOADING_STYLES\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/components/ResultSet/index.tsx\");reactHotLoader.register(MonospaceDiv, \"MonospaceDiv\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/components/ResultSet/index.tsx\");reactHotLoader.register(ReturnedRows, \"ReturnedRows\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/components/ResultSet/index.tsx\");reactHotLoader.register(ResultSetControls, \"ResultSetControls\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/components/ResultSet/index.tsx\");reactHotLoader.register(ResultSetButtons, \"ResultSetButtons\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/components/ResultSet/index.tsx\");reactHotLoader.register(ResultSetErrorMessage, \"ResultSetErrorMessage\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/components/ResultSet/index.tsx\");reactHotLoader.register(updateDataset, \"updateDataset\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/components/ResultSet/index.tsx\");reactHotLoader.register(ResultSet, \"ResultSet\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/components/ResultSet/index.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/components/ResultSet/index.tsx"],"names":[],"mappings":"icAAA;;;;;;;;;;;;;;;;;AAiBG;AACH,OAAO,KAAP,MAAqC,OAArC;AACA,OAAO,WAAP,MAAwB,4BAAxB;AACA,OAAO,KAAP,MAAkB,sBAAlB;AACA,OAAO,WAAP,MAAwB,4BAAxB;AACA,OAAO,MAAP,MAAmB,QAAnB;AAEA,OAAO,MAAP,MAAmB,uBAAnB;AACA,OAAO,OAAP,MAAoB,SAApB;AACA,OAAO,KAAP,MAAkB,OAAlB;AACA,SACE,MADF,EAEE,CAFF,EAGE,OAHF,EAIE,cAJF,QAMO,mBANP;;AAQA,OAAO,0BAAP,MAAuC,wDAAvC;AACA,SAAS,gBAAT,QAAiC,wCAAjC;AAEA,OAAO,OAAP,MAAoB,wBAApB;AACA,OAAO,eAAP,MAA4B,gDAA5B;AACA,OAAO,eAAP,MAA4B,gCAA5B;AACA,SAAS,iCAAT,QAAkD,kBAAlD;AACA,SAAS,YAAT,QAA6B,0BAA7B;AACA,SAAS,QAAT,QAAyB,2BAAzB;AAEA,OAAO,wBAAP,MAAqC,6BAArC;AACA,OAAO,oBAAP,MAAiC,yBAAjC;AACA,OAAO,cAAP,MAA2B,mBAA3B;AACA,OAAO,eAAP,MAA4B,oBAA5B,C;AAEA,IAAK,iBAAL;AAAA,CAAA,UAAK,iBAAL,EAAsB;AACpB,EAAA,iBAAA,CAAA,iBAAA,CAAA,UAAA,CAAA,GAAA,CAAA,CAAA,GAAA,UAAA;AACA,EAAA,iBAAA,CAAA,iBAAA,CAAA,mBAAA,CAAA,GAAA,CAAA,CAAA,GAAA,mBAAA;AACD,CAHD,EAAK,iBAAiB,KAAjB,iBAAiB,GAAA,EAAA,CAAtB;AAKA,MAAM,qBAAqB,GAAG;AAC5B,EAAA,OAAO,EAAE,EADmB;AAE5B,EAAA,OAAO,EAAE,EAFmB;AAG5B,EAAA,UAAU,EAAE,WAHgB;AAI5B,EAAA,QAAQ,EAAE,OAJkB,EAA9B;;AAOA,IAAK,eAAL;AAAA,CAAA,UAAK,eAAL,EAAoB;AAClB,EAAA,eAAA,CAAA,OAAA,CAAA,GAAA,OAAA;AACA,EAAA,eAAA,CAAA,oBAAA,CAAA,GAAA,oBAAA;AACA,EAAA,eAAA,CAAA,UAAA,CAAA,GAAA,UAAA;AACA,EAAA,eAAA,CAAA,aAAA,CAAA,GAAA,aAAA;AACD,CALD,EAAK,eAAe,KAAf,eAAe,GAAA,EAAA,CAApB;AAOA,MAAM,cAAc,GAAkB,EAAE,QAAQ,EAAE,UAAZ,EAAwB,SAAS,EAAE,GAAnC,EAAtC;AA6CA;AACA;AACA,MAAM,YAAY,GAAG,MAAM,CAAC,GAAG;iBACd,CAAC,EAAE,KAAF,EAAD,KAAe,KAAK,CAAC,UAAN,CAAiB,QAAjB,CAA0B,SAAS;;;;;AAKlE,CAND;AAQA,MAAM,YAAY,GAAG,MAAM,CAAC,GAAG;;;;aAIlB,CAAC,EAAE,KAAF,EAAD,KAAe,KAAK,CAAC,MAAN,CAAa,SAAb,CAAuB,MAAM;mBACtC,CAAC,EAAE,KAAF,EAAD,KAAe,KAAK,CAAC,QAAN,GAAiB,CAAC;;AAEnD,CAPD;AAQA,MAAM,iBAAiB,GAAG,MAAM,CAAC,GAAG;;;aAGvB,CAAC,EAAE,KAAF,EAAD,KAAe,IAAI,KAAK,CAAC,QAAQ;AAC7C,CAJD;AAMA,MAAM,gBAAgB,GAAG,MAAM,CAAC,GAAG;;;mBAGhB,CAAC,EAAE,KAAF,EAAD,KAAe,IAAI,KAAK,CAAC,QAAQ;AACnD,CAJD;AAMA,MAAM,qBAAqB,GAAG,MAAM,CAAC,GAAG;iBACvB,CAAC,EAAE,KAAF,EAAD,KAAe,IAAI,KAAK,CAAC,QAAQ;AACjD,CAFD;AAIA,MAAM,aAAa,GAAG,OACpB,SADoB,EAEpB,GAFoB,EAGpB,OAHoB,EAIpB,MAJoB,EAKpB,eALoB,KAMlB;AACF,QAAM,QAAQ,GAAG,kBAAkB,SAAS,qBAAqB,eAAe,EAAhF;AACA,QAAM,OAAO,GAAG,EAAE,gBAAgB,kBAAlB,EAAhB;AACA,QAAM,IAAI,GAAG,IAAI,CAAC,SAAL,CAAe;AAC1B,IAAA,GAD0B;AAE1B,IAAA,OAF0B;AAG1B,IAAA,MAH0B,EAAf,CAAb;;AAMA,QAAM,IAAI,GAAiB,MAAM,cAAc,CAAC,GAAf,CAAmB;AAClD,IAAA,QADkD;AAElD,IAAA,OAFkD;AAGlD,IAAA,IAHkD,EAAnB,CAAjC;;AAKA,SAAO,IAAI,CAAC,IAAL,CAAU,MAAjB;AACD,CArBD;AAuBA,eAAc,MAAO,SAAP,SAAyB,KAAK,CAAC,aAA/B,CAGb;;;;;;;;;AAUC,EAAA,WAAA,CAAY,KAAZ,EAAiC;AAC/B,UAAM,KAAN,EAD+B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0EjC,IAAA,uBA1EiC,GA0EP,CAAC,YAAD,KAAqC;AAC7D,UAAI,YAAJ,EAAkB;AAChB,aAAK,QAAL,CAAc,EAAE,WAAW,EAAE,IAAf,EAAd;AACD,OAFD;AAEO;AACL,aAAK,QAAL,CAAc,EAAE,WAAW,EAAE,KAAf,EAAd;AACD;AACF,KAhFgC;AAkFjC,IAAA,qBAlFiC,GAkFT,MACtB,GAAG,KAAK,KAAL,CAAW,KAAX,CAAiB,GAAG,IAAI,MAAM,GAAG,MAAT,CAAgB,qBAAhB,CAAsC,EAnFlC;AAqFjC,IAAA,0BArFiC,GAqFJ,MAAK;AAChC,WAAK,QAAL,CAAc,EAAE,kBAAkB,EAAE,EAAtB,EAAd;AACD,KAvFgC;AAyFjC,IAAA,sBAzFiC,GAyFR,YAAW;AAClC,YAAM,EAAE,GAAF,EAAO,OAAP,KAAmB,KAAK,KAAL,CAAW,KAApC;AACA,YAAM,EAAE,kBAAF,KAAyB,KAAK,KAApC;AAEA,YAAM,aAAa,CACjB,kBAAkB,CAAC,SADF,EAEjB,GAFiB,EAGjB,OAAO,CAAC,gBAAR,CAAyB,GAAzB,CAA6B,CAAA,CAAC,MAAK,EAAE,WAAW,EAAE,CAAC,CAAC,IAAjB,EAAL,CAA9B,CAHiB,EAIjB,kBAAkB,CAAC,MAAnB,CAA0B,GAA1B,CAA8B,CAAC,CAAD,KAAqB,CAAC,CAAC,EAArD,CAJiB,EAKjB,IALiB,CAAnB;AAQA,WAAK,QAAL,CAAc;AACZ,QAAA,oBAAoB,EAAE,KADV;AAEZ,QAAA,sBAAsB,EAAE,KAFZ;AAGZ,QAAA,kBAAkB,EAAE,EAHR;AAIZ,QAAA,kBAAkB,EAAE,KAAK,qBAAL,EAJR,EAAd;;AAOA,MAAA,YAAY,CAAC;AACX,WAAG,qBADQ;AAEX,QAAA,UAAU,EAAE,GAAG,kBAAkB,CAAC,SAAS,SAFhC;AAGX,QAAA,WAAW,EAAE,OAAO,CAAC,gBAAR,CAAyB,GAAzB,CAA6B,CAAA,CAAC,KAAI,CAAC,CAAC,IAApC,CAHF,EAAD,CAAZ;;AAKD,KAjHgC;AAmHjC,IAAA,mBAnHiC,GAmHX,MAAK;AACzB;AACA,UACE,KAAK,KAAL,CAAW,wBAAX;AACA,MAAA,iBAAiB,CAAC,iBAFpB,EAGE;AACA,aAAK,QAAL,CAAc,EAAE,sBAAsB,EAAE,IAA1B,EAAd;AACA;AACD;AAED,YAAM,EAAE,MAAF,EAAU,GAAV,EAAe,IAAf,KAAwB,KAAK,KAAL,CAAW,KAAzC;AACA,UAAI,EAAE,cAAF,KAAqB,KAAK,KAAL,CAAW,KAApC;AACA,YAAM,eAAe,GAAG,2BAAK,KAAL,CAAW,KAAX,gEAAkB,OAAlB,2CAA2B,gBAA3B,KAA+C,EAAvE;AAEA;AACA;AACA;AACA,UAAI,cAAJ,EAAoB;AAClB,cAAM,CAAC,GAAG,IAAI,CAAC,KAAL,CAAW,cAAX,CAAV;AACA;AACA,YAAI,CAAC,CAAC,QAAN,EAAgB;AACd;AACA,iBAAO,CAAC,CAAC,QAAT;AACA,UAAA,cAAc,GAAG,IAAI,CAAC,SAAL,CAAe,CAAf,CAAjB;AACD;AACF;AAED,WAAK,KAAL,CAAW,OAAX;AACG,MAAA,gBADH,CACoB;AAChB,QAAA,MADgB;AAEhB,QAAA,GAFgB;AAGhB,QAAA,IAHgB;AAIhB,QAAA,cAJgB;AAKhB,QAAA,cAAc,EAAE,KAAK,KAAL,CAAW,kBALX;AAMhB,QAAA,OAAO,EAAE,eANO,EADpB;;AASG,MAAA,IATH,CASQ,CAAC,IAAD,KAA+B;AACnC,QAAA,YAAY,CAAC;AACX,UAAA,UAAU,EAAE,GAAG,IAAI,CAAC,QAAQ,SADjB;AAEX,UAAA,OAAO,EAAE,EAFE;AAGX,UAAA,OAAO,EAAE,EAHE;AAIX,UAAA,UAAU,EAAE,WAJD;AAKX,UAAA,QAAQ,EAAE,OALC;AAMX,UAAA,WAAW,EAAE,eAAe,CAAC,GAAhB,CAAoB,CAAA,CAAC,KAAI,CAAC,CAAC,IAA3B,CANF;AAOX,UAAA,SAAS,EAAE,IAPA,EAAD,CAAZ;;AASD,OAnBH;AAoBG,MAAA,KApBH,CAoBS,MAAK;AACV,aAAK,KAAL,CAAW,OAAX,CAAmB,cAAnB,CACE,CAAC,CAAC,kCAAD,CADH;AAGD,OAxBH;AA0BA,WAAK,QAAL,CAAc;AACZ,QAAA,oBAAoB,EAAE,KADV;AAEZ,QAAA,kBAAkB,EAAE,KAAK,qBAAL,EAFR,EAAd;;AAID,KA5KgC;AA8KjC,IAAA,4BA9KiC,GA8KF,CAC7B,KAD6B,EAE7B,MAF6B,KAG3B;AACF,WAAK,QAAL,CAAc,EAAE,kBAAkB,EAAE,MAAtB,EAAd;AACD,KAnLgC;AAqLjC,IAAA,uBArLiC,GAqLP,CAAC,CAAD,KAAyC;AACjE;AACA,WAAK,QAAL,CAAc,EAAE,kBAAkB,EAAE,CAAC,CAAC,MAAF,CAAS,KAA/B,EAAd;AACD,KAxLgC;AA0LjC,IAAA,mBA1LiC,GA0LX,MAAK;AACzB,WAAK,QAAL,CAAc;AACZ,QAAA,oBAAoB,EAAE,KADV;AAEZ,QAAA,sBAAsB,EAAE,KAFZ,EAAd;;AAID,KA/LgC;AAiMjC,IAAA,8BAjMiC,GAiMA,CAAC,CAAD,KAAwB;AACvD,WAAK,QAAL,CAAc,EAAE,wBAAwB,EAAE,MAAM,CAAC,CAAC,CAAC,MAAF,CAAS,KAAV,CAAlC,EAAd;AACD,KAnMgC;AAqMjC,IAAA,qBArMiC,GAqMT,MAAK;AAC3B,WAAK,QAAL,CAAc,EAAE,sBAAsB,EAAE,KAA1B,EAAiC,kBAAkB,EAAE,EAArD,EAAd;AACD,KAvMgC;AAyMjC,IAAA,qBAzMiC,GAyMT,MAAK;AAC3B,WAAK,QAAL,CAAc;AACZ,QAAA,oBAAoB,EAAE,IADV,EAAd;;AAGD,KA7MgC;AA+MjC,IAAA,eA/MiC,GA+Mf,OAAO,UAAU,GAAG,EAApB,KAA0B;AAC1C;AACA;AACA,YAAM,EAAE,MAAF,KAAa,KAAK,KAAL,CAAW,IAA9B;AACA,UAAI,MAAJ,EAAY;AACV,cAAM,WAAW,GAAG,KAAK,CAAC,MAAN,CAAa;AAC/B,UAAA,OAAO,EAAE;AACP;AACE,YAAA,GAAG,EAAE,YADP;AAEE,YAAA,GAAG,EAAE,IAFP;AAGE,YAAA,KAAK,EAAE,UAHT,EADO;;AAMP;AACE,YAAA,GAAG,EAAE,QADP;AAEE,YAAA,GAAG,EAAE,SAFP;AAGE,YAAA,KAAK,EAAE,MAHT,EANO,CADsB;;;AAa/B,UAAA,YAAY,EAAE,4BAbiB;AAc/B,UAAA,eAAe,EAAE,MAdc,EAAb,CAApB;;AAiBA,cAAM,QAAQ,GAAG,MAAM,OAAO,CAAC;AAC7B,UAAA,MAAM,EAAE,KADqB;AAE7B,UAAA,QAAQ,EAAE,iBAFmB,EAAD,CAAP;AAGpB,aAAK,WAAW,EAHI,CAAvB;AAKA,eAAO,QAAQ,CAAC,MAAT,CAAgB,GAAhB,CACL,CAAC,CAAD,MAAoE;AAClE,UAAA,KAAK,EAAE,CAAC,CAAC,UADyD;AAElE,UAAA,SAAS,EAAE,CAAC,CAAC,EAFqD;AAGlE,UAAA,MAAM,EAAE,CAAC,CAAC,MAHwD,EAApE,CADK,CAAP;;AAOD;AAED,aAAO,IAAP;AACD,KApPgC;AAsPjC,IAAA,4BAtPiC,GAsPF,OAAO,UAAP,KAA6B;AAC1D,YAAM,iBAAiB,GAAG,MAAM,KAAK,eAAL,CAAqB,UAArB,CAAhC;AACA,WAAK,QAAL,CAAc,EAAE,kBAAkB,EAAE,iBAAtB,EAAd;AACD,KAzPgC;AA2PjC,IAAA,8BA3PiC,GA2PA,CAC/B,UAD+B,EAE/B,MAF+B,KAG5B,MAAM,CAAC,KAAP,CAAa,WAAb,GAA2B,QAA3B,CAAoC,UAAU,CAAC,WAAX,EAApC,CA9P4B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqYjC,IAAA,YArYiC,GAqYlB,MAAK;AAClB,WAAK,QAAL,CAAc,EAAE,WAAW,EAAE,KAAf,EAAd;AACD,KAvYgC,CAE/B,KAAK,KAAL,GAAa,EACX,UAAU,EAAE,EADD,EAEX,wBAAwB,EAAE,KAFf,EAGX,IAAI,EAAE,EAHK,EAIX,oBAAoB,EAAE,KAJX,EAKX,kBAAkB,EAAE,KAAK,qBAAL,EALT,EAMX,wBAAwB,EAAE,iBAAiB,CAAC,QANjC,EAOX,sBAAsB,EAAE,KAPb,EAQX,kBAAkB,EAAE,EART,EASX,0BAA0B,EAAE,EATjB,EAUX,kBAAkB,EAAE,EAVT,EAWX,WAAW,EAAE,KAXF,EAAb,CAaA,KAAK,YAAL,GAAoB,KAAK,YAAL,CAAkB,IAAlB,CAAuB,IAAvB,CAApB,CACA,KAAK,YAAL,GAAoB,KAAK,YAAL,CAAkB,IAAlB,CAAuB,IAAvB,CAApB,CACA,KAAK,aAAL,GAAqB,KAAK,aAAL,CAAmB,IAAnB,CAAwB,IAAxB,CAArB,CACA,KAAK,mBAAL,GAA2B,KAAK,mBAAL,CAAyB,IAAzB,CAA8B,IAA9B,CAA3B,CACA,KAAK,0BAAL,GAAkC,KAAK,0BAAL,CAAgC,IAAhC,CAChC,IADgC,CAAlC,CAGA,KAAK,mBAAL,GAA2B,KAAK,mBAAL,CAAyB,IAAzB,CAA8B,IAA9B,CAA3B,CACA,KAAK,mBAAL,GAA2B,KAAK,mBAAL,CAAyB,IAAzB,CAA8B,IAA9B,CAA3B,CACA,KAAK,uBAAL,GAA+B,KAAK,uBAAL,CAA6B,IAA7B,CAAkC,IAAlC,CAA/B,CACA,KAAK,8BAAL,GAAsC,KAAK,8BAAL,CAAoC,IAApC,CACpC,IADoC,CAAtC,CAGA,KAAK,qBAAL,GAA6B,KAAK,qBAAL,CAA2B,IAA3B,CAAgC,IAAhC,CAA7B,CACA,KAAK,sBAAL,GAA8B,KAAK,sBAAL,CAA4B,IAA5B,CAAiC,IAAjC,CAA9B,CACA,KAAK,4BAAL,GAAoC,KAAK,4BAAL,CAAkC,IAAlC,CAClC,IADkC,CAApC,CAGA,KAAK,4BAAL,GAAoC,UAClC,KAAK,4BAAL,CAAkC,IAAlC,CAAuC,IAAvC,CADkC,EAElC,IAFkC,CAApC,CAIA,KAAK,8BAAL,GAAsC,KAAK,8BAAL,CAAoC,IAApC,CACpC,IADoC,CAAtC,CAGA,KAAK,0BAAL,GAAkC,KAAK,0BAAL,CAAgC,IAAhC,CAChC,IADgC,CAAlC,CAGA,KAAK,qBAAL,GAA6B,KAAK,qBAAL,CAA2B,IAA3B,CAAgC,IAAhC,CAA7B,CACD,CAEsB,MAAjB,iBAAiB,GAAA,CACrB;AACA,SAAK,sCAAL,GACA,MAAM,iBAAiB,GAAG,MAAM,KAAK,eAAL,EAAhC,CACA,KAAK,QAAL,CAAc,EAAE,kBAAkB,EAAE,iBAAtB,EAAd,EACD,CAED,gCAAgC,CAAC,SAAD,EAA0B,CACxD;AACA,QACE,KAAK,KAAL,CAAW,KAAX,IACA,CAAC,SAAS,CAAC,KAAV,CAAgB,MADjB,IAEA,SAAS,CAAC,KAAV,CAAgB,OAFhB,IAGA,SAAS,CAAC,KAAV,CAAgB,OAAhB,CAAwB,IAHxB,IAIA,SAAS,CAAC,KAAV,CAAgB,OAAhB,CAAwB,IAAxB,CAA6B,MAA7B,GAAsC,CALxC,EAME,CACA,KAAK,QAAL,CAAc,EAAE,IAAI,EAAE,SAAS,CAAC,KAAV,CAAgB,OAAhB,CAAwB,IAAhC,EAAd,EAAsD,MACpD,KAAK,iBAAL,CAAuB,SAAS,CAAC,KAAjC,CADF,EAGD,CACD,IACE,SAAS,CAAC,KAAV,CAAgB,UAAhB,IACA,SAAS,CAAC,KAAV,CAAgB,UAAhB,KAA+B,KAAK,KAAL,CAAW,KAAX,CAAiB,UAFlD,EAGE,CACA,KAAK,YAAL,CAAkB,SAAS,CAAC,KAA5B,EACD,CACF,CAwLD,iBAAiB,CAAC,KAAD,EAAa,CAC5B,KAAK,KAAL,CAAW,OAAX,CAAmB,iBAAnB,CAAqC,KAArC,EACD,CAED,aAAa,CAAC,UAAD,EAA4B,SAA5B,EAA6C,CACxD,MAAM,EAAE,GAAG,EACT,EAAE,EAAE,OAAO,CAAC,QAAR,EADK,EAET,KAAK,EAAE,SAFE,EAGT,OAAO,EAAE,KAHA,EAIT,IAAI,EAAE,KAAK,KAAL,CAAW,KAAX,CAAiB,IAJd,EAKT,GAAG,EAAE,iBAAiB,UAAU,GAAG,GAAG,UAAU,GAAhB,GAAsB,EAAE,GAAG,SAAS,EAL3D,EAAX,CAOA,KAAK,KAAL,CAAW,OAAX,CAAmB,cAAnB,CAAkC,EAAlC,EACD,CAED,0BAA0B,GAAA,CACxB,KAAK,QAAL,CAAc,CAAA,SAAS,MAAK,EAC1B,wBAAwB,EAAE,CAAC,SAAS,CAAC,wBADX,EAAL,CAAvB,EAGD,CAED,YAAY,CAAC,KAAD,EAA2C,CACrD,KAAK,QAAL,CAAc,EAAE,UAAU,EAAE,KAAK,CAAC,MAAN,CAAa,KAA3B,EAAd,EACD,CAED,YAAY,CAAC,KAAD,EAAa,CACvB,KAAK,KAAL,CAAW,OAAX,CAAmB,iBAAnB,CAAqC,KAArC,EAA4C,KAAK,KAAL,CAAW,YAAvD,EACD,CAED,mBAAmB,CAAC,KAAD,EAAa,CAC9B,KAAK,KAAL,CAAW,OAAX,CAAmB,mBAAnB,CAAuC,KAAvC,EACD,CAED,sCAAsC,GAAA,CACpC,MAAM,EAAE,KAAF,KAAY,KAAK,KAAvB,CACA,IACE,KAAK,CAAC,YAAN,IACA,KAAK,CAAC,YAAN,CAAmB,OAAnB,CAA2B,mBAA3B,IAAkD,CAFpD,EAGE,CACA,KAAK,KAAL,CAAW,OAAX,CAAmB,UAAnB,CAA8B,KAA9B,EACD,CACF,CAED,cAAc,GAAA,CACZ,IAAI,KAAK,KAAL,CAAW,MAAX,IAAqB,KAAK,KAAL,CAAW,SAAhC,IAA6C,KAAK,KAAL,CAAW,GAA5D,EAAiE,CAC/D,IAAI,EAAE,IAAF,KAAW,KAAK,KAAL,CAAW,KAAX,CAAiB,OAAhC,CACA,IAAI,KAAK,KAAL,CAAW,KAAX,IAAoB,KAAK,KAAL,CAAW,KAAX,CAAiB,MAAzC,EAAiD,CAC/C,CAAC,EAAE,IAAF,KAAW,KAAK,KAAjB,EACD,CACD,MAAM,EAAE,OAAF,KAAc,KAAK,KAAL,CAAW,KAAX,CAAiB,OAArC,CAL+D,CAM/D;AACA,YAAM,EACJ,wBADI,EAEJ,kBAFI,EAGJ,kBAHI,EAIJ,0BAJI,EAKJ,sBALI,EAMJ,kBANI,EAOJ,oBAPI,KAQF,KAAK,KART,CASA,MAAM,wBAAwB,GAC3B,wBAAwB,KAAK,iBAAiB,CAAC,QAA/C,IACC,kBAAkB,CAAC,MAAnB,KAA8B,CADhC,IAEC,wBAAwB,KAAK,iBAAiB,CAAC,iBAA/C,IACC,MAAM,CAAC,IAAP,CAAY,kBAAZ,EAAgC,MAAhC,KAA2C,CAD5C,IAEC,0BAA0B,CAAC,MAA3B,KAAsC,CAL1C,CAOA,OACE,cAAC,iBAAD,6FACE,cAAC,gBAAD,IACE,OAAO,EAAE,oBADX,EAEE,IAAI,EAAE,KAAK,mBAFb,EAGE,wBAAwB,EAAE,wBAH5B,EAIE,sBAAsB,EAAE,sBAJ1B,EAKE,yBAAyB,EAAE,kBAL7B,EAME,kBAAkB,EAAE,kBANtB,EAOE,wBAAwB,EAAE,wBAP5B,EAQE,MAAM,EAAE,KAAK,mBARf,EASE,uBAAuB,EAAE,KAAK,uBAThC,EAUE,8BAA8B,EAAE,KAAK,8BAVvC,EAWE,qBAAqB,EAAE,KAAK,qBAX9B,EAYE,sBAAsB,EAAE,KAAK,sBAZ/B,EAaE,4BAA4B,EAAE,KAAK,4BAbrC,EAcE,4BAA4B,EAAE,KAAK,4BAdrC,EAeE,wBAAwB,EAAE,KAAK,8BAfjC,EAgBE,oBAAoB,EAAE,KAAK,0BAhB7B,0FADF,EAmBE,cAAC,gBAAD,6FACG,KAAK,KAAL,CAAW,SAAX,IACC,KAAK,KAAL,CAAW,QADZ,IAEC,KAAK,KAAL,CAAW,QAAX,CAAoB,4BAFrB,IAGG,cAAC,oBAAD,CACE;AADF,UAEE,KAAK,EAAE,KAAK,KAAL,CAAW,KAFpB,EAGE,QAAQ,EAAE,KAAK,KAAL,CAAW,QAHvB,EAIE,OAAO,EAAE,KAAK,KAAL,CAAW,OAJtB,EAKE,OAAO,EAAE,KAAK,qBALhB,0FAJN,EAYG,KAAK,KAAL,CAAW,GAAX,IACC,cAAC,MAAD,IACE,UAAU,EAAC,OADb,EAEE,IAAI,EAAE,iBAAiB,KAAK,KAAL,CAAW,KAAX,CAAiB,EAAE,EAF5C,2FAIE,qBAAG,SAAS,EAAC,mBAAb,0FAJF,OAIuC,CAAC,CAAC,iBAAD,CAJxC,CAbJ,EAqBE,cAAC,eAAD,IACE,IAAI,EAAE,iCAAiC,CAAC,IAAD,EAAO,OAAP,CADzC,EAEE,OAAO,EAAE,KAFX,EAGE,QAAQ,EACN,cAAC,MAAD,IAAQ,UAAU,EAAC,OAAnB,4FACE,qBAAG,SAAS,EAAC,iBAAb,0FADF,OACqC,CAAC,CAAC,mBAAD,CADtC,CAJJ,0FArBF,CAnBF,EAkDG,KAAK,KAAL,CAAW,MAAX,IACC,yBACE,IAAI,EAAC,MADP,EAEE,QAAQ,EAAE,KAAK,YAFjB,EAGE,KAAK,EAAE,KAAK,KAAL,CAAW,UAHpB,EAIE,SAAS,EAAC,uBAJZ,EAKE,WAAW,EAAE,CAAC,CAAC,gBAAD,CALhB,0FAnDJ,CADF,CA8DD,CACD,OAAO,+GAAP,CACD,CAMD,kBAAkB,GAAA,6CAChB,MAAM,EAAE,OAAF,EAAW,IAAX,EAAiB,UAAjB,EAA6B,cAA7B,KAAgD,KAAK,KAAL,CAAW,KAAjE,CACA,IAAI,YAAJ,CACA,MAAM,YAAY,GAAG,OAAH,oBAAG,OAAO,CAAE,mBAA9B;AACA,UAAM,KAAK,GAAG,UAAU,IAAI,OAAO,CAAC,KAAR,CAAc,KAA1C;AACA,UAAM,OAAO,GAAG,CAAC,sBAAC,KAAK,KAAL,CAAW,IAAZ,sCAAC,iBAAiB,KAAlB,aAAC,sBAAwB,KAAzB,CAAjB;AACA,UAAM,4BAA4B,GAAG;AACnC,MAAA,SAAS,EAAE,CAAC,CACV,gGADU,EAEV,EAAE,IAAF,EAFU,CAAD,CAGT,MAHS,CAIT,CAAC,CACC,iFADD,CAJQ,EAOT,CAAC,CAAC,sBAAD,EAAyB,EAAE,KAAF,EAAzB,CAPQ,CADwB;AAUnC,MAAA,YAAY,EAAE,CAAC,CACb,0DADa,EAEb,EAAE,IAAF,EAFa,CAAD,CAGZ,MAHY,CAIZ,CAAC,CACC,6EADD,CAJW,EAOZ,CAAC,CAAC,6CAAD,EAAgD;AAC/C,QAAA,KAD+C,EAAhD,CAPW,CAVqB,EAArC;;;AAsBA,UAAM,6BAA6B,GACjC,KAAK,KAAK,KAAK,KAAL,CAAW,iBAArB;AACA,IAAA,cAAc,KAAK,eAAe,CAAC,QAFrC;AAIA,QAAI,cAAc,KAAK,eAAe,CAAC,KAAnC,IAA4C,KAAK,KAAL,CAAW,GAA3D,EAAgE;AAC9D,MAAA,YAAY,GACV,wBAAM,SAAS,EAAC,cAAhB;AACG,MAAA,CAAC,CACA,kEADA,EAEA,EAAE,IAAF,EAFA,CADJ,CADF;;AAQD,KATD;AASO,QACL,cAAc,KAAK,eAAe,CAAC,QAAnC;AACA,KAAC,6BAFI,EAGL;AACA,MAAA,YAAY,GACV,wBAAM,SAAS,EAAC,cAAhB;AACG,MAAA,CAAC,CACA,4EADA,EAEA,EAAE,IAAF,EAFA,CADJ,CADF;;AAQD,KAZM;AAYA,QAAI,cAAc,KAAK,eAAe,CAAC,kBAAvC,EAA2D;AAChE,MAAA,YAAY,GACV,wBAAM,SAAS,EAAC,cAAhB;AACG,MAAA,CAAC,CACA,sFADA,EAEA,EAAE,IAAF,EAFA,CADJ,CADF;;AAQD;AACD,WACE,cAAC,YAAD;AACG,KAAC,YAAD,IAAiB,CAAC,6BAAlB,IACC;AACG,IAAA,CAAC,CAAC,wBAAD,EAA2B,EAAE,IAAF,EAA3B,CADJ,OAC2C,YAD3C,CAFJ;;AAMG,KAAC,YAAD,IAAiB,6BAAjB,IACC,uBAAK,GAAG,EAAE,KAAK,uBAAf;AACE,kBAAC,KAAD,IACE,IAAI,EAAC,SADP,EAEE,OAAO,EAAE,CAAC,CAAC,wBAAD,EAA2B,EAAE,IAAF,EAA3B,CAFZ,EAGE,OAAO,EAAE,KAAK,YAHhB,EAIE,WAAW,EAAE,CAAC,CACZ,gEADY,EAEZ,IAFY,CAJhB,0FADF,CAPJ;;AAmBG,IAAA,YAAY,IACX,uBAAK,GAAG,EAAE,KAAK,uBAAf;AACE,kBAAC,KAAD,IACE,IAAI,EAAC,SADP,EAEE,OAAO,EAAE,KAAK,YAFhB,EAGE,OAAO,EAAE,CAAC,CAAC,wBAAD,EAA2B,EAAE,IAAF,EAA3B,CAHZ,EAIE,WAAW,EACT,OAAO;AACH,MAAA,4BAA4B,CAAC,SAD1B;AAEH,MAAA,4BAA4B,CAAC,YAPrC,0FADF,CApBJ,CADF;;;AAoCD;AAED,EAAA,MAAM,GAAA;AACJ,UAAM,EAAE,KAAF,KAAY,KAAK,KAAvB;AACA,QAAI,GAAJ;AACA,QAAI,WAAW,GAAG,KAAK,CAAC,IAAxB;AACA,QAAI,KAAK,KAAL,CAAW,QAAX,IAAuB,KAAK,KAAL,CAAW,QAAX,CAAoB,mBAA/C,EAAoE;AAClE,MAAA,WAAW,GAAG,KAAK,KAAL,CAAW,QAAX,CAAoB,mBAAlC;AACD;AAED,QAAI,KAAK,KAAL,CAAW,OAAf,EAAwB;AACtB,MAAA,GAAG,GAAG,cAAC,cAAD,IAAgB,GAAG,EAAE,KAAK,CAAC,GAA3B,0FAAN;AACD;AAED,QAAI,KAAK,CAAC,KAAN,KAAgB,SAApB,EAA+B;AAC7B,aAAO,cAAC,KAAD,IAAO,IAAI,EAAC,SAAZ,EAAsB,OAAO,EAAE,CAAC,CAAC,mBAAD,CAAhC,0FAAP;AACD;AACD,QAAI,KAAK,CAAC,KAAN,KAAgB,QAApB,EAA8B;AAC5B,aACE,cAAC,qBAAD;AACE,oBAAC,0BAAD,IACE,KAAK,EAAE,CAAC,CAAC,gBAAD,CADV,EAEE,KAAK,EAAE,KAAF,qCAAE,KAAK,CAAE,MAAT,qBAAE,cAAgB,CAAhB,CAFT,EAGE,QAAQ,EAAE,cAAC,YAAD,8FAAe,KAAK,CAAC,YAArB,CAHZ,EAIE,QAAQ,EAAE,KAAK,CAAC,YAAN,IAAsB,SAJlC,EAKE,IAAI,EAAE,KAAK,CAAC,IALd,EAME,MAAM,EAAC,QANT,0FADF,CADF;;AAYD;AACD,QAAI,KAAK,CAAC,KAAN,KAAgB,SAAhB,IAA6B,KAAK,CAAC,IAAvC,EAA6C;AAC3C,YAAM,EAAE,UAAF,EAAc,SAAd,KAA4B,KAAlC;AACA,UAAI,MAAM,GAAG,OAAb;AACA,UAAI,KAAK,CAAC,WAAN,KAAsB,QAAQ,CAAC,IAAnC,EAAyC;AACvC,QAAA,MAAM,GAAG,MAAT;AACD;AACD,aACE;AACE,oBAAC,KAAD,IACE,IAAI,EAAC,MADP,EAEE,OAAO,EACL;AACG,QAAA,CAAC,CAAC,MAAD,CADJ;AAEE;AACG,QAAA,UAAU,GAAG,GAAG,UAAU,GAAhB,GAAsB,EADnC;AAEG,QAAA,SAFH,CAFF;;AAMK,QAAA,CAAC,CAAC,aAAD,CANN;AAOE,sBAAC,WAAD;AACE,sBAAC,MAAD,IACE,UAAU,EAAC,OADb,EAEE,SAAS,EAAC,OAFZ,EAGE,OAAO,EAAE,MAAM,KAAK,aAAL,CAAmB,UAAnB,EAA+B,SAA/B,CAHjB;AAKG,QAAA,CAAC,CAAC,oBAAD,CALJ,CADF;;AAQE,sBAAC;AACC;AADF,YAEE,KAAK,EAAE,SAFT,EAGE,MAAM,EAAE,UAHV,EAIE,IAAI,EAAE,WAJR,EAKE,QAAQ,EAAE,KAAK,KAAL,CAAW,QALvB,EAME,OAAO,EAAE,KAAK,KAAL,CAAW,OANtB,0FARF,CAPF,CAHJ,0FADF,CADF;;;;AAkCD;AACD,QAAI,KAAK,CAAC,KAAN,KAAgB,SAAhB,IAA6B,KAAK,CAAC,OAAvC,EAAgD;AAC9C,YAAM,EAAE,OAAF,KAAc,KAApB;AACA,YAAM,MAAM,GAAG,KAAK,KAAL,CAAW,WAAX;AACX,WAAK,KAAL,CAAW,MAAX,GAAoB,EADT;AAEX,WAAK,KAAL,CAAW,MAFf;AAGA,UAAI,IAAJ;AACA,UAAI,KAAK,KAAL,CAAW,KAAX,IAAoB,KAAK,CAAC,MAA9B,EAAsC;AACpC,SAAC,EAAE,IAAF,KAAW,KAAK,KAAjB;AACD,OAFD;AAEO,UAAI,OAAO,IAAI,OAAO,CAAC,IAAvB,EAA6B;AAClC,SAAC,EAAE,IAAF,KAAW,OAAZ;AACD;AACD,UAAI,IAAI,IAAI,IAAI,CAAC,MAAL,GAAc,CAA1B,EAA6B;AAC3B,cAAM,eAAe,GAAG,OAAO,CAAC,gBAAR;AACpB,QAAA,OAAO,CAAC,gBAAR,CAAyB,GAAzB,CAA6B,CAAA,GAAG,KAAI,GAAG,CAAC,IAAxC,CADoB;AAEpB,UAFJ;AAGA,eACE;AACG,aAAK,cAAL,EADH;AAEG,aAAK,kBAAL,EAFH;AAGG,QAAA,GAHH;AAIE,sBAAC,eAAD,IACE,IAAI,EAAE,IADR,EAEE,iBAAiB,EAAE,OAAO,CAAC,OAAR,CAAgB,GAAhB,CAAoB,CAAA,GAAG,KAAI,GAAG,CAAC,IAA/B,CAFrB,EAGE,MAAM,EAAE,MAHV,EAIE,UAAU,EAAE,KAAK,KAAL,CAAW,UAJzB,EAKE,eAAe,EAAE,eALnB,0FAJF,CADF;;AAcD;AACD,UAAI,IAAI,IAAI,IAAI,CAAC,MAAL,KAAgB,CAA5B,EAA+B;AAC7B,eACE,cAAC,KAAD,IAAO,IAAI,EAAC,SAAZ,EAAsB,OAAO,EAAE,CAAC,CAAC,4BAAD,CAAhC,0FADF;AAGD;AACF;AACD,QAAI,KAAK,CAAC,MAAN,IAAiB,KAAK,CAAC,KAAN,KAAgB,SAAhB,IAA6B,CAAC,KAAK,CAAC,OAAzD,EAAmE;AACjE,UAAI,KAAK,CAAC,aAAV,EAAyB;AACvB,eACE,cAAC,MAAD,IACE,UAAU,EAAC,OADb,EAEE,WAAW,EAAC,SAFd,EAGE,OAAO,EAAE,MACP,KAAK,mBAAL,CAAyB;AACvB,eAAG,KADoB;AAEvB,YAAA,aAAa,EAAE,IAFQ,EAAzB,CAJJ;;AAUG,QAAA,CAAC,CAAC,oBAAD,CAVJ,CADF;;AAcD;AACD,UAAI,KAAK,CAAC,UAAV,EAAsB;AACpB,eACE,cAAC,MAAD,IACE,UAAU,EAAC,OADb,EAEE,WAAW,EAAC,SAFd,EAGE,OAAO,EAAE,MAAM,KAAK,YAAL,CAAkB,KAAlB,CAHjB;AAKG,QAAA,CAAC,CAAC,iBAAD,CALJ,CADF;;AASD;AACF;AACD,QAAI,WAAJ;AACA,QAAI,WAAJ;AACA,QAAI,KAAK,CAAC,QAAN,GAAiB,CAArB,EAAwB;AACtB,MAAA,WAAW,GACT,cAAC,WAAD,IACE,OAAO,EAAE,QAAQ,CAAC,KAAK,CAAC,QAAN,CAAe,OAAf,CAAuB,CAAvB,CAAD,EAA4B,EAA5B,CADnB,EAEE,OAAO,MAFT,0FADF;AAMD;AACD,QAAI,KAAK,CAAC,WAAV,EAAuB;AACrB,MAAA,WAAW,GACT,cAAC,MAAD,IACE,UAAU,EAAC,OADb,EAEE,OAAO,EAAE,MAAM,KAAK,CAAC,WAAN,IAAqB,MAAM,CAAC,IAAP,CAAY,KAAK,CAAC,WAAlB,CAFtC;AAIG,MAAA,CAAC,CAAC,WAAD,CAJJ,CADF;;AAQD;AACD,UAAM,WAAW,GACf,KAAK,IAAI,KAAK,CAAC,KAAf,IAAwB,KAAK,CAAC,KAAN,CAAY,QAApC;AACI,IAAA,KAAK,CAAC,KAAN,CAAY,QADhB;AAEI,QAHN;AAIA,WACE,uBAAK,KAAK,EAAE,cAAZ;AACE,mHAAM,CAAC,WAAD,IAAgB,cAAC,OAAD,IAAS,QAAQ,EAAC,QAAlB,0FAAtB,CADF;AAEE,kBAAC,eAAD,IAAiB,KAAK,EAAE,KAAxB,yFAFF;AAGE;AACG,IAAA,WAAW,IAAI,cAAC,KAAD,IAAO,IAAI,EAAC,SAAZ,EAAsB,OAAO,EAAE,WAA/B,0FADlB,CAHF;;AAME,mHAAM,WAAN,CANF;AAOE,mHAAM,WAAN,CAPF,CADF;;AAWD,GAlqBF;AAAA;AAAA,6BAHoB,S,CAIZ,Y,GAAe,EACpB,KAAK,EAAE,KADa,EAEpB,GAAG,EAAE,IAFe,EAGpB,QAAQ,EAAE,EAHU,EAIpB,MAAM,EAAE,IAJY,EAKpB,OAAO,EAAE,KALW,EAMpB,SAAS,EAAE,IANS,E,kLA7HnB,iB,8IAKC,qB,kJAOD,e,4IAOC,c,2IA+CA,Y,yIAQA,Y,yIAQA,iB,8IAMA,gB,6IAMA,qB,kJAIA,a,0IAuBe,S","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { CSSProperties } from 'react';\nimport ButtonGroup from 'src/components/ButtonGroup';\nimport Alert from 'src/components/Alert';\nimport ProgressBar from 'src/components/ProgressBar';\nimport moment from 'moment';\nimport { RadioChangeEvent } from 'antd/lib/radio';\nimport Button from 'src/components/Button';\nimport shortid from 'shortid';\nimport rison from 'rison';\nimport {\n  styled,\n  t,\n  makeApi,\n  SupersetClient,\n  JsonResponse,\n} from '@superset-ui/core';\nimport { debounce } from 'lodash';\nimport ErrorMessageWithStackTrace from 'src/components/ErrorMessage/ErrorMessageWithStackTrace';\nimport { SaveDatasetModal } from 'src/SqlLab/components/SaveDatasetModal';\nimport { UserWithPermissionsAndRoles } from 'src/types/bootstrapTypes';\nimport Loading from 'src/components/Loading';\nimport FilterableTable from 'src/components/FilterableTable/FilterableTable';\nimport CopyToClipboard from 'src/components/CopyToClipboard';\nimport { prepareCopyToClipboardTabularData } from 'src/utils/common';\nimport { exploreChart } from 'src/explore/exploreUtils';\nimport { CtasEnum } from 'src/SqlLab/actions/sqlLab';\nimport { Query } from 'src/SqlLab/types';\nimport ExploreCtasResultsButton from '../ExploreCtasResultsButton';\nimport ExploreResultsButton from '../ExploreResultsButton';\nimport HighlightedSql from '../HighlightedSql';\nimport QueryStateLabel from '../QueryStateLabel';\n\nenum DatasetRadioState {\n  SAVE_NEW = 1,\n  OVERWRITE_DATASET = 2,\n}\n\nconst EXPLORE_CHART_DEFAULT = {\n  metrics: [],\n  groupby: [],\n  time_range: 'No filter',\n  viz_type: 'table',\n};\n\nenum LIMITING_FACTOR {\n  QUERY = 'QUERY',\n  QUERY_AND_DROPDOWN = 'QUERY_AND_DROPDOWN',\n  DROPDOWN = 'DROPDOWN',\n  NOT_LIMITED = 'NOT_LIMITED',\n}\n\nconst LOADING_STYLES: CSSProperties = { position: 'relative', minHeight: 100 };\n\ninterface DatasetOwner {\n  first_name: string;\n  id: number;\n  last_name: string;\n  username: string;\n}\n\ninterface DatasetOptionAutocomplete {\n  value: string;\n  datasetId: number;\n  owners: [DatasetOwner];\n}\n\ninterface ResultSetProps {\n  showControls?: boolean;\n  actions: Record<string, any>;\n  cache?: boolean;\n  csv?: boolean;\n  database?: Record<string, any>;\n  displayLimit: number;\n  height: number;\n  query: Query;\n  search?: boolean;\n  showSql?: boolean;\n  visualize?: boolean;\n  user: UserWithPermissionsAndRoles;\n  defaultQueryLimit: number;\n}\n\ninterface ResultSetState {\n  searchText: string;\n  showExploreResultsButton: boolean;\n  data: Record<string, any>[];\n  showSaveDatasetModal: boolean;\n  newSaveDatasetName: string;\n  saveDatasetRadioBtnState: number;\n  shouldOverwriteDataSet: boolean;\n  datasetToOverwrite: Record<string, any>;\n  saveModalAutocompleteValue: string;\n  userDatasetOptions: DatasetOptionAutocomplete[];\n  alertIsOpen: boolean;\n}\n\n// Making text render line breaks/tabs as is as monospace,\n// but wrapping text too so text doesn't overflow\nconst MonospaceDiv = styled.div`\n  font-family: ${({ theme }) => theme.typography.families.monospace};\n  white-space: pre;\n  word-break: break-word;\n  overflow-x: auto;\n  white-space: pre-wrap;\n`;\n\nconst ReturnedRows = styled.div`\n  font-size: 13px;\n  line-height: 24px;\n  .limitMessage {\n    color: ${({ theme }) => theme.colors.secondary.light1};\n    margin-left: ${({ theme }) => theme.gridUnit * 2}px;\n  }\n`;\nconst ResultSetControls = styled.div`\n  display: flex;\n  justify-content: space-between;\n  padding: ${({ theme }) => 2 * theme.gridUnit}px 0;\n`;\n\nconst ResultSetButtons = styled.div`\n  display: grid;\n  grid-auto-flow: column;\n  padding-right: ${({ theme }) => 2 * theme.gridUnit}px;\n`;\n\nconst ResultSetErrorMessage = styled.div`\n  padding-top: ${({ theme }) => 4 * theme.gridUnit}px;\n`;\n\nconst updateDataset = async (\n  datasetId: number,\n  sql: string,\n  columns: Array<Record<string, any>>,\n  owners: [number],\n  overrideColumns: boolean,\n) => {\n  const endpoint = `api/v1/dataset/${datasetId}?override_columns=${overrideColumns}`;\n  const headers = { 'Content-Type': 'application/json' };\n  const body = JSON.stringify({\n    sql,\n    columns,\n    owners,\n  });\n\n  const data: JsonResponse = await SupersetClient.put({\n    endpoint,\n    headers,\n    body,\n  });\n  return data.json.result;\n};\n\nexport default class ResultSet extends React.PureComponent<\n  ResultSetProps,\n  ResultSetState\n> {\n  static defaultProps = {\n    cache: false,\n    csv: true,\n    database: {},\n    search: true,\n    showSql: false,\n    visualize: true,\n  };\n\n  constructor(props: ResultSetProps) {\n    super(props);\n    this.state = {\n      searchText: '',\n      showExploreResultsButton: false,\n      data: [],\n      showSaveDatasetModal: false,\n      newSaveDatasetName: this.getDefaultDatasetName(),\n      saveDatasetRadioBtnState: DatasetRadioState.SAVE_NEW,\n      shouldOverwriteDataSet: false,\n      datasetToOverwrite: {},\n      saveModalAutocompleteValue: '',\n      userDatasetOptions: [],\n      alertIsOpen: false,\n    };\n    this.changeSearch = this.changeSearch.bind(this);\n    this.fetchResults = this.fetchResults.bind(this);\n    this.popSelectStar = this.popSelectStar.bind(this);\n    this.reFetchQueryResults = this.reFetchQueryResults.bind(this);\n    this.toggleExploreResultsButton = this.toggleExploreResultsButton.bind(\n      this,\n    );\n    this.handleSaveInDataset = this.handleSaveInDataset.bind(this);\n    this.handleHideSaveModal = this.handleHideSaveModal.bind(this);\n    this.handleDatasetNameChange = this.handleDatasetNameChange.bind(this);\n    this.handleSaveDatasetRadioBtnState = this.handleSaveDatasetRadioBtnState.bind(\n      this,\n    );\n    this.handleOverwriteCancel = this.handleOverwriteCancel.bind(this);\n    this.handleOverwriteDataset = this.handleOverwriteDataset.bind(this);\n    this.handleOverwriteDatasetOption = this.handleOverwriteDatasetOption.bind(\n      this,\n    );\n    this.handleSaveDatasetModalSearch = debounce(\n      this.handleSaveDatasetModalSearch.bind(this),\n      1000,\n    );\n    this.handleFilterAutocompleteOption = this.handleFilterAutocompleteOption.bind(\n      this,\n    );\n    this.handleOnChangeAutoComplete = this.handleOnChangeAutoComplete.bind(\n      this,\n    );\n    this.handleExploreBtnClick = this.handleExploreBtnClick.bind(this);\n  }\n\n  async componentDidMount() {\n    // only do this the first time the component is rendered/mounted\n    this.reRunQueryIfSessionTimeoutErrorOnMount();\n    const userDatasetsOwned = await this.getUserDatasets();\n    this.setState({ userDatasetOptions: userDatasetsOwned });\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps: ResultSetProps) {\n    // when new results comes in, save them locally and clear in store\n    if (\n      this.props.cache &&\n      !nextProps.query.cached &&\n      nextProps.query.results &&\n      nextProps.query.results.data &&\n      nextProps.query.results.data.length > 0\n    ) {\n      this.setState({ data: nextProps.query.results.data }, () =>\n        this.clearQueryResults(nextProps.query),\n      );\n    }\n    if (\n      nextProps.query.resultsKey &&\n      nextProps.query.resultsKey !== this.props.query.resultsKey\n    ) {\n      this.fetchResults(nextProps.query);\n    }\n  }\n\n  calculateAlertRefHeight = (alertElement: HTMLElement | null) => {\n    if (alertElement) {\n      this.setState({ alertIsOpen: true });\n    } else {\n      this.setState({ alertIsOpen: false });\n    }\n  };\n\n  getDefaultDatasetName = () =>\n    `${this.props.query.tab} ${moment().format('MM/DD/YYYY HH:mm:ss')}`;\n\n  handleOnChangeAutoComplete = () => {\n    this.setState({ datasetToOverwrite: {} });\n  };\n\n  handleOverwriteDataset = async () => {\n    const { sql, results } = this.props.query;\n    const { datasetToOverwrite } = this.state;\n\n    await updateDataset(\n      datasetToOverwrite.datasetId,\n      sql,\n      results.selected_columns.map(d => ({ column_name: d.name })),\n      datasetToOverwrite.owners.map((o: DatasetOwner) => o.id),\n      true,\n    );\n\n    this.setState({\n      showSaveDatasetModal: false,\n      shouldOverwriteDataSet: false,\n      datasetToOverwrite: {},\n      newSaveDatasetName: this.getDefaultDatasetName(),\n    });\n\n    exploreChart({\n      ...EXPLORE_CHART_DEFAULT,\n      datasource: `${datasetToOverwrite.datasetId}__table`,\n      all_columns: results.selected_columns.map(d => d.name),\n    });\n  };\n\n  handleSaveInDataset = () => {\n    // if user wants to overwrite a dataset we need to prompt them\n    if (\n      this.state.saveDatasetRadioBtnState ===\n      DatasetRadioState.OVERWRITE_DATASET\n    ) {\n      this.setState({ shouldOverwriteDataSet: true });\n      return;\n    }\n\n    const { schema, sql, dbId } = this.props.query;\n    let { templateParams } = this.props.query;\n    const selectedColumns = this.props.query?.results?.selected_columns || [];\n\n    // The filters param is only used to test jinja templates.\n    // Remove the special filters entry from the templateParams\n    // before saving the dataset.\n    if (templateParams) {\n      const p = JSON.parse(templateParams);\n      /* eslint-disable-next-line no-underscore-dangle */\n      if (p._filters) {\n        /* eslint-disable-next-line no-underscore-dangle */\n        delete p._filters;\n        templateParams = JSON.stringify(p);\n      }\n    }\n\n    this.props.actions\n      .createDatasource({\n        schema,\n        sql,\n        dbId,\n        templateParams,\n        datasourceName: this.state.newSaveDatasetName,\n        columns: selectedColumns,\n      })\n      .then((data: { table_id: number }) => {\n        exploreChart({\n          datasource: `${data.table_id}__table`,\n          metrics: [],\n          groupby: [],\n          time_range: 'No filter',\n          viz_type: 'table',\n          all_columns: selectedColumns.map(c => c.name),\n          row_limit: 1000,\n        });\n      })\n      .catch(() => {\n        this.props.actions.addDangerToast(\n          t('An error occurred saving dataset'),\n        );\n      });\n\n    this.setState({\n      showSaveDatasetModal: false,\n      newSaveDatasetName: this.getDefaultDatasetName(),\n    });\n  };\n\n  handleOverwriteDatasetOption = (\n    _data: string,\n    option: Record<string, any>,\n  ) => {\n    this.setState({ datasetToOverwrite: option });\n  };\n\n  handleDatasetNameChange = (e: React.FormEvent<HTMLInputElement>) => {\n    // @ts-expect-error\n    this.setState({ newSaveDatasetName: e.target.value });\n  };\n\n  handleHideSaveModal = () => {\n    this.setState({\n      showSaveDatasetModal: false,\n      shouldOverwriteDataSet: false,\n    });\n  };\n\n  handleSaveDatasetRadioBtnState = (e: RadioChangeEvent) => {\n    this.setState({ saveDatasetRadioBtnState: Number(e.target.value) });\n  };\n\n  handleOverwriteCancel = () => {\n    this.setState({ shouldOverwriteDataSet: false, datasetToOverwrite: {} });\n  };\n\n  handleExploreBtnClick = () => {\n    this.setState({\n      showSaveDatasetModal: true,\n    });\n  };\n\n  getUserDatasets = async (searchText = '') => {\n    // Making sure that autocomplete input has a value before rendering the dropdown\n    // Transforming the userDatasetsOwned data for SaveModalComponent)\n    const { userId } = this.props.user;\n    if (userId) {\n      const queryParams = rison.encode({\n        filters: [\n          {\n            col: 'table_name',\n            opr: 'ct',\n            value: searchText,\n          },\n          {\n            col: 'owners',\n            opr: 'rel_m_m',\n            value: userId,\n          },\n        ],\n        order_column: 'changed_on_delta_humanized',\n        order_direction: 'desc',\n      });\n\n      const response = await makeApi({\n        method: 'GET',\n        endpoint: '/api/v1/dataset',\n      })(`q=${queryParams}`);\n\n      return response.result.map(\n        (r: { table_name: string; id: number; owners: [DatasetOwner] }) => ({\n          value: r.table_name,\n          datasetId: r.id,\n          owners: r.owners,\n        }),\n      );\n    }\n\n    return null;\n  };\n\n  handleSaveDatasetModalSearch = async (searchText: string) => {\n    const userDatasetsOwned = await this.getUserDatasets(searchText);\n    this.setState({ userDatasetOptions: userDatasetsOwned });\n  };\n\n  handleFilterAutocompleteOption = (\n    inputValue: string,\n    option: { value: string; datasetId: number },\n  ) => option.value.toLowerCase().includes(inputValue.toLowerCase());\n\n  clearQueryResults(query: Query) {\n    this.props.actions.clearQueryResults(query);\n  }\n\n  popSelectStar(tempSchema: string | null, tempTable: string) {\n    const qe = {\n      id: shortid.generate(),\n      title: tempTable,\n      autorun: false,\n      dbId: this.props.query.dbId,\n      sql: `SELECT * FROM ${tempSchema ? `${tempSchema}.` : ''}${tempTable}`,\n    };\n    this.props.actions.addQueryEditor(qe);\n  }\n\n  toggleExploreResultsButton() {\n    this.setState(prevState => ({\n      showExploreResultsButton: !prevState.showExploreResultsButton,\n    }));\n  }\n\n  changeSearch(event: React.ChangeEvent<HTMLInputElement>) {\n    this.setState({ searchText: event.target.value });\n  }\n\n  fetchResults(query: Query) {\n    this.props.actions.fetchQueryResults(query, this.props.displayLimit);\n  }\n\n  reFetchQueryResults(query: Query) {\n    this.props.actions.reFetchQueryResults(query);\n  }\n\n  reRunQueryIfSessionTimeoutErrorOnMount() {\n    const { query } = this.props;\n    if (\n      query.errorMessage &&\n      query.errorMessage.indexOf('session timed out') > 0\n    ) {\n      this.props.actions.reRunQuery(query);\n    }\n  }\n\n  renderControls() {\n    if (this.props.search || this.props.visualize || this.props.csv) {\n      let { data } = this.props.query.results;\n      if (this.props.cache && this.props.query.cached) {\n        ({ data } = this.state);\n      }\n      const { columns } = this.props.query.results;\n      // Added compute logic to stop user from being able to Save & Explore\n      const {\n        saveDatasetRadioBtnState,\n        newSaveDatasetName,\n        datasetToOverwrite,\n        saveModalAutocompleteValue,\n        shouldOverwriteDataSet,\n        userDatasetOptions,\n        showSaveDatasetModal,\n      } = this.state;\n      const disableSaveAndExploreBtn =\n        (saveDatasetRadioBtnState === DatasetRadioState.SAVE_NEW &&\n          newSaveDatasetName.length === 0) ||\n        (saveDatasetRadioBtnState === DatasetRadioState.OVERWRITE_DATASET &&\n          Object.keys(datasetToOverwrite).length === 0 &&\n          saveModalAutocompleteValue.length === 0);\n\n      return (\n        <ResultSetControls>\n          <SaveDatasetModal\n            visible={showSaveDatasetModal}\n            onOk={this.handleSaveInDataset}\n            saveDatasetRadioBtnState={saveDatasetRadioBtnState}\n            shouldOverwriteDataset={shouldOverwriteDataSet}\n            defaultCreateDatasetValue={newSaveDatasetName}\n            userDatasetOptions={userDatasetOptions}\n            disableSaveAndExploreBtn={disableSaveAndExploreBtn}\n            onHide={this.handleHideSaveModal}\n            handleDatasetNameChange={this.handleDatasetNameChange}\n            handleSaveDatasetRadioBtnState={this.handleSaveDatasetRadioBtnState}\n            handleOverwriteCancel={this.handleOverwriteCancel}\n            handleOverwriteDataset={this.handleOverwriteDataset}\n            handleOverwriteDatasetOption={this.handleOverwriteDatasetOption}\n            handleSaveDatasetModalSearch={this.handleSaveDatasetModalSearch}\n            filterAutocompleteOption={this.handleFilterAutocompleteOption}\n            onChangeAutoComplete={this.handleOnChangeAutoComplete}\n          />\n          <ResultSetButtons>\n            {this.props.visualize &&\n              this.props.database &&\n              this.props.database.allows_virtual_table_explore && (\n                <ExploreResultsButton\n                  // @ts-ignore Redux types are difficult to work with, ignoring for now\n                  query={this.props.query}\n                  database={this.props.database}\n                  actions={this.props.actions}\n                  onClick={this.handleExploreBtnClick}\n                />\n              )}\n            {this.props.csv && (\n              <Button\n                buttonSize=\"small\"\n                href={`/superset/csv/${this.props.query.id}`}\n              >\n                <i className=\"fa fa-file-text-o\" /> {t('Download to CSV')}\n              </Button>\n            )}\n\n            <CopyToClipboard\n              text={prepareCopyToClipboardTabularData(data, columns)}\n              wrapped={false}\n              copyNode={\n                <Button buttonSize=\"small\">\n                  <i className=\"fa fa-clipboard\" /> {t('Copy to Clipboard')}\n                </Button>\n              }\n            />\n          </ResultSetButtons>\n          {this.props.search && (\n            <input\n              type=\"text\"\n              onChange={this.changeSearch}\n              value={this.state.searchText}\n              className=\"form-control input-sm\"\n              placeholder={t('Filter results')}\n            />\n          )}\n        </ResultSetControls>\n      );\n    }\n    return <div />;\n  }\n\n  onAlertClose = () => {\n    this.setState({ alertIsOpen: false });\n  };\n\n  renderRowsReturned() {\n    const { results, rows, queryLimit, limitingFactor } = this.props.query;\n    let limitMessage;\n    const limitReached = results?.displayLimitReached;\n    const limit = queryLimit || results.query.limit;\n    const isAdmin = !!this.props.user?.roles?.Admin;\n    const displayMaxRowsReachedMessage = {\n      withAdmin: t(\n        `The number of results displayed is limited to %(rows)d by the configuration DISPLAY_MAX_ROWS. `,\n        { rows },\n      ).concat(\n        t(\n          `Please add additional limits/filters or download to csv to see more rows up to `,\n        ),\n        t(`the %(limit)d limit.`, { limit }),\n      ),\n      withoutAdmin: t(\n        `The number of results displayed is limited to %(rows)d. `,\n        { rows },\n      ).concat(\n        t(\n          `Please add additional limits/filters, download to csv, or contact an admin `,\n        ),\n        t(`to see more rows up to the %(limit)d limit.`, {\n          limit,\n        }),\n      ),\n    };\n    const shouldUseDefaultDropdownAlert =\n      limit === this.props.defaultQueryLimit &&\n      limitingFactor === LIMITING_FACTOR.DROPDOWN;\n\n    if (limitingFactor === LIMITING_FACTOR.QUERY && this.props.csv) {\n      limitMessage = (\n        <span className=\"limitMessage\">\n          {t(\n            `The number of rows displayed is limited to %(rows)d by the query`,\n            { rows },\n          )}\n        </span>\n      );\n    } else if (\n      limitingFactor === LIMITING_FACTOR.DROPDOWN &&\n      !shouldUseDefaultDropdownAlert\n    ) {\n      limitMessage = (\n        <span className=\"limitMessage\">\n          {t(\n            `The number of rows displayed is limited to %(rows)d by the limit dropdown.`,\n            { rows },\n          )}\n        </span>\n      );\n    } else if (limitingFactor === LIMITING_FACTOR.QUERY_AND_DROPDOWN) {\n      limitMessage = (\n        <span className=\"limitMessage\">\n          {t(\n            `The number of rows displayed is limited to %(rows)d by the query and limit dropdown.`,\n            { rows },\n          )}\n        </span>\n      );\n    }\n    return (\n      <ReturnedRows>\n        {!limitReached && !shouldUseDefaultDropdownAlert && (\n          <span>\n            {t(`%(rows)d rows returned`, { rows })} {limitMessage}\n          </span>\n        )}\n        {!limitReached && shouldUseDefaultDropdownAlert && (\n          <div ref={this.calculateAlertRefHeight}>\n            <Alert\n              type=\"warning\"\n              message={t(`%(rows)d rows returned`, { rows })}\n              onClose={this.onAlertClose}\n              description={t(\n                `The number of rows displayed is limited to %s by the dropdown.`,\n                rows,\n              )}\n            />\n          </div>\n        )}\n        {limitReached && (\n          <div ref={this.calculateAlertRefHeight}>\n            <Alert\n              type=\"warning\"\n              onClose={this.onAlertClose}\n              message={t(`%(rows)d rows returned`, { rows })}\n              description={\n                isAdmin\n                  ? displayMaxRowsReachedMessage.withAdmin\n                  : displayMaxRowsReachedMessage.withoutAdmin\n              }\n            />\n          </div>\n        )}\n      </ReturnedRows>\n    );\n  }\n\n  render() {\n    const { query } = this.props;\n    let sql;\n    let exploreDBId = query.dbId;\n    if (this.props.database && this.props.database.explore_database_id) {\n      exploreDBId = this.props.database.explore_database_id;\n    }\n\n    if (this.props.showSql) {\n      sql = <HighlightedSql sql={query.sql} />;\n    }\n\n    if (query.state === 'stopped') {\n      return <Alert type=\"warning\" message={t('Query was stopped')} />;\n    }\n    if (query.state === 'failed') {\n      return (\n        <ResultSetErrorMessage>\n          <ErrorMessageWithStackTrace\n            title={t('Database error')}\n            error={query?.errors?.[0]}\n            subtitle={<MonospaceDiv>{query.errorMessage}</MonospaceDiv>}\n            copyText={query.errorMessage || undefined}\n            link={query.link}\n            source=\"sqllab\"\n          />\n        </ResultSetErrorMessage>\n      );\n    }\n    if (query.state === 'success' && query.ctas) {\n      const { tempSchema, tempTable } = query;\n      let object = 'Table';\n      if (query.ctas_method === CtasEnum.VIEW) {\n        object = 'View';\n      }\n      return (\n        <div>\n          <Alert\n            type=\"info\"\n            message={\n              <>\n                {t(object)} [\n                <strong>\n                  {tempSchema ? `${tempSchema}.` : ''}\n                  {tempTable}\n                </strong>\n                ] {t('was created')} &nbsp;\n                <ButtonGroup>\n                  <Button\n                    buttonSize=\"small\"\n                    className=\"m-r-5\"\n                    onClick={() => this.popSelectStar(tempSchema, tempTable)}\n                  >\n                    {t('Query in a new tab')}\n                  </Button>\n                  <ExploreCtasResultsButton\n                    // @ts-ignore Redux types are difficult to work with, ignoring for now\n                    table={tempTable}\n                    schema={tempSchema}\n                    dbId={exploreDBId}\n                    database={this.props.database}\n                    actions={this.props.actions}\n                  />\n                </ButtonGroup>\n              </>\n            }\n          />\n        </div>\n      );\n    }\n    if (query.state === 'success' && query.results) {\n      const { results } = query;\n      const height = this.state.alertIsOpen\n        ? this.props.height - 70\n        : this.props.height;\n      let data;\n      if (this.props.cache && query.cached) {\n        ({ data } = this.state);\n      } else if (results && results.data) {\n        ({ data } = results);\n      }\n      if (data && data.length > 0) {\n        const expandedColumns = results.expanded_columns\n          ? results.expanded_columns.map(col => col.name)\n          : [];\n        return (\n          <>\n            {this.renderControls()}\n            {this.renderRowsReturned()}\n            {sql}\n            <FilterableTable\n              data={data}\n              orderedColumnKeys={results.columns.map(col => col.name)}\n              height={height}\n              filterText={this.state.searchText}\n              expandedColumns={expandedColumns}\n            />\n          </>\n        );\n      }\n      if (data && data.length === 0) {\n        return (\n          <Alert type=\"warning\" message={t('The query returned no data')} />\n        );\n      }\n    }\n    if (query.cached || (query.state === 'success' && !query.results)) {\n      if (query.isDataPreview) {\n        return (\n          <Button\n            buttonSize=\"small\"\n            buttonStyle=\"primary\"\n            onClick={() =>\n              this.reFetchQueryResults({\n                ...query,\n                isDataPreview: true,\n              })\n            }\n          >\n            {t('Fetch data preview')}\n          </Button>\n        );\n      }\n      if (query.resultsKey) {\n        return (\n          <Button\n            buttonSize=\"small\"\n            buttonStyle=\"primary\"\n            onClick={() => this.fetchResults(query)}\n          >\n            {t('Refetch results')}\n          </Button>\n        );\n      }\n    }\n    let progressBar;\n    let trackingUrl;\n    if (query.progress > 0) {\n      progressBar = (\n        <ProgressBar\n          percent={parseInt(query.progress.toFixed(0), 10)}\n          striped\n        />\n      );\n    }\n    if (query.trackingUrl) {\n      trackingUrl = (\n        <Button\n          buttonSize=\"small\"\n          onClick={() => query.trackingUrl && window.open(query.trackingUrl)}\n        >\n          {t('Track job')}\n        </Button>\n      );\n    }\n    const progressMsg =\n      query && query.extra && query.extra.progress\n        ? query.extra.progress\n        : null;\n    return (\n      <div style={LOADING_STYLES}>\n        <div>{!progressBar && <Loading position=\"normal\" />}</div>\n        <QueryStateLabel query={query} />\n        <div>\n          {progressMsg && <Alert type=\"success\" message={progressMsg} />}\n        </div>\n        <div>{progressBar}</div>\n        <div>{trackingUrl}</div>\n      </div>\n    );\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}