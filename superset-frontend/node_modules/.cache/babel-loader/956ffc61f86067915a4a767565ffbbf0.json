{"ast":null,"code":"import { css as _css } from \"@emotion/react\";import _extends from \"@babel/runtime-corejs3/helpers/extends\";import _debounce from \"lodash/debounce\"; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint camelcase: 0 */\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport { styled, t, css, useTheme } from '@superset-ui/core';\n\nimport { Resizable } from 're-resizable';\n\nimport { usePluginContext } from 'src/components/DynamicPlugins';\nimport { Global } from '@emotion/react';\nimport { Tooltip } from 'src/components/Tooltip';\nimport { usePrevious } from 'src/common/hooks/usePrevious';\nimport Icons from 'src/components/Icons';\nimport {\ngetFromLocalStorage,\nsetInLocalStorage } from\n'src/utils/localStorageHelpers';\nimport { URL_PARAMS } from 'src/constants';\nimport cx from 'classnames';\nimport * as chartActions from 'src/chart/chartAction';\nimport { fetchDatasourceMetadata } from 'src/dashboard/actions/datasources';\nimport { chartPropShape } from 'src/dashboard/util/propShapes';\nimport { mergeExtraFormData } from 'src/dashboard/components/nativeFilters/utils';\nimport ExploreChartPanel from './ExploreChartPanel';\nimport ConnectedControlPanelsContainer from './ControlPanelsContainer';\nimport SaveModal from './SaveModal';\nimport QueryAndSaveBtns from './QueryAndSaveBtns';\nimport DataSourcePanel from './DatasourcePanel';\nimport { getExploreLongUrl } from '../exploreUtils';\nimport { areObjectsEqual } from '../../reduxUtils';\nimport { getFormDataFromControls } from '../controlUtils';\nimport * as exploreActions from '../actions/exploreActions';\nimport * as saveModalActions from '../actions/saveModalActions';\nimport * as logActions from '../../logger/actions';\nimport {\nLOG_ACTIONS_MOUNT_EXPLORER,\nLOG_ACTIONS_CHANGE_EXPLORE_CONTROLS } from\n'../../logger/LogUtils';import { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nconst propTypes = {\n  ...ExploreChartPanel.propTypes,\n  height: PropTypes.string,\n  width: PropTypes.string,\n  actions: PropTypes.object.isRequired,\n  datasource_type: PropTypes.string.isRequired,\n  dashboardId: PropTypes.number,\n  isDatasourceMetaLoading: PropTypes.bool.isRequired,\n  chart: chartPropShape.isRequired,\n  slice: PropTypes.object,\n  sliceName: PropTypes.string,\n  controls: PropTypes.object.isRequired,\n  forcedHeight: PropTypes.string,\n  form_data: PropTypes.object.isRequired,\n  standalone: PropTypes.number.isRequired,\n  timeout: PropTypes.number,\n  impressionId: PropTypes.string,\n  vizType: PropTypes.string };\n\n\nconst Styles = styled.div`\n  background: ${({ theme }) => theme.colors.grayscale.light5};\n  text-align: left;\n  position: relative;\n  width: 100%;\n  max-height: 100%;\n  display: flex;\n  flex-direction: row;\n  flex-wrap: nowrap;\n  flex-basis: 100vh;\n  align-items: stretch;\n  border-top: 1px solid ${({ theme }) => theme.colors.grayscale.light2};\n  .explore-column {\n    display: flex;\n    flex-direction: column;\n    padding: ${({ theme }) => 2 * theme.gridUnit}px 0;\n    max-height: 100%;\n  }\n  .data-source-selection {\n    background-color: ${({ theme }) => theme.colors.grayscale.light4};\n    padding: ${({ theme }) => 2 * theme.gridUnit}px 0;\n    border-right: 1px solid ${({ theme }) => theme.colors.grayscale.light2};\n  }\n  .main-explore-content {\n    flex: 1;\n    min-width: ${({ theme }) => theme.gridUnit * 128}px;\n    border-left: 1px solid ${({ theme }) => theme.colors.grayscale.light2};\n    .panel {\n      margin-bottom: 0;\n    }\n  }\n  .controls-column {\n    align-self: flex-start;\n    padding: 0;\n  }\n  .title-container {\n    position: relative;\n    display: flex;\n    flex-direction: row;\n    padding: 0 ${({ theme }) => 2 * theme.gridUnit}px;\n    justify-content: space-between;\n    .horizontal-text {\n      text-transform: uppercase;\n      color: ${({ theme }) => theme.colors.grayscale.light1};\n      font-size: ${({ theme }) => 4 * theme.typography.sizes.s};\n    }\n  }\n  .no-show {\n    display: none;\n  }\n  .vertical-text {\n    writing-mode: vertical-rl;\n    text-orientation: mixed;\n  }\n  .sidebar {\n    height: 100%;\n    background-color: ${({ theme }) => theme.colors.grayscale.light4};\n    padding: ${({ theme }) => 2 * theme.gridUnit}px;\n    width: ${({ theme }) => 8 * theme.gridUnit}px;\n  }\n  .callpase-icon > svg {\n    color: ${({ theme }) => theme.colors.primary.base};\n  }\n`;\n\nconst getWindowSize = () => ({\n  height: window.innerHeight,\n  width: window.innerWidth });\n\n\nfunction useWindowSize({ delayMs = 250 } = {}) {\n  const [size, setSize] = useState(getWindowSize());\n\n  useEffect(() => {\n    const onWindowResize = _debounce(() => setSize(getWindowSize()), delayMs);\n    window.addEventListener('resize', onWindowResize);\n    return () => window.removeEventListener('resize', onWindowResize);\n  }, []);\n\n  return size;\n}\n\nfunction ExploreViewContainer(props) {\n  const dynamicPluginContext = usePluginContext();\n  const dynamicPlugin = dynamicPluginContext.dynamicPlugins[props.vizType];\n  const isDynamicPluginLoading = dynamicPlugin && dynamicPlugin.mounting;\n  const wasDynamicPluginLoading = usePrevious(isDynamicPluginLoading);\n\n  /** the state of controls in the previous render */\n  const previousControls = usePrevious(props.controls);\n  /** the state of controls last time a query was triggered */\n  const [lastQueriedControls, setLastQueriedControls] = useState(\n  props.controls);\n\n  const windowSize = useWindowSize();\n\n  const [showingModal, setShowingModal] = useState(false);\n  const [isCollapsed, setIsCollapsed] = useState(false);\n\n  const theme = useTheme();\n  const width = `${windowSize.width}px`;\n  const navHeight = props.standalone ? 0 : 90;\n  const height = props.forcedHeight ?\n  `${props.forcedHeight}px` :\n  `${windowSize.height - navHeight}px`;\n\n  const storageKeys = {\n    controlsWidth: 'controls_width',\n    dataSourceWidth: 'datasource_width' };\n\n\n  const defaultSidebarsWidth = {\n    controls_width: 320,\n    datasource_width: 300 };\n\n\n  const addHistory = useCallback(\n  ({ isReplace = false, title } = {}) => {\n    const payload = { ...props.form_data };\n    const longUrl = getExploreLongUrl(\n    props.form_data,\n    props.standalone ? URL_PARAMS.standalone.name : null,\n    false);\n\n    try {\n      if (isReplace) {\n        window.history.replaceState(payload, title, longUrl);\n      } else {\n        window.history.pushState(payload, title, longUrl);\n      }\n    } catch (e) {\n      // eslint-disable-next-line no-console\n      console.warn(\n      'Failed at altering browser history',\n      payload,\n      title,\n      longUrl);\n\n    }\n  },\n  [props.form_data, props.standalone]);\n\n\n  function handlePopstate() {\n    const formData = window.history.state;\n    if (formData && Object.keys(formData).length) {\n      props.actions.setExploreControls(formData);\n      props.actions.postChartFormData(\n      formData,\n      false,\n      props.timeout,\n      props.chart.id);\n\n    }\n  }\n  const onQuery = useCallback(() => {\n    props.actions.triggerQuery(true, props.chart.id);\n    addHistory();\n    setLastQueriedControls(props.controls);\n  }, [props.controls, addHistory, props.actions, props.chart.id]);\n\n  function handleKeydown(event) {\n    const controlOrCommand = event.ctrlKey || event.metaKey;\n    if (controlOrCommand) {\n      const isEnter = event.key === 'Enter' || event.keyCode === 13;\n      const isS = event.key === 's' || event.keyCode === 83;\n      if (isEnter) {\n        onQuery();\n      } else if (isS) {\n        if (props.slice) {\n          props.actions.\n          saveSlice(props.form_data, {\n            action: 'overwrite',\n            slice_id: props.slice.slice_id,\n            slice_name: props.slice.slice_name,\n            add_to_dash: 'noSave',\n            goto_dash: false }).\n\n          then(({ data }) => {\n            window.location = data.slice.slice_url;\n          });\n        }\n      }\n    }\n  }\n\n  function onStop() {\n    if (props.chart && props.chart.queryController) {\n      props.chart.queryController.abort();\n    }\n  }\n\n  function toggleModal() {\n    setShowingModal(!showingModal);\n  }\n\n  function toggleCollapse() {\n    setIsCollapsed(!isCollapsed);\n  }\n\n  // effect to run on mount\n  useEffect(() => {\n    props.actions.logEvent(LOG_ACTIONS_MOUNT_EXPLORER);\n    addHistory({ isReplace: true });\n    window.addEventListener('popstate', handlePopstate);\n    document.addEventListener('keydown', handleKeydown);\n    return () => {\n      window.removeEventListener('popstate', handlePopstate);\n      document.removeEventListener('keydown', handleKeydown);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (wasDynamicPluginLoading && !isDynamicPluginLoading) {\n      // reload the controls now that we actually have the control config\n      props.actions.dynamicPluginControlsReady();\n    }\n  }, [isDynamicPluginLoading]);\n\n  useEffect(() => {\n    const hasError = Object.values(props.controls).some(\n    (control) =>\n    control.validationErrors && control.validationErrors.length > 0);\n\n    if (!hasError) {\n      props.actions.triggerQuery(true, props.chart.id);\n    }\n  }, []);\n\n  const reRenderChart = () => {\n    props.actions.updateQueryFormData(\n    getFormDataFromControls(props.controls),\n    props.chart.id);\n\n    props.actions.renderTriggered(new Date().getTime(), props.chart.id);\n    addHistory();\n  };\n\n  // effect to run when controls change\n  useEffect(() => {\n    if (previousControls) {\n      if (\n      props.controls.datasource && (\n      previousControls.datasource == null ||\n      props.controls.datasource.value !== previousControls.datasource.value))\n      {\n        // this should really be handled by actions\n        fetchDatasourceMetadata(props.form_data.datasource, true);\n      }\n\n      const changedControlKeys = Object.keys(props.controls).filter(\n      (key) =>\n      typeof previousControls[key] !== 'undefined' &&\n      !areObjectsEqual(\n      props.controls[key].value,\n      previousControls[key].value));\n\n\n\n      // this should also be handled by the actions that are actually changing the controls\n      const hasDisplayControlChanged = changedControlKeys.some(\n      (key) => props.controls[key].renderTrigger);\n\n      if (hasDisplayControlChanged) {\n        reRenderChart();\n      }\n    }\n  }, [props.controls, props.ownState]);\n\n  const chartIsStale = useMemo(() => {\n    if (lastQueriedControls) {\n      const changedControlKeys = Object.keys(props.controls).filter(\n      (key) =>\n      typeof lastQueriedControls[key] !== 'undefined' &&\n      !areObjectsEqual(\n      props.controls[key].value,\n      lastQueriedControls[key].value));\n\n\n\n      return changedControlKeys.some(\n      (key) =>\n      !props.controls[key].renderTrigger &&\n      !props.controls[key].dontRefreshOnChange);\n\n    }\n    return false;\n  }, [lastQueriedControls, props.controls]);\n\n  useEffect(() => {\n    if (props.ownState !== undefined) {\n      onQuery();\n      reRenderChart();\n    }\n  }, [props.ownState]);\n\n  if (chartIsStale) {\n    props.actions.logEvent(LOG_ACTIONS_CHANGE_EXPLORE_CONTROLS);\n  }\n\n  function renderErrorMessage() {\n    // Returns an error message as a node if any errors are in the store\n    const controlsWithErrors = Object.values(props.controls).filter(\n    (control) =>\n    control.validationErrors && control.validationErrors.length > 0);\n\n    if (controlsWithErrors.length === 0) {\n      return null;\n    }\n\n    const errorMessages = controlsWithErrors.map(\n    (control) => control.validationErrors);\n\n    const uniqueErrorMessages = [...new Set(errorMessages.flat())];\n\n    const errors = uniqueErrorMessages.\n    map((message) => {\n      const matchingLabels = controlsWithErrors.\n      filter((control) => {var _control$validationEr;return (_control$validationEr = control.validationErrors) == null ? void 0 : _control$validationEr.includes(message);}).\n      map((control) => control.label);\n      return [matchingLabels, message];\n    }).\n    map(([labels, message]) =>\n    ___EmotionJSX(\"div\", { key: message },\n    labels.length > 1 ? t('Controls labeled ') : t('Control labeled '),\n    ___EmotionJSX(\"strong\", null, ` ${labels.join(', ')}`),\n    ___EmotionJSX(\"span\", null, \": \", message)));\n\n\n\n    let errorMessage;\n    if (errors.length > 0) {\n      errorMessage = ___EmotionJSX(\"div\", { style: { textAlign: 'left' } }, errors);\n    }\n    return errorMessage;\n  }\n\n  function renderChartContainer() {\n    return (\n      ___EmotionJSX(ExploreChartPanel, _extends({\n        width: width,\n        height: height },\n      props, {\n        errorMessage: renderErrorMessage(),\n        refreshOverlayVisible: chartIsStale,\n        addHistory: addHistory,\n        onQuery: onQuery })));\n\n\n  }\n\n  function getSidebarWidths(key) {\n    return getFromLocalStorage(key, defaultSidebarsWidth[key]);\n  }\n\n  function setSidebarWidths(key, dimension) {\n    const newDimension = Number(getSidebarWidths(key)) + dimension.width;\n    setInLocalStorage(key, newDimension);\n  }\n\n  if (props.standalone) {\n    return renderChartContainer();\n  }\n\n  return (\n    ___EmotionJSX(Styles, { id: \"explore-container\", height: height },\n    ___EmotionJSX(Global, {\n      styles: css`\n          .navbar {\n            margin-bottom: 0;\n          }\n          body {\n            height: 100vh;\n            max-height: 100vh;\n            overflow: hidden;\n          }\n          #app-menu,\n          #app {\n            flex: 1 1 auto;\n          }\n          #app {\n            flex-basis: 100%;\n            overflow: hidden;\n            height: 100%;\n          }\n          #app-menu {\n            flex-shrink: 0;\n          }\n        ` }),\n\n    showingModal &&\n    ___EmotionJSX(SaveModal, {\n      onHide: toggleModal,\n      actions: props.actions,\n      form_data: props.form_data,\n      sliceName: props.sliceName,\n      dashboardId: props.dashboardId }),\n\n\n    ___EmotionJSX(Resizable, {\n      onResizeStop: (evt, direction, ref, d) =>\n      setSidebarWidths(storageKeys.dataSourceWidth, d),\n\n      defaultSize: {\n        width: getSidebarWidths(storageKeys.dataSourceWidth),\n        height: '100%' },\n\n      minWidth: defaultSidebarsWidth[storageKeys.dataSourceWidth],\n      maxWidth: \"33%\",\n      enable: { right: true },\n      className:\n      isCollapsed ? 'no-show' : 'explore-column data-source-selection' },\n\n\n    ___EmotionJSX(\"div\", { className: \"title-container\" },\n    ___EmotionJSX(\"span\", { className: \"horizont al-text\" }, t('Dataset')),\n    ___EmotionJSX(\"span\", {\n      role: \"button\",\n      tabIndex: 0,\n      className: \"action-button\",\n      onClick: toggleCollapse },\n\n    ___EmotionJSX(Icons.Expand, {\n      className: \"collapse-icon\",\n      iconColor: theme.colors.primary.base,\n      iconSize: \"l\" }))),\n\n\n\n    ___EmotionJSX(DataSourcePanel, {\n      datasource: props.datasource,\n      controls: props.controls,\n      actions: props.actions })),\n\n\n    isCollapsed ?\n    ___EmotionJSX(\"div\", {\n      className: \"sidebar\",\n      onClick: toggleCollapse,\n\n      role: \"button\",\n      tabIndex: 0 },\n\n    ___EmotionJSX(\"span\", { role: \"button\", tabIndex: 0, className: \"action-button\" },\n    ___EmotionJSX(Tooltip, { title: t('Open Datasource tab') },\n    ___EmotionJSX(Icons.Collapse, {\n      className: \"collapse-icon\",\n      iconColor: theme.colors.primary.base,\n      iconSize: \"l\" }))),\n\n\n\n    ___EmotionJSX(Icons.DatasetPhysical, {\n      css: /*#__PURE__*/_css({ marginTop: theme.gridUnit * 2 }, process.env.NODE_ENV === \"production\" ? \"\" : \";label:ExploreViewContainer;\", process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"),\n      iconSize: \"l\",\n      iconColor: theme.colors.grayscale.base })) :\n\n\n    null,\n    ___EmotionJSX(Resizable, {\n      onResizeStop: (evt, direction, ref, d) =>\n      setSidebarWidths(storageKeys.controlsWidth, d),\n\n      defaultSize: {\n        width: getSidebarWidths(storageKeys.controlsWidth),\n        height: '100%' },\n\n      minWidth: defaultSidebarsWidth[storageKeys.controlsWidth],\n      maxWidth: \"33%\",\n      enable: { right: true },\n      className: \"col-sm-3 explore-column controls-column\" },\n\n    ___EmotionJSX(QueryAndSaveBtns, {\n      canAdd: !!(props.can_add || props.can_overwrite),\n      onQuery: onQuery,\n      onSave: toggleModal,\n      onStop: onStop,\n      loading: props.chart.chartStatus === 'loading',\n      chartIsStale: chartIsStale,\n      errorMessage: renderErrorMessage(),\n      datasourceType: props.datasource_type }),\n\n    ___EmotionJSX(ConnectedControlPanelsContainer, {\n      actions: props.actions,\n      form_data: props.form_data,\n      controls: props.controls,\n      datasource_type: props.datasource_type,\n      isDatasourceMetaLoading: props.isDatasourceMetaLoading })),\n\n\n    ___EmotionJSX(\"div\", {\n      className: cx(\n      'main-explore-content',\n      isCollapsed ? 'col-sm-9' : 'col-sm-7') },\n\n\n    renderChartContainer())));\n\n\n\n}\n\nExploreViewContainer.propTypes = propTypes;\n\nfunction mapStateToProps(state) {var _dataMask, _form_data$slice_id, _dataMask2, _form_data$slice_id2;\n  const { explore, charts, impressionId, dataMask, reports } = state;\n  const form_data = getFormDataFromControls(explore.controls);\n  form_data.extra_form_data = mergeExtraFormData(\n  { ...form_data.extra_form_data },\n  {\n    ...((_dataMask = dataMask[(_form_data$slice_id = form_data.slice_id) != null ? _form_data$slice_id : 0]) == null ? void 0 : _dataMask.ownState) // 0 - unsaved chart\n  });\n\n  const chartKey = Object.keys(charts)[0];\n  const chart = charts[chartKey];\n\n  return {\n    isDatasourceMetaLoading: explore.isDatasourceMetaLoading,\n    datasource: explore.datasource,\n    datasource_type: explore.datasource.type,\n    datasourceId: explore.datasource_id,\n    dashboardId: explore.form_data ? explore.form_data.dashboardId : undefined,\n    controls: explore.controls,\n    can_overwrite: !!explore.can_overwrite,\n    can_add: !!explore.can_add,\n    can_download: !!explore.can_download,\n    column_formats: explore.datasource ?\n    explore.datasource.column_formats :\n    null,\n    containerId: explore.slice ?\n    `slice-container-${explore.slice.slice_id}` :\n    'slice-container',\n    isStarred: explore.isStarred,\n    slice: explore.slice,\n    sliceName: explore.sliceName,\n    triggerRender: explore.triggerRender,\n    form_data,\n    table_name: form_data.datasource_name,\n    vizType: form_data.viz_type,\n    standalone: explore.standalone,\n    forcedHeight: explore.forced_height,\n    chart,\n    timeout: explore.common.conf.SUPERSET_WEBSERVER_TIMEOUT,\n    ownState: (_dataMask2 = dataMask[(_form_data$slice_id2 = form_data.slice_id) != null ? _form_data$slice_id2 : 0]) == null ? void 0 : _dataMask2.ownState, // 0 - unsaved chart\n    impressionId,\n    user: explore.user,\n    reports };\n\n}\n\nfunction mapDispatchToProps(dispatch) {\n  const actions = {\n    ...exploreActions,\n    ...saveModalActions,\n    ...chartActions,\n    ...logActions };\n\n  return {\n    actions: bindActionCreators(actions, dispatch) };\n\n}\n\nexport default connect(\nmapStateToProps,\nmapDispatchToProps)(\nExploreViewContainer);","map":null,"metadata":{},"sourceType":"module"}