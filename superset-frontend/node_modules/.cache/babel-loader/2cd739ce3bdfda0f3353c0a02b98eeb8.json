{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint camelcase: 0 */\n\nexport function formatSelectOptions(options) {\n  return options.map((opt) => [opt, opt.toString()]);\n}\n\nexport function getDatasourceParameter(datasourceId, datasourceType) {\n  return `${datasourceId}__${datasourceType}`;\n}\n\nexport function mainMetric(savedMetrics) {\n  // Using 'count' as default metric if it exists, otherwise using whatever one shows up first\n  let metric;\n  if (savedMetrics && savedMetrics.length > 0) {\n    savedMetrics.forEach((m) => {\n      if (m.metric_name === 'count') {\n        metric = 'count';\n      }\n    });\n    if (!metric) {\n      metric = savedMetrics[0].metric_name;\n    }\n  }\n  return metric;\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(formatSelectOptions, \"formatSelectOptions\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/modules/utils.js\");reactHotLoader.register(getDatasourceParameter, \"getDatasourceParameter\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/modules/utils.js\");reactHotLoader.register(mainMetric, \"mainMetric\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/modules/utils.js\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/home/ubuntu/my_plugin/superset/superset-frontend/src/modules/utils.js"],"names":["formatSelectOptions","options","map","opt","toString","getDatasourceParameter","datasourceId","datasourceType","mainMetric","savedMetrics","metric","length","forEach","m","metric_name"],"mappings":"wSAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASA,mBAAT,CAA6BC,OAA7B,EAAsC;AAC3C,SAAOA,OAAO,CAACC,GAAR,CAAY,CAAAC,GAAG,KAAI,CAACA,GAAD,EAAMA,GAAG,CAACC,QAAJ,EAAN,CAAnB,CAAP;AACD;;AAED,OAAO,SAASC,sBAAT,CAAgCC,YAAhC,EAA8CC,cAA9C,EAA8D;AACnE,SAAQ,GAAED,YAAa,KAAIC,cAAe,EAA1C;AACD;;AAED,OAAO,SAASC,UAAT,CAAoBC,YAApB,EAAkC;AACvC;AACA,MAAIC,MAAJ;AACA,MAAID,YAAY,IAAIA,YAAY,CAACE,MAAb,GAAsB,CAA1C,EAA6C;AAC3CF,IAAAA,YAAY,CAACG,OAAb,CAAqB,CAAAC,CAAC,KAAI;AACxB,UAAIA,CAAC,CAACC,WAAF,KAAkB,OAAtB,EAA+B;AAC7BJ,QAAAA,MAAM,GAAG,OAAT;AACD;AACF,KAJD;AAKA,QAAI,CAACA,MAAL,EAAa;AACXA,MAAAA,MAAM,GAAGD,YAAY,CAAC,CAAD,CAAZ,CAAgBK,WAAzB;AACD;AACF;AACD,SAAOJ,MAAP;AACD,C,iLAtBeV,mB,2HAIAK,sB,8HAIAG,U","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint camelcase: 0 */\n\nexport function formatSelectOptions(options) {\n  return options.map(opt => [opt, opt.toString()]);\n}\n\nexport function getDatasourceParameter(datasourceId, datasourceType) {\n  return `${datasourceId}__${datasourceType}`;\n}\n\nexport function mainMetric(savedMetrics) {\n  // Using 'count' as default metric if it exists, otherwise using whatever one shows up first\n  let metric;\n  if (savedMetrics && savedMetrics.length > 0) {\n    savedMetrics.forEach(m => {\n      if (m.metric_name === 'count') {\n        metric = 'count';\n      }\n    });\n    if (!metric) {\n      metric = savedMetrics[0].metric_name;\n    }\n  }\n  return metric;\n}\n"]},"metadata":{},"sourceType":"module"}