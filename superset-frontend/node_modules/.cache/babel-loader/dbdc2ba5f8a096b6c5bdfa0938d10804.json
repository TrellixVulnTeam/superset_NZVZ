{"ast":null,"code":"function _EMOTION_STRINGIFIED_CSS_ERROR__() {return \"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\";} /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport JSONbig from 'json-bigint';\nimport React, { PureComponent } from 'react';\nimport JSONTree from 'react-json-tree';\nimport { Column, Grid, ScrollSync, SortDirection, SortIndicator, Table } from 'react-virtualized';\nimport { getMultipleTextDimensions, t, styled } from '@superset-ui/core';\nimport { Tooltip } from 'src/components/Tooltip';\nimport Button from '../Button';\nimport CopyToClipboard from '../CopyToClipboard';\nimport ModalTrigger from '../ModalTrigger';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nfunction safeJsonObjectParse(data) {\n  // First perform a cheap proxy to avoid calling JSON.parse on data that is clearly not a\n  // JSON object or array\n  if (typeof data !== 'string' ||\n  ['{', '['].indexOf(data.substring(0, 1)) === -1) {\n    return null;\n  }\n  // We know `data` is a string starting with '{' or '[', so try to parse it as a valid object\n  try {\n    const jsonData = JSON.parse(data);\n    if (jsonData && typeof jsonData === 'object') {\n      return jsonData;\n    }\n    return null;\n  }\n  catch (_) {\n    return null;\n  }\n}\nconst SCROLL_BAR_HEIGHT = 15;\nconst GRID_POSITION_ADJUSTMENT = 4;\nconst JSON_TREE_THEME = {\n  scheme: 'monokai',\n  author: 'wimer hazenberg (http://www.monokai.nl)',\n  base00: '#272822',\n  base01: '#383830',\n  base02: '#49483e',\n  base03: '#75715e',\n  base04: '#a59f85',\n  base05: '#f8f8f2',\n  base06: '#f5f4f1',\n  base07: '#f9f8f5',\n  base08: '#f92672',\n  base09: '#fd971f',\n  base0A: '#f4bf75',\n  base0B: '#a6e22e',\n  base0C: '#a1efe4',\n  base0D: '#66d9ef',\n  base0E: '#ae81ff',\n  base0F: '#cc6633' };\n\nconst StyledFilterableTable = styled.div`\n  height: 100%;\n  overflow-x: auto;\n  margin-top: ${({ theme }) => theme.gridUnit * 2}px;\n  overflow-y: hidden;\n`;\n// when more than MAX_COLUMNS_FOR_TABLE are returned, switch from table to grid view\nexport const MAX_COLUMNS_FOR_TABLE = 50;var _ref = process.env.NODE_ENV === \"production\" ? { name: \"4zleql\", styles: \"display:block\" } : { name: \"1u1f4sv-FilterableTable\", styles: \"display:block;label:FilterableTable;\", map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\", toString: _EMOTION_STRINGIFIED_CSS_ERROR__ };var _ref2 = process.env.NODE_ENV === \"production\" ? { name: \"4zleql\", styles: \"display:block\" } : { name: \"1u1f4sv-FilterableTable\", styles: \"display:block;label:FilterableTable;\", map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\", toString: _EMOTION_STRINGIFIED_CSS_ERROR__ };var _ref3 = process.env.NODE_ENV === \"production\" ? { name: \"6n1ert\", styles: \"width:inherit\" } : { name: \"7cwprp-FilterableTable\", styles: \"width:inherit;label:FilterableTable;\", map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3VidW50dS9teV9wbHVnaW4vc3VwZXJzZXQvc3VwZXJzZXQtZnJvbnRlbmQvc3JjL2NvbXBvbmVudHMvRmlsdGVyYWJsZVRhYmxlL0ZpbHRlcmFibGVUYWJsZS50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBMlJhIiwiZmlsZSI6Ii9ob21lL3VidW50dS9teV9wbHVnaW4vc3VwZXJzZXQvc3VwZXJzZXQtZnJvbnRlbmQvc3JjL2NvbXBvbmVudHMvRmlsdGVyYWJsZVRhYmxlL0ZpbHRlcmFibGVUYWJsZS50c3giLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbiAqIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuICogZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbiAqIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbiAqIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbiAqIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuICogd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuICogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiAqIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4gKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiAqIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiAqIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5pbXBvcnQgSlNPTmJpZyBmcm9tICdqc29uLWJpZ2ludCc7XG5pbXBvcnQgUmVhY3QsIHsgUHVyZUNvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBKU09OVHJlZSBmcm9tICdyZWFjdC1qc29uLXRyZWUnO1xuaW1wb3J0IHsgQ29sdW1uLCBHcmlkLCBTY3JvbGxTeW5jLCBTb3J0RGlyZWN0aW9uLCBTb3J0SW5kaWNhdG9yLCBUYWJsZSwgfSBmcm9tICdyZWFjdC12aXJ0dWFsaXplZCc7XG5pbXBvcnQgeyBnZXRNdWx0aXBsZVRleHREaW1lbnNpb25zLCB0LCBzdHlsZWQgfSBmcm9tICdAc3VwZXJzZXQtdWkvY29yZSc7XG5pbXBvcnQgeyBUb29sdGlwIH0gZnJvbSAnc3JjL2NvbXBvbmVudHMvVG9vbHRpcCc7XG5pbXBvcnQgQnV0dG9uIGZyb20gJy4uL0J1dHRvbic7XG5pbXBvcnQgQ29weVRvQ2xpcGJvYXJkIGZyb20gJy4uL0NvcHlUb0NsaXBib2FyZCc7XG5pbXBvcnQgTW9kYWxUcmlnZ2VyIGZyb20gJy4uL01vZGFsVHJpZ2dlcic7XG5mdW5jdGlvbiBzYWZlSnNvbk9iamVjdFBhcnNlKGRhdGEpIHtcbiAgICAvLyBGaXJzdCBwZXJmb3JtIGEgY2hlYXAgcHJveHkgdG8gYXZvaWQgY2FsbGluZyBKU09OLnBhcnNlIG9uIGRhdGEgdGhhdCBpcyBjbGVhcmx5IG5vdCBhXG4gICAgLy8gSlNPTiBvYmplY3Qgb3IgYXJyYXlcbiAgICBpZiAodHlwZW9mIGRhdGEgIT09ICdzdHJpbmcnIHx8XG4gICAgICAgIFsneycsICdbJ10uaW5kZXhPZihkYXRhLnN1YnN0cmluZygwLCAxKSkgPT09IC0xKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICAvLyBXZSBrbm93IGBkYXRhYCBpcyBhIHN0cmluZyBzdGFydGluZyB3aXRoICd7JyBvciAnWycsIHNvIHRyeSB0byBwYXJzZSBpdCBhcyBhIHZhbGlkIG9iamVjdFxuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGpzb25EYXRhID0gSlNPTi5wYXJzZShkYXRhKTtcbiAgICAgICAgaWYgKGpzb25EYXRhICYmIHR5cGVvZiBqc29uRGF0YSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIHJldHVybiBqc29uRGF0YTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgY2F0Y2ggKF8pIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxufVxuY29uc3QgU0NST0xMX0JBUl9IRUlHSFQgPSAxNTtcbmNvbnN0IEdSSURfUE9TSVRJT05fQURKVVNUTUVOVCA9IDQ7XG5jb25zdCBKU09OX1RSRUVfVEhFTUUgPSB7XG4gICAgc2NoZW1lOiAnbW9ub2thaScsXG4gICAgYXV0aG9yOiAnd2ltZXIgaGF6ZW5iZXJnIChodHRwOi8vd3d3Lm1vbm9rYWkubmwpJyxcbiAgICBiYXNlMDA6ICcjMjcyODIyJyxcbiAgICBiYXNlMDE6ICcjMzgzODMwJyxcbiAgICBiYXNlMDI6ICcjNDk0ODNlJyxcbiAgICBiYXNlMDM6ICcjNzU3MTVlJyxcbiAgICBiYXNlMDQ6ICcjYTU5Zjg1JyxcbiAgICBiYXNlMDU6ICcjZjhmOGYyJyxcbiAgICBiYXNlMDY6ICcjZjVmNGYxJyxcbiAgICBiYXNlMDc6ICcjZjlmOGY1JyxcbiAgICBiYXNlMDg6ICcjZjkyNjcyJyxcbiAgICBiYXNlMDk6ICcjZmQ5NzFmJyxcbiAgICBiYXNlMEE6ICcjZjRiZjc1JyxcbiAgICBiYXNlMEI6ICcjYTZlMjJlJyxcbiAgICBiYXNlMEM6ICcjYTFlZmU0JyxcbiAgICBiYXNlMEQ6ICcjNjZkOWVmJyxcbiAgICBiYXNlMEU6ICcjYWU4MWZmJyxcbiAgICBiYXNlMEY6ICcjY2M2NjMzJyxcbn07XG5jb25zdCBTdHlsZWRGaWx0ZXJhYmxlVGFibGUgPSBzdHlsZWQuZGl2IGBcbiAgaGVpZ2h0OiAxMDAlO1xuICBvdmVyZmxvdy14OiBhdXRvO1xuICBtYXJnaW4tdG9wOiAkeyh7IHRoZW1lIH0pID0+IHRoZW1lLmdyaWRVbml0ICogMn1weDtcbiAgb3ZlcmZsb3cteTogaGlkZGVuO1xuYDtcbi8vIHdoZW4gbW9yZSB0aGFuIE1BWF9DT0xVTU5TX0ZPUl9UQUJMRSBhcmUgcmV0dXJuZWQsIHN3aXRjaCBmcm9tIHRhYmxlIHRvIGdyaWQgdmlld1xuZXhwb3J0IGNvbnN0IE1BWF9DT0xVTU5TX0ZPUl9UQUJMRSA9IDUwO1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRmlsdGVyYWJsZVRhYmxlIGV4dGVuZHMgUHVyZUNvbXBvbmVudCB7XG4gICAgc3RhdGljIGRlZmF1bHRQcm9wcyA9IHtcbiAgICAgICAgZmlsdGVyVGV4dDogJycsXG4gICAgICAgIGhlYWRlckhlaWdodDogMzIsXG4gICAgICAgIG92ZXJzY2FuQ29sdW1uQ291bnQ6IDEwLFxuICAgICAgICBvdmVyc2NhblJvd0NvdW50OiAxMCxcbiAgICAgICAgcm93SGVpZ2h0OiAzMixcbiAgICAgICAgc3RyaXBlZDogdHJ1ZSxcbiAgICAgICAgZXhwYW5kZWRDb2x1bW5zOiBbXSxcbiAgICB9O1xuICAgIGxpc3Q7XG4gICAgY29tcGxleENvbHVtbnM7XG4gICAgd2lkdGhzRm9yQ29sdW1uc0J5S2V5O1xuICAgIHRvdGFsVGFibGVXaWR0aDtcbiAgICB0b3RhbFRhYmxlSGVpZ2h0O1xuICAgIGNvbnRhaW5lcjtcbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgICAgICBzdXBlcihwcm9wcyk7XG4gICAgICAgIHRoaXMubGlzdCA9IHRoaXMuZm9ybWF0VGFibGVEYXRhKHByb3BzLmRhdGEpO1xuICAgICAgICB0aGlzLmFkZEpzb25Nb2RhbCA9IHRoaXMuYWRkSnNvbk1vZGFsLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuZ2V0Q2VsbENvbnRlbnQgPSB0aGlzLmdldENlbGxDb250ZW50LmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMucmVuZGVyR3JpZENlbGwgPSB0aGlzLnJlbmRlckdyaWRDZWxsLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMucmVuZGVyR3JpZENlbGxIZWFkZXIgPSB0aGlzLnJlbmRlckdyaWRDZWxsSGVhZGVyLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMucmVuZGVyR3JpZCA9IHRoaXMucmVuZGVyR3JpZC5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLnJlbmRlclRhYmxlQ2VsbCA9IHRoaXMucmVuZGVyVGFibGVDZWxsLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMucmVuZGVyVGFibGVIZWFkZXIgPSB0aGlzLnJlbmRlclRhYmxlSGVhZGVyLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuc29ydFJlc3VsdHMgPSB0aGlzLnNvcnRSZXN1bHRzLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMucmVuZGVyVGFibGUgPSB0aGlzLnJlbmRlclRhYmxlLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMucm93Q2xhc3NOYW1lID0gdGhpcy5yb3dDbGFzc05hbWUuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5zb3J0ID0gdGhpcy5zb3J0LmJpbmQodGhpcyk7XG4gICAgICAgIC8vIGNvbHVtbnMgdGhhdCBoYXZlIGNvbXBsZXggdHlwZSBhbmQgd2VyZSBleHBhbmRlZCBpbnRvIHN1YiBjb2x1bW5zXG4gICAgICAgIHRoaXMuY29tcGxleENvbHVtbnMgPSBwcm9wcy5vcmRlcmVkQ29sdW1uS2V5cy5yZWR1Y2UoKG9iaiwga2V5KSA9PiAoe1xuICAgICAgICAgICAgLi4ub2JqLFxuICAgICAgICAgICAgW2tleV06IHByb3BzLmV4cGFuZGVkQ29sdW1ucy5zb21lKG5hbWUgPT4gbmFtZS5zdGFydHNXaXRoKGAke2tleX0uYCkpLFxuICAgICAgICB9KSwge30pO1xuICAgICAgICB0aGlzLndpZHRoc0ZvckNvbHVtbnNCeUtleSA9IHRoaXMuZ2V0V2lkdGhzRm9yQ29sdW1ucygpO1xuICAgICAgICB0aGlzLnRvdGFsVGFibGVXaWR0aCA9IHByb3BzLm9yZGVyZWRDb2x1bW5LZXlzXG4gICAgICAgICAgICAubWFwKGtleSA9PiB0aGlzLndpZHRoc0ZvckNvbHVtbnNCeUtleVtrZXldKVxuICAgICAgICAgICAgLnJlZHVjZSgoY3VyciwgbmV4dCkgPT4gY3VyciArIG5leHQpO1xuICAgICAgICB0aGlzLnRvdGFsVGFibGVIZWlnaHQgPSBwcm9wcy5oZWlnaHQ7XG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICBzb3J0RGlyZWN0aW9uOiBTb3J0RGlyZWN0aW9uLkFTQyxcbiAgICAgICAgICAgIGZpdHRlZDogZmFsc2UsXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuY29udGFpbmVyID0gUmVhY3QuY3JlYXRlUmVmKCk7XG4gICAgfVxuICAgIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgICB0aGlzLmZpdFRhYmxlVG9XaWR0aElmTmVlZGVkKCk7XG4gICAgfVxuICAgIGdldERhdHVtKGxpc3QsIGluZGV4KSB7XG4gICAgICAgIHJldHVybiBsaXN0W2luZGV4ICUgbGlzdC5sZW5ndGhdO1xuICAgIH1cbiAgICBnZXRXaWR0aHNGb3JDb2x1bW5zKCkge1xuICAgICAgICBjb25zdCBQQURESU5HID0gNDA7IC8vIGFjY291bnRzIGZvciBjZWxsIHBhZGRpbmcgYW5kIHdpZHRoIG9mIHNvcnRpbmcgaWNvblxuICAgICAgICBjb25zdCB3aWR0aHNCeUNvbHVtbktleSA9IHt9O1xuICAgICAgICBjb25zdCBjZWxsQ29udGVudCA9IFtdLmNvbmNhdCguLi50aGlzLnByb3BzLm9yZGVyZWRDb2x1bW5LZXlzLm1hcChrZXkgPT4ge1xuICAgICAgICAgICAgY29uc3QgY2VsbENvbnRlbnRMaXN0ID0gdGhpcy5saXN0Lm1hcCgoZGF0YSkgPT4gdGhpcy5nZXRDZWxsQ29udGVudCh7IGNlbGxEYXRhOiBkYXRhW2tleV0sIGNvbHVtbktleToga2V5IH0pKTtcbiAgICAgICAgICAgIGNlbGxDb250ZW50TGlzdC5wdXNoKGtleSk7XG4gICAgICAgICAgICByZXR1cm4gY2VsbENvbnRlbnRMaXN0O1xuICAgICAgICB9KSk7XG4gICAgICAgIGNvbnN0IGNvbFdpZHRocyA9IGdldE11bHRpcGxlVGV4dERpbWVuc2lvbnMoe1xuICAgICAgICAgICAgY2xhc3NOYW1lOiAnY2VsbC10ZXh0LWZvci1tZWFzdXJpbmcnLFxuICAgICAgICAgICAgdGV4dHM6IGNlbGxDb250ZW50LFxuICAgICAgICB9KS5tYXAoZGltZW5zaW9uID0+IGRpbWVuc2lvbi53aWR0aCk7XG4gICAgICAgIHRoaXMucHJvcHMub3JkZXJlZENvbHVtbktleXMuZm9yRWFjaCgoa2V5LCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgLy8gd2UgY2FuJ3QgdXNlIE1hdGgubWF4KC4uLmNvbFdpZHRocy5zbGljZSguLi4pKSBoZXJlIHNpbmNlIHRoZSBudW1iZXJcbiAgICAgICAgICAgIC8vIG9mIGVsZW1lbnRzIG1pZ2h0IGJlIGJpZ2dlciB0aGFuIHRoZSBudW1iZXIgb2YgYWxsb3dlZCBhcmd1bWVudHMgaW4gYVxuICAgICAgICAgICAgLy8gSmF2YXNjcmlwdCBmdW5jdGlvblxuICAgICAgICAgICAgd2lkdGhzQnlDb2x1bW5LZXlba2V5XSA9XG4gICAgICAgICAgICAgICAgY29sV2lkdGhzXG4gICAgICAgICAgICAgICAgICAgIC5zbGljZShpbmRleCAqICh0aGlzLmxpc3QubGVuZ3RoICsgMSksIChpbmRleCArIDEpICogKHRoaXMubGlzdC5sZW5ndGggKyAxKSlcbiAgICAgICAgICAgICAgICAgICAgLnJlZHVjZSgoYSwgYikgPT4gTWF0aC5tYXgoYSwgYikpICsgUEFERElORztcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB3aWR0aHNCeUNvbHVtbktleTtcbiAgICB9XG4gICAgZ2V0Q2VsbENvbnRlbnQoeyBjZWxsRGF0YSwgY29sdW1uS2V5LCB9KSB7XG4gICAgICAgIGlmIChjZWxsRGF0YSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuICdOVUxMJztcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjb250ZW50ID0gU3RyaW5nKGNlbGxEYXRhKTtcbiAgICAgICAgY29uc3QgZmlyc3RDaGFyYWN0ZXIgPSBjb250ZW50LnN1YnN0cmluZygwLCAxKTtcbiAgICAgICAgbGV0IHRydW5jYXRlZDtcbiAgICAgICAgaWYgKGZpcnN0Q2hhcmFjdGVyID09PSAnWycpIHtcbiAgICAgICAgICAgIHRydW5jYXRlZCA9ICdb4oCmXSc7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZmlyc3RDaGFyYWN0ZXIgPT09ICd7Jykge1xuICAgICAgICAgICAgdHJ1bmNhdGVkID0gJ3vigKZ9JztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRydW5jYXRlZCA9ICcnO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmNvbXBsZXhDb2x1bW5zW2NvbHVtbktleV0gPyB0cnVuY2F0ZWQgOiBjb250ZW50O1xuICAgIH1cbiAgICBmb3JtYXRUYWJsZURhdGEoZGF0YSkge1xuICAgICAgICByZXR1cm4gZGF0YS5tYXAocm93ID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG5ld1JvdyA9IHt9O1xuICAgICAgICAgICAgT2JqZWN0LmVudHJpZXMocm93KS5mb3JFYWNoKChba2V5LCB2YWxdKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKFsnc3RyaW5nJywgJ251bWJlciddLmluZGV4T2YodHlwZW9mIHZhbCkgPj0gMCkge1xuICAgICAgICAgICAgICAgICAgICBuZXdSb3dba2V5XSA9IHZhbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIG5ld1Jvd1trZXldID0gdmFsID09PSBudWxsID8gbnVsbCA6IEpTT05iaWcuc3RyaW5naWZ5KHZhbCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gbmV3Um93O1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgaGFzTWF0Y2godGV4dCwgcm93KSB7XG4gICAgICAgIGNvbnN0IHZhbHVlcyA9IFtdO1xuICAgICAgICBPYmplY3Qua2V5cyhyb3cpLmZvckVhY2goa2V5ID0+IHtcbiAgICAgICAgICAgIGlmIChyb3cuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNlbGxWYWx1ZSA9IHJvd1trZXldO1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgY2VsbFZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZXMucHVzaChjZWxsVmFsdWUudG9Mb3dlckNhc2UoKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGNlbGxWYWx1ZSAhPT0gbnVsbCAmJlxuICAgICAgICAgICAgICAgICAgICB0eXBlb2YgY2VsbFZhbHVlLnRvU3RyaW5nID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlcy5wdXNoKGNlbGxWYWx1ZS50b1N0cmluZygpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBsb3dlckNhc2VUZXh0ID0gdGV4dC50b0xvd2VyQ2FzZSgpO1xuICAgICAgICByZXR1cm4gdmFsdWVzLnNvbWUodiA9PiB2LmluY2x1ZGVzKGxvd2VyQ2FzZVRleHQpKTtcbiAgICB9XG4gICAgcm93Q2xhc3NOYW1lKHsgaW5kZXggfSkge1xuICAgICAgICBsZXQgY2xhc3NOYW1lID0gJyc7XG4gICAgICAgIGlmICh0aGlzLnByb3BzLnN0cmlwZWQpIHtcbiAgICAgICAgICAgIGNsYXNzTmFtZSA9IGluZGV4ICUgMiA9PT0gMCA/ICdldmVuLXJvdycgOiAnb2RkLXJvdyc7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNsYXNzTmFtZTtcbiAgICB9XG4gICAgc29ydCh7IHNvcnRCeSwgc29ydERpcmVjdGlvbiwgfSkge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHsgc29ydEJ5LCBzb3J0RGlyZWN0aW9uIH0pO1xuICAgIH1cbiAgICBmaXRUYWJsZVRvV2lkdGhJZk5lZWRlZCgpIHtcbiAgICAgICAgY29uc3QgY29udGFpbmVyV2lkdGggPSB0aGlzLmNvbnRhaW5lci5jdXJyZW50Py5jbGllbnRXaWR0aCA/PyAwO1xuICAgICAgICBpZiAodGhpcy50b3RhbFRhYmxlV2lkdGggPCBjb250YWluZXJXaWR0aCkge1xuICAgICAgICAgICAgLy8gZml0IHRhYmxlIHdpZHRoIGlmIGNvbnRlbnQgZG9lc24ndCBmaWxsIHRoZSB3aWR0aCBvZiB0aGUgY29udGFpbmVyXG4gICAgICAgICAgICB0aGlzLnRvdGFsVGFibGVXaWR0aCA9IGNvbnRhaW5lcldpZHRoO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyBmaXR0ZWQ6IHRydWUgfSk7XG4gICAgfVxuICAgIGFkZEpzb25Nb2RhbChub2RlLCBqc29uT2JqZWN0LCBqc29uU3RyaW5nKSB7XG4gICAgICAgIHJldHVybiAoPE1vZGFsVHJpZ2dlciBtb2RhbEJvZHk9ezxKU09OVHJlZSBkYXRhPXtqc29uT2JqZWN0fSB0aGVtZT17SlNPTl9UUkVFX1RIRU1FfS8+fSBtb2RhbEZvb3Rlcj17PEJ1dHRvbj5cbiAgICAgICAgICAgIDxDb3B5VG9DbGlwYm9hcmQgc2hvdWxkU2hvd1RleHQ9e2ZhbHNlfSB0ZXh0PXtqc29uU3RyaW5nfS8+XG4gICAgICAgICAgPC9CdXR0b24+fSBtb2RhbFRpdGxlPXt0KCdDZWxsIGNvbnRlbnQnKX0gdHJpZ2dlck5vZGU9e25vZGV9Lz4pO1xuICAgIH1cbiAgICBzb3J0UmVzdWx0cyhzb3J0QnksIGRlc2NlbmRpbmcpIHtcbiAgICAgICAgcmV0dXJuIChhLCBiKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBhVmFsdWUgPSBhW3NvcnRCeV07XG4gICAgICAgICAgICBjb25zdCBiVmFsdWUgPSBiW3NvcnRCeV07XG4gICAgICAgICAgICBpZiAoYVZhbHVlID09PSBiVmFsdWUpIHtcbiAgICAgICAgICAgICAgICAvLyBlcXVhbCBpdGVtcyBzb3J0IGVxdWFsbHlcbiAgICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChhVmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAvLyBudWxscyBzb3J0IGFmdGVyIGFueXRoaW5nIGVsc2VcbiAgICAgICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChiVmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZGVzY2VuZGluZykge1xuICAgICAgICAgICAgICAgIHJldHVybiBhVmFsdWUgPCBiVmFsdWUgPyAxIDogLTE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gYVZhbHVlIDwgYlZhbHVlID8gLTEgOiAxO1xuICAgICAgICB9O1xuICAgIH1cbiAgICByZW5kZXJUYWJsZUhlYWRlcih7IGRhdGFLZXksIGxhYmVsLCBzb3J0QnksIHNvcnREaXJlY3Rpb24sIH0pIHtcbiAgICAgICAgY29uc3QgY2xhc3NOYW1lID0gdGhpcy5wcm9wcy5leHBhbmRlZENvbHVtbnMuaW5kZXhPZihsYWJlbCkgPiAtMVxuICAgICAgICAgICAgPyAnaGVhZGVyLXN0eWxlLWRpc2FibGVkJ1xuICAgICAgICAgICAgOiAnaGVhZGVyLXN0eWxlJztcbiAgICAgICAgcmV0dXJuICg8VG9vbHRpcCBpZD1cImhlYWRlci10b29sdGlwXCIgdGl0bGU9e2xhYmVsfSBwbGFjZW1lbnQ9XCJ0b3BMZWZ0XCIgY3NzPXt7IGRpc3BsYXk6ICdibG9jaycgfX0+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPXtjbGFzc05hbWV9PlxuICAgICAgICAgIHtsYWJlbH1cbiAgICAgICAgICB7c29ydEJ5ID09PSBkYXRhS2V5ICYmICg8U29ydEluZGljYXRvciBzb3J0RGlyZWN0aW9uPXtzb3J0RGlyZWN0aW9ufS8+KX1cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L1Rvb2x0aXA+KTtcbiAgICB9XG4gICAgcmVuZGVyR3JpZENlbGxIZWFkZXIoeyBjb2x1bW5JbmRleCwga2V5LCBzdHlsZSwgfSkge1xuICAgICAgICBjb25zdCBsYWJlbCA9IHRoaXMucHJvcHMub3JkZXJlZENvbHVtbktleXNbY29sdW1uSW5kZXhdO1xuICAgICAgICBjb25zdCBjbGFzc05hbWUgPSB0aGlzLnByb3BzLmV4cGFuZGVkQ29sdW1ucy5pbmRleE9mKGxhYmVsKSA+IC0xXG4gICAgICAgICAgICA/ICdoZWFkZXItc3R5bGUtZGlzYWJsZWQnXG4gICAgICAgICAgICA6ICdoZWFkZXItc3R5bGUnO1xuICAgICAgICByZXR1cm4gKDxUb29sdGlwIGtleT17a2V5fSBpZD1cImhlYWRlci10b29sdGlwXCIgdGl0bGU9e2xhYmVsfSBwbGFjZW1lbnQ9XCJ0b3BMZWZ0XCIgY3NzPXt7IGRpc3BsYXk6ICdibG9jaycgfX0+XG4gICAgICAgIDxkaXYgc3R5bGU9e3tcbiAgICAgICAgICAgICAgICAuLi5zdHlsZSxcbiAgICAgICAgICAgICAgICB0b3A6IHR5cGVvZiBzdHlsZS50b3AgPT09ICdudW1iZXInXG4gICAgICAgICAgICAgICAgICAgID8gc3R5bGUudG9wIC0gR1JJRF9QT1NJVElPTl9BREpVU1RNRU5UXG4gICAgICAgICAgICAgICAgICAgIDogc3R5bGUudG9wLFxuICAgICAgICAgICAgfX0gY2xhc3NOYW1lPXtgJHtjbGFzc05hbWV9IGdyaWQtY2VsbCBncmlkLWhlYWRlci1jZWxsYH0+XG4gICAgICAgICAgPGRpdj57bGFiZWx9PC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9Ub29sdGlwPik7XG4gICAgfVxuICAgIHJlbmRlckdyaWRDZWxsKHsgY29sdW1uSW5kZXgsIGtleSwgcm93SW5kZXgsIHN0eWxlLCB9KSB7XG4gICAgICAgIGNvbnN0IGNvbHVtbktleSA9IHRoaXMucHJvcHMub3JkZXJlZENvbHVtbktleXNbY29sdW1uSW5kZXhdO1xuICAgICAgICBjb25zdCBjZWxsRGF0YSA9IHRoaXMubGlzdFtyb3dJbmRleF1bY29sdW1uS2V5XTtcbiAgICAgICAgY29uc3QgY29udGVudCA9IGNlbGxEYXRhID09PSBudWxsID8gKDxpIGNsYXNzTmFtZT1cInRleHQtbXV0ZWRcIj5cbiAgICAgICAgICB7dGhpcy5nZXRDZWxsQ29udGVudCh7IGNlbGxEYXRhLCBjb2x1bW5LZXkgfSl9XG4gICAgICAgIDwvaT4pIDogKHRoaXMuZ2V0Q2VsbENvbnRlbnQoeyBjZWxsRGF0YSwgY29sdW1uS2V5IH0pKTtcbiAgICAgICAgY29uc3QgY2VsbE5vZGUgPSAoPGRpdiBrZXk9e2tleX0gc3R5bGU9e3tcbiAgICAgICAgICAgICAgICAuLi5zdHlsZSxcbiAgICAgICAgICAgICAgICB0b3A6IHR5cGVvZiBzdHlsZS50b3AgPT09ICdudW1iZXInXG4gICAgICAgICAgICAgICAgICAgID8gc3R5bGUudG9wIC0gR1JJRF9QT1NJVElPTl9BREpVU1RNRU5UXG4gICAgICAgICAgICAgICAgICAgIDogc3R5bGUudG9wLFxuICAgICAgICAgICAgfX0gY2xhc3NOYW1lPXtgZ3JpZC1jZWxsICR7dGhpcy5yb3dDbGFzc05hbWUoeyBpbmRleDogcm93SW5kZXggfSl9YH0+XG4gICAgICAgIDxkaXYgY3NzPXt7IHdpZHRoOiAnaW5oZXJpdCcgfX0+e2NvbnRlbnR9PC9kaXY+XG4gICAgICA8L2Rpdj4pO1xuICAgICAgICBjb25zdCBqc29uT2JqZWN0ID0gc2FmZUpzb25PYmplY3RQYXJzZShjZWxsRGF0YSk7XG4gICAgICAgIGlmIChqc29uT2JqZWN0KSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5hZGRKc29uTW9kYWwoY2VsbE5vZGUsIGpzb25PYmplY3QsIGNlbGxEYXRhKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY2VsbE5vZGU7XG4gICAgfVxuICAgIHJlbmRlckdyaWQoKSB7XG4gICAgICAgIGNvbnN0IHsgb3JkZXJlZENvbHVtbktleXMsIG92ZXJzY2FuQ29sdW1uQ291bnQsIG92ZXJzY2FuUm93Q291bnQsIHJvd0hlaWdodCwgfSA9IHRoaXMucHJvcHM7XG4gICAgICAgIGxldCB7IGhlaWdodCB9ID0gdGhpcy5wcm9wcztcbiAgICAgICAgbGV0IHRvdGFsVGFibGVIZWlnaHQgPSBoZWlnaHQ7XG4gICAgICAgIGlmICh0aGlzLmNvbnRhaW5lci5jdXJyZW50ICYmXG4gICAgICAgICAgICB0aGlzLnRvdGFsVGFibGVXaWR0aCA+IHRoaXMuY29udGFpbmVyLmN1cnJlbnQuY2xpZW50V2lkdGgpIHtcbiAgICAgICAgICAgIC8vIGV4Y2x1ZGUgdGhlIGhlaWdodCBvZiB0aGUgaG9yaXpvbnRhbCBzY3JvbGwgYmFyIGZyb20gdGhlIGhlaWdodCBvZiB0aGUgdGFibGVcbiAgICAgICAgICAgIC8vIGFuZCB0aGUgaGVpZ2h0IG9mIHRoZSB0YWJsZSBjb250YWluZXIgaWYgdGhlIGNvbnRlbnQgb3ZlcmZsb3dzXG4gICAgICAgICAgICBoZWlnaHQgLT0gU0NST0xMX0JBUl9IRUlHSFQ7XG4gICAgICAgICAgICB0b3RhbFRhYmxlSGVpZ2h0IC09IFNDUk9MTF9CQVJfSEVJR0hUO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGdldENvbHVtbldpZHRoID0gKHsgaW5kZXggfSkgPT4gdGhpcy53aWR0aHNGb3JDb2x1bW5zQnlLZXlbb3JkZXJlZENvbHVtbktleXNbaW5kZXhdXTtcbiAgICAgICAgLy8gZml4IGhlaWdodCBvZiBmaWx0ZXJhYmxlIHRhYmxlXG4gICAgICAgIHJldHVybiAoPFN0eWxlZEZpbHRlcmFibGVUYWJsZT5cbiAgICAgICAgPFNjcm9sbFN5bmM+XG4gICAgICAgICAgeyh7IG9uU2Nyb2xsLCBzY3JvbGxUb3AgfSkgPT4gKDxkaXYgY2xhc3NOYW1lPVwiZmlsdGVyYWJsZS10YWJsZS1jb250YWluZXIgVGFibGVcIiBkYXRhLXRlc3Q9XCJmaWx0ZXJhYmxlLXRhYmxlLWNvbnRhaW5lclwiIHJlZj17dGhpcy5jb250YWluZXJ9PlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIkxlZnRDb2x1bW5cIj5cbiAgICAgICAgICAgICAgICA8R3JpZCBjZWxsUmVuZGVyZXI9e3RoaXMucmVuZGVyR3JpZENlbGxIZWFkZXJ9IGNvbHVtbkNvdW50PXtvcmRlcmVkQ29sdW1uS2V5cy5sZW5ndGh9IGNvbHVtbldpZHRoPXtnZXRDb2x1bW5XaWR0aH0gaGVpZ2h0PXtyb3dIZWlnaHR9IHJvd0NvdW50PXsxfSByb3dIZWlnaHQ9e3Jvd0hlaWdodH0gc2Nyb2xsVG9wPXtzY3JvbGxUb3B9IHdpZHRoPXt0aGlzLnRvdGFsVGFibGVXaWR0aH0vPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJSaWdodENvbHVtblwiPlxuICAgICAgICAgICAgICAgIDxHcmlkIGNlbGxSZW5kZXJlcj17dGhpcy5yZW5kZXJHcmlkQ2VsbH0gY29sdW1uQ291bnQ9e29yZGVyZWRDb2x1bW5LZXlzLmxlbmd0aH0gY29sdW1uV2lkdGg9e2dldENvbHVtbldpZHRofSBoZWlnaHQ9e3RvdGFsVGFibGVIZWlnaHQgLSByb3dIZWlnaHR9IG9uU2Nyb2xsPXtvblNjcm9sbH0gb3ZlcnNjYW5Db2x1bW5Db3VudD17b3ZlcnNjYW5Db2x1bW5Db3VudH0gb3ZlcnNjYW5Sb3dDb3VudD17b3ZlcnNjYW5Sb3dDb3VudH0gcm93Q291bnQ9e3RoaXMubGlzdC5sZW5ndGh9IHJvd0hlaWdodD17cm93SGVpZ2h0fSB3aWR0aD17dGhpcy50b3RhbFRhYmxlV2lkdGh9Lz5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj4pfVxuICAgICAgICA8L1Njcm9sbFN5bmM+XG4gICAgICA8L1N0eWxlZEZpbHRlcmFibGVUYWJsZT4pO1xuICAgIH1cbiAgICByZW5kZXJUYWJsZUNlbGwoeyBjZWxsRGF0YSwgY29sdW1uS2V5LCB9KSB7XG4gICAgICAgIGNvbnN0IGNlbGxOb2RlID0gdGhpcy5nZXRDZWxsQ29udGVudCh7IGNlbGxEYXRhLCBjb2x1bW5LZXkgfSk7XG4gICAgICAgIGNvbnN0IGpzb25PYmplY3QgPSBzYWZlSnNvbk9iamVjdFBhcnNlKGNlbGxEYXRhKTtcbiAgICAgICAgaWYgKGpzb25PYmplY3QpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmFkZEpzb25Nb2RhbChjZWxsTm9kZSwganNvbk9iamVjdCwgY2VsbERhdGEpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjZWxsTm9kZTtcbiAgICB9XG4gICAgcmVuZGVyVGFibGUoKSB7XG4gICAgICAgIGNvbnN0IHsgc29ydEJ5LCBzb3J0RGlyZWN0aW9uIH0gPSB0aGlzLnN0YXRlO1xuICAgICAgICBjb25zdCB7IGZpbHRlclRleHQsIGhlYWRlckhlaWdodCwgb3JkZXJlZENvbHVtbktleXMsIG92ZXJzY2FuUm93Q291bnQsIHJvd0hlaWdodCwgfSA9IHRoaXMucHJvcHM7XG4gICAgICAgIGxldCBzb3J0ZWRBbmRGaWx0ZXJlZExpc3QgPSB0aGlzLmxpc3Q7XG4gICAgICAgIC8vIGZpbHRlciBsaXN0XG4gICAgICAgIGlmIChmaWx0ZXJUZXh0KSB7XG4gICAgICAgICAgICBzb3J0ZWRBbmRGaWx0ZXJlZExpc3QgPSB0aGlzLmxpc3QuZmlsdGVyKChyb3cpID0+IHRoaXMuaGFzTWF0Y2goZmlsdGVyVGV4dCwgcm93KSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gc29ydCBsaXN0XG4gICAgICAgIGlmIChzb3J0QnkpIHtcbiAgICAgICAgICAgIHNvcnRlZEFuZEZpbHRlcmVkTGlzdCA9IHNvcnRlZEFuZEZpbHRlcmVkTGlzdC5zb3J0KHRoaXMuc29ydFJlc3VsdHMoc29ydEJ5LCBzb3J0RGlyZWN0aW9uID09PSBTb3J0RGlyZWN0aW9uLkRFU0MpKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgeyBoZWlnaHQgfSA9IHRoaXMucHJvcHM7XG4gICAgICAgIGxldCB0b3RhbFRhYmxlSGVpZ2h0ID0gaGVpZ2h0O1xuICAgICAgICBpZiAodGhpcy5jb250YWluZXIuY3VycmVudCAmJlxuICAgICAgICAgICAgdGhpcy50b3RhbFRhYmxlV2lkdGggPiB0aGlzLmNvbnRhaW5lci5jdXJyZW50LmNsaWVudFdpZHRoKSB7XG4gICAgICAgICAgICAvLyBleGNsdWRlIHRoZSBoZWlnaHQgb2YgdGhlIGhvcml6b250YWwgc2Nyb2xsIGJhciBmcm9tIHRoZSBoZWlnaHQgb2YgdGhlIHRhYmxlXG4gICAgICAgICAgICAvLyBhbmQgdGhlIGhlaWdodCBvZiB0aGUgdGFibGUgY29udGFpbmVyIGlmIHRoZSBjb250ZW50IG92ZXJmbG93c1xuICAgICAgICAgICAgaGVpZ2h0IC09IFNDUk9MTF9CQVJfSEVJR0hUO1xuICAgICAgICAgICAgdG90YWxUYWJsZUhlaWdodCAtPSBTQ1JPTExfQkFSX0hFSUdIVDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByb3dHZXR0ZXIgPSAoeyBpbmRleCB9KSA9PiB0aGlzLmdldERhdHVtKHNvcnRlZEFuZEZpbHRlcmVkTGlzdCwgaW5kZXgpO1xuICAgICAgICByZXR1cm4gKDxTdHlsZWRGaWx0ZXJhYmxlVGFibGUgY2xhc3NOYW1lPVwiZmlsdGVyYWJsZS10YWJsZS1jb250YWluZXJcIiByZWY9e3RoaXMuY29udGFpbmVyfT5cbiAgICAgICAge3RoaXMuc3RhdGUuZml0dGVkICYmICg8VGFibGUgcmVmPVwiVGFibGVcIiBoZWFkZXJIZWlnaHQ9e2hlYWRlckhlaWdodH0gaGVpZ2h0PXt0b3RhbFRhYmxlSGVpZ2h0fSBvdmVyc2NhblJvd0NvdW50PXtvdmVyc2NhblJvd0NvdW50fSByb3dDbGFzc05hbWU9e3RoaXMucm93Q2xhc3NOYW1lfSByb3dIZWlnaHQ9e3Jvd0hlaWdodH0gcm93R2V0dGVyPXtyb3dHZXR0ZXJ9IHJvd0NvdW50PXtzb3J0ZWRBbmRGaWx0ZXJlZExpc3QubGVuZ3RofSBzb3J0PXt0aGlzLnNvcnR9IHNvcnRCeT17c29ydEJ5fSBzb3J0RGlyZWN0aW9uPXtzb3J0RGlyZWN0aW9ufSB3aWR0aD17dGhpcy50b3RhbFRhYmxlV2lkdGh9PlxuICAgICAgICAgICAge29yZGVyZWRDb2x1bW5LZXlzLm1hcChjb2x1bW5LZXkgPT4gKDxDb2x1bW4gY2VsbFJlbmRlcmVyPXsoeyBjZWxsRGF0YSB9KSA9PiB0aGlzLnJlbmRlclRhYmxlQ2VsbCh7IGNlbGxEYXRhLCBjb2x1bW5LZXkgfSl9IGRhdGFLZXk9e2NvbHVtbktleX0gZGlzYWJsZVNvcnQ9e2ZhbHNlfSBoZWFkZXJSZW5kZXJlcj17dGhpcy5yZW5kZXJUYWJsZUhlYWRlcn0gd2lkdGg9e3RoaXMud2lkdGhzRm9yQ29sdW1uc0J5S2V5W2NvbHVtbktleV19IGxhYmVsPXtjb2x1bW5LZXl9IGtleT17Y29sdW1uS2V5fS8+KSl9XG4gICAgICAgICAgPC9UYWJsZT4pfVxuICAgICAgPC9TdHlsZWRGaWx0ZXJhYmxlVGFibGU+KTtcbiAgICB9XG4gICAgcmVuZGVyKCkge1xuICAgICAgICBpZiAodGhpcy5wcm9wcy5vcmRlcmVkQ29sdW1uS2V5cy5sZW5ndGggPiBNQVhfQ09MVU1OU19GT1JfVEFCTEUpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJlbmRlckdyaWQoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5yZW5kZXJUYWJsZSgpO1xuICAgIH1cbn1cbiJdfQ== */\", toString: _EMOTION_STRINGIFIED_CSS_ERROR__ };\nexport default class FilterableTable extends PureComponent {\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  constructor(props) {\n    super(props);this.list = void 0;this.complexColumns = void 0;this.widthsForColumnsByKey = void 0;this.totalTableWidth = void 0;this.totalTableHeight = void 0;this.container = void 0;\n    this.list = this.formatTableData(props.data);\n    this.addJsonModal = this.addJsonModal.bind(this);\n    this.getCellContent = this.getCellContent.bind(this);\n    this.renderGridCell = this.renderGridCell.bind(this);\n    this.renderGridCellHeader = this.renderGridCellHeader.bind(this);\n    this.renderGrid = this.renderGrid.bind(this);\n    this.renderTableCell = this.renderTableCell.bind(this);\n    this.renderTableHeader = this.renderTableHeader.bind(this);\n    this.sortResults = this.sortResults.bind(this);\n    this.renderTable = this.renderTable.bind(this);\n    this.rowClassName = this.rowClassName.bind(this);\n    this.sort = this.sort.bind(this);\n    // columns that have complex type and were expanded into sub columns\n    this.complexColumns = props.orderedColumnKeys.reduce((obj, key) => ({\n      ...obj,\n      [key]: props.expandedColumns.some((name) => name.startsWith(`${key}.`)) }),\n    {});\n    this.widthsForColumnsByKey = this.getWidthsForColumns();\n    this.totalTableWidth = props.orderedColumnKeys.\n    map((key) => this.widthsForColumnsByKey[key]).\n    reduce((curr, next) => curr + next);\n    this.totalTableHeight = props.height;\n    this.state = {\n      sortDirection: SortDirection.ASC,\n      fitted: false };\n\n    this.container = /*#__PURE__*/React.createRef();\n  }\n  componentDidMount() {\n    this.fitTableToWidthIfNeeded();\n  }\n  getDatum(list, index) {\n    return list[index % list.length];\n  }\n  getWidthsForColumns() {\n    const PADDING = 40; // accounts for cell padding and width of sorting icon\n    const widthsByColumnKey = {};\n    const cellContent = [].concat(...this.props.orderedColumnKeys.map((key) => {\n      const cellContentList = this.list.map((data) => this.getCellContent({ cellData: data[key], columnKey: key }));\n      cellContentList.push(key);\n      return cellContentList;\n    }));\n    const colWidths = getMultipleTextDimensions({\n      className: 'cell-text-for-measuring',\n      texts: cellContent }).\n    map((dimension) => dimension.width);\n    this.props.orderedColumnKeys.forEach((key, index) => {\n      // we can't use Math.max(...colWidths.slice(...)) here since the number\n      // of elements might be bigger than the number of allowed arguments in a\n      // Javascript function\n      widthsByColumnKey[key] =\n      colWidths.\n      slice(index * (this.list.length + 1), (index + 1) * (this.list.length + 1)).\n      reduce((a, b) => Math.max(a, b)) + PADDING;\n    });\n    return widthsByColumnKey;\n  }\n  getCellContent({ cellData, columnKey }) {\n    if (cellData === null) {\n      return 'NULL';\n    }\n    const content = String(cellData);\n    const firstCharacter = content.substring(0, 1);\n    let truncated;\n    if (firstCharacter === '[') {\n      truncated = '[…]';\n    } else\n    if (firstCharacter === '{') {\n      truncated = '{…}';\n    } else\n    {\n      truncated = '';\n    }\n    return this.complexColumns[columnKey] ? truncated : content;\n  }\n  formatTableData(data) {\n    return data.map((row) => {\n      const newRow = {};\n      Object.entries(row).forEach(([key, val]) => {\n        if (['string', 'number'].indexOf(typeof val) >= 0) {\n          newRow[key] = val;\n        } else\n        {\n          newRow[key] = val === null ? null : JSONbig.stringify(val);\n        }\n      });\n      return newRow;\n    });\n  }\n  hasMatch(text, row) {\n    const values = [];\n    Object.keys(row).forEach((key) => {\n      if (row.hasOwnProperty(key)) {\n        const cellValue = row[key];\n        if (typeof cellValue === 'string') {\n          values.push(cellValue.toLowerCase());\n        } else\n        if (cellValue !== null &&\n        typeof cellValue.toString === 'function') {\n          values.push(cellValue.toString());\n        }\n      }\n    });\n    const lowerCaseText = text.toLowerCase();\n    return values.some((v) => v.includes(lowerCaseText));\n  }\n  rowClassName({ index }) {\n    let className = '';\n    if (this.props.striped) {\n      className = index % 2 === 0 ? 'even-row' : 'odd-row';\n    }\n    return className;\n  }\n  sort({ sortBy, sortDirection }) {\n    this.setState({ sortBy, sortDirection });\n  }\n  fitTableToWidthIfNeeded() {var _this$container$curre, _this$container$curre2;\n    const containerWidth = (_this$container$curre = (_this$container$curre2 = this.container.current) == null ? void 0 : _this$container$curre2.clientWidth) != null ? _this$container$curre : 0;\n    if (this.totalTableWidth < containerWidth) {\n      // fit table width if content doesn't fill the width of the container\n      this.totalTableWidth = containerWidth;\n    }\n    this.setState({ fitted: true });\n  }\n  addJsonModal(node, jsonObject, jsonString) {\n    return ___EmotionJSX(ModalTrigger, { modalBody: ___EmotionJSX(JSONTree, { data: jsonObject, theme: JSON_TREE_THEME }), modalFooter: ___EmotionJSX(Button, null,\n      ___EmotionJSX(CopyToClipboard, { shouldShowText: false, text: jsonString })),\n      modalTitle: t('Cell content'), triggerNode: node });\n  }\n  sortResults(sortBy, descending) {\n    return (a, b) => {\n      const aValue = a[sortBy];\n      const bValue = b[sortBy];\n      if (aValue === bValue) {\n        // equal items sort equally\n        return 0;\n      }\n      if (aValue === null) {\n        // nulls sort after anything else\n        return 1;\n      }\n      if (bValue === null) {\n        return -1;\n      }\n      if (descending) {\n        return aValue < bValue ? 1 : -1;\n      }\n      return aValue < bValue ? -1 : 1;\n    };\n  }\n  renderTableHeader({ dataKey, label, sortBy, sortDirection }) {\n    const className = this.props.expandedColumns.indexOf(label) > -1 ?\n    'header-style-disabled' :\n    'header-style';\n    return ___EmotionJSX(Tooltip, { id: \"header-tooltip\", title: label, placement: \"topLeft\", css: _ref },\n    ___EmotionJSX(\"div\", { className: className },\n    label,\n    sortBy === dataKey && ___EmotionJSX(SortIndicator, { sortDirection: sortDirection })));\n\n\n  }\n  renderGridCellHeader({ columnIndex, key, style }) {\n    const label = this.props.orderedColumnKeys[columnIndex];\n    const className = this.props.expandedColumns.indexOf(label) > -1 ?\n    'header-style-disabled' :\n    'header-style';\n    return ___EmotionJSX(Tooltip, { key: key, id: \"header-tooltip\", title: label, placement: \"topLeft\", css: _ref2 },\n    ___EmotionJSX(\"div\", { style: {\n        ...style,\n        top: typeof style.top === 'number' ?\n        style.top - GRID_POSITION_ADJUSTMENT :\n        style.top },\n      className: `${className} grid-cell grid-header-cell` },\n    ___EmotionJSX(\"div\", null, label)));\n\n\n  }\n  renderGridCell({ columnIndex, key, rowIndex, style }) {\n    const columnKey = this.props.orderedColumnKeys[columnIndex];\n    const cellData = this.list[rowIndex][columnKey];\n    const content = cellData === null ? ___EmotionJSX(\"i\", { className: \"text-muted\" },\n    this.getCellContent({ cellData, columnKey })) :\n    this.getCellContent({ cellData, columnKey });\n    const cellNode = ___EmotionJSX(\"div\", { key: key, style: {\n        ...style,\n        top: typeof style.top === 'number' ?\n        style.top - GRID_POSITION_ADJUSTMENT :\n        style.top },\n      className: `grid-cell ${this.rowClassName({ index: rowIndex })}` },\n    ___EmotionJSX(\"div\", { css: _ref3 }, content));\n\n    const jsonObject = safeJsonObjectParse(cellData);\n    if (jsonObject) {\n      return this.addJsonModal(cellNode, jsonObject, cellData);\n    }\n    return cellNode;\n  }\n  renderGrid() {\n    const { orderedColumnKeys, overscanColumnCount, overscanRowCount, rowHeight } = this.props;\n    let { height } = this.props;\n    let totalTableHeight = height;\n    if (this.container.current &&\n    this.totalTableWidth > this.container.current.clientWidth) {\n      // exclude the height of the horizontal scroll bar from the height of the table\n      // and the height of the table container if the content overflows\n      height -= SCROLL_BAR_HEIGHT;\n      totalTableHeight -= SCROLL_BAR_HEIGHT;\n    }\n    const getColumnWidth = ({ index }) => this.widthsForColumnsByKey[orderedColumnKeys[index]];\n    // fix height of filterable table\n    return ___EmotionJSX(StyledFilterableTable, null,\n    ___EmotionJSX(ScrollSync, null,\n    ({ onScroll, scrollTop }) => ___EmotionJSX(\"div\", { className: \"filterable-table-container Table\", ref: this.container },\n    ___EmotionJSX(\"div\", { className: \"LeftColumn\" },\n    ___EmotionJSX(Grid, { cellRenderer: this.renderGridCellHeader, columnCount: orderedColumnKeys.length, columnWidth: getColumnWidth, height: rowHeight, rowCount: 1, rowHeight: rowHeight, scrollTop: scrollTop, width: this.totalTableWidth })),\n\n    ___EmotionJSX(\"div\", { className: \"RightColumn\" },\n    ___EmotionJSX(Grid, { cellRenderer: this.renderGridCell, columnCount: orderedColumnKeys.length, columnWidth: getColumnWidth, height: totalTableHeight - rowHeight, onScroll: onScroll, overscanColumnCount: overscanColumnCount, overscanRowCount: overscanRowCount, rowCount: this.list.length, rowHeight: rowHeight, width: this.totalTableWidth })))));\n\n\n\n\n  }\n  renderTableCell({ cellData, columnKey }) {\n    const cellNode = this.getCellContent({ cellData, columnKey });\n    const jsonObject = safeJsonObjectParse(cellData);\n    if (jsonObject) {\n      return this.addJsonModal(cellNode, jsonObject, cellData);\n    }\n    return cellNode;\n  }\n  renderTable() {\n    const { sortBy, sortDirection } = this.state;\n    const { filterText, headerHeight, orderedColumnKeys, overscanRowCount, rowHeight } = this.props;\n    let sortedAndFilteredList = this.list;\n    // filter list\n    if (filterText) {\n      sortedAndFilteredList = this.list.filter((row) => this.hasMatch(filterText, row));\n    }\n    // sort list\n    if (sortBy) {\n      sortedAndFilteredList = sortedAndFilteredList.sort(this.sortResults(sortBy, sortDirection === SortDirection.DESC));\n    }\n    let { height } = this.props;\n    let totalTableHeight = height;\n    if (this.container.current &&\n    this.totalTableWidth > this.container.current.clientWidth) {\n      // exclude the height of the horizontal scroll bar from the height of the table\n      // and the height of the table container if the content overflows\n      height -= SCROLL_BAR_HEIGHT;\n      totalTableHeight -= SCROLL_BAR_HEIGHT;\n    }\n    const rowGetter = ({ index }) => this.getDatum(sortedAndFilteredList, index);\n    return ___EmotionJSX(StyledFilterableTable, { className: \"filterable-table-container\", ref: this.container },\n    this.state.fitted && ___EmotionJSX(Table, { ref: \"Table\", headerHeight: headerHeight, height: totalTableHeight, overscanRowCount: overscanRowCount, rowClassName: this.rowClassName, rowHeight: rowHeight, rowGetter: rowGetter, rowCount: sortedAndFilteredList.length, sort: this.sort, sortBy: sortBy, sortDirection: sortDirection, width: this.totalTableWidth },\n    orderedColumnKeys.map((columnKey) => ___EmotionJSX(Column, { cellRenderer: ({ cellData }) => this.renderTableCell({ cellData, columnKey }), dataKey: columnKey, disableSort: false, headerRenderer: this.renderTableHeader, width: this.widthsForColumnsByKey[columnKey], label: columnKey, key: columnKey }))));\n\n\n  }\n  render() {\n    if (this.props.orderedColumnKeys.length > MAX_COLUMNS_FOR_TABLE) {\n      return this.renderGrid();\n    }\n    return this.renderTable();\n  }}FilterableTable.defaultProps = { filterText: '', headerHeight: 32, overscanColumnCount: 10, overscanRowCount: 10, rowHeight: 32, striped: true, expandedColumns: [] };","map":null,"metadata":{},"sourceType":"module"}