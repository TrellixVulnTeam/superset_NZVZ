{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/components/AceEditorWrapper/index.tsx\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport { areArraysShallowEqual } from 'src/reduxUtils';\nimport sqlKeywords from 'src/SqlLab/utils/sqlKeywords';\nimport { SCHEMA_AUTOCOMPLETE_SCORE, TABLE_AUTOCOMPLETE_SCORE, COLUMN_AUTOCOMPLETE_SCORE, SQL_FUNCTIONS_AUTOCOMPLETE_SCORE } from 'src/SqlLab/constants';\nimport { FullSQLEditor as AceEditor } from 'src/components/AsyncAceEditor';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nclass AceEditorWrapper extends React.PureComponent {\n\n\n\n\n\n\n\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      sql: props.sql,\n      selectedText: '',\n      words: [] };\n\n    this.onChange = this.onChange.bind(this);\n  }\n  componentDidMount() {\n    // Making sure no text is selected from previous mount\n    this.props.actions.queryEditorSetSelectedText(this.props.queryEditor, null);\n    if (this.props.queryEditor.dbId) {\n      this.props.actions.queryEditorSetFunctionNames(this.props.queryEditor, this.props.queryEditor.dbId);\n    }\n    this.setAutoCompleter(this.props);\n  }\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (!areArraysShallowEqual(this.props.tables, nextProps.tables) ||\n    !areArraysShallowEqual(this.props.schemas, nextProps.schemas) ||\n    !areArraysShallowEqual(this.props.extendedTables, nextProps.extendedTables)) {\n      this.setAutoCompleter(nextProps);\n    }\n    if (nextProps.sql !== this.props.sql) {\n      this.setState({ sql: nextProps.sql });\n    }\n  }\n  onBlur() {\n    this.props.onBlur(this.state.sql);\n  }\n  onAltEnter() {\n    this.props.onBlur(this.state.sql);\n  }\n  onEditorLoad(editor) {\n    editor.commands.addCommand({\n      name: 'runQuery',\n      bindKey: { win: 'Alt-enter', mac: 'Alt-enter' },\n      exec: () => {\n        this.onAltEnter();\n      } });\n\n    this.props.hotkeys.forEach((keyConfig) => {\n      editor.commands.addCommand({\n        name: keyConfig.name,\n        bindKey: { win: keyConfig.key, mac: keyConfig.key },\n        exec: keyConfig.func });\n\n    });\n    editor.$blockScrolling = Infinity; // eslint-disable-line no-param-reassign\n    editor.selection.on('changeSelection', () => {\n      const selectedText = editor.getSelectedText();\n      // Backspace trigger 1 character selection, ignoring\n      if (selectedText !== this.state.selectedText &&\n      selectedText.length !== 1) {\n        this.setState({ selectedText });\n        this.props.actions.queryEditorSetSelectedText(this.props.queryEditor, selectedText);\n      }\n    });\n  }\n  onChange(text) {\n    this.setState({ sql: text });\n    this.props.onChange(text);\n  }\n  setAutoCompleter(props) {\n    // Loading schema, table and column names as auto-completable words\n    const schemas = props.schemas || [];\n    const schemaWords = schemas.map((s) => ({\n      name: s.label,\n      value: s.value,\n      score: SCHEMA_AUTOCOMPLETE_SCORE,\n      meta: 'schema' }));\n\n    const columns = {};\n    const tables = props.tables || [];\n    const extendedTables = props.extendedTables || [];\n    const tableWords = tables.map((t) => {\n      const tableName = t.value;\n      const extendedTable = extendedTables.find((et) => et.name === tableName);\n      const cols = extendedTable && extendedTable.columns || [];\n      cols.forEach((col) => {\n        columns[col.name] = null; // using an object as a unique set\n      });\n      return {\n        name: t.label,\n        value: tableName,\n        score: TABLE_AUTOCOMPLETE_SCORE,\n        meta: 'table' };\n\n    });\n    const columnWords = Object.keys(columns).map((col) => ({\n      name: col,\n      value: col,\n      score: COLUMN_AUTOCOMPLETE_SCORE,\n      meta: 'column' }));\n\n    const functionWords = props.functionNames.map((func) => ({\n      name: func,\n      value: func,\n      score: SQL_FUNCTIONS_AUTOCOMPLETE_SCORE,\n      meta: 'function' }));\n\n    const completer = {\n      insertMatch: (editor, data) => {\n        if (data.meta === 'table') {\n          this.props.actions.addTable(this.props.queryEditor, data.value, this.props.queryEditor.schema);\n        }\n        // executing https://github.com/thlorenz/brace/blob/3a00c5d59777f9d826841178e1eb36694177f5e6/ext/language_tools.js#L1448\n        editor.completer.insertMatch(`${data.caption}${['function', 'schema'].includes(data.meta) ? '' : ' '}`);\n      } };\n\n    const words = schemaWords.\n    concat(tableWords).\n    concat(columnWords).\n    concat(functionWords).\n    concat(sqlKeywords).\n    map((word) => ({\n      ...word,\n      completer }));\n\n    this.setState({ words });\n  }\n  getAceAnnotations() {var _validationResult$err;\n    const { validationResult } = this.props.queryEditor;\n    const resultIsReady = validationResult == null ? void 0 : validationResult.completed;\n    if (resultIsReady && validationResult != null && (_validationResult$err = validationResult.errors) != null && _validationResult$err.length) {\n      const errors = validationResult.errors.map((err) => ({\n        type: 'error',\n        row: err.line_number - 1,\n        column: err.start_column - 1,\n        text: err.message }));\n\n      return errors;\n    }\n    return [];\n  }\n  render() {\n    return ___EmotionJSX(AceEditor, { keywords: this.state.words, onLoad: this.onEditorLoad.bind(this), onBlur: this.onBlur.bind(this), height: this.props.height, onChange: this.onChange, width: \"100%\", editorProps: { $blockScrolling: true }, enableLiveAutocompletion: this.props.autocomplete, value: this.state.sql, annotations: this.getAceAnnotations(), __self: this, __source: { fileName: _jsxFileName, lineNumber: 169, columnNumber: 17 } });\n  } // @ts-ignore\n  __reactstandin__regenerateByEval(key, code) {// @ts-ignore\n    this[key] = eval(code);}}AceEditorWrapper.defaultProps = { onBlur: () => {}, onChange: () => {}, schemas: [], tables: [], functionNames: [], extendedTables: [] };const _default = AceEditorWrapper;export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(AceEditorWrapper, \"AceEditorWrapper\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/components/AceEditorWrapper/index.tsx\");reactHotLoader.register(_default, \"default\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/components/AceEditorWrapper/index.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/components/AceEditorWrapper/index.tsx"],"names":[],"mappings":"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","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport { areArraysShallowEqual } from 'src/reduxUtils';\nimport sqlKeywords from 'src/SqlLab/utils/sqlKeywords';\nimport {\n  SCHEMA_AUTOCOMPLETE_SCORE,\n  TABLE_AUTOCOMPLETE_SCORE,\n  COLUMN_AUTOCOMPLETE_SCORE,\n  SQL_FUNCTIONS_AUTOCOMPLETE_SCORE,\n} from 'src/SqlLab/constants';\nimport {\n  Editor,\n  AceCompleterKeyword,\n  FullSQLEditor as AceEditor,\n} from 'src/components/AsyncAceEditor';\nimport { QueryEditor } from 'src/SqlLab/types';\n\ntype HotKey = {\n  key: string;\n  descr: string;\n  name: string;\n  func: () => void;\n};\n\ninterface Props {\n  actions: {\n    queryEditorSetSelectedText: (edit: any, text: null | string) => void;\n    queryEditorSetFunctionNames: (queryEditor: object, dbId: number) => void;\n    addTable: (queryEditor: any, value: any, schema: any) => void;\n  };\n  autocomplete: boolean;\n  onBlur: (sql: string) => void;\n  sql: string;\n  schemas: any[];\n  tables: any[];\n  functionNames: string[];\n  extendedTables: Array<{ name: string; columns: any[] }>;\n  queryEditor: QueryEditor;\n  height: string;\n  hotkeys: HotKey[];\n  onChange: (sql: string) => void;\n}\n\ninterface State {\n  sql: string;\n  selectedText: string;\n  words: AceCompleterKeyword[];\n}\n\nclass AceEditorWrapper extends React.PureComponent<Props, State> {\n  static defaultProps = {\n    onBlur: () => {},\n    onChange: () => {},\n    schemas: [],\n    tables: [],\n    functionNames: [],\n    extendedTables: [],\n  };\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      sql: props.sql,\n      selectedText: '',\n      words: [],\n    };\n    this.onChange = this.onChange.bind(this);\n  }\n\n  componentDidMount() {\n    // Making sure no text is selected from previous mount\n    this.props.actions.queryEditorSetSelectedText(this.props.queryEditor, null);\n    if (this.props.queryEditor.dbId) {\n      this.props.actions.queryEditorSetFunctionNames(\n        this.props.queryEditor,\n        this.props.queryEditor.dbId,\n      );\n    }\n    this.setAutoCompleter(this.props);\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps: Props) {\n    if (\n      !areArraysShallowEqual(this.props.tables, nextProps.tables) ||\n      !areArraysShallowEqual(this.props.schemas, nextProps.schemas) ||\n      !areArraysShallowEqual(\n        this.props.extendedTables,\n        nextProps.extendedTables,\n      )\n    ) {\n      this.setAutoCompleter(nextProps);\n    }\n    if (nextProps.sql !== this.props.sql) {\n      this.setState({ sql: nextProps.sql });\n    }\n  }\n\n  onBlur() {\n    this.props.onBlur(this.state.sql);\n  }\n\n  onAltEnter() {\n    this.props.onBlur(this.state.sql);\n  }\n\n  onEditorLoad(editor: any) {\n    editor.commands.addCommand({\n      name: 'runQuery',\n      bindKey: { win: 'Alt-enter', mac: 'Alt-enter' },\n      exec: () => {\n        this.onAltEnter();\n      },\n    });\n    this.props.hotkeys.forEach(keyConfig => {\n      editor.commands.addCommand({\n        name: keyConfig.name,\n        bindKey: { win: keyConfig.key, mac: keyConfig.key },\n        exec: keyConfig.func,\n      });\n    });\n    editor.$blockScrolling = Infinity; // eslint-disable-line no-param-reassign\n    editor.selection.on('changeSelection', () => {\n      const selectedText = editor.getSelectedText();\n      // Backspace trigger 1 character selection, ignoring\n      if (\n        selectedText !== this.state.selectedText &&\n        selectedText.length !== 1\n      ) {\n        this.setState({ selectedText });\n        this.props.actions.queryEditorSetSelectedText(\n          this.props.queryEditor,\n          selectedText,\n        );\n      }\n    });\n  }\n\n  onChange(text: string) {\n    this.setState({ sql: text });\n    this.props.onChange(text);\n  }\n\n  setAutoCompleter(props: Props) {\n    // Loading schema, table and column names as auto-completable words\n    const schemas = props.schemas || [];\n    const schemaWords = schemas.map(s => ({\n      name: s.label,\n      value: s.value,\n      score: SCHEMA_AUTOCOMPLETE_SCORE,\n      meta: 'schema',\n    }));\n    const columns = {};\n    const tables = props.tables || [];\n    const extendedTables = props.extendedTables || [];\n    const tableWords = tables.map(t => {\n      const tableName = t.value;\n      const extendedTable = extendedTables.find(et => et.name === tableName);\n      const cols = (extendedTable && extendedTable.columns) || [];\n      cols.forEach(col => {\n        columns[col.name] = null; // using an object as a unique set\n      });\n      return {\n        name: t.label,\n        value: tableName,\n        score: TABLE_AUTOCOMPLETE_SCORE,\n        meta: 'table',\n      };\n    });\n\n    const columnWords = Object.keys(columns).map(col => ({\n      name: col,\n      value: col,\n      score: COLUMN_AUTOCOMPLETE_SCORE,\n      meta: 'column',\n    }));\n\n    const functionWords = props.functionNames.map(func => ({\n      name: func,\n      value: func,\n      score: SQL_FUNCTIONS_AUTOCOMPLETE_SCORE,\n      meta: 'function',\n    }));\n\n    const completer = {\n      insertMatch: (editor: Editor, data: any) => {\n        if (data.meta === 'table') {\n          this.props.actions.addTable(\n            this.props.queryEditor,\n            data.value,\n            this.props.queryEditor.schema,\n          );\n        }\n        // executing https://github.com/thlorenz/brace/blob/3a00c5d59777f9d826841178e1eb36694177f5e6/ext/language_tools.js#L1448\n        editor.completer.insertMatch(\n          `${data.caption}${\n            ['function', 'schema'].includes(data.meta) ? '' : ' '\n          }`,\n        );\n      },\n    };\n\n    const words = schemaWords\n      .concat(tableWords)\n      .concat(columnWords)\n      .concat(functionWords)\n      .concat(sqlKeywords)\n      .map(word => ({\n        ...word,\n        completer,\n      }));\n\n    this.setState({ words });\n  }\n\n  getAceAnnotations() {\n    const { validationResult } = this.props.queryEditor;\n    const resultIsReady = validationResult?.completed;\n    if (resultIsReady && validationResult?.errors?.length) {\n      const errors = validationResult.errors.map((err: any) => ({\n        type: 'error',\n        row: err.line_number - 1,\n        column: err.start_column - 1,\n        text: err.message,\n      }));\n      return errors;\n    }\n    return [];\n  }\n\n  render() {\n    return (\n      <AceEditor\n        keywords={this.state.words}\n        onLoad={this.onEditorLoad.bind(this)}\n        onBlur={this.onBlur.bind(this)}\n        height={this.props.height}\n        onChange={this.onChange}\n        width=\"100%\"\n        editorProps={{ $blockScrolling: true }}\n        enableLiveAutocompletion={this.props.autocomplete}\n        value={this.state.sql}\n        annotations={this.getAceAnnotations()}\n      />\n    );\n  }\n}\n\nexport default AceEditorWrapper;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}