{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/components/nativeFilters/FiltersConfigModal/FiltersConfigForm/getControlItemsMap.tsx\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { InfoTooltipWithTrigger } from '@superset-ui/chart-controls';\nimport React from 'react';\nimport { Checkbox } from 'src/common/components';\nimport { getChartControlPanelRegistry, styled, t } from '@superset-ui/core';\nimport { Tooltip } from 'src/components/Tooltip';\nimport { FormItem } from 'src/components/Form';\nimport { doesColumnMatchFilterType, getControlItems, setNativeFilterFieldValues } from './utils';\nimport { StyledFormItem, StyledLabel, StyledRowFormItem } from './FiltersConfigForm';\nimport { ColumnSelect } from './ColumnSelect';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst CleanFormItem = styled(FormItem)`\n  margin-bottom: 0;\n`;\nexport default function getControlItemsMap({ datasetId, disabled, forceUpdate, form, filterId, filterType, filterToEdit, formFilter, removed }) {var _getControlItems;\n  const controlPanelRegistry = getChartControlPanelRegistry();\n  const controlItems = (_getControlItems = getControlItems(controlPanelRegistry.get(filterType))) != null ? _getControlItems : [];\n  const mapControlItems = {};\n  const mapMainControlItems = {};\n  controlItems.\n  filter((mainControlItem) => (mainControlItem == null ? void 0 : mainControlItem.name) === 'groupby').\n  forEach((mainControlItem) => {var _filterToEdit$control, _filterToEdit$control2, _mainControlItem$conf, _filterToEdit$targets, _filterToEdit$targets2, _mainControlItem$conf2, _mainControlItem$conf3, _mainControlItem$conf4, _mainControlItem$conf5;\n    const initialValue = (_filterToEdit$control = filterToEdit == null ? void 0 : (_filterToEdit$control2 = filterToEdit.controlValues) == null ? void 0 : _filterToEdit$control2[mainControlItem.name]) != null ? _filterToEdit$control :\n    mainControlItem == null ? void 0 : (_mainControlItem$conf = mainControlItem.config) == null ? void 0 : _mainControlItem$conf.default;\n    const initColumn = filterToEdit == null ? void 0 : (_filterToEdit$targets = filterToEdit.targets[0]) == null ? void 0 : (_filterToEdit$targets2 = _filterToEdit$targets.column) == null ? void 0 : _filterToEdit$targets2.name;\n    const element = ___EmotionJSX(React.Fragment, null,\n    ___EmotionJSX(CleanFormItem, { name: ['filters', filterId, 'requiredFirst', mainControlItem.name], hidden: true, initialValue: (mainControlItem == null ? void 0 : (_mainControlItem$conf2 = mainControlItem.config) == null ? void 0 : _mainControlItem$conf2.requiredFirst) && (\n      filterToEdit == null ? void 0 : filterToEdit.requiredFirst), __self: this, __source: { fileName: _jsxFileName, lineNumber: 43, columnNumber: 11 } }),\n    ___EmotionJSX(StyledFormItem\n    // don't show the column select unless we have a dataset\n    , { name: ['filters', filterId, 'column'], initialValue: initColumn, label: ___EmotionJSX(StyledLabel, { __self: this, __source: { fileName: _jsxFileName, lineNumber: 47, columnNumber: 81 } },\n      t(`${(_mainControlItem$conf3 = mainControlItem.config) == null ? void 0 : _mainControlItem$conf3.label}`) || t('Column')),\n      rules: [\n      {\n        required: ((_mainControlItem$conf4 = mainControlItem.config) == null ? void 0 : _mainControlItem$conf4.required) && !removed,\n        message: t('Column is required') }],\n\n      \"data-test\": \"field-input\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 45, columnNumber: 11 } },\n    ___EmotionJSX(ColumnSelect, { mode: ((_mainControlItem$conf5 = mainControlItem.config) == null ? void 0 : _mainControlItem$conf5.multiple) && 'multiple', form: form, filterId: filterId, datasetId: datasetId, filterValues: (column) => doesColumnMatchFilterType((formFilter == null ? void 0 : formFilter.filterType) || '', column), onChange: () => {\n        // We need reset default value when when column changed\n        setNativeFilterFieldValues(form, filterId, {\n          defaultDataMask: null });\n\n        forceUpdate();\n      }, __self: this, __source: { fileName: _jsxFileName, lineNumber: 55, columnNumber: 13 } })));\n\n\n    mapMainControlItems[mainControlItem.name] = {\n      element,\n      checked: initialValue };\n\n  });\n  controlItems.\n  filter((controlItem) => {var _controlItem$config;return (controlItem == null ? void 0 : (_controlItem$config = controlItem.config) == null ? void 0 : _controlItem$config.renderTrigger) &&\n    controlItem.name !== 'sortAscending';}).\n  forEach((controlItem) => {var _filterToEdit$control3, _filterToEdit$control4, _controlItem$config2, _controlItem$config3;\n    const initialValue = (_filterToEdit$control3 = filterToEdit == null ? void 0 : (_filterToEdit$control4 = filterToEdit.controlValues) == null ? void 0 : _filterToEdit$control4[controlItem.name]) != null ? _filterToEdit$control3 :\n    controlItem == null ? void 0 : (_controlItem$config2 = controlItem.config) == null ? void 0 : _controlItem$config2.default;\n    const element = ___EmotionJSX(React.Fragment, null,\n    ___EmotionJSX(CleanFormItem, { name: ['filters', filterId, 'requiredFirst', controlItem.name], hidden: true, initialValue: (controlItem == null ? void 0 : (_controlItem$config3 = controlItem.config) == null ? void 0 : _controlItem$config3.requiredFirst) && (filterToEdit == null ? void 0 : filterToEdit.requiredFirst), __self: this, __source: { fileName: _jsxFileName, lineNumber: 76, columnNumber: 11 } }),\n    ___EmotionJSX(Tooltip, { key: controlItem.name, placement: \"left\", title: controlItem.config.affectsDataMask &&\n      disabled &&\n      t('Populate \"Default value\" to enable this control'), __self: this, __source: { fileName: _jsxFileName, lineNumber: 77, columnNumber: 11 } },\n    ___EmotionJSX(StyledRowFormItem, { key: controlItem.name, name: ['filters', filterId, 'controlValues', controlItem.name], initialValue: initialValue, valuePropName: \"checked\", colon: false, __self: this, __source: { fileName: _jsxFileName, lineNumber: 80, columnNumber: 13 } },\n    ___EmotionJSX(Checkbox, { disabled: controlItem.config.affectsDataMask && disabled, onChange: ({ target: { checked } }) => {\n        if (controlItem.config.requiredFirst) {\n          setNativeFilterFieldValues(form, filterId, {\n            requiredFirst: {\n              ...(formFilter == null ? void 0 : formFilter.requiredFirst),\n              [controlItem.name]: checked } });\n\n\n        }\n        if (controlItem.config.resetConfig) {\n          setNativeFilterFieldValues(form, filterId, {\n            defaultDataMask: null });\n\n        }\n        forceUpdate();\n      }, __self: this, __source: { fileName: _jsxFileName, lineNumber: 81, columnNumber: 15 } },\n    controlItem.config.label, \"\\xA0\",\n    controlItem.config.description && ___EmotionJSX(InfoTooltipWithTrigger, { placement: \"top\", label: controlItem.config.name, tooltip: controlItem.config.description, __self: this, __source: { fileName: _jsxFileName, lineNumber: 98, columnNumber: 53 } })))));\n\n\n\n\n    mapControlItems[controlItem.name] = { element, checked: initialValue };\n  });\n  return {\n    controlItems: mapControlItems,\n    mainControlItems: mapMainControlItems };\n\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(CleanFormItem, \"CleanFormItem\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/components/nativeFilters/FiltersConfigModal/FiltersConfigForm/getControlItemsMap.tsx\");reactHotLoader.register(getControlItemsMap, \"getControlItemsMap\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/components/nativeFilters/FiltersConfigModal/FiltersConfigForm/getControlItemsMap.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/components/nativeFilters/FiltersConfigModal/FiltersConfigForm/getControlItemsMap.tsx"],"names":[],"mappings":"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","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport {\n  CustomControlItem,\n  InfoTooltipWithTrigger,\n} from '@superset-ui/chart-controls';\nimport React from 'react';\nimport { Checkbox } from 'src/common/components';\nimport { FormInstance } from 'antd/lib/form';\nimport { getChartControlPanelRegistry, styled, t } from '@superset-ui/core';\nimport { Tooltip } from 'src/components/Tooltip';\nimport { FormItem } from 'src/components/Form';\nimport {\n  doesColumnMatchFilterType,\n  getControlItems,\n  setNativeFilterFieldValues,\n} from './utils';\nimport { NativeFiltersForm, NativeFiltersFormItem } from '../types';\nimport {\n  StyledFormItem,\n  StyledLabel,\n  StyledRowFormItem,\n} from './FiltersConfigForm';\nimport { Filter } from '../../types';\nimport { ColumnSelect } from './ColumnSelect';\n\nexport interface ControlItemsProps {\n  datasetId: number;\n  disabled: boolean;\n  forceUpdate: Function;\n  form: FormInstance<NativeFiltersForm>;\n  filterId: string;\n  filterType: string;\n  filterToEdit?: Filter;\n  formFilter?: NativeFiltersFormItem;\n  removed?: boolean;\n}\n\nconst CleanFormItem = styled(FormItem)`\n  margin-bottom: 0;\n`;\n\nexport default function getControlItemsMap({\n  datasetId,\n  disabled,\n  forceUpdate,\n  form,\n  filterId,\n  filterType,\n  filterToEdit,\n  formFilter,\n  removed,\n}: ControlItemsProps) {\n  const controlPanelRegistry = getChartControlPanelRegistry();\n  const controlItems =\n    getControlItems(controlPanelRegistry.get(filterType)) ?? [];\n  const mapControlItems: Record<\n    string,\n    { element: React.ReactNode; checked: boolean }\n  > = {};\n  const mapMainControlItems: Record<\n    string,\n    { element: React.ReactNode; checked: boolean }\n  > = {};\n\n  controlItems\n    .filter(\n      (mainControlItem: CustomControlItem) =>\n        mainControlItem?.name === 'groupby',\n    )\n    .forEach(mainControlItem => {\n      const initialValue =\n        filterToEdit?.controlValues?.[mainControlItem.name] ??\n        mainControlItem?.config?.default;\n      const initColumn = filterToEdit?.targets[0]?.column?.name;\n\n      const element = (\n        <>\n          <CleanFormItem\n            name={['filters', filterId, 'requiredFirst', mainControlItem.name]}\n            hidden\n            initialValue={\n              mainControlItem?.config?.requiredFirst &&\n              filterToEdit?.requiredFirst\n            }\n          />\n          <StyledFormItem\n            // don't show the column select unless we have a dataset\n            name={['filters', filterId, 'column']}\n            initialValue={initColumn}\n            label={\n              <StyledLabel>\n                {t(`${mainControlItem.config?.label}`) || t('Column')}\n              </StyledLabel>\n            }\n            rules={[\n              {\n                required: mainControlItem.config?.required && !removed, // TODO: need to move ColumnSelect settings to controlPanel for all filters\n                message: t('Column is required'),\n              },\n            ]}\n            data-test=\"field-input\"\n          >\n            <ColumnSelect\n              mode={mainControlItem.config?.multiple && 'multiple'}\n              form={form}\n              filterId={filterId}\n              datasetId={datasetId}\n              filterValues={column =>\n                doesColumnMatchFilterType(formFilter?.filterType || '', column)\n              }\n              onChange={() => {\n                // We need reset default value when when column changed\n                setNativeFilterFieldValues(form, filterId, {\n                  defaultDataMask: null,\n                });\n                forceUpdate();\n              }}\n            />\n          </StyledFormItem>\n        </>\n      );\n      mapMainControlItems[mainControlItem.name] = {\n        element,\n        checked: initialValue,\n      };\n    });\n  controlItems\n    .filter(\n      (controlItem: CustomControlItem) =>\n        controlItem?.config?.renderTrigger &&\n        controlItem.name !== 'sortAscending',\n    )\n    .forEach(controlItem => {\n      const initialValue =\n        filterToEdit?.controlValues?.[controlItem.name] ??\n        controlItem?.config?.default;\n      const element = (\n        <>\n          <CleanFormItem\n            name={['filters', filterId, 'requiredFirst', controlItem.name]}\n            hidden\n            initialValue={\n              controlItem?.config?.requiredFirst && filterToEdit?.requiredFirst\n            }\n          />\n          <Tooltip\n            key={controlItem.name}\n            placement=\"left\"\n            title={\n              controlItem.config.affectsDataMask &&\n              disabled &&\n              t('Populate \"Default value\" to enable this control')\n            }\n          >\n            <StyledRowFormItem\n              key={controlItem.name}\n              name={['filters', filterId, 'controlValues', controlItem.name]}\n              initialValue={initialValue}\n              valuePropName=\"checked\"\n              colon={false}\n            >\n              <Checkbox\n                disabled={controlItem.config.affectsDataMask && disabled}\n                onChange={({ target: { checked } }) => {\n                  if (controlItem.config.requiredFirst) {\n                    setNativeFilterFieldValues(form, filterId, {\n                      requiredFirst: {\n                        ...formFilter?.requiredFirst,\n                        [controlItem.name]: checked,\n                      },\n                    });\n                  }\n                  if (controlItem.config.resetConfig) {\n                    setNativeFilterFieldValues(form, filterId, {\n                      defaultDataMask: null,\n                    });\n                  }\n                  forceUpdate();\n                }}\n              >\n                {controlItem.config.label}&nbsp;\n                {controlItem.config.description && (\n                  <InfoTooltipWithTrigger\n                    placement=\"top\"\n                    label={controlItem.config.name}\n                    tooltip={controlItem.config.description}\n                  />\n                )}\n              </Checkbox>\n            </StyledRowFormItem>\n          </Tooltip>\n        </>\n      );\n      mapControlItems[controlItem.name] = { element, checked: initialValue };\n    });\n  return {\n    controlItems: mapControlItems,\n    mainControlItems: mapMainControlItems,\n  };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}