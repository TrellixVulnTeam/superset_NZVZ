{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/components/Header/index.jsx\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();import _URL from \"@babel/runtime-corejs3/core-js-stable/url\";var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint-env browser */\nimport moment from 'moment';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { styled, t } from '@superset-ui/core';\nimport ButtonGroup from 'src/components/ButtonGroup';\nimport CertifiedIcon from 'src/components/CertifiedIcon';\n\nimport {\nLOG_ACTIONS_PERIODIC_RENDER_DASHBOARD,\nLOG_ACTIONS_FORCE_REFRESH_DASHBOARD,\nLOG_ACTIONS_TOGGLE_EDIT_DASHBOARD } from\n'src/logger/LogUtils';\nimport { isFeatureEnabled, FeatureFlag } from 'src/featureFlags';\n\nimport Icons from 'src/components/Icons';\nimport Button from 'src/components/Button';\nimport EditableTitle from 'src/components/EditableTitle';\nimport FaveStar from 'src/components/FaveStar';\nimport { safeStringify } from 'src/utils/safeStringify';\nimport HeaderActionsDropdown from 'src/dashboard/components/Header/HeaderActionsDropdown';\nimport HeaderReportActionsDropdown from 'src/components/ReportModal/HeaderReportActionsDropdown';\nimport PublishedStatus from 'src/dashboard/components/PublishedStatus';\nimport UndoRedoKeyListeners from 'src/dashboard/components/UndoRedoKeyListeners';\nimport PropertiesModal from 'src/dashboard/components/PropertiesModal';\nimport ReportModal from 'src/components/ReportModal';\nimport { chartPropShape } from 'src/dashboard/util/propShapes';\nimport { UserWithPermissionsAndRoles } from 'src/types/bootstrapTypes';\nimport {\nUNDO_LIMIT,\nSAVE_TYPE_OVERWRITE,\nDASHBOARD_POSITION_DATA_LIMIT } from\n'src/dashboard/util/constants';\nimport setPeriodicRunner, {\nstopPeriodicRender } from\n'src/dashboard/util/setPeriodicRunner';\nimport { options as PeriodicRefreshOptions } from 'src/dashboard/components/RefreshIntervalModal';import { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nconst propTypes = {\n  addSuccessToast: PropTypes.func.isRequired,\n  addDangerToast: PropTypes.func.isRequired,\n  addWarningToast: PropTypes.func.isRequired,\n  user: UserWithPermissionsAndRoles,\n  dashboardInfo: PropTypes.object.isRequired,\n  dashboardTitle: PropTypes.string.isRequired,\n  dataMask: PropTypes.object.isRequired,\n  charts: PropTypes.objectOf(chartPropShape).isRequired,\n  layout: PropTypes.object.isRequired,\n  expandedSlices: PropTypes.object.isRequired,\n  customCss: PropTypes.string.isRequired,\n  colorNamespace: PropTypes.string,\n  colorScheme: PropTypes.string,\n  setColorSchemeAndUnsavedChanges: PropTypes.func.isRequired,\n  isStarred: PropTypes.bool.isRequired,\n  isPublished: PropTypes.bool.isRequired,\n  isLoading: PropTypes.bool.isRequired,\n  onSave: PropTypes.func.isRequired,\n  onChange: PropTypes.func.isRequired,\n  fetchFaveStar: PropTypes.func.isRequired,\n  fetchCharts: PropTypes.func.isRequired,\n  fetchUISpecificReport: PropTypes.func.isRequired,\n  saveFaveStar: PropTypes.func.isRequired,\n  savePublished: PropTypes.func.isRequired,\n  updateDashboardTitle: PropTypes.func.isRequired,\n  editMode: PropTypes.bool.isRequired,\n  setEditMode: PropTypes.func.isRequired,\n  showBuilderPane: PropTypes.func.isRequired,\n  updateCss: PropTypes.func.isRequired,\n  logEvent: PropTypes.func.isRequired,\n  hasUnsavedChanges: PropTypes.bool.isRequired,\n  maxUndoHistoryExceeded: PropTypes.bool.isRequired,\n  lastModifiedTime: PropTypes.number.isRequired,\n\n  // redux\n  onRefresh: PropTypes.func.isRequired,\n  onUndo: PropTypes.func.isRequired,\n  onRedo: PropTypes.func.isRequired,\n  undoLength: PropTypes.number.isRequired,\n  redoLength: PropTypes.number.isRequired,\n  setMaxUndoHistoryExceeded: PropTypes.func.isRequired,\n  maxUndoHistoryToast: PropTypes.func.isRequired,\n  refreshFrequency: PropTypes.number.isRequired,\n  shouldPersistRefreshFrequency: PropTypes.bool.isRequired,\n  setRefreshFrequency: PropTypes.func.isRequired,\n  dashboardInfoChanged: PropTypes.func.isRequired,\n  dashboardTitleChanged: PropTypes.func.isRequired };\n\n\nconst defaultProps = {\n  colorNamespace: undefined,\n  colorScheme: undefined };\n\n\n// Styled Components\nconst StyledDashboardHeader = styled.div`\n  background: ${({ theme }) => theme.colors.grayscale.light5};\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: space-between;\n  padding: 0 ${({ theme }) => theme.gridUnit * 6}px;\n  border-bottom: 1px solid ${({ theme }) => theme.colors.grayscale.light2};\n\n  .action-button > span {\n    color: ${({ theme }) => theme.colors.grayscale.base};\n  }\n  button,\n  .fave-unfave-icon {\n    margin-left: ${({ theme }) => theme.gridUnit * 2}px;\n  }\n  .button-container {\n    display: flex;\n    flex-direction: row;\n    flex-wrap: nowrap;\n    .action-button {\n      font-size: ${({ theme }) => theme.typography.sizes.xl}px;\n      margin-left: ${({ theme }) => theme.gridUnit * 2.5}px;\n    }\n  }\n`;\n\nclass Header extends React.PureComponent {\n  static discardChanges() {\n    const url = new _URL(window.location.href);\n\n    url.searchParams.delete('edit');\n    window.location.assign(url);\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      didNotifyMaxUndoHistoryToast: false,\n      emphasizeUndo: false,\n      showingPropertiesModal: false,\n      showingReportModal: false };\n\n\n    this.handleChangeText = this.handleChangeText.bind(this);\n    this.handleCtrlZ = this.handleCtrlZ.bind(this);\n    this.handleCtrlY = this.handleCtrlY.bind(this);\n    this.toggleEditMode = this.toggleEditMode.bind(this);\n    this.forceRefresh = this.forceRefresh.bind(this);\n    this.startPeriodicRender = this.startPeriodicRender.bind(this);\n    this.overwriteDashboard = this.overwriteDashboard.bind(this);\n    this.showPropertiesModal = this.showPropertiesModal.bind(this);\n    this.hidePropertiesModal = this.hidePropertiesModal.bind(this);\n    this.showReportModal = this.showReportModal.bind(this);\n    this.hideReportModal = this.hideReportModal.bind(this);\n    this.renderReportModal = this.renderReportModal.bind(this);\n  }\n\n  componentDidMount() {\n    const { refreshFrequency, user, dashboardInfo } = this.props;\n    this.startPeriodicRender(refreshFrequency * 1000);\n    if (this.canAddReports()) {\n      // this is in case there is an anonymous user.\n      this.props.fetchUISpecificReport(\n      user.userId,\n      'dashboard_id',\n      'dashboards',\n      dashboardInfo.id,\n      user.email);\n\n    }\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    const { user } = this.props;\n    if (\n    UNDO_LIMIT - nextProps.undoLength <= 0 &&\n    !this.state.didNotifyMaxUndoHistoryToast)\n    {\n      this.setState(() => ({ didNotifyMaxUndoHistoryToast: true }));\n      this.props.maxUndoHistoryToast();\n    }\n    if (\n    nextProps.undoLength > UNDO_LIMIT &&\n    !this.props.maxUndoHistoryExceeded)\n    {\n      this.props.setMaxUndoHistoryExceeded();\n    }\n    if (\n    this.canAddReports() &&\n    nextProps.dashboardInfo.id !== this.props.dashboardInfo.id)\n    {\n      // this is in case there is an anonymous user.\n      this.props.fetchUISpecificReport(\n      user.userId,\n      'dashboard_id',\n      'dashboards',\n      nextProps.dashboardInfo.id,\n      user.email);\n\n    }\n  }\n\n  componentWillUnmount() {\n    stopPeriodicRender(this.refreshTimer);\n    this.props.setRefreshFrequency(0);\n    clearTimeout(this.ctrlYTimeout);\n    clearTimeout(this.ctrlZTimeout);\n  }\n\n  handleChangeText(nextText) {\n    const { updateDashboardTitle, onChange } = this.props;\n    if (nextText && this.props.dashboardTitle !== nextText) {\n      updateDashboardTitle(nextText);\n      onChange();\n    }\n  }\n\n  handleCtrlY() {\n    this.props.onRedo();\n    this.setState({ emphasizeRedo: true }, () => {\n      if (this.ctrlYTimeout) clearTimeout(this.ctrlYTimeout);\n      this.ctrlYTimeout = setTimeout(() => {\n        this.setState({ emphasizeRedo: false });\n      }, 100);\n    });\n  }\n\n  handleCtrlZ() {\n    this.props.onUndo();\n    this.setState({ emphasizeUndo: true }, () => {\n      if (this.ctrlZTimeout) clearTimeout(this.ctrlZTimeout);\n      this.ctrlZTimeout = setTimeout(() => {\n        this.setState({ emphasizeUndo: false });\n      }, 100);\n    });\n  }\n\n  forceRefresh() {\n    if (!this.props.isLoading) {\n      const chartList = Object.keys(this.props.charts);\n      this.props.logEvent(LOG_ACTIONS_FORCE_REFRESH_DASHBOARD, {\n        force: true,\n        interval: 0,\n        chartCount: chartList.length });\n\n      return this.props.onRefresh(\n      chartList,\n      true,\n      0,\n      this.props.dashboardInfo.id);\n\n    }\n    return false;\n  }\n\n  startPeriodicRender(interval) {\n    let intervalMessage;\n    if (interval) {\n      const predefinedValue = PeriodicRefreshOptions.find(\n      (option) => option.value === interval / 1000);\n\n      if (predefinedValue) {\n        intervalMessage = predefinedValue.label;\n      } else {\n        intervalMessage = moment.duration(interval, 'millisecond').humanize();\n      }\n    }\n\n    const periodicRender = () => {\n      const { fetchCharts, logEvent, charts, dashboardInfo } = this.props;\n      const { metadata } = dashboardInfo;\n      const immune = metadata.timed_refresh_immune_slices || [];\n      const affectedCharts = Object.values(charts).\n      filter((chart) => immune.indexOf(chart.id) === -1).\n      map((chart) => chart.id);\n\n      logEvent(LOG_ACTIONS_PERIODIC_RENDER_DASHBOARD, {\n        interval,\n        chartCount: affectedCharts.length });\n\n      this.props.addWarningToast(\n      t(\n      `This dashboard is currently force refreshing; the next force refresh will be in %s.`,\n      intervalMessage));\n\n\n\n      return fetchCharts(\n      affectedCharts,\n      true,\n      interval * 0.2,\n      dashboardInfo.id);\n\n    };\n\n    this.refreshTimer = setPeriodicRunner({\n      interval,\n      periodicRender,\n      refreshTimer: this.refreshTimer });\n\n  }\n\n  toggleEditMode() {\n    this.props.logEvent(LOG_ACTIONS_TOGGLE_EDIT_DASHBOARD, {\n      edit_mode: !this.props.editMode });\n\n    this.props.setEditMode(!this.props.editMode);\n  }\n\n  overwriteDashboard() {var _dashboardInfo$metada, _dashboardInfo$metada2, _dashboardInfo$metada3;\n    const {\n      dashboardTitle,\n      layout: positions,\n      colorScheme,\n      colorNamespace,\n      customCss,\n      dashboardInfo,\n      refreshFrequency: currentRefreshFrequency,\n      shouldPersistRefreshFrequency,\n      lastModifiedTime,\n      slug } =\n    this.props;\n\n    // check refresh frequency is for current session or persist\n    const refreshFrequency = shouldPersistRefreshFrequency ?\n    currentRefreshFrequency : (_dashboardInfo$metada =\n    dashboardInfo.metadata) == null ? void 0 : _dashboardInfo$metada.refresh_frequency;\n\n    const data = {\n      certified_by: dashboardInfo.certified_by,\n      certification_details: dashboardInfo.certification_details,\n      css: customCss,\n      dashboard_title: dashboardTitle,\n      last_modified_time: lastModifiedTime,\n      owners: dashboardInfo.owners,\n      roles: dashboardInfo.roles,\n      slug,\n      metadata: {\n        ...(dashboardInfo == null ? void 0 : dashboardInfo.metadata),\n        color_namespace:\n        (dashboardInfo == null ? void 0 : (_dashboardInfo$metada2 = dashboardInfo.metadata) == null ? void 0 : _dashboardInfo$metada2.color_namespace) || colorNamespace,\n        color_scheme: (dashboardInfo == null ? void 0 : (_dashboardInfo$metada3 = dashboardInfo.metadata) == null ? void 0 : _dashboardInfo$metada3.color_scheme) || colorScheme,\n        positions,\n        refresh_frequency: refreshFrequency } };\n\n\n\n    // make sure positions data less than DB storage limitation:\n    const positionJSONLength = safeStringify(positions).length;\n    const limit =\n    dashboardInfo.common.conf.SUPERSET_DASHBOARD_POSITION_DATA_LIMIT ||\n    DASHBOARD_POSITION_DATA_LIMIT;\n    if (positionJSONLength >= limit) {\n      this.props.addDangerToast(\n      t(\n      'Your dashboard is too large. Please reduce its size before saving it.'));\n\n\n    } else {\n      if (positionJSONLength >= limit * 0.9) {\n        this.props.addWarningToast('Your dashboard is near the size limit.');\n      }\n\n      this.props.onSave(data, dashboardInfo.id, SAVE_TYPE_OVERWRITE);\n    }\n  }\n\n  showPropertiesModal() {\n    this.setState({ showingPropertiesModal: true });\n  }\n\n  hidePropertiesModal() {\n    this.setState({ showingPropertiesModal: false });\n  }\n\n  showReportModal() {\n    this.setState({ showingReportModal: true });\n  }\n\n  hideReportModal() {\n    this.setState({ showingReportModal: false });\n  }\n\n  renderReportModal() {\n    const attachedReportExists = !!Object.keys(this.props.reports).length;\n    return attachedReportExists ?\n    ___EmotionJSX(HeaderReportActionsDropdown, {\n      showReportModal: this.showReportModal,\n      toggleActive: this.props.toggleActive,\n      deleteActiveReport: this.props.deleteActiveReport, __self: this, __source: { fileName: _jsxFileName, lineNumber: 400, columnNumber: 7 } }) :\n\n\n    ___EmotionJSX(React.Fragment, null,\n    ___EmotionJSX(\"span\", {\n      role: \"button\",\n      title: t('Schedule email report'),\n      tabIndex: 0,\n      className: \"action-button\",\n      onClick: this.showReportModal, __self: this, __source: { fileName: _jsxFileName, lineNumber: 407, columnNumber: 9 } },\n\n    ___EmotionJSX(Icons.Calendar, { __self: this, __source: { fileName: _jsxFileName, lineNumber: 414, columnNumber: 11 } })));\n\n\n\n  }\n\n  canAddReports() {\n    if (!isFeatureEnabled(FeatureFlag.ALERT_REPORTS)) {\n      return false;\n    }\n    const { user } = this.props;\n    if (!user) {\n      // this is in the case that there is an anonymous user.\n      return false;\n    }\n    const roles = Object.keys(user.roles || []);\n    const permissions = roles.map((key) =>\n    user.roles[key].filter(\n    (perms) => perms[0] === 'menu_access' && perms[1] === 'Manage'));\n\n\n    return permissions[0].length > 0;\n  }\n\n  render() {\n    const {\n      dashboardTitle,\n      layout,\n      expandedSlices,\n      customCss,\n      colorNamespace,\n      dataMask,\n      setColorSchemeAndUnsavedChanges,\n      colorScheme,\n      onUndo,\n      onRedo,\n      undoLength,\n      redoLength,\n      onChange,\n      onSave,\n      updateCss,\n      editMode,\n      isPublished,\n      user,\n      dashboardInfo,\n      hasUnsavedChanges,\n      isLoading,\n      refreshFrequency,\n      shouldPersistRefreshFrequency,\n      setRefreshFrequency,\n      lastModifiedTime } =\n    this.props;\n    const userCanEdit = dashboardInfo.dash_edit_perm;\n    const userCanShare = dashboardInfo.dash_share_perm;\n    const userCanSaveAs = dashboardInfo.dash_save_perm;\n    const shouldShowReport = !editMode && this.canAddReports();\n    const refreshLimit =\n    dashboardInfo.common.conf.SUPERSET_DASHBOARD_PERIODICAL_REFRESH_LIMIT;\n    const refreshWarning =\n    dashboardInfo.common.conf.\n    SUPERSET_DASHBOARD_PERIODICAL_REFRESH_WARNING_MESSAGE;\n\n    const handleOnPropertiesChange = (updates) => {\n      const { dashboardInfoChanged, dashboardTitleChanged } = this.props;\n      dashboardInfoChanged({\n        slug: updates.slug,\n        metadata: JSON.parse(updates.jsonMetadata || '{}'),\n        certified_by: updates.certifiedBy,\n        certification_details: updates.certificationDetails,\n        owners: updates.owners,\n        roles: updates.roles });\n\n      setColorSchemeAndUnsavedChanges(updates.colorScheme);\n      dashboardTitleChanged(updates.title);\n    };\n\n    return (\n      ___EmotionJSX(StyledDashboardHeader, {\n        className: \"dashboard-header\",\n        \"data-test\": \"dashboard-header\",\n        \"data-test-id\": `${dashboardInfo.id}`, __self: this, __source: { fileName: _jsxFileName, lineNumber: 491, columnNumber: 7 } },\n\n      ___EmotionJSX(\"div\", { className: \"dashboard-component-header header-large\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 496, columnNumber: 9 } },\n      dashboardInfo.certified_by &&\n      ___EmotionJSX(React.Fragment, null,\n      ___EmotionJSX(CertifiedIcon, {\n        certifiedBy: dashboardInfo.certified_by,\n        details: dashboardInfo.certification_details, __self: this, __source: { fileName: _jsxFileName, lineNumber: 499, columnNumber: 15 } }),\n      ' '),\n\n\n      ___EmotionJSX(EditableTitle, {\n        title: dashboardTitle,\n        canEdit: userCanEdit && editMode,\n        onSaveTitle: this.handleChangeText,\n        showTooltip: false, __self: this, __source: { fileName: _jsxFileName, lineNumber: 505, columnNumber: 11 } }),\n\n      ___EmotionJSX(PublishedStatus, {\n        dashboardId: dashboardInfo.id,\n        isPublished: isPublished,\n        savePublished: this.props.savePublished,\n        canEdit: userCanEdit,\n        canSave: userCanSaveAs, __self: this, __source: { fileName: _jsxFileName, lineNumber: 511, columnNumber: 11 } }),\n\n      (user == null ? void 0 : user.userId) &&\n      ___EmotionJSX(FaveStar, {\n        itemId: dashboardInfo.id,\n        fetchFaveStar: this.props.fetchFaveStar,\n        saveFaveStar: this.props.saveFaveStar,\n        isStarred: this.props.isStarred,\n        showTooltip: true, __self: this, __source: { fileName: _jsxFileName, lineNumber: 519, columnNumber: 13 } })),\n\n\n\n\n      ___EmotionJSX(\"div\", { className: \"button-container\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 529, columnNumber: 9 } },\n      userCanSaveAs &&\n      ___EmotionJSX(\"div\", {\n        className: \"button-container\",\n        \"data-test\": \"dashboard-edit-actions\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 531, columnNumber: 13 } },\n\n      editMode &&\n      ___EmotionJSX(React.Fragment, null,\n      ___EmotionJSX(ButtonGroup, { className: \"m-r-5\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 537, columnNumber: 19 } },\n      ___EmotionJSX(Button, {\n        buttonSize: \"small\",\n        onClick: onUndo,\n        disabled: undoLength < 1,\n        buttonStyle:\n        this.state.emphasizeUndo ? 'primary' : undefined,\n\n        showMarginRight: false, __self: this, __source: { fileName: _jsxFileName, lineNumber: 538, columnNumber: 21 } },\n\n      ___EmotionJSX(\"i\", {\n        title: \"Undo\",\n        className: \"undo-action fa fa-reply\",\n        \"data-test\": \"undo-action\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 547, columnNumber: 23 } }), \"\\xA0\"),\n\n\n\n      ___EmotionJSX(Button, {\n        buttonSize: \"small\",\n        onClick: onRedo,\n        disabled: redoLength < 1,\n        buttonStyle:\n        this.state.emphasizeRedo ? 'primary' : undefined,\n\n        showMarginRight: false, __self: this, __source: { fileName: _jsxFileName, lineNumber: 554, columnNumber: 21 } }, \"\\xA0\",\n\n\n      ___EmotionJSX(\"i\", { title: \"Redo\", className: \"redo-action fa fa-share\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 564, columnNumber: 23 } }))),\n\n\n      ___EmotionJSX(Button, {\n        buttonSize: \"small\",\n        className: \"m-r-5\",\n        onClick: this.constructor.discardChanges,\n        buttonStyle: \"default\",\n        \"data-test\": \"discard-changes-button\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 567, columnNumber: 19 } },\n\n      t('Discard changes')),\n\n      ___EmotionJSX(Button, {\n        buttonSize: \"small\",\n        disabled: !hasUnsavedChanges,\n        buttonStyle: \"primary\",\n        onClick: this.overwriteDashboard,\n        \"data-test\": \"header-save-button\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 576, columnNumber: 19 } },\n\n      t('Save')))),\n\n\n\n\n\n      editMode &&\n      ___EmotionJSX(UndoRedoKeyListeners, {\n        onUndo: this.handleCtrlZ,\n        onRedo: this.handleCtrlY, __self: this, __source: { fileName: _jsxFileName, lineNumber: 590, columnNumber: 13 } }),\n\n\n\n      !editMode && userCanEdit &&\n      ___EmotionJSX(React.Fragment, null,\n      ___EmotionJSX(\"span\", {\n        role: \"button\",\n        title: t('Edit dashboard'),\n        tabIndex: 0,\n        className: \"action-button\",\n        onClick: this.toggleEditMode, __self: this, __source: { fileName: _jsxFileName, lineNumber: 598, columnNumber: 15 } },\n\n      ___EmotionJSX(Icons.EditAlt, { __self: this, __source: { fileName: _jsxFileName, lineNumber: 605, columnNumber: 17 } }))),\n\n\n\n      shouldShowReport && this.renderReportModal(),\n\n      ___EmotionJSX(PropertiesModal, {\n        dashboardId: dashboardInfo.id,\n        dashboardInfo: dashboardInfo,\n        dashboardTitle: dashboardTitle,\n        show: this.state.showingPropertiesModal,\n        onHide: this.hidePropertiesModal,\n        colorScheme: this.props.colorScheme,\n        onSubmit: handleOnPropertiesChange,\n        onlyApply: true, __self: this, __source: { fileName: _jsxFileName, lineNumber: 611, columnNumber: 11 } }),\n\n\n      this.state.showingReportModal &&\n      ___EmotionJSX(ReportModal, {\n        show: this.state.showingReportModal,\n        onHide: this.hideReportModal,\n        props: {\n          userId: user.userId,\n          userEmail: user.email,\n          dashboardId: dashboardInfo.id,\n          creationMethod: 'dashboards' }, __self: this, __source: { fileName: _jsxFileName, lineNumber: 623, columnNumber: 13 } }),\n\n\n\n\n      ___EmotionJSX(HeaderActionsDropdown, {\n        addSuccessToast: this.props.addSuccessToast,\n        addDangerToast: this.props.addDangerToast,\n        dashboardId: dashboardInfo.id,\n        dashboardTitle: dashboardTitle,\n        dashboardInfo: dashboardInfo,\n        dataMask: dataMask,\n        layout: layout,\n        expandedSlices: expandedSlices,\n        customCss: customCss,\n        colorNamespace: colorNamespace,\n        colorScheme: colorScheme,\n        onSave: onSave,\n        onChange: onChange,\n        forceRefreshAllCharts: this.forceRefresh,\n        startPeriodicRender: this.startPeriodicRender,\n        refreshFrequency: refreshFrequency,\n        shouldPersistRefreshFrequency: shouldPersistRefreshFrequency,\n        setRefreshFrequency: setRefreshFrequency,\n        updateCss: updateCss,\n        editMode: editMode,\n        hasUnsavedChanges: hasUnsavedChanges,\n        userCanEdit: userCanEdit,\n        userCanShare: userCanShare,\n        userCanSave: userCanSaveAs,\n        isLoading: isLoading,\n        showPropertiesModal: this.showPropertiesModal,\n        refreshLimit: refreshLimit,\n        refreshWarning: refreshWarning,\n        lastModifiedTime: lastModifiedTime, __self: this, __source: { fileName: _jsxFileName, lineNumber: 635, columnNumber: 11 } }))));\n\n\n\n\n  } // @ts-ignore\n  __reactstandin__regenerateByEval(key, code) {// @ts-ignore\n    this[key] = eval(code);}}\nHeader.propTypes = propTypes;\nHeader.defaultProps = defaultProps;const _default =\n\nHeader;export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(propTypes, \"propTypes\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/components/Header/index.jsx\");reactHotLoader.register(defaultProps, \"defaultProps\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/components/Header/index.jsx\");reactHotLoader.register(StyledDashboardHeader, \"StyledDashboardHeader\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/components/Header/index.jsx\");reactHotLoader.register(Header, \"Header\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/components/Header/index.jsx\");reactHotLoader.register(_default, \"default\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/components/Header/index.jsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/components/Header/index.jsx"],"names":["moment","React","PropTypes","styled","t","ButtonGroup","CertifiedIcon","LOG_ACTIONS_PERIODIC_RENDER_DASHBOARD","LOG_ACTIONS_FORCE_REFRESH_DASHBOARD","LOG_ACTIONS_TOGGLE_EDIT_DASHBOARD","isFeatureEnabled","FeatureFlag","Icons","Button","EditableTitle","FaveStar","safeStringify","HeaderActionsDropdown","HeaderReportActionsDropdown","PublishedStatus","UndoRedoKeyListeners","PropertiesModal","ReportModal","chartPropShape","UserWithPermissionsAndRoles","UNDO_LIMIT","SAVE_TYPE_OVERWRITE","DASHBOARD_POSITION_DATA_LIMIT","setPeriodicRunner","stopPeriodicRender","options","PeriodicRefreshOptions","propTypes","addSuccessToast","func","isRequired","addDangerToast","addWarningToast","user","dashboardInfo","object","dashboardTitle","string","dataMask","charts","objectOf","layout","expandedSlices","customCss","colorNamespace","colorScheme","setColorSchemeAndUnsavedChanges","isStarred","bool","isPublished","isLoading","onSave","onChange","fetchFaveStar","fetchCharts","fetchUISpecificReport","saveFaveStar","savePublished","updateDashboardTitle","editMode","setEditMode","showBuilderPane","updateCss","logEvent","hasUnsavedChanges","maxUndoHistoryExceeded","lastModifiedTime","number","onRefresh","onUndo","onRedo","undoLength","redoLength","setMaxUndoHistoryExceeded","maxUndoHistoryToast","refreshFrequency","shouldPersistRefreshFrequency","setRefreshFrequency","dashboardInfoChanged","dashboardTitleChanged","defaultProps","undefined","StyledDashboardHeader","div","theme","colors","grayscale","light5","gridUnit","light2","base","typography","sizes","xl","Header","PureComponent","discardChanges","url","window","location","href","searchParams","delete","assign","constructor","props","state","didNotifyMaxUndoHistoryToast","emphasizeUndo","showingPropertiesModal","showingReportModal","handleChangeText","bind","handleCtrlZ","handleCtrlY","toggleEditMode","forceRefresh","startPeriodicRender","overwriteDashboard","showPropertiesModal","hidePropertiesModal","showReportModal","hideReportModal","renderReportModal","componentDidMount","canAddReports","userId","id","email","UNSAFE_componentWillReceiveProps","nextProps","setState","componentWillUnmount","refreshTimer","clearTimeout","ctrlYTimeout","ctrlZTimeout","nextText","emphasizeRedo","setTimeout","chartList","Object","keys","force","interval","chartCount","length","intervalMessage","predefinedValue","find","option","value","label","duration","humanize","periodicRender","metadata","immune","timed_refresh_immune_slices","affectedCharts","values","filter","chart","indexOf","map","edit_mode","positions","currentRefreshFrequency","slug","refresh_frequency","data","certified_by","certification_details","css","dashboard_title","last_modified_time","owners","roles","color_namespace","color_scheme","positionJSONLength","limit","common","conf","SUPERSET_DASHBOARD_POSITION_DATA_LIMIT","attachedReportExists","reports","toggleActive","deleteActiveReport","ALERT_REPORTS","permissions","key","perms","render","userCanEdit","dash_edit_perm","userCanShare","dash_share_perm","userCanSaveAs","dash_save_perm","shouldShowReport","refreshLimit","SUPERSET_DASHBOARD_PERIODICAL_REFRESH_LIMIT","refreshWarning","SUPERSET_DASHBOARD_PERIODICAL_REFRESH_WARNING_MESSAGE","handleOnPropertiesChange","updates","JSON","parse","jsonMetadata","certifiedBy","certificationDetails","title","userEmail","dashboardId","creationMethod"],"mappings":"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","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint-env browser */\nimport moment from 'moment';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { styled, t } from '@superset-ui/core';\nimport ButtonGroup from 'src/components/ButtonGroup';\nimport CertifiedIcon from 'src/components/CertifiedIcon';\n\nimport {\n  LOG_ACTIONS_PERIODIC_RENDER_DASHBOARD,\n  LOG_ACTIONS_FORCE_REFRESH_DASHBOARD,\n  LOG_ACTIONS_TOGGLE_EDIT_DASHBOARD,\n} from 'src/logger/LogUtils';\nimport { isFeatureEnabled, FeatureFlag } from 'src/featureFlags';\n\nimport Icons from 'src/components/Icons';\nimport Button from 'src/components/Button';\nimport EditableTitle from 'src/components/EditableTitle';\nimport FaveStar from 'src/components/FaveStar';\nimport { safeStringify } from 'src/utils/safeStringify';\nimport HeaderActionsDropdown from 'src/dashboard/components/Header/HeaderActionsDropdown';\nimport HeaderReportActionsDropdown from 'src/components/ReportModal/HeaderReportActionsDropdown';\nimport PublishedStatus from 'src/dashboard/components/PublishedStatus';\nimport UndoRedoKeyListeners from 'src/dashboard/components/UndoRedoKeyListeners';\nimport PropertiesModal from 'src/dashboard/components/PropertiesModal';\nimport ReportModal from 'src/components/ReportModal';\nimport { chartPropShape } from 'src/dashboard/util/propShapes';\nimport { UserWithPermissionsAndRoles } from 'src/types/bootstrapTypes';\nimport {\n  UNDO_LIMIT,\n  SAVE_TYPE_OVERWRITE,\n  DASHBOARD_POSITION_DATA_LIMIT,\n} from 'src/dashboard/util/constants';\nimport setPeriodicRunner, {\n  stopPeriodicRender,\n} from 'src/dashboard/util/setPeriodicRunner';\nimport { options as PeriodicRefreshOptions } from 'src/dashboard/components/RefreshIntervalModal';\n\nconst propTypes = {\n  addSuccessToast: PropTypes.func.isRequired,\n  addDangerToast: PropTypes.func.isRequired,\n  addWarningToast: PropTypes.func.isRequired,\n  user: UserWithPermissionsAndRoles,\n  dashboardInfo: PropTypes.object.isRequired,\n  dashboardTitle: PropTypes.string.isRequired,\n  dataMask: PropTypes.object.isRequired,\n  charts: PropTypes.objectOf(chartPropShape).isRequired,\n  layout: PropTypes.object.isRequired,\n  expandedSlices: PropTypes.object.isRequired,\n  customCss: PropTypes.string.isRequired,\n  colorNamespace: PropTypes.string,\n  colorScheme: PropTypes.string,\n  setColorSchemeAndUnsavedChanges: PropTypes.func.isRequired,\n  isStarred: PropTypes.bool.isRequired,\n  isPublished: PropTypes.bool.isRequired,\n  isLoading: PropTypes.bool.isRequired,\n  onSave: PropTypes.func.isRequired,\n  onChange: PropTypes.func.isRequired,\n  fetchFaveStar: PropTypes.func.isRequired,\n  fetchCharts: PropTypes.func.isRequired,\n  fetchUISpecificReport: PropTypes.func.isRequired,\n  saveFaveStar: PropTypes.func.isRequired,\n  savePublished: PropTypes.func.isRequired,\n  updateDashboardTitle: PropTypes.func.isRequired,\n  editMode: PropTypes.bool.isRequired,\n  setEditMode: PropTypes.func.isRequired,\n  showBuilderPane: PropTypes.func.isRequired,\n  updateCss: PropTypes.func.isRequired,\n  logEvent: PropTypes.func.isRequired,\n  hasUnsavedChanges: PropTypes.bool.isRequired,\n  maxUndoHistoryExceeded: PropTypes.bool.isRequired,\n  lastModifiedTime: PropTypes.number.isRequired,\n\n  // redux\n  onRefresh: PropTypes.func.isRequired,\n  onUndo: PropTypes.func.isRequired,\n  onRedo: PropTypes.func.isRequired,\n  undoLength: PropTypes.number.isRequired,\n  redoLength: PropTypes.number.isRequired,\n  setMaxUndoHistoryExceeded: PropTypes.func.isRequired,\n  maxUndoHistoryToast: PropTypes.func.isRequired,\n  refreshFrequency: PropTypes.number.isRequired,\n  shouldPersistRefreshFrequency: PropTypes.bool.isRequired,\n  setRefreshFrequency: PropTypes.func.isRequired,\n  dashboardInfoChanged: PropTypes.func.isRequired,\n  dashboardTitleChanged: PropTypes.func.isRequired,\n};\n\nconst defaultProps = {\n  colorNamespace: undefined,\n  colorScheme: undefined,\n};\n\n// Styled Components\nconst StyledDashboardHeader = styled.div`\n  background: ${({ theme }) => theme.colors.grayscale.light5};\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: space-between;\n  padding: 0 ${({ theme }) => theme.gridUnit * 6}px;\n  border-bottom: 1px solid ${({ theme }) => theme.colors.grayscale.light2};\n\n  .action-button > span {\n    color: ${({ theme }) => theme.colors.grayscale.base};\n  }\n  button,\n  .fave-unfave-icon {\n    margin-left: ${({ theme }) => theme.gridUnit * 2}px;\n  }\n  .button-container {\n    display: flex;\n    flex-direction: row;\n    flex-wrap: nowrap;\n    .action-button {\n      font-size: ${({ theme }) => theme.typography.sizes.xl}px;\n      margin-left: ${({ theme }) => theme.gridUnit * 2.5}px;\n    }\n  }\n`;\n\nclass Header extends React.PureComponent {\n  static discardChanges() {\n    const url = new URL(window.location.href);\n\n    url.searchParams.delete('edit');\n    window.location.assign(url);\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      didNotifyMaxUndoHistoryToast: false,\n      emphasizeUndo: false,\n      showingPropertiesModal: false,\n      showingReportModal: false,\n    };\n\n    this.handleChangeText = this.handleChangeText.bind(this);\n    this.handleCtrlZ = this.handleCtrlZ.bind(this);\n    this.handleCtrlY = this.handleCtrlY.bind(this);\n    this.toggleEditMode = this.toggleEditMode.bind(this);\n    this.forceRefresh = this.forceRefresh.bind(this);\n    this.startPeriodicRender = this.startPeriodicRender.bind(this);\n    this.overwriteDashboard = this.overwriteDashboard.bind(this);\n    this.showPropertiesModal = this.showPropertiesModal.bind(this);\n    this.hidePropertiesModal = this.hidePropertiesModal.bind(this);\n    this.showReportModal = this.showReportModal.bind(this);\n    this.hideReportModal = this.hideReportModal.bind(this);\n    this.renderReportModal = this.renderReportModal.bind(this);\n  }\n\n  componentDidMount() {\n    const { refreshFrequency, user, dashboardInfo } = this.props;\n    this.startPeriodicRender(refreshFrequency * 1000);\n    if (this.canAddReports()) {\n      // this is in case there is an anonymous user.\n      this.props.fetchUISpecificReport(\n        user.userId,\n        'dashboard_id',\n        'dashboards',\n        dashboardInfo.id,\n        user.email,\n      );\n    }\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    const { user } = this.props;\n    if (\n      UNDO_LIMIT - nextProps.undoLength <= 0 &&\n      !this.state.didNotifyMaxUndoHistoryToast\n    ) {\n      this.setState(() => ({ didNotifyMaxUndoHistoryToast: true }));\n      this.props.maxUndoHistoryToast();\n    }\n    if (\n      nextProps.undoLength > UNDO_LIMIT &&\n      !this.props.maxUndoHistoryExceeded\n    ) {\n      this.props.setMaxUndoHistoryExceeded();\n    }\n    if (\n      this.canAddReports() &&\n      nextProps.dashboardInfo.id !== this.props.dashboardInfo.id\n    ) {\n      // this is in case there is an anonymous user.\n      this.props.fetchUISpecificReport(\n        user.userId,\n        'dashboard_id',\n        'dashboards',\n        nextProps.dashboardInfo.id,\n        user.email,\n      );\n    }\n  }\n\n  componentWillUnmount() {\n    stopPeriodicRender(this.refreshTimer);\n    this.props.setRefreshFrequency(0);\n    clearTimeout(this.ctrlYTimeout);\n    clearTimeout(this.ctrlZTimeout);\n  }\n\n  handleChangeText(nextText) {\n    const { updateDashboardTitle, onChange } = this.props;\n    if (nextText && this.props.dashboardTitle !== nextText) {\n      updateDashboardTitle(nextText);\n      onChange();\n    }\n  }\n\n  handleCtrlY() {\n    this.props.onRedo();\n    this.setState({ emphasizeRedo: true }, () => {\n      if (this.ctrlYTimeout) clearTimeout(this.ctrlYTimeout);\n      this.ctrlYTimeout = setTimeout(() => {\n        this.setState({ emphasizeRedo: false });\n      }, 100);\n    });\n  }\n\n  handleCtrlZ() {\n    this.props.onUndo();\n    this.setState({ emphasizeUndo: true }, () => {\n      if (this.ctrlZTimeout) clearTimeout(this.ctrlZTimeout);\n      this.ctrlZTimeout = setTimeout(() => {\n        this.setState({ emphasizeUndo: false });\n      }, 100);\n    });\n  }\n\n  forceRefresh() {\n    if (!this.props.isLoading) {\n      const chartList = Object.keys(this.props.charts);\n      this.props.logEvent(LOG_ACTIONS_FORCE_REFRESH_DASHBOARD, {\n        force: true,\n        interval: 0,\n        chartCount: chartList.length,\n      });\n      return this.props.onRefresh(\n        chartList,\n        true,\n        0,\n        this.props.dashboardInfo.id,\n      );\n    }\n    return false;\n  }\n\n  startPeriodicRender(interval) {\n    let intervalMessage;\n    if (interval) {\n      const predefinedValue = PeriodicRefreshOptions.find(\n        option => option.value === interval / 1000,\n      );\n      if (predefinedValue) {\n        intervalMessage = predefinedValue.label;\n      } else {\n        intervalMessage = moment.duration(interval, 'millisecond').humanize();\n      }\n    }\n\n    const periodicRender = () => {\n      const { fetchCharts, logEvent, charts, dashboardInfo } = this.props;\n      const { metadata } = dashboardInfo;\n      const immune = metadata.timed_refresh_immune_slices || [];\n      const affectedCharts = Object.values(charts)\n        .filter(chart => immune.indexOf(chart.id) === -1)\n        .map(chart => chart.id);\n\n      logEvent(LOG_ACTIONS_PERIODIC_RENDER_DASHBOARD, {\n        interval,\n        chartCount: affectedCharts.length,\n      });\n      this.props.addWarningToast(\n        t(\n          `This dashboard is currently force refreshing; the next force refresh will be in %s.`,\n          intervalMessage,\n        ),\n      );\n\n      return fetchCharts(\n        affectedCharts,\n        true,\n        interval * 0.2,\n        dashboardInfo.id,\n      );\n    };\n\n    this.refreshTimer = setPeriodicRunner({\n      interval,\n      periodicRender,\n      refreshTimer: this.refreshTimer,\n    });\n  }\n\n  toggleEditMode() {\n    this.props.logEvent(LOG_ACTIONS_TOGGLE_EDIT_DASHBOARD, {\n      edit_mode: !this.props.editMode,\n    });\n    this.props.setEditMode(!this.props.editMode);\n  }\n\n  overwriteDashboard() {\n    const {\n      dashboardTitle,\n      layout: positions,\n      colorScheme,\n      colorNamespace,\n      customCss,\n      dashboardInfo,\n      refreshFrequency: currentRefreshFrequency,\n      shouldPersistRefreshFrequency,\n      lastModifiedTime,\n      slug,\n    } = this.props;\n\n    // check refresh frequency is for current session or persist\n    const refreshFrequency = shouldPersistRefreshFrequency\n      ? currentRefreshFrequency\n      : dashboardInfo.metadata?.refresh_frequency;\n\n    const data = {\n      certified_by: dashboardInfo.certified_by,\n      certification_details: dashboardInfo.certification_details,\n      css: customCss,\n      dashboard_title: dashboardTitle,\n      last_modified_time: lastModifiedTime,\n      owners: dashboardInfo.owners,\n      roles: dashboardInfo.roles,\n      slug,\n      metadata: {\n        ...dashboardInfo?.metadata,\n        color_namespace:\n          dashboardInfo?.metadata?.color_namespace || colorNamespace,\n        color_scheme: dashboardInfo?.metadata?.color_scheme || colorScheme,\n        positions,\n        refresh_frequency: refreshFrequency,\n      },\n    };\n\n    // make sure positions data less than DB storage limitation:\n    const positionJSONLength = safeStringify(positions).length;\n    const limit =\n      dashboardInfo.common.conf.SUPERSET_DASHBOARD_POSITION_DATA_LIMIT ||\n      DASHBOARD_POSITION_DATA_LIMIT;\n    if (positionJSONLength >= limit) {\n      this.props.addDangerToast(\n        t(\n          'Your dashboard is too large. Please reduce its size before saving it.',\n        ),\n      );\n    } else {\n      if (positionJSONLength >= limit * 0.9) {\n        this.props.addWarningToast('Your dashboard is near the size limit.');\n      }\n\n      this.props.onSave(data, dashboardInfo.id, SAVE_TYPE_OVERWRITE);\n    }\n  }\n\n  showPropertiesModal() {\n    this.setState({ showingPropertiesModal: true });\n  }\n\n  hidePropertiesModal() {\n    this.setState({ showingPropertiesModal: false });\n  }\n\n  showReportModal() {\n    this.setState({ showingReportModal: true });\n  }\n\n  hideReportModal() {\n    this.setState({ showingReportModal: false });\n  }\n\n  renderReportModal() {\n    const attachedReportExists = !!Object.keys(this.props.reports).length;\n    return attachedReportExists ? (\n      <HeaderReportActionsDropdown\n        showReportModal={this.showReportModal}\n        toggleActive={this.props.toggleActive}\n        deleteActiveReport={this.props.deleteActiveReport}\n      />\n    ) : (\n      <>\n        <span\n          role=\"button\"\n          title={t('Schedule email report')}\n          tabIndex={0}\n          className=\"action-button\"\n          onClick={this.showReportModal}\n        >\n          <Icons.Calendar />\n        </span>\n      </>\n    );\n  }\n\n  canAddReports() {\n    if (!isFeatureEnabled(FeatureFlag.ALERT_REPORTS)) {\n      return false;\n    }\n    const { user } = this.props;\n    if (!user) {\n      // this is in the case that there is an anonymous user.\n      return false;\n    }\n    const roles = Object.keys(user.roles || []);\n    const permissions = roles.map(key =>\n      user.roles[key].filter(\n        perms => perms[0] === 'menu_access' && perms[1] === 'Manage',\n      ),\n    );\n    return permissions[0].length > 0;\n  }\n\n  render() {\n    const {\n      dashboardTitle,\n      layout,\n      expandedSlices,\n      customCss,\n      colorNamespace,\n      dataMask,\n      setColorSchemeAndUnsavedChanges,\n      colorScheme,\n      onUndo,\n      onRedo,\n      undoLength,\n      redoLength,\n      onChange,\n      onSave,\n      updateCss,\n      editMode,\n      isPublished,\n      user,\n      dashboardInfo,\n      hasUnsavedChanges,\n      isLoading,\n      refreshFrequency,\n      shouldPersistRefreshFrequency,\n      setRefreshFrequency,\n      lastModifiedTime,\n    } = this.props;\n    const userCanEdit = dashboardInfo.dash_edit_perm;\n    const userCanShare = dashboardInfo.dash_share_perm;\n    const userCanSaveAs = dashboardInfo.dash_save_perm;\n    const shouldShowReport = !editMode && this.canAddReports();\n    const refreshLimit =\n      dashboardInfo.common.conf.SUPERSET_DASHBOARD_PERIODICAL_REFRESH_LIMIT;\n    const refreshWarning =\n      dashboardInfo.common.conf\n        .SUPERSET_DASHBOARD_PERIODICAL_REFRESH_WARNING_MESSAGE;\n\n    const handleOnPropertiesChange = updates => {\n      const { dashboardInfoChanged, dashboardTitleChanged } = this.props;\n      dashboardInfoChanged({\n        slug: updates.slug,\n        metadata: JSON.parse(updates.jsonMetadata || '{}'),\n        certified_by: updates.certifiedBy,\n        certification_details: updates.certificationDetails,\n        owners: updates.owners,\n        roles: updates.roles,\n      });\n      setColorSchemeAndUnsavedChanges(updates.colorScheme);\n      dashboardTitleChanged(updates.title);\n    };\n\n    return (\n      <StyledDashboardHeader\n        className=\"dashboard-header\"\n        data-test=\"dashboard-header\"\n        data-test-id={`${dashboardInfo.id}`}\n      >\n        <div className=\"dashboard-component-header header-large\">\n          {dashboardInfo.certified_by && (\n            <>\n              <CertifiedIcon\n                certifiedBy={dashboardInfo.certified_by}\n                details={dashboardInfo.certification_details}\n              />{' '}\n            </>\n          )}\n          <EditableTitle\n            title={dashboardTitle}\n            canEdit={userCanEdit && editMode}\n            onSaveTitle={this.handleChangeText}\n            showTooltip={false}\n          />\n          <PublishedStatus\n            dashboardId={dashboardInfo.id}\n            isPublished={isPublished}\n            savePublished={this.props.savePublished}\n            canEdit={userCanEdit}\n            canSave={userCanSaveAs}\n          />\n          {user?.userId && (\n            <FaveStar\n              itemId={dashboardInfo.id}\n              fetchFaveStar={this.props.fetchFaveStar}\n              saveFaveStar={this.props.saveFaveStar}\n              isStarred={this.props.isStarred}\n              showTooltip\n            />\n          )}\n        </div>\n\n        <div className=\"button-container\">\n          {userCanSaveAs && (\n            <div\n              className=\"button-container\"\n              data-test=\"dashboard-edit-actions\"\n            >\n              {editMode && (\n                <>\n                  <ButtonGroup className=\"m-r-5\">\n                    <Button\n                      buttonSize=\"small\"\n                      onClick={onUndo}\n                      disabled={undoLength < 1}\n                      buttonStyle={\n                        this.state.emphasizeUndo ? 'primary' : undefined\n                      }\n                      showMarginRight={false}\n                    >\n                      <i\n                        title=\"Undo\"\n                        className=\"undo-action fa fa-reply\"\n                        data-test=\"undo-action\"\n                      />\n                      &nbsp;\n                    </Button>\n                    <Button\n                      buttonSize=\"small\"\n                      onClick={onRedo}\n                      disabled={redoLength < 1}\n                      buttonStyle={\n                        this.state.emphasizeRedo ? 'primary' : undefined\n                      }\n                      showMarginRight={false}\n                    >\n                      &nbsp;\n                      <i title=\"Redo\" className=\"redo-action fa fa-share\" />\n                    </Button>\n                  </ButtonGroup>\n                  <Button\n                    buttonSize=\"small\"\n                    className=\"m-r-5\"\n                    onClick={this.constructor.discardChanges}\n                    buttonStyle=\"default\"\n                    data-test=\"discard-changes-button\"\n                  >\n                    {t('Discard changes')}\n                  </Button>\n                  <Button\n                    buttonSize=\"small\"\n                    disabled={!hasUnsavedChanges}\n                    buttonStyle=\"primary\"\n                    onClick={this.overwriteDashboard}\n                    data-test=\"header-save-button\"\n                  >\n                    {t('Save')}\n                  </Button>\n                </>\n              )}\n            </div>\n          )}\n          {editMode && (\n            <UndoRedoKeyListeners\n              onUndo={this.handleCtrlZ}\n              onRedo={this.handleCtrlY}\n            />\n          )}\n\n          {!editMode && userCanEdit && (\n            <>\n              <span\n                role=\"button\"\n                title={t('Edit dashboard')}\n                tabIndex={0}\n                className=\"action-button\"\n                onClick={this.toggleEditMode}\n              >\n                <Icons.EditAlt />\n              </span>\n            </>\n          )}\n          {shouldShowReport && this.renderReportModal()}\n\n          <PropertiesModal\n            dashboardId={dashboardInfo.id}\n            dashboardInfo={dashboardInfo}\n            dashboardTitle={dashboardTitle}\n            show={this.state.showingPropertiesModal}\n            onHide={this.hidePropertiesModal}\n            colorScheme={this.props.colorScheme}\n            onSubmit={handleOnPropertiesChange}\n            onlyApply\n          />\n\n          {this.state.showingReportModal && (\n            <ReportModal\n              show={this.state.showingReportModal}\n              onHide={this.hideReportModal}\n              props={{\n                userId: user.userId,\n                userEmail: user.email,\n                dashboardId: dashboardInfo.id,\n                creationMethod: 'dashboards',\n              }}\n            />\n          )}\n\n          <HeaderActionsDropdown\n            addSuccessToast={this.props.addSuccessToast}\n            addDangerToast={this.props.addDangerToast}\n            dashboardId={dashboardInfo.id}\n            dashboardTitle={dashboardTitle}\n            dashboardInfo={dashboardInfo}\n            dataMask={dataMask}\n            layout={layout}\n            expandedSlices={expandedSlices}\n            customCss={customCss}\n            colorNamespace={colorNamespace}\n            colorScheme={colorScheme}\n            onSave={onSave}\n            onChange={onChange}\n            forceRefreshAllCharts={this.forceRefresh}\n            startPeriodicRender={this.startPeriodicRender}\n            refreshFrequency={refreshFrequency}\n            shouldPersistRefreshFrequency={shouldPersistRefreshFrequency}\n            setRefreshFrequency={setRefreshFrequency}\n            updateCss={updateCss}\n            editMode={editMode}\n            hasUnsavedChanges={hasUnsavedChanges}\n            userCanEdit={userCanEdit}\n            userCanShare={userCanShare}\n            userCanSave={userCanSaveAs}\n            isLoading={isLoading}\n            showPropertiesModal={this.showPropertiesModal}\n            refreshLimit={refreshLimit}\n            refreshWarning={refreshWarning}\n            lastModifiedTime={lastModifiedTime}\n          />\n        </div>\n      </StyledDashboardHeader>\n    );\n  }\n}\n\nHeader.propTypes = propTypes;\nHeader.defaultProps = defaultProps;\n\nexport default Header;\n"]},"metadata":{},"sourceType":"module"}