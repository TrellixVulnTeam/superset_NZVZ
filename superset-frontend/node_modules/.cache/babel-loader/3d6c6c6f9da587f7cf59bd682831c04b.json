{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { t } from '@superset-ui/core';\nimport getToastsFromPyFlashMessages from 'src/components/MessageToasts/getToastsFromPyFlashMessages';\n\nexport default function getInitialState({\n  defaultDbId,\n  common,\n  active_tab: activeTab,\n  tab_state_ids: tabStateIds = [],\n  databases,\n  queries: queries_,\n  requested_query: requestedQuery,\n  user })\n{\n  /**\n   * Before YYYY-MM-DD, the state for SQL Lab was stored exclusively in the\n   * browser's localStorage. The feature flag `SQLLAB_BACKEND_PERSISTENCE`\n   * moves the state to the backend instead, migrating it from local storage.\n   *\n   * To allow for a transparent migration, the initial state is a combination\n   * of the backend state (if any) with the browser state (if any).\n   */\n  const queryEditors = [];\n  const defaultQueryEditor = {\n    id: null,\n    loaded: true,\n    title: t('Untitled query'),\n    sql: 'SELECT *\\nFROM\\nWHERE',\n    selectedText: null,\n    latestQueryId: null,\n    autorun: false,\n    templateParams: null,\n    dbId: defaultDbId,\n    functionNames: [],\n    queryLimit: common.conf.DEFAULT_SQLLAB_LIMIT,\n    validationResult: {\n      id: null,\n      errors: [],\n      completed: false },\n\n    queryCostEstimate: {\n      cost: null,\n      completed: false,\n      error: null },\n\n    hideLeftBar: false };\n\n\n  /**\n   * Load state from the backend. This will be empty if the feature flag\n   * `SQLLAB_BACKEND_PERSISTENCE` is off.\n   */\n  tabStateIds.forEach(({ id, label }) => {\n    let queryEditor;\n    if (activeTab && activeTab.id === id) {\n      queryEditor = {\n        id: id.toString(),\n        loaded: true,\n        title: activeTab.label,\n        sql: activeTab.sql || undefined,\n        selectedText: undefined,\n        latestQueryId: activeTab.latest_query ?\n        activeTab.latest_query.id :\n        null,\n        autorun: activeTab.autorun,\n        templateParams: activeTab.template_params || undefined,\n        dbId: activeTab.database_id,\n        functionNames: [],\n        schema: activeTab.schema,\n        queryLimit: activeTab.query_limit,\n        validationResult: {\n          id: null,\n          errors: [],\n          completed: false },\n\n        hideLeftBar: activeTab.hide_left_bar };\n\n    } else {\n      // dummy state, actual state will be loaded on tab switch\n      queryEditor = {\n        ...defaultQueryEditor,\n        id: id.toString(),\n        loaded: false,\n        title: label };\n\n    }\n    queryEditors.push(queryEditor);\n  });\n\n  const tabHistory = activeTab ? [activeTab.id.toString()] : [];\n  const tables = [];\n  if (activeTab) {\n    activeTab.table_schemas.\n    filter((tableSchema) => tableSchema.description !== null).\n    forEach((tableSchema) => {\n      const {\n        columns,\n        selectStar,\n        primaryKey,\n        foreignKeys,\n        indexes,\n        dataPreviewQueryId,\n        partitions,\n        metadata } =\n      tableSchema.description;\n      const table = {\n        dbId: tableSchema.database_id,\n        queryEditorId: tableSchema.tab_state_id.toString(),\n        schema: tableSchema.schema,\n        name: tableSchema.table,\n        expanded: tableSchema.expanded,\n        id: tableSchema.id,\n        isMetadataLoading: false,\n        isExtraMetadataLoading: false,\n        dataPreviewQueryId,\n        columns,\n        selectStar,\n        primaryKey,\n        foreignKeys,\n        indexes,\n        partitions,\n        metadata };\n\n      tables.push(table);\n    });\n  }\n\n  const queries = { ...queries_ };\n\n  /**\n   * If the `SQLLAB_BACKEND_PERSISTENCE` feature flag is off, or if the user\n   * hasn't used SQL Lab after it has been turned on, the state will be stored\n   * in the browser's local storage.\n   */\n  if (\n  localStorage.getItem('redux') &&\n  JSON.parse(localStorage.getItem('redux')).sqlLab)\n  {\n    const { sqlLab } = JSON.parse(localStorage.getItem('redux'));\n\n    if (sqlLab.queryEditors.length === 0) {\n      // migration was successful\n      localStorage.removeItem('redux');\n    } else {\n      // add query editors and tables to state with a special flag so they can\n      // be migrated if the `SQLLAB_BACKEND_PERSISTENCE` feature flag is on\n      sqlLab.queryEditors.forEach((qe) =>\n      queryEditors.push({\n        ...qe,\n        inLocalStorage: true,\n        loaded: true }));\n\n\n      sqlLab.tables.forEach((table) =>\n      tables.push({ ...table, inLocalStorage: true }));\n\n      Object.values(sqlLab.queries).forEach((query) => {\n        queries[query.id] = { ...query, inLocalStorage: true };\n      });\n      tabHistory.push(...sqlLab.tabHistory);\n    }\n  }\n\n  return {\n    sqlLab: {\n      activeSouthPaneTab: 'Results',\n      alerts: [],\n      databases,\n      offline: false,\n      queries,\n      queryEditors,\n      tabHistory,\n      tables,\n      queriesLastUpdate: Date.now(),\n      user },\n\n    requestedQuery,\n    messageToasts: getToastsFromPyFlashMessages(\n    (common || {}).flash_messages || []),\n\n    localStorageUsageInKilobytes: 0,\n    common: {\n      flash_messages: common.flash_messages,\n      conf: common.conf } };\n\n\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(getInitialState, \"getInitialState\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/reducers/getInitialState.js\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/home/ubuntu/my_plugin/superset/superset-frontend/src/SqlLab/reducers/getInitialState.js"],"names":["t","getToastsFromPyFlashMessages","getInitialState","defaultDbId","common","active_tab","activeTab","tab_state_ids","tabStateIds","databases","queries","queries_","requested_query","requestedQuery","user","queryEditors","defaultQueryEditor","id","loaded","title","sql","selectedText","latestQueryId","autorun","templateParams","dbId","functionNames","queryLimit","conf","DEFAULT_SQLLAB_LIMIT","validationResult","errors","completed","queryCostEstimate","cost","error","hideLeftBar","forEach","label","queryEditor","toString","undefined","latest_query","template_params","database_id","schema","query_limit","hide_left_bar","push","tabHistory","tables","table_schemas","filter","tableSchema","description","columns","selectStar","primaryKey","foreignKeys","indexes","dataPreviewQueryId","partitions","metadata","table","queryEditorId","tab_state_id","name","expanded","isMetadataLoading","isExtraMetadataLoading","localStorage","getItem","JSON","parse","sqlLab","length","removeItem","qe","inLocalStorage","Object","values","query","activeSouthPaneTab","alerts","offline","queriesLastUpdate","Date","now","messageToasts","flash_messages","localStorageUsageInKilobytes"],"mappings":"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","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { t } from '@superset-ui/core';\nimport getToastsFromPyFlashMessages from 'src/components/MessageToasts/getToastsFromPyFlashMessages';\n\nexport default function getInitialState({\n  defaultDbId,\n  common,\n  active_tab: activeTab,\n  tab_state_ids: tabStateIds = [],\n  databases,\n  queries: queries_,\n  requested_query: requestedQuery,\n  user,\n}) {\n  /**\n   * Before YYYY-MM-DD, the state for SQL Lab was stored exclusively in the\n   * browser's localStorage. The feature flag `SQLLAB_BACKEND_PERSISTENCE`\n   * moves the state to the backend instead, migrating it from local storage.\n   *\n   * To allow for a transparent migration, the initial state is a combination\n   * of the backend state (if any) with the browser state (if any).\n   */\n  const queryEditors = [];\n  const defaultQueryEditor = {\n    id: null,\n    loaded: true,\n    title: t('Untitled query'),\n    sql: 'SELECT *\\nFROM\\nWHERE',\n    selectedText: null,\n    latestQueryId: null,\n    autorun: false,\n    templateParams: null,\n    dbId: defaultDbId,\n    functionNames: [],\n    queryLimit: common.conf.DEFAULT_SQLLAB_LIMIT,\n    validationResult: {\n      id: null,\n      errors: [],\n      completed: false,\n    },\n    queryCostEstimate: {\n      cost: null,\n      completed: false,\n      error: null,\n    },\n    hideLeftBar: false,\n  };\n\n  /**\n   * Load state from the backend. This will be empty if the feature flag\n   * `SQLLAB_BACKEND_PERSISTENCE` is off.\n   */\n  tabStateIds.forEach(({ id, label }) => {\n    let queryEditor;\n    if (activeTab && activeTab.id === id) {\n      queryEditor = {\n        id: id.toString(),\n        loaded: true,\n        title: activeTab.label,\n        sql: activeTab.sql || undefined,\n        selectedText: undefined,\n        latestQueryId: activeTab.latest_query\n          ? activeTab.latest_query.id\n          : null,\n        autorun: activeTab.autorun,\n        templateParams: activeTab.template_params || undefined,\n        dbId: activeTab.database_id,\n        functionNames: [],\n        schema: activeTab.schema,\n        queryLimit: activeTab.query_limit,\n        validationResult: {\n          id: null,\n          errors: [],\n          completed: false,\n        },\n        hideLeftBar: activeTab.hide_left_bar,\n      };\n    } else {\n      // dummy state, actual state will be loaded on tab switch\n      queryEditor = {\n        ...defaultQueryEditor,\n        id: id.toString(),\n        loaded: false,\n        title: label,\n      };\n    }\n    queryEditors.push(queryEditor);\n  });\n\n  const tabHistory = activeTab ? [activeTab.id.toString()] : [];\n  const tables = [];\n  if (activeTab) {\n    activeTab.table_schemas\n      .filter(tableSchema => tableSchema.description !== null)\n      .forEach(tableSchema => {\n        const {\n          columns,\n          selectStar,\n          primaryKey,\n          foreignKeys,\n          indexes,\n          dataPreviewQueryId,\n          partitions,\n          metadata,\n        } = tableSchema.description;\n        const table = {\n          dbId: tableSchema.database_id,\n          queryEditorId: tableSchema.tab_state_id.toString(),\n          schema: tableSchema.schema,\n          name: tableSchema.table,\n          expanded: tableSchema.expanded,\n          id: tableSchema.id,\n          isMetadataLoading: false,\n          isExtraMetadataLoading: false,\n          dataPreviewQueryId,\n          columns,\n          selectStar,\n          primaryKey,\n          foreignKeys,\n          indexes,\n          partitions,\n          metadata,\n        };\n        tables.push(table);\n      });\n  }\n\n  const queries = { ...queries_ };\n\n  /**\n   * If the `SQLLAB_BACKEND_PERSISTENCE` feature flag is off, or if the user\n   * hasn't used SQL Lab after it has been turned on, the state will be stored\n   * in the browser's local storage.\n   */\n  if (\n    localStorage.getItem('redux') &&\n    JSON.parse(localStorage.getItem('redux')).sqlLab\n  ) {\n    const { sqlLab } = JSON.parse(localStorage.getItem('redux'));\n\n    if (sqlLab.queryEditors.length === 0) {\n      // migration was successful\n      localStorage.removeItem('redux');\n    } else {\n      // add query editors and tables to state with a special flag so they can\n      // be migrated if the `SQLLAB_BACKEND_PERSISTENCE` feature flag is on\n      sqlLab.queryEditors.forEach(qe =>\n        queryEditors.push({\n          ...qe,\n          inLocalStorage: true,\n          loaded: true,\n        }),\n      );\n      sqlLab.tables.forEach(table =>\n        tables.push({ ...table, inLocalStorage: true }),\n      );\n      Object.values(sqlLab.queries).forEach(query => {\n        queries[query.id] = { ...query, inLocalStorage: true };\n      });\n      tabHistory.push(...sqlLab.tabHistory);\n    }\n  }\n\n  return {\n    sqlLab: {\n      activeSouthPaneTab: 'Results',\n      alerts: [],\n      databases,\n      offline: false,\n      queries,\n      queryEditors,\n      tabHistory,\n      tables,\n      queriesLastUpdate: Date.now(),\n      user,\n    },\n    requestedQuery,\n    messageToasts: getToastsFromPyFlashMessages(\n      (common || {}).flash_messages || [],\n    ),\n    localStorageUsageInKilobytes: 0,\n    common: {\n      flash_messages: common.flash_messages,\n      conf: common.conf,\n    },\n  };\n}\n"]},"metadata":{},"sourceType":"module"}