{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nexport var NativeFilterType;\n(function (NativeFilterType) {\n  NativeFilterType[\"NATIVE_FILTER\"] = \"NATIVE_FILTER\";\n  NativeFilterType[\"SECTION\"] = \"SECTION\";\n})(NativeFilterType || (NativeFilterType = {}));;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(NativeFilterType, \"NativeFilterType\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/components/nativeFilters/types.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/components/nativeFilters/types.ts"],"names":[],"mappings":"wSAAA;;;;;;;;;;;;;;;;;AAiBG;AAiDH,OAAA,IAAY,gBAAZ;AAAA,CAAA,UAAY,gBAAZ,EAA4B;AAC1B,EAAA,gBAAA,CAAA,eAAA,CAAA,GAAA,eAAA;AACA,EAAA,gBAAA,CAAA,SAAA,CAAA,GAAA,SAAA;AACD,CAHD,EAAY,gBAAgB,KAAhB,gBAAgB,GAAA,EAAA,CAA5B,E,iLAAY,gB","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport { AdhocFilter, DataMask } from '@superset-ui/core';\n\nexport interface Column {\n  name: string;\n  displayName?: string;\n}\n\nexport interface Scope {\n  rootPath: string[];\n  excluded: number[];\n}\n\n/** The target of a filter is the datasource/column being filtered */\nexport interface Target {\n  datasetId: number;\n  column: Column;\n\n  // maybe someday support this?\n  // show values from these columns in the filter options selector\n  // clarityColumns?: Column[];\n}\n\nexport interface Filter {\n  cascadeParentIds: string[];\n  defaultDataMask: DataMask;\n  id: string; // randomly generated at filter creation\n  name: string;\n  scope: Scope;\n  filterType: string;\n  // for now there will only ever be one target\n  // when multiple targets are supported, change this to Target[]\n  targets: [Partial<Target>];\n  controlValues: {\n    [key: string]: any;\n  };\n  sortMetric?: string | null;\n  adhoc_filters?: AdhocFilter[];\n  granularity_sqla?: string;\n  time_range?: string;\n  requiredFirst?: boolean;\n  tabsInScope?: string[];\n  chartsInScope?: number[];\n  type: NativeFilterType;\n}\n\nexport type FilterConfiguration = Filter[];\n\nexport enum NativeFilterType {\n  NATIVE_FILTER = 'NATIVE_FILTER',\n  SECTION = 'SECTION',\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}