{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/my_plugin/superset/superset-frontend/src/explore/components/DataTablesPane/index.tsx\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { styled, t } from '@superset-ui/core';\nimport Collapse from 'src/components/Collapse';\nimport Tabs from 'src/components/Tabs';\nimport Loading from 'src/components/Loading';\nimport TableView, { EmptyWrapperType } from 'src/components/TableView';\nimport { getChartDataRequest } from 'src/chart/chartAction';\nimport { getClientErrorObject } from 'src/utils/getClientErrorObject';\nimport { getFromLocalStorage, setInLocalStorage } from 'src/utils/localStorageHelpers';\nimport { CopyToClipboardButton, FilterInput, RowCount, useFilteredTableData, useTableColumns } from 'src/explore/components/DataTableControl';import { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst RESULT_TYPES = {\n  results: 'results',\n  samples: 'samples' };\n\nconst NULLISH_RESULTS_STATE = {\n  [RESULT_TYPES.results]: undefined,\n  [RESULT_TYPES.samples]: undefined };\n\nconst DATA_TABLE_PAGE_SIZE = 50;\nconst STORAGE_KEYS = {\n  isOpen: 'is_datapanel_open' };\n\nconst DATAPANEL_KEY = 'data';\nconst TableControlsWrapper = styled.div`\n  display: flex;\n  align-items: center;\n\n  span {\n    flex-shrink: 0;\n  }\n`;\nconst SouthPane = styled.div`\n  position: relative;\n  background-color: ${({ theme }) => theme.colors.grayscale.light5};\n  z-index: 5;\n  overflow: hidden;\n`;\nconst TabsWrapper = styled.div`\n  height: ${({ contentHeight }) => contentHeight}px;\n  overflow: hidden;\n\n  .table-condensed {\n    height: 100%;\n    overflow: auto;\n  }\n`;\nconst CollapseWrapper = styled.div`\n  height: 100%;\n\n  .collapse-inner {\n    height: 100%;\n\n    .ant-collapse-item {\n      height: 100%;\n\n      .ant-collapse-content {\n        height: calc(100% - ${({ theme }) => theme.gridUnit * 8}px);\n\n        .ant-collapse-content-box {\n          padding-top: 0;\n          height: 100%;\n        }\n      }\n    }\n  }\n`;\nconst Error = styled.pre`\n  margin-top: ${({ theme }) => `${theme.gridUnit * 4}px`};\n`;\nexport const DataTablesPane = ({ queryFormData, tableSectionHeight, onCollapseChange, chartStatus, ownState, errorMessage, queriesResponse }) => {\n  const [data, setData] = useState(NULLISH_RESULTS_STATE);\n  const [isLoading, setIsLoading] = useState({\n    [RESULT_TYPES.results]: true,\n    [RESULT_TYPES.samples]: true });\n\n  const [columnNames, setColumnNames] = useState([]);\n  const [error, setError] = useState(NULLISH_RESULTS_STATE);\n  const [filterText, setFilterText] = useState('');\n  const [activeTabKey, setActiveTabKey] = useState(RESULT_TYPES.results);\n  const [isRequestPending, setIsRequestPending] = useState(NULLISH_RESULTS_STATE);\n  const [panelOpen, setPanelOpen] = useState(getFromLocalStorage(STORAGE_KEYS.isOpen, false));\n  const getData = useCallback((resultType) => {\n    setIsLoading((prevIsLoading) => ({\n      ...prevIsLoading,\n      [resultType]: true }));\n\n    return getChartDataRequest({\n      formData: queryFormData,\n      resultFormat: 'json',\n      resultType,\n      ownState }).\n\n    then(({ json }) => {\n      // Only displaying the first query is currently supported\n      if (json.result.length > 1) {\n        const data = [];\n        json.result.forEach((item) => {\n          item.data.forEach((row, i) => {\n            if (data[i] !== undefined) {\n              data[i] = { ...data[i], ...row };\n            } else\n            {\n              data[i] = row;\n            }\n          });\n        });\n        setData((prevData) => ({\n          ...prevData,\n          [resultType]: data }));\n\n      } else\n      {\n        setData((prevData) => ({\n          ...prevData,\n          [resultType]: json.result[0].data }));\n\n      }\n      setIsLoading((prevIsLoading) => ({\n        ...prevIsLoading,\n        [resultType]: false }));\n\n      setError((prevError) => ({\n        ...prevError,\n        [resultType]: null }));\n\n    }).\n    catch((response) => {\n      getClientErrorObject(response).then(({ error, message }) => {\n        setError((prevError) => ({\n          ...prevError,\n          [resultType]: error || message || t('Sorry, An error occurred') }));\n\n        setIsLoading((prevIsLoading) => ({\n          ...prevIsLoading,\n          [resultType]: false }));\n\n      });\n    });\n  }, [queryFormData]);\n  useEffect(() => {\n    setInLocalStorage(STORAGE_KEYS.isOpen, panelOpen);\n  }, [panelOpen]);\n  useEffect(() => {\n    setIsRequestPending((prevState) => ({\n      ...prevState,\n      [RESULT_TYPES.results]: true }));\n\n  }, [queryFormData]);\n  useEffect(() => {\n    setIsRequestPending((prevState) => ({\n      ...prevState,\n      [RESULT_TYPES.samples]: true }));\n\n  }, [queryFormData == null ? void 0 : queryFormData.adhoc_filters, queryFormData == null ? void 0 : queryFormData.datasource]);\n  useEffect(() => {\n    if (queriesResponse && chartStatus === 'success') {\n      const { colnames } = queriesResponse[0];\n      setColumnNames([...colnames]);\n    }\n  }, [queriesResponse]);\n  useEffect(() => {\n    if (panelOpen && isRequestPending[RESULT_TYPES.results]) {\n      if (errorMessage) {\n        setIsRequestPending((prevState) => ({\n          ...prevState,\n          [RESULT_TYPES.results]: false }));\n\n        setIsLoading((prevIsLoading) => ({\n          ...prevIsLoading,\n          [RESULT_TYPES.results]: false }));\n\n        return;\n      }\n      if (chartStatus === 'loading') {\n        setIsLoading((prevIsLoading) => ({\n          ...prevIsLoading,\n          [RESULT_TYPES.results]: true }));\n\n      } else\n      {\n        setIsRequestPending((prevState) => ({\n          ...prevState,\n          [RESULT_TYPES.results]: false }));\n\n        getData(RESULT_TYPES.results);\n      }\n    }\n    if (panelOpen &&\n    isRequestPending[RESULT_TYPES.samples] &&\n    activeTabKey === RESULT_TYPES.samples) {\n      setIsRequestPending((prevState) => ({\n        ...prevState,\n        [RESULT_TYPES.samples]: false }));\n\n      getData(RESULT_TYPES.samples);\n    }\n  }, [\n  panelOpen,\n  isRequestPending,\n  getData,\n  activeTabKey,\n  chartStatus,\n  errorMessage]);\n\n  const filteredData = {\n    [RESULT_TYPES.results]: useFilteredTableData(filterText, data[RESULT_TYPES.results]),\n    [RESULT_TYPES.samples]: useFilteredTableData(filterText, data[RESULT_TYPES.samples]) };\n\n  // this is to preserve the order of the columns, even if there are integer values,\n  // while also only grabbing the first column's keys\n  const columns = {\n    [RESULT_TYPES.results]: useTableColumns(columnNames, data[RESULT_TYPES.results]),\n    [RESULT_TYPES.samples]: useTableColumns(columnNames, data[RESULT_TYPES.samples]) };\n\n  const renderDataTable = (type) => {\n    if (isLoading[type]) {\n      return ___EmotionJSX(Loading, { __self: this, __source: { fileName: _jsxFileName, lineNumber: 235, columnNumber: 20 } });\n    }\n    if (error[type]) {\n      return ___EmotionJSX(Error, { __self: this, __source: { fileName: _jsxFileName, lineNumber: 238, columnNumber: 20 } }, error[type]);\n    }\n    if (data[type]) {var _data$type;\n      if (((_data$type = data[type]) == null ? void 0 : _data$type.length) === 0) {\n        return ___EmotionJSX(\"span\", { __self: this, __source: { fileName: _jsxFileName, lineNumber: 242, columnNumber: 24 } }, \"No data\");\n      }\n      return ___EmotionJSX(TableView, { columns: columns[type], data: filteredData[type], pageSize: DATA_TABLE_PAGE_SIZE, noDataText: t('No data'), emptyWrapperType: EmptyWrapperType.Small, className: \"table-condensed\", isPaginationSticky: true, showRowCount: false, small: true, __self: this, __source: { fileName: _jsxFileName, lineNumber: 244, columnNumber: 21 } });\n    }\n    if (errorMessage) {\n      return ___EmotionJSX(Error, { __self: this, __source: { fileName: _jsxFileName, lineNumber: 247, columnNumber: 20 } }, errorMessage);\n    }\n    return null;\n  };\n  const TableControls = ___EmotionJSX(TableControlsWrapper, { __self: this, __source: { fileName: _jsxFileName, lineNumber: 251, columnNumber: 28 } },\n  ___EmotionJSX(RowCount, { data: data[activeTabKey], loading: isLoading[activeTabKey], __self: this, __source: { fileName: _jsxFileName, lineNumber: 252, columnNumber: 7 } }),\n  ___EmotionJSX(CopyToClipboardButton, { data: data[activeTabKey], columns: columnNames, __self: this, __source: { fileName: _jsxFileName, lineNumber: 253, columnNumber: 7 } }),\n  ___EmotionJSX(FilterInput, { onChangeHandler: setFilterText, __self: this, __source: { fileName: _jsxFileName, lineNumber: 254, columnNumber: 7 } }));\n\n  const handleCollapseChange = (openPanelName) => {\n    onCollapseChange(openPanelName);\n    setPanelOpen(!!openPanelName);\n  };\n  return ___EmotionJSX(SouthPane, { \"data-test\": \"some-purposeful-instance\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 260, columnNumber: 13 } },\n  ___EmotionJSX(TabsWrapper, { contentHeight: tableSectionHeight, __self: this, __source: { fileName: _jsxFileName, lineNumber: 261, columnNumber: 7 } },\n  ___EmotionJSX(CollapseWrapper, { __self: this, __source: { fileName: _jsxFileName, lineNumber: 262, columnNumber: 9 } },\n  ___EmotionJSX(Collapse, { accordion: true, bordered: false, defaultActiveKey: panelOpen ? DATAPANEL_KEY : undefined, onChange: handleCollapseChange, bold: true, ghost: true, className: \"collapse-inner\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 263, columnNumber: 11 } },\n  ___EmotionJSX(Collapse.Panel, { header: t('Data'), key: DATAPANEL_KEY, __self: this, __source: { fileName: _jsxFileName, lineNumber: 264, columnNumber: 13 } },\n  ___EmotionJSX(Tabs, { fullWidth: false, tabBarExtraContent: TableControls, activeKey: activeTabKey, onChange: setActiveTabKey, __self: this, __source: { fileName: _jsxFileName, lineNumber: 265, columnNumber: 15 } },\n  ___EmotionJSX(Tabs.TabPane, { tab: t('View results'), key: RESULT_TYPES.results, __self: this, __source: { fileName: _jsxFileName, lineNumber: 266, columnNumber: 17 } },\n  renderDataTable(RESULT_TYPES.results)),\n\n  ___EmotionJSX(Tabs.TabPane, { tab: t('View samples'), key: RESULT_TYPES.samples, __self: this, __source: { fileName: _jsxFileName, lineNumber: 269, columnNumber: 17 } },\n  renderDataTable(RESULT_TYPES.samples))))))));\n\n\n\n\n\n\n\n};__signature__(DataTablesPane, \"useState{[data, setData](NULLISH_RESULTS_STATE)}\\nuseState{[isLoading, setIsLoading]({\\n        [RESULT_TYPES.results]: true,\\n        [RESULT_TYPES.samples]: true,\\n    })}\\nuseState{[columnNames, setColumnNames]([])}\\nuseState{[error, setError](NULLISH_RESULTS_STATE)}\\nuseState{[filterText, setFilterText]('')}\\nuseState{[activeTabKey, setActiveTabKey](RESULT_TYPES.results)}\\nuseState{[isRequestPending, setIsRequestPending](NULLISH_RESULTS_STATE)}\\nuseState{[panelOpen, setPanelOpen](getFromLocalStorage(STORAGE_KEYS.isOpen, false))}\\nuseCallback{getData}\\nuseEffect{}\\nuseEffect{}\\nuseEffect{}\\nuseEffect{}\\nuseEffect{}\\nuseFilteredTableData{}\\nuseFilteredTableData{}\\nuseTableColumns{}\\nuseTableColumns{}\", () => [useFilteredTableData, useFilteredTableData, useTableColumns, useTableColumns]);;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(RESULT_TYPES, \"RESULT_TYPES\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/explore/components/DataTablesPane/index.tsx\");reactHotLoader.register(NULLISH_RESULTS_STATE, \"NULLISH_RESULTS_STATE\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/explore/components/DataTablesPane/index.tsx\");reactHotLoader.register(DATA_TABLE_PAGE_SIZE, \"DATA_TABLE_PAGE_SIZE\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/explore/components/DataTablesPane/index.tsx\");reactHotLoader.register(STORAGE_KEYS, \"STORAGE_KEYS\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/explore/components/DataTablesPane/index.tsx\");reactHotLoader.register(DATAPANEL_KEY, \"DATAPANEL_KEY\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/explore/components/DataTablesPane/index.tsx\");reactHotLoader.register(TableControlsWrapper, \"TableControlsWrapper\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/explore/components/DataTablesPane/index.tsx\");reactHotLoader.register(SouthPane, \"SouthPane\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/explore/components/DataTablesPane/index.tsx\");reactHotLoader.register(TabsWrapper, \"TabsWrapper\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/explore/components/DataTablesPane/index.tsx\");reactHotLoader.register(CollapseWrapper, \"CollapseWrapper\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/explore/components/DataTablesPane/index.tsx\");reactHotLoader.register(Error, \"Error\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/explore/components/DataTablesPane/index.tsx\");reactHotLoader.register(DataTablesPane, \"DataTablesPane\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/explore/components/DataTablesPane/index.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/home/ubuntu/my_plugin/superset/superset-frontend/src/explore/components/DataTablesPane/index.tsx"],"names":[],"mappings":"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","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { JsonObject, styled, t } from '@superset-ui/core';\nimport Collapse from 'src/components/Collapse';\nimport Tabs from 'src/components/Tabs';\nimport Loading from 'src/components/Loading';\nimport TableView, { EmptyWrapperType } from 'src/components/TableView';\nimport { getChartDataRequest } from 'src/chart/chartAction';\nimport { getClientErrorObject } from 'src/utils/getClientErrorObject';\nimport {\n  getFromLocalStorage,\n  setInLocalStorage,\n} from 'src/utils/localStorageHelpers';\nimport {\n  CopyToClipboardButton,\n  FilterInput,\n  RowCount,\n  useFilteredTableData,\n  useTableColumns,\n} from 'src/explore/components/DataTableControl';\n\nconst RESULT_TYPES = {\n  results: 'results' as const,\n  samples: 'samples' as const,\n};\n\nconst NULLISH_RESULTS_STATE = {\n  [RESULT_TYPES.results]: undefined,\n  [RESULT_TYPES.samples]: undefined,\n};\n\nconst DATA_TABLE_PAGE_SIZE = 50;\n\nconst STORAGE_KEYS = {\n  isOpen: 'is_datapanel_open',\n};\n\nconst DATAPANEL_KEY = 'data';\n\nconst TableControlsWrapper = styled.div`\n  display: flex;\n  align-items: center;\n\n  span {\n    flex-shrink: 0;\n  }\n`;\n\nconst SouthPane = styled.div`\n  position: relative;\n  background-color: ${({ theme }) => theme.colors.grayscale.light5};\n  z-index: 5;\n  overflow: hidden;\n`;\n\nconst TabsWrapper = styled.div<{ contentHeight: number }>`\n  height: ${({ contentHeight }) => contentHeight}px;\n  overflow: hidden;\n\n  .table-condensed {\n    height: 100%;\n    overflow: auto;\n  }\n`;\n\nconst CollapseWrapper = styled.div`\n  height: 100%;\n\n  .collapse-inner {\n    height: 100%;\n\n    .ant-collapse-item {\n      height: 100%;\n\n      .ant-collapse-content {\n        height: calc(100% - ${({ theme }) => theme.gridUnit * 8}px);\n\n        .ant-collapse-content-box {\n          padding-top: 0;\n          height: 100%;\n        }\n      }\n    }\n  }\n`;\n\nconst Error = styled.pre`\n  margin-top: ${({ theme }) => `${theme.gridUnit * 4}px`};\n`;\n\nexport const DataTablesPane = ({\n  queryFormData,\n  tableSectionHeight,\n  onCollapseChange,\n  chartStatus,\n  ownState,\n  errorMessage,\n  queriesResponse,\n}: {\n  queryFormData: Record<string, any>;\n  tableSectionHeight: number;\n  chartStatus: string;\n  ownState?: JsonObject;\n  onCollapseChange: (openPanelName: string) => void;\n  errorMessage?: JSX.Element;\n  queriesResponse: Record<string, any>;\n}) => {\n  const [data, setData] = useState<{\n    [RESULT_TYPES.results]?: Record<string, any>[];\n    [RESULT_TYPES.samples]?: Record<string, any>[];\n  }>(NULLISH_RESULTS_STATE);\n  const [isLoading, setIsLoading] = useState({\n    [RESULT_TYPES.results]: true,\n    [RESULT_TYPES.samples]: true,\n  });\n  const [columnNames, setColumnNames] = useState<string[]>([]);\n  const [error, setError] = useState(NULLISH_RESULTS_STATE);\n  const [filterText, setFilterText] = useState('');\n  const [activeTabKey, setActiveTabKey] = useState<string>(\n    RESULT_TYPES.results,\n  );\n  const [isRequestPending, setIsRequestPending] = useState<{\n    [RESULT_TYPES.results]?: boolean;\n    [RESULT_TYPES.samples]?: boolean;\n  }>(NULLISH_RESULTS_STATE);\n  const [panelOpen, setPanelOpen] = useState(\n    getFromLocalStorage(STORAGE_KEYS.isOpen, false),\n  );\n\n  const getData = useCallback(\n    (resultType: string) => {\n      setIsLoading(prevIsLoading => ({\n        ...prevIsLoading,\n        [resultType]: true,\n      }));\n      return getChartDataRequest({\n        formData: queryFormData,\n        resultFormat: 'json',\n        resultType,\n        ownState,\n      })\n        .then(({ json }) => {\n          // Only displaying the first query is currently supported\n          if (json.result.length > 1) {\n            const data: any[] = [];\n            json.result.forEach((item: { data: any[] }) => {\n              item.data.forEach((row, i) => {\n                if (data[i] !== undefined) {\n                  data[i] = { ...data[i], ...row };\n                } else {\n                  data[i] = row;\n                }\n              });\n            });\n            setData(prevData => ({\n              ...prevData,\n              [resultType]: data,\n            }));\n          } else {\n            setData(prevData => ({\n              ...prevData,\n              [resultType]: json.result[0].data,\n            }));\n          }\n\n          setIsLoading(prevIsLoading => ({\n            ...prevIsLoading,\n            [resultType]: false,\n          }));\n          setError(prevError => ({\n            ...prevError,\n            [resultType]: null,\n          }));\n        })\n        .catch(response => {\n          getClientErrorObject(response).then(({ error, message }) => {\n            setError(prevError => ({\n              ...prevError,\n              [resultType]: error || message || t('Sorry, An error occurred'),\n            }));\n            setIsLoading(prevIsLoading => ({\n              ...prevIsLoading,\n              [resultType]: false,\n            }));\n          });\n        });\n    },\n    [queryFormData],\n  );\n\n  useEffect(() => {\n    setInLocalStorage(STORAGE_KEYS.isOpen, panelOpen);\n  }, [panelOpen]);\n\n  useEffect(() => {\n    setIsRequestPending(prevState => ({\n      ...prevState,\n      [RESULT_TYPES.results]: true,\n    }));\n  }, [queryFormData]);\n\n  useEffect(() => {\n    setIsRequestPending(prevState => ({\n      ...prevState,\n      [RESULT_TYPES.samples]: true,\n    }));\n  }, [queryFormData?.adhoc_filters, queryFormData?.datasource]);\n\n  useEffect(() => {\n    if (queriesResponse && chartStatus === 'success') {\n      const { colnames } = queriesResponse[0];\n      setColumnNames([...colnames]);\n    }\n  }, [queriesResponse]);\n\n  useEffect(() => {\n    if (panelOpen && isRequestPending[RESULT_TYPES.results]) {\n      if (errorMessage) {\n        setIsRequestPending(prevState => ({\n          ...prevState,\n          [RESULT_TYPES.results]: false,\n        }));\n        setIsLoading(prevIsLoading => ({\n          ...prevIsLoading,\n          [RESULT_TYPES.results]: false,\n        }));\n        return;\n      }\n      if (chartStatus === 'loading') {\n        setIsLoading(prevIsLoading => ({\n          ...prevIsLoading,\n          [RESULT_TYPES.results]: true,\n        }));\n      } else {\n        setIsRequestPending(prevState => ({\n          ...prevState,\n          [RESULT_TYPES.results]: false,\n        }));\n        getData(RESULT_TYPES.results);\n      }\n    }\n    if (\n      panelOpen &&\n      isRequestPending[RESULT_TYPES.samples] &&\n      activeTabKey === RESULT_TYPES.samples\n    ) {\n      setIsRequestPending(prevState => ({\n        ...prevState,\n        [RESULT_TYPES.samples]: false,\n      }));\n      getData(RESULT_TYPES.samples);\n    }\n  }, [\n    panelOpen,\n    isRequestPending,\n    getData,\n    activeTabKey,\n    chartStatus,\n    errorMessage,\n  ]);\n\n  const filteredData = {\n    [RESULT_TYPES.results]: useFilteredTableData(\n      filterText,\n      data[RESULT_TYPES.results],\n    ),\n    [RESULT_TYPES.samples]: useFilteredTableData(\n      filterText,\n      data[RESULT_TYPES.samples],\n    ),\n  };\n\n  // this is to preserve the order of the columns, even if there are integer values,\n  // while also only grabbing the first column's keys\n  const columns = {\n    [RESULT_TYPES.results]: useTableColumns(\n      columnNames,\n      data[RESULT_TYPES.results],\n    ),\n    [RESULT_TYPES.samples]: useTableColumns(\n      columnNames,\n      data[RESULT_TYPES.samples],\n    ),\n  };\n\n  const renderDataTable = (type: string) => {\n    if (isLoading[type]) {\n      return <Loading />;\n    }\n    if (error[type]) {\n      return <Error>{error[type]}</Error>;\n    }\n    if (data[type]) {\n      if (data[type]?.length === 0) {\n        return <span>No data</span>;\n      }\n      return (\n        <TableView\n          columns={columns[type]}\n          data={filteredData[type]}\n          pageSize={DATA_TABLE_PAGE_SIZE}\n          noDataText={t('No data')}\n          emptyWrapperType={EmptyWrapperType.Small}\n          className=\"table-condensed\"\n          isPaginationSticky\n          showRowCount={false}\n          small\n        />\n      );\n    }\n    if (errorMessage) {\n      return <Error>{errorMessage}</Error>;\n    }\n    return null;\n  };\n\n  const TableControls = (\n    <TableControlsWrapper>\n      <RowCount data={data[activeTabKey]} loading={isLoading[activeTabKey]} />\n      <CopyToClipboardButton data={data[activeTabKey]} columns={columnNames} />\n      <FilterInput onChangeHandler={setFilterText} />\n    </TableControlsWrapper>\n  );\n\n  const handleCollapseChange = (openPanelName: string) => {\n    onCollapseChange(openPanelName);\n    setPanelOpen(!!openPanelName);\n  };\n\n  return (\n    <SouthPane data-test=\"some-purposeful-instance\">\n      <TabsWrapper contentHeight={tableSectionHeight}>\n        <CollapseWrapper>\n          <Collapse\n            accordion\n            bordered={false}\n            defaultActiveKey={panelOpen ? DATAPANEL_KEY : undefined}\n            onChange={handleCollapseChange}\n            bold\n            ghost\n            className=\"collapse-inner\"\n          >\n            <Collapse.Panel header={t('Data')} key={DATAPANEL_KEY}>\n              <Tabs\n                fullWidth={false}\n                tabBarExtraContent={TableControls}\n                activeKey={activeTabKey}\n                onChange={setActiveTabKey}\n              >\n                <Tabs.TabPane\n                  tab={t('View results')}\n                  key={RESULT_TYPES.results}\n                >\n                  {renderDataTable(RESULT_TYPES.results)}\n                </Tabs.TabPane>\n                <Tabs.TabPane\n                  tab={t('View samples')}\n                  key={RESULT_TYPES.samples}\n                >\n                  {renderDataTable(RESULT_TYPES.samples)}\n                </Tabs.TabPane>\n              </Tabs>\n            </Collapse.Panel>\n          </Collapse>\n        </CollapseWrapper>\n      </TabsWrapper>\n    </SouthPane>\n  );\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}