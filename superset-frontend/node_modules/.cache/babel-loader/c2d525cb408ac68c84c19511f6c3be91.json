{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;};function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}\n\nimport { SyncRegistry } from '@encodable/registry';\nimport ColorNamespace from './ColorNamespace';\nexport const DEFAULT_NAMESPACE = 'DEFAULT_NAMESPACE';\nexport default class ColorNamespaceRegistry {\n  constructor({\n    name = 'ColorNamespaceRegistry',\n    globalId,\n    ...rest } =\n  {}) {\n    _defineProperty(this, \"namespaceStates\", void 0);\n\n    _defineProperty(this, \"namespaceInstances\", void 0);\n\n    // only make the state global is using globalId\n    this.namespaceStates = new SyncRegistry({\n      name,\n      globalId,\n      ...rest });\n    // the instances are always local since these are wrappers\n\n    this.namespaceInstances = new SyncRegistry({\n      name,\n      ...rest });\n\n\n    if (typeof this.namespaceStates.getDefaultKey() === 'undefined') {\n      this.setDefaultNamespace(DEFAULT_NAMESPACE);\n    }\n  }\n\n  getDefaultNamespace() {var _this$namespaceStates;\n    return (_this$namespaceStates = this.namespaceStates.getDefaultKey()) != null ? _this$namespaceStates : DEFAULT_NAMESPACE;\n  }\n\n  setDefaultNamespace(namespace) {\n    this.namespaceStates.setDefaultKey(namespace);\n    this.namespaceInstances.setDefaultKey(namespace);\n    return this;\n  }\n\n  has(namespace) {\n    return this.namespaceStates.has(namespace);\n  }\n\n  get(namespace = this.getDefaultNamespace()) {\n    if (!this.namespaceStates.has(namespace)) {\n      const ns = new ColorNamespace(namespace);\n      this.namespaceStates.registerValue(namespace, ns.state);\n      this.namespaceInstances.registerValue(namespace, ns);\n      return ns;\n    }\n\n    if (this.namespaceInstances.has(namespace)) {\n      return this.namespaceInstances.get(namespace);\n    }\n\n    const ns = new ColorNamespace(this.namespaceStates.get(namespace));\n    this.namespaceInstances.registerValue(namespace, ns);\n    return ns;\n  }\n\n  keys() {\n    return this.namespaceStates.keys();\n  }\n\n  clear() {\n    this.namespaceStates.clear();\n    this.namespaceInstances.clear();\n    return this;\n  }\n\n  remove(namespace) {\n    this.namespaceStates.remove(namespace);\n    this.namespaceInstances.remove(namespace);\n    return this;\n  } // @ts-ignore\n  __reactstandin__regenerateByEval(key, code) {// @ts-ignore\n    this[key] = eval(code);}};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(_defineProperty, \"_defineProperty\", \"/home/ubuntu/my_plugin/superset/superset-frontend/node_modules/@encodable/color/esm/scale/ColorNamespaceRegistry.js\");reactHotLoader.register(DEFAULT_NAMESPACE, \"DEFAULT_NAMESPACE\", \"/home/ubuntu/my_plugin/superset/superset-frontend/node_modules/@encodable/color/esm/scale/ColorNamespaceRegistry.js\");reactHotLoader.register(ColorNamespaceRegistry, \"ColorNamespaceRegistry\", \"/home/ubuntu/my_plugin/superset/superset-frontend/node_modules/@encodable/color/esm/scale/ColorNamespaceRegistry.js\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/home/ubuntu/my_plugin/superset/superset-frontend/node_modules/@encodable/color/esm/scale/ColorNamespaceRegistry.js"],"names":["_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","SyncRegistry","ColorNamespace","DEFAULT_NAMESPACE","ColorNamespaceRegistry","constructor","name","globalId","rest","namespaceStates","namespaceInstances","getDefaultKey","setDefaultNamespace","getDefaultNamespace","namespace","setDefaultKey","has","get","ns","registerValue","state","keys","clear","remove"],"mappings":"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","sourcesContent":["function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { SyncRegistry } from '@encodable/registry';\nimport ColorNamespace from './ColorNamespace';\nexport const DEFAULT_NAMESPACE = 'DEFAULT_NAMESPACE';\nexport default class ColorNamespaceRegistry {\n  constructor({\n    name = 'ColorNamespaceRegistry',\n    globalId,\n    ...rest\n  } = {}) {\n    _defineProperty(this, \"namespaceStates\", void 0);\n\n    _defineProperty(this, \"namespaceInstances\", void 0);\n\n    // only make the state global is using globalId\n    this.namespaceStates = new SyncRegistry({\n      name,\n      globalId,\n      ...rest\n    }); // the instances are always local since these are wrappers\n\n    this.namespaceInstances = new SyncRegistry({\n      name,\n      ...rest\n    });\n\n    if (typeof this.namespaceStates.getDefaultKey() === 'undefined') {\n      this.setDefaultNamespace(DEFAULT_NAMESPACE);\n    }\n  }\n\n  getDefaultNamespace() {\n    return this.namespaceStates.getDefaultKey() ?? DEFAULT_NAMESPACE;\n  }\n\n  setDefaultNamespace(namespace) {\n    this.namespaceStates.setDefaultKey(namespace);\n    this.namespaceInstances.setDefaultKey(namespace);\n    return this;\n  }\n\n  has(namespace) {\n    return this.namespaceStates.has(namespace);\n  }\n\n  get(namespace = this.getDefaultNamespace()) {\n    if (!this.namespaceStates.has(namespace)) {\n      const ns = new ColorNamespace(namespace);\n      this.namespaceStates.registerValue(namespace, ns.state);\n      this.namespaceInstances.registerValue(namespace, ns);\n      return ns;\n    }\n\n    if (this.namespaceInstances.has(namespace)) {\n      return this.namespaceInstances.get(namespace);\n    }\n\n    const ns = new ColorNamespace(this.namespaceStates.get(namespace));\n    this.namespaceInstances.registerValue(namespace, ns);\n    return ns;\n  }\n\n  keys() {\n    return this.namespaceStates.keys();\n  }\n\n  clear() {\n    this.namespaceStates.clear();\n    this.namespaceInstances.clear();\n    return this;\n  }\n\n  remove(namespace) {\n    this.namespaceStates.remove(namespace);\n    this.namespaceInstances.remove(namespace);\n    return this;\n  }\n\n}"]},"metadata":{},"sourceType":"module"}