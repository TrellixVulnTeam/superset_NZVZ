{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nexport default function isInDifferentFilterScopes({\n  dashboardFilters = {},\n  source = [],\n  destination = [] })\n{\n  const sourceSet = new Set(source);\n  const destinationSet = new Set(destination);\n\n  const allScopes = [].concat(\n  ...Object.values(dashboardFilters).map(({ scopes }) =>\n  [].concat(...Object.values(scopes).map(({ scope }) => scope))));\n\n\n  return allScopes.some((tab) => destinationSet.has(tab) !== sourceSet.has(tab));\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(isInDifferentFilterScopes, \"isInDifferentFilterScopes\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/util/isInDifferentFilterScopes.js\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/util/isInDifferentFilterScopes.js"],"names":["isInDifferentFilterScopes","dashboardFilters","source","destination","sourceSet","Set","destinationSet","allScopes","concat","Object","values","map","scopes","scope","some","tab","has"],"mappings":"wSAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASA,yBAAT,CAAmC;AAChDC,EAAAA,gBAAgB,GAAG,EAD6B;AAEhDC,EAAAA,MAAM,GAAG,EAFuC;AAGhDC,EAAAA,WAAW,GAAG,EAHkC,EAAnC;AAIZ;AACD,QAAMC,SAAS,GAAG,IAAIC,GAAJ,CAAQH,MAAR,CAAlB;AACA,QAAMI,cAAc,GAAG,IAAID,GAAJ,CAAQF,WAAR,CAAvB;;AAEA,QAAMI,SAAS,GAAG,GAAGC,MAAH;AAChB,KAAGC,MAAM,CAACC,MAAP,CAAcT,gBAAd,EAAgCU,GAAhC,CAAoC,CAAC,EAAEC,MAAF,EAAD;AACrC,KAAGJ,MAAH,CAAU,GAAGC,MAAM,CAACC,MAAP,CAAcE,MAAd,EAAsBD,GAAtB,CAA0B,CAAC,EAAEE,KAAF,EAAD,KAAeA,KAAzC,CAAb,CADC,CADa,CAAlB;;;AAKA,SAAON,SAAS,CAACO,IAAV,CAAe,CAAAC,GAAG,KAAIT,cAAc,CAACU,GAAf,CAAmBD,GAAnB,MAA4BX,SAAS,CAACY,GAAV,CAAcD,GAAd,CAAlD,CAAP;AACD,C,iLAduBf,yB","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nexport default function isInDifferentFilterScopes({\n  dashboardFilters = {},\n  source = [],\n  destination = [],\n}) {\n  const sourceSet = new Set(source);\n  const destinationSet = new Set(destination);\n\n  const allScopes = [].concat(\n    ...Object.values(dashboardFilters).map(({ scopes }) =>\n      [].concat(...Object.values(scopes).map(({ scope }) => scope)),\n    ),\n  );\n  return allScopes.some(tab => destinationSet.has(tab) !== sourceSet.has(tab));\n}\n"]},"metadata":{},"sourceType":"module"}