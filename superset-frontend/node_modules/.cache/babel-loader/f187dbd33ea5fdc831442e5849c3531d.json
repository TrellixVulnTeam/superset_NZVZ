{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;};export default function count(values, valueof) {\n  let count = 0;\n  if (valueof === undefined) {\n    for (let value of values) {\n      if (value != null && (value = +value) >= value) {\n        ++count;\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {\n        ++count;\n      }\n    }\n  }\n  return count;\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(count, \"count\", \"/home/ubuntu/my_plugin/superset/superset-frontend/node_modules/@encodable/color/node_modules/d3-array/src/count.js\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/home/ubuntu/my_plugin/superset/superset-frontend/node_modules/@encodable/color/node_modules/d3-array/src/count.js"],"names":["count","values","valueof","undefined","value","index"],"mappings":"uSAAA,eAAe,SAASA,KAAT,CAAeC,MAAf,EAAuBC,OAAvB,EAAgC;AAC7C,MAAIF,KAAK,GAAG,CAAZ;AACA,MAAIE,OAAO,KAAKC,SAAhB,EAA2B;AACzB,SAAK,IAAIC,KAAT,IAAkBH,MAAlB,EAA0B;AACxB,UAAIG,KAAK,IAAI,IAAT,IAAiB,CAACA,KAAK,GAAG,CAACA,KAAV,KAAoBA,KAAzC,EAAgD;AAC9C,UAAEJ,KAAF;AACD;AACF;AACF,GAND,MAMO;AACL,QAAIK,KAAK,GAAG,CAAC,CAAb;AACA,SAAK,IAAID,KAAT,IAAkBH,MAAlB,EAA0B;AACxB,UAAI,CAACG,KAAK,GAAGF,OAAO,CAACE,KAAD,EAAQ,EAAEC,KAAV,EAAiBJ,MAAjB,CAAhB,KAA6C,IAA7C,IAAqD,CAACG,KAAK,GAAG,CAACA,KAAV,KAAoBA,KAA7E,EAAoF;AAClF,UAAEJ,KAAF;AACD;AACF;AACF;AACD,SAAOA,KAAP;AACD,C,iLAjBuBA,K","sourcesContent":["export default function count(values, valueof) {\n  let count = 0;\n  if (valueof === undefined) {\n    for (let value of values) {\n      if (value != null && (value = +value) >= value) {\n        ++count;\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {\n        ++count;\n      }\n    }\n  }\n  return count;\n}\n"]},"metadata":{},"sourceType":"module"}