{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;};(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n/* eslint camelcase: 0 */\nimport { t, SupersetClient } from '@superset-ui/core';\nimport rison from 'rison';\n\nimport { addDangerToast } from 'src/components/MessageToasts/actions';\nimport { getDatasourceParameter } from 'src/modules/utils';\nimport { getClientErrorObject } from 'src/utils/getClientErrorObject';\n\nexport const SET_ALL_SLICES = 'SET_ALL_SLICES';\nexport function setAllSlices(slices) {\n  return { type: SET_ALL_SLICES, payload: { slices } };\n}\n\nexport const FETCH_ALL_SLICES_STARTED = 'FETCH_ALL_SLICES_STARTED';\nexport function fetchAllSlicesStarted() {\n  return { type: FETCH_ALL_SLICES_STARTED };\n}\n\nexport const FETCH_ALL_SLICES_FAILED = 'FETCH_ALL_SLICES_FAILED';\nexport function fetchAllSlicesFailed(error) {\n  return { type: FETCH_ALL_SLICES_FAILED, payload: { error } };\n}\n\nconst FETCH_SLICES_PAGE_SIZE = 200;\nexport function fetchAllSlices(userId) {\n  return (dispatch, getState) => {\n    const { sliceEntities } = getState();\n    if (sliceEntities.lastUpdated === 0) {\n      dispatch(fetchAllSlicesStarted());\n\n      return SupersetClient.get({\n        endpoint: `/api/v1/chart/?q=${rison.encode({\n          columns: [\n          'changed_on_delta_humanized',\n          'changed_on_utc',\n          'datasource_id',\n          'datasource_type',\n          'datasource_url',\n          'datasource_name_text',\n          'description_markeddown',\n          'description',\n          'id',\n          'params',\n          'slice_name',\n          'url',\n          'viz_type'],\n\n          filters: [{ col: 'owners', opr: 'rel_m_m', value: userId }],\n          page_size: FETCH_SLICES_PAGE_SIZE,\n          order_column: 'changed_on_delta_humanized',\n          order_direction: 'desc' })\n        }` }).\n\n      then(({ json }) => {\n        const slices = {};\n        json.result.forEach((slice) => {\n          let form_data = JSON.parse(slice.params);\n          form_data = {\n            ...form_data,\n            // force using datasource stored in relational table prop\n            datasource:\n            getDatasourceParameter(\n            slice.datasource_id,\n            slice.datasource_type) ||\n            form_data.datasource };\n\n          slices[slice.id] = {\n            slice_id: slice.id,\n            slice_url: slice.url,\n            slice_name: slice.slice_name,\n            form_data,\n            datasource_name: slice.datasource_name_text,\n            datasource_url: slice.datasource_url,\n            datasource_id: slice.datasource_id,\n            datasource_type: slice.datasource_type,\n            changed_on: new Date(slice.changed_on_utc).getTime(),\n            description: slice.description,\n            description_markdown: slice.description_markeddown,\n            viz_type: slice.viz_type,\n            modified: slice.changed_on_delta_humanized,\n            changed_on_humanized: slice.changed_on_delta_humanized };\n\n        });\n\n        return dispatch(setAllSlices(slices));\n      }).\n      catch(\n      (errorResponse) =>\n      console.log(errorResponse) ||\n      getClientErrorObject(errorResponse).then(({ error }) => {\n        dispatch(\n        fetchAllSlicesFailed(\n        error || t('Could not fetch all saved charts')));\n\n\n        dispatch(\n        addDangerToast(\n        t('Sorry there was an error fetching saved charts: ') + error));\n\n\n      }));\n\n    }\n\n    return dispatch(setAllSlices(sliceEntities.slices));\n  };\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(SET_ALL_SLICES, \"SET_ALL_SLICES\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/actions/sliceEntities.js\");reactHotLoader.register(setAllSlices, \"setAllSlices\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/actions/sliceEntities.js\");reactHotLoader.register(FETCH_ALL_SLICES_STARTED, \"FETCH_ALL_SLICES_STARTED\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/actions/sliceEntities.js\");reactHotLoader.register(fetchAllSlicesStarted, \"fetchAllSlicesStarted\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/actions/sliceEntities.js\");reactHotLoader.register(FETCH_ALL_SLICES_FAILED, \"FETCH_ALL_SLICES_FAILED\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/actions/sliceEntities.js\");reactHotLoader.register(fetchAllSlicesFailed, \"fetchAllSlicesFailed\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/actions/sliceEntities.js\");reactHotLoader.register(FETCH_SLICES_PAGE_SIZE, \"FETCH_SLICES_PAGE_SIZE\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/actions/sliceEntities.js\");reactHotLoader.register(fetchAllSlices, \"fetchAllSlices\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/actions/sliceEntities.js\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(__signature__, \"__signature__\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/actions/sliceEntities.js\");reactHotLoader.register(SET_ALL_SLICES, \"SET_ALL_SLICES\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/actions/sliceEntities.js\");reactHotLoader.register(setAllSlices, \"setAllSlices\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/actions/sliceEntities.js\");reactHotLoader.register(FETCH_ALL_SLICES_STARTED, \"FETCH_ALL_SLICES_STARTED\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/actions/sliceEntities.js\");reactHotLoader.register(fetchAllSlicesStarted, \"fetchAllSlicesStarted\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/actions/sliceEntities.js\");reactHotLoader.register(FETCH_ALL_SLICES_FAILED, \"FETCH_ALL_SLICES_FAILED\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/actions/sliceEntities.js\");reactHotLoader.register(fetchAllSlicesFailed, \"fetchAllSlicesFailed\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/actions/sliceEntities.js\");reactHotLoader.register(FETCH_SLICES_PAGE_SIZE, \"FETCH_SLICES_PAGE_SIZE\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/actions/sliceEntities.js\");reactHotLoader.register(fetchAllSlices, \"fetchAllSlices\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/actions/sliceEntities.js\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/home/ubuntu/my_plugin/superset/superset-frontend/src/dashboard/actions/sliceEntities.js"],"names":["SET_ALL_SLICES","setAllSlices","type","payload","FETCH_ALL_SLICES_STARTED","fetchAllSlicesStarted","FETCH_ALL_SLICES_FAILED","fetchAllSlicesFailed","FETCH_SLICES_PAGE_SIZE","fetchAllSlices","getState","sliceEntities","dispatch","endpoint","columns","filters","col","opr","value","page_size","order_column","order_direction","slices","json","form_data","JSON","slice","datasource","getDatasourceParameter","slice_id","slice_url","slice_name","datasource_name","datasource_url","datasource_id","datasource_type","changed_on","description","description_markdown","viz_type","modified","changed_on_humanized","console","getClientErrorObject","error","t","addDangerToast"],"mappings":"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","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint camelcase: 0 */\nimport { t, SupersetClient } from '@superset-ui/core';\nimport rison from 'rison';\n\nimport { addDangerToast } from 'src/components/MessageToasts/actions';\nimport { getDatasourceParameter } from 'src/modules/utils';\nimport { getClientErrorObject } from 'src/utils/getClientErrorObject';\n\nexport const SET_ALL_SLICES = 'SET_ALL_SLICES';\nexport function setAllSlices(slices) {\n  return { type: SET_ALL_SLICES, payload: { slices } };\n}\n\nexport const FETCH_ALL_SLICES_STARTED = 'FETCH_ALL_SLICES_STARTED';\nexport function fetchAllSlicesStarted() {\n  return { type: FETCH_ALL_SLICES_STARTED };\n}\n\nexport const FETCH_ALL_SLICES_FAILED = 'FETCH_ALL_SLICES_FAILED';\nexport function fetchAllSlicesFailed(error) {\n  return { type: FETCH_ALL_SLICES_FAILED, payload: { error } };\n}\n\nconst FETCH_SLICES_PAGE_SIZE = 200;\nexport function fetchAllSlices(userId) {\n  return (dispatch, getState) => {\n    const { sliceEntities } = getState();\n    if (sliceEntities.lastUpdated === 0) {\n      dispatch(fetchAllSlicesStarted());\n\n      return SupersetClient.get({\n        endpoint: `/api/v1/chart/?q=${rison.encode({\n          columns: [\n            'changed_on_delta_humanized',\n            'changed_on_utc',\n            'datasource_id',\n            'datasource_type',\n            'datasource_url',\n            'datasource_name_text',\n            'description_markeddown',\n            'description',\n            'id',\n            'params',\n            'slice_name',\n            'url',\n            'viz_type',\n          ],\n          filters: [{ col: 'owners', opr: 'rel_m_m', value: userId }],\n          page_size: FETCH_SLICES_PAGE_SIZE,\n          order_column: 'changed_on_delta_humanized',\n          order_direction: 'desc',\n        })}`,\n      })\n        .then(({ json }) => {\n          const slices = {};\n          json.result.forEach(slice => {\n            let form_data = JSON.parse(slice.params);\n            form_data = {\n              ...form_data,\n              // force using datasource stored in relational table prop\n              datasource:\n                getDatasourceParameter(\n                  slice.datasource_id,\n                  slice.datasource_type,\n                ) || form_data.datasource,\n            };\n            slices[slice.id] = {\n              slice_id: slice.id,\n              slice_url: slice.url,\n              slice_name: slice.slice_name,\n              form_data,\n              datasource_name: slice.datasource_name_text,\n              datasource_url: slice.datasource_url,\n              datasource_id: slice.datasource_id,\n              datasource_type: slice.datasource_type,\n              changed_on: new Date(slice.changed_on_utc).getTime(),\n              description: slice.description,\n              description_markdown: slice.description_markeddown,\n              viz_type: slice.viz_type,\n              modified: slice.changed_on_delta_humanized,\n              changed_on_humanized: slice.changed_on_delta_humanized,\n            };\n          });\n\n          return dispatch(setAllSlices(slices));\n        })\n        .catch(\n          errorResponse =>\n            console.log(errorResponse) ||\n            getClientErrorObject(errorResponse).then(({ error }) => {\n              dispatch(\n                fetchAllSlicesFailed(\n                  error || t('Could not fetch all saved charts'),\n                ),\n              );\n              dispatch(\n                addDangerToast(\n                  t('Sorry there was an error fetching saved charts: ') + error,\n                ),\n              );\n            }),\n        );\n    }\n\n    return dispatch(setAllSlices(sliceEntities.slices));\n  };\n}\n"]},"metadata":{},"sourceType":"module"}