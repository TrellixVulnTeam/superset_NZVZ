{"ast":null,"code":"import _extends from \"@babel/runtime-corejs3/helpers/extends\";var _jsxFileName = \"/home/ubuntu/my_plugin/superset/superset-frontend/src/components/Select/OnPasteSelect.jsx\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Select } from 'src/components/Select';import { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nexport default class OnPasteSelect extends React.Component {\n  constructor(props) {\n    super(props);\n    this.onPaste = this.onPaste.bind(this);\n  }\n\n  onPaste(evt) {\n    if (!this.props.isMulti) {\n      return;\n    }\n    evt.preventDefault();\n    const clipboard = evt.clipboardData.getData('Text');\n    if (!clipboard) {\n      return;\n    }\n    const regex = `[${this.props.separator}]+`;\n    const values = clipboard.split(new RegExp(regex)).map((v) => v.trim());\n    const validator = this.props.isValidNewOption;\n    const selected = this.props.value || [];\n    const existingOptions = {};\n    const existing = {};\n    this.props.options.forEach((v) => {\n      existingOptions[v[this.props.valueKey]] = 1;\n    });\n    let options = [];\n    selected.forEach((v) => {\n      options.push({ [this.props.labelKey]: v, [this.props.valueKey]: v });\n      existing[v] = 1;\n    });\n    options = options.concat(\n    values.\n    filter((v) => {\n      const notExists = !existing[v];\n      existing[v] = 1;\n      return (\n        notExists && (\n        validator ? validator({ [this.props.labelKey]: v }) : !!v));\n\n    }).\n    map((v) => {\n      const opt = { [this.props.labelKey]: v, [this.props.valueKey]: v };\n      if (!existingOptions[v]) {\n        this.props.options.unshift(opt);\n      }\n      return opt;\n    }));\n\n    if (options.length) {\n      if (this.props.onChange) {\n        this.props.onChange(options);\n      }\n    }\n  }\n\n  render() {\n    const { selectWrap: SelectComponent, ...restProps } = this.props;\n    return ___EmotionJSX(SelectComponent, _extends({}, restProps, { onPaste: this.onPaste, __self: this, __source: { fileName: _jsxFileName, lineNumber: 79, columnNumber: 12 } }));\n  } // @ts-ignore\n  __reactstandin__regenerateByEval(key, code) {// @ts-ignore\n    this[key] = eval(code);}}\nOnPasteSelect.propTypes = {\n  separator: PropTypes.array,\n  selectWrap: PropTypes.elementType,\n  selectRef: PropTypes.func,\n  onChange: PropTypes.func.isRequired,\n  valueKey: PropTypes.string,\n  labelKey: PropTypes.string,\n  options: PropTypes.array,\n  isMulti: PropTypes.bool,\n  value: PropTypes.any,\n  isValidNewOption: PropTypes.func,\n  noResultsText: PropTypes.string,\n  forceOverflow: PropTypes.bool };\n\nOnPasteSelect.defaultProps = {\n  separator: [',', '\\n', '\\t', ';'],\n  selectWrap: Select,\n  valueKey: 'value',\n  labelKey: 'label',\n  options: [],\n  isMulti: false };;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(OnPasteSelect, \"OnPasteSelect\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/components/Select/OnPasteSelect.jsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/home/ubuntu/my_plugin/superset/superset-frontend/src/components/Select/OnPasteSelect.jsx"],"names":["React","PropTypes","Select","OnPasteSelect","Component","constructor","props","onPaste","bind","evt","isMulti","preventDefault","clipboard","clipboardData","getData","regex","separator","values","split","RegExp","map","v","trim","validator","isValidNewOption","selected","value","existingOptions","existing","options","forEach","valueKey","push","labelKey","concat","filter","notExists","opt","unshift","length","onChange","render","selectWrap","SelectComponent","restProps","propTypes","array","elementType","selectRef","func","isRequired","string","bool","any","noResultsText","forceOverflow","defaultProps"],"mappings":"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","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Select } from 'src/components/Select';\n\nexport default class OnPasteSelect extends React.Component {\n  constructor(props) {\n    super(props);\n    this.onPaste = this.onPaste.bind(this);\n  }\n\n  onPaste(evt) {\n    if (!this.props.isMulti) {\n      return;\n    }\n    evt.preventDefault();\n    const clipboard = evt.clipboardData.getData('Text');\n    if (!clipboard) {\n      return;\n    }\n    const regex = `[${this.props.separator}]+`;\n    const values = clipboard.split(new RegExp(regex)).map(v => v.trim());\n    const validator = this.props.isValidNewOption;\n    const selected = this.props.value || [];\n    const existingOptions = {};\n    const existing = {};\n    this.props.options.forEach(v => {\n      existingOptions[v[this.props.valueKey]] = 1;\n    });\n    let options = [];\n    selected.forEach(v => {\n      options.push({ [this.props.labelKey]: v, [this.props.valueKey]: v });\n      existing[v] = 1;\n    });\n    options = options.concat(\n      values\n        .filter(v => {\n          const notExists = !existing[v];\n          existing[v] = 1;\n          return (\n            notExists &&\n            (validator ? validator({ [this.props.labelKey]: v }) : !!v)\n          );\n        })\n        .map(v => {\n          const opt = { [this.props.labelKey]: v, [this.props.valueKey]: v };\n          if (!existingOptions[v]) {\n            this.props.options.unshift(opt);\n          }\n          return opt;\n        }),\n    );\n    if (options.length) {\n      if (this.props.onChange) {\n        this.props.onChange(options);\n      }\n    }\n  }\n\n  render() {\n    const { selectWrap: SelectComponent, ...restProps } = this.props;\n    return <SelectComponent {...restProps} onPaste={this.onPaste} />;\n  }\n}\n\nOnPasteSelect.propTypes = {\n  separator: PropTypes.array,\n  selectWrap: PropTypes.elementType,\n  selectRef: PropTypes.func,\n  onChange: PropTypes.func.isRequired,\n  valueKey: PropTypes.string,\n  labelKey: PropTypes.string,\n  options: PropTypes.array,\n  isMulti: PropTypes.bool,\n  value: PropTypes.any,\n  isValidNewOption: PropTypes.func,\n  noResultsText: PropTypes.string,\n  forceOverflow: PropTypes.bool,\n};\nOnPasteSelect.defaultProps = {\n  separator: [',', '\\n', '\\t', ';'],\n  selectWrap: Select,\n  valueKey: 'value',\n  labelKey: 'label',\n  options: [],\n  isMulti: false,\n};\n"]},"metadata":{},"sourceType":"module"}