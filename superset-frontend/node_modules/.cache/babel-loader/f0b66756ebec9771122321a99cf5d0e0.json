{"ast":null,"code":"import _omitBy from \"lodash/omitBy\";var _jsxFileName = \"/home/ubuntu/my_plugin/superset/superset-frontend/src/components/DynamicPlugins/index.tsx\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useContext, useEffect, useReducer } from 'react';\nimport { defineSharedModules, getChartMetadataRegistry, logging, makeApi } from '@superset-ui/core';\nimport { FeatureFlag, isFeatureEnabled } from 'src/featureFlags';import { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nconst metadataRegistry = getChartMetadataRegistry();\nconst dummyPluginContext = {\n  loading: true,\n  dynamicPlugins: {},\n  keys: [],\n  mountedPluginMetadata: {},\n  fetchAll: () => {} };\n\n/**\n * It is highly recommended to use the usePluginContext hook instead.\n * @see usePluginContext\n */\nexport const PluginContext = /*#__PURE__*/React.createContext(dummyPluginContext);\n/**\n * The plugin context provides info about what dynamic plugins are available.\n * It also provides loading info for the plugins' javascript bundles.\n *\n * Note: This does not include any information about static plugins.\n * Those are compiled into the Superset bundle at build time.\n * Dynamic plugins are added by the end user and can be any webhosted javascript.\n */\nexport const usePluginContext = () => useContext(PluginContext);__signature__(usePluginContext, \"useContext{}\");\nfunction getRegistryData() {\n  return {\n    keys: metadataRegistry.keys(),\n    mountedPluginMetadata: _omitBy(metadataRegistry.getMap(), (value) => value === undefined) // cast required to get rid of undefined values\n  };\n}\nfunction pluginContextReducer(state, action) {\n  switch (action.type) {\n    case 'begin':{\n        const plugins = { ...state.dynamicPlugins };\n        action.keys.forEach((key) => {\n          plugins[key] = { key, error: null, mounting: true };\n        });\n        return {\n          ...state,\n          loading: action.keys.length > 0,\n          dynamicPlugins: plugins };\n\n      }\n    case 'complete':{\n        return {\n          ...state,\n          loading: Object.values(state.dynamicPlugins).some((plugin) => plugin.mounting && plugin.key !== action.key),\n          dynamicPlugins: {\n            ...state.dynamicPlugins,\n            [action.key]: {\n              key: action.key,\n              mounting: false,\n              error: action.error } } };\n\n\n\n      }\n    case 'changed keys':{\n        return {\n          ...state,\n          ...getRegistryData() };\n\n      }\n    default:\n      return state;}\n\n}\nconst pluginApi = makeApi({\n  method: 'GET',\n  endpoint: '/dynamic-plugins/api/read' });\n\nconst sharedModules = {\n  react: () => import('react'),\n  lodash: () => import('lodash'),\n  'react-dom': () => import('react-dom'),\n  '@superset-ui/chart-controls': () => import('@superset-ui/chart-controls'),\n  '@superset-ui/core': () => import('@superset-ui/core') };\n\nexport const DynamicPluginProvider = ({ children }) => {\n  const [pluginState, dispatch] = useReducer(pluginContextReducer, dummyPluginContext, (state) => ({\n    ...state,\n    ...getRegistryData(),\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    fetchAll,\n    loading: isFeatureEnabled(FeatureFlag.DYNAMIC_PLUGINS)\n    // TODO: Write fetchByKeys\n  }));\n  // For now, we fetch all the plugins at the same time.\n  // In the future it would be nice to fetch on an as-needed basis.\n  // That will most likely depend on having a json manifest for each plugin.\n  async function fetchAll() {\n    try {\n      await defineSharedModules(sharedModules);\n      const { result: plugins } = await pluginApi({});\n      dispatch({ type: 'begin', keys: plugins.map((plugin) => plugin.key) });\n      await Promise.all(plugins.map(async (plugin) => {\n        let error = null;\n        try {\n          await import( /* webpackIgnore: true */plugin.bundle_url);\n        }\n        catch (err) {\n          logging.error(`Failed to load plugin ${plugin.key} with the following error:`, err.stack);\n          error = err;\n        }\n        dispatch({\n          type: 'complete',\n          key: plugin.key,\n          error });\n\n      }));\n    }\n    catch (error) {\n      logging.error('Failed to load dynamic plugins', error.stack || error);\n    }\n  }\n  useEffect(() => {\n    if (isFeatureEnabled(FeatureFlag.DYNAMIC_PLUGINS)) {\n      fetchAll();\n    }\n    const registryListener = () => {\n      dispatch({ type: 'changed keys' });\n    };\n    metadataRegistry.addListener(registryListener);\n    return () => {\n      metadataRegistry.removeListener(registryListener);\n    };\n  }, []);\n  return ___EmotionJSX(PluginContext.Provider, { value: pluginState, __self: this, __source: { fileName: _jsxFileName, lineNumber: 148, columnNumber: 13 } },\n  children);\n\n};__signature__(DynamicPluginProvider, \"useReducer{[pluginState, dispatch](dummyPluginContext)}\\nuseEffect{}\");;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(metadataRegistry, \"metadataRegistry\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/components/DynamicPlugins/index.tsx\");reactHotLoader.register(dummyPluginContext, \"dummyPluginContext\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/components/DynamicPlugins/index.tsx\");reactHotLoader.register(PluginContext, \"PluginContext\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/components/DynamicPlugins/index.tsx\");reactHotLoader.register(usePluginContext, \"usePluginContext\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/components/DynamicPlugins/index.tsx\");reactHotLoader.register(getRegistryData, \"getRegistryData\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/components/DynamicPlugins/index.tsx\");reactHotLoader.register(pluginContextReducer, \"pluginContextReducer\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/components/DynamicPlugins/index.tsx\");reactHotLoader.register(pluginApi, \"pluginApi\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/components/DynamicPlugins/index.tsx\");reactHotLoader.register(sharedModules, \"sharedModules\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/components/DynamicPlugins/index.tsx\");reactHotLoader.register(DynamicPluginProvider, \"DynamicPluginProvider\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/components/DynamicPlugins/index.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/home/ubuntu/my_plugin/superset/superset-frontend/src/components/DynamicPlugins/index.tsx"],"names":[],"mappings":"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","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useContext, useEffect, useReducer } from 'react';\nimport {\n  ChartMetadata,\n  defineSharedModules,\n  getChartMetadataRegistry,\n  logging,\n  makeApi,\n} from '@superset-ui/core';\nimport { FeatureFlag, isFeatureEnabled } from 'src/featureFlags';\nimport { omitBy } from 'lodash';\n\nconst metadataRegistry = getChartMetadataRegistry();\n\nexport type PluginContextType = {\n  loading: boolean;\n  /** These are actually only the dynamic plugins */\n  dynamicPlugins: {\n    [key: string]: {\n      key: string;\n      mounting: boolean;\n      error: null | Error;\n    };\n  };\n  keys: string[];\n  /** Mounted means the plugin's js bundle has been imported */\n  mountedPluginMetadata: Record<string, ChartMetadata>;\n  fetchAll: () => void;\n};\n\nconst dummyPluginContext: PluginContextType = {\n  loading: true,\n  dynamicPlugins: {},\n  keys: [],\n  mountedPluginMetadata: {},\n  fetchAll: () => {},\n};\n\n/**\n * It is highly recommended to use the usePluginContext hook instead.\n * @see usePluginContext\n */\nexport const PluginContext = React.createContext(dummyPluginContext);\n\n/**\n * The plugin context provides info about what dynamic plugins are available.\n * It also provides loading info for the plugins' javascript bundles.\n *\n * Note: This does not include any information about static plugins.\n * Those are compiled into the Superset bundle at build time.\n * Dynamic plugins are added by the end user and can be any webhosted javascript.\n */\nexport const usePluginContext = () => useContext(PluginContext);\n\n// the plugin returned from the API\ntype Plugin = {\n  name: string;\n  key: string;\n  bundle_url: string;\n  id: number;\n};\n\n// when a plugin completes loading\ntype CompleteAction = {\n  type: 'complete';\n  key: string;\n  error: null | Error;\n};\n\n// when plugins start loading\ntype BeginAction = {\n  type: 'begin';\n  keys: string[];\n};\n\ntype ChangedKeysAction = {\n  type: 'changed keys';\n};\n\ntype PluginAction = BeginAction | CompleteAction | ChangedKeysAction;\n\nfunction getRegistryData() {\n  return {\n    keys: metadataRegistry.keys(),\n    mountedPluginMetadata: omitBy(\n      metadataRegistry.getMap(),\n      value => value === undefined,\n    ) as Record<string, ChartMetadata>, // cast required to get rid of undefined values\n  };\n}\n\nfunction pluginContextReducer(\n  state: PluginContextType,\n  action: PluginAction,\n): PluginContextType {\n  switch (action.type) {\n    case 'begin': {\n      const plugins = { ...state.dynamicPlugins };\n      action.keys.forEach(key => {\n        plugins[key] = { key, error: null, mounting: true };\n      });\n      return {\n        ...state,\n        loading: action.keys.length > 0,\n        dynamicPlugins: plugins,\n      };\n    }\n    case 'complete': {\n      return {\n        ...state,\n        loading: Object.values(state.dynamicPlugins).some(\n          plugin => plugin.mounting && plugin.key !== action.key,\n        ),\n        dynamicPlugins: {\n          ...state.dynamicPlugins,\n          [action.key]: {\n            key: action.key,\n            mounting: false,\n            error: action.error,\n          },\n        },\n      };\n    }\n    case 'changed keys': {\n      return {\n        ...state,\n        ...getRegistryData(),\n      };\n    }\n    default:\n      return state;\n  }\n}\n\nconst pluginApi = makeApi<{}, { result: Plugin[] }>({\n  method: 'GET',\n  endpoint: '/dynamic-plugins/api/read',\n});\n\nconst sharedModules = {\n  react: () => import('react'),\n  lodash: () => import('lodash'),\n  'react-dom': () => import('react-dom'),\n  '@superset-ui/chart-controls': () => import('@superset-ui/chart-controls'),\n  '@superset-ui/core': () => import('@superset-ui/core'),\n};\n\nexport const DynamicPluginProvider: React.FC = ({ children }) => {\n  const [pluginState, dispatch] = useReducer(\n    pluginContextReducer,\n    dummyPluginContext,\n    state => ({\n      ...state,\n      ...getRegistryData(),\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\n      fetchAll,\n      loading: isFeatureEnabled(FeatureFlag.DYNAMIC_PLUGINS),\n      // TODO: Write fetchByKeys\n    }),\n  );\n\n  // For now, we fetch all the plugins at the same time.\n  // In the future it would be nice to fetch on an as-needed basis.\n  // That will most likely depend on having a json manifest for each plugin.\n  async function fetchAll() {\n    try {\n      await defineSharedModules(sharedModules);\n      const { result: plugins } = await pluginApi({});\n      dispatch({ type: 'begin', keys: plugins.map(plugin => plugin.key) });\n      await Promise.all(\n        plugins.map(async plugin => {\n          let error: Error | null = null;\n          try {\n            await import(/* webpackIgnore: true */ plugin.bundle_url);\n          } catch (err) {\n            logging.error(\n              `Failed to load plugin ${plugin.key} with the following error:`,\n              err.stack,\n            );\n            error = err;\n          }\n          dispatch({\n            type: 'complete',\n            key: plugin.key,\n            error,\n          });\n        }),\n      );\n    } catch (error) {\n      logging.error('Failed to load dynamic plugins', error.stack || error);\n    }\n  }\n\n  useEffect(() => {\n    if (isFeatureEnabled(FeatureFlag.DYNAMIC_PLUGINS)) {\n      fetchAll();\n    }\n    const registryListener = () => {\n      dispatch({ type: 'changed keys' });\n    };\n    metadataRegistry.addListener(registryListener);\n    return () => {\n      metadataRegistry.removeListener(registryListener);\n    };\n  }, []);\n\n  return (\n    <PluginContext.Provider value={pluginState}>\n      {children}\n    </PluginContext.Provider>\n  );\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}