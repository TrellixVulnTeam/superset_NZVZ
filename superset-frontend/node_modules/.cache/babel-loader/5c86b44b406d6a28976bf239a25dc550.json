{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/my_plugin/superset/superset-frontend/src/explore/components/SaveModal.tsx\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint camelcase: 0 */\nimport React from 'react';\nimport { Input } from 'src/common/components';\nimport { Form, FormItem } from 'src/components/Form';\nimport Alert from 'src/components/Alert';\nimport { t, styled } from '@superset-ui/core';\nimport ReactMarkdown from 'react-markdown';\nimport Modal from 'src/components/Modal';\nimport { Radio } from 'src/components/Radio';\nimport Button from 'src/components/Button';\nimport { Select } from 'src/components';\nimport { connect } from 'react-redux';\n// Session storage key for recent dashboard\nimport { jsx as ___EmotionJSX } from \"@emotion/react\";const SK_DASHBOARD_ID = 'save_chart_recent_dashboard';\nconst SELECT_PLACEHOLDER = t('**Select** a dashboard OR **create** a new one');\nexport const StyledModal = styled(Modal)`\n  .ant-modal-body {\n    overflow: visible;\n  }\n`;\nclass SaveModal extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      saveToDashboardId: null,\n      newSliceName: props.sliceName,\n      alert: null,\n      action: this.canOverwriteSlice() ? 'overwrite' : 'saveas' };\n\n    this.onDashboardSelectChange = this.onDashboardSelectChange.bind(this);\n    this.onSliceNameChange = this.onSliceNameChange.bind(this);\n    this.changeAction = this.changeAction.bind(this);\n    this.saveOrOverwrite = this.saveOrOverwrite.bind(this);\n  }\n  canOverwriteSlice() {var _this$props$slice, _this$props$slice$own;\n    return (_this$props$slice = this.props.slice) == null ? void 0 : (_this$props$slice$own = _this$props$slice.owners) == null ? void 0 : _this$props$slice$own.includes(this.props.userId);\n  }\n  componentDidMount() {\n    this.props.actions.fetchDashboards(this.props.userId).then(() => {\n      const dashboardIds = this.props.dashboards.map((dashboard) => dashboard.value);\n      const lastDashboard = sessionStorage.getItem(SK_DASHBOARD_ID);\n      let recentDashboard = lastDashboard && parseInt(lastDashboard, 10);\n      if (this.props.dashboardId) {\n        recentDashboard = this.props.dashboardId;\n      }\n      if (recentDashboard !== null &&\n      dashboardIds.indexOf(recentDashboard) !== -1) {\n        this.setState({\n          saveToDashboardId: recentDashboard });\n\n      }\n    });\n  }\n  onSliceNameChange(event) {\n    this.setState({ newSliceName: event.target.value });\n  }\n  onDashboardSelectChange(selected) {\n    const newDashboardName = selected ? String(selected) : undefined;\n    const saveToDashboardId = selected && typeof selected === 'number' ? selected : null;\n    this.setState({ saveToDashboardId, newDashboardName });\n  }\n  changeAction(action) {\n    this.setState({ action });\n  }\n  saveOrOverwrite(gotodash) {\n    this.setState({ alert: null });\n    this.props.actions.removeSaveModalAlert();\n    const sliceParams = {};\n    if (this.props.slice && this.props.slice.slice_id) {\n      sliceParams.slice_id = this.props.slice.slice_id;\n    }\n    if (sliceParams.action === 'saveas') {\n      if (this.state.newSliceName === '') {\n        this.setState({ alert: t('Please enter a chart name') });\n        return;\n      }\n    }\n    sliceParams.action = this.state.action;\n    sliceParams.slice_name = this.state.newSliceName;\n    sliceParams.save_to_dashboard_id = this.state.saveToDashboardId;\n    sliceParams.new_dashboard_name = this.state.newDashboardName;\n    this.props.actions.\n    saveSlice(this.props.form_data, sliceParams).\n    then((data) => {\n      if (data.dashboard_id === null) {\n        sessionStorage.removeItem(SK_DASHBOARD_ID);\n      } else\n      {\n        sessionStorage.setItem(SK_DASHBOARD_ID, data.dashboard_id);\n      }\n      // Go to new slice url or dashboard url\n      const url = gotodash ? data.dashboard_url : data.slice.slice_url;\n      window.location.assign(url);\n    });\n    this.props.onHide();\n  }\n  removeAlert() {\n    if (this.props.alert) {\n      this.props.actions.removeSaveModalAlert();\n    }\n    this.setState({ alert: null });\n  }\n  render() {\n    const dashboardSelectValue = this.state.saveToDashboardId || this.state.newDashboardName;\n    return ___EmotionJSX(StyledModal, { show: true, onHide: this.props.onHide, title: t('Save chart'), footer: ___EmotionJSX(\"div\", { \"data-test\": \"save-modal-footer\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 123, columnNumber: 94 } },\n      ___EmotionJSX(Button, { id: \"btn_cancel\", buttonSize: \"small\", onClick: this.props.onHide, __self: this, __source: { fileName: _jsxFileName, lineNumber: 124, columnNumber: 13 } },\n      t('Cancel')),\n\n      ___EmotionJSX(Button, { id: \"btn_modal_save_goto_dash\", buttonSize: \"small\", disabled: !this.state.newSliceName ||\n        !this.state.saveToDashboardId && !this.state.newDashboardName, onClick: () => this.saveOrOverwrite(true), __self: this, __source: { fileName: _jsxFileName, lineNumber: 127, columnNumber: 13 } },\n      t('Save & go to dashboard')),\n\n      ___EmotionJSX(Button, { id: \"btn_modal_save\", buttonSize: \"small\", buttonStyle: \"primary\", onClick: () => this.saveOrOverwrite(false), disabled: !this.state.newSliceName, \"data-test\": \"btn-modal-save\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 131, columnNumber: 13 } },\n      !this.canOverwriteSlice() && this.props.slice ?\n      t('Save as new chart') :\n      t('Save'))), __self: this, __source: { fileName: _jsxFileName, lineNumber: 123, columnNumber: 17 } },\n\n\n    ___EmotionJSX(Form, { \"data-test\": \"save-modal-body\", layout: \"vertical\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 137, columnNumber: 9 } },\n    (this.state.alert || this.props.alert) && ___EmotionJSX(Alert, { type: \"warning\", message: ___EmotionJSX(React.Fragment, null,\n      this.state.alert ? this.state.alert : this.props.alert,\n      ___EmotionJSX(\"i\", { role: \"button\", \"aria-label\": \"Remove alert\", tabIndex: 0, className: \"fa fa-close pull-right\", onClick: this.removeAlert.bind(this), style: { cursor: 'pointer' }, __self: this, __source: { fileName: _jsxFileName, lineNumber: 140, columnNumber: 19 } })), __self: this, __source: { fileName: _jsxFileName, lineNumber: 138, columnNumber: 55 } }),\n\n    ___EmotionJSX(FormItem, { \"data-test\": \"radio-group\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 142, columnNumber: 11 } },\n    ___EmotionJSX(Radio, { id: \"overwrite-radio\", disabled: !this.canOverwriteSlice(), checked: this.state.action === 'overwrite', onChange: () => this.changeAction('overwrite'), \"data-test\": \"save-overwrite-radio\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 143, columnNumber: 13 } },\n    t('Save (Overwrite)')),\n\n    ___EmotionJSX(Radio, { id: \"saveas-radio\", \"data-test\": \"saveas-radio\", checked: this.state.action === 'saveas', onChange: () => this.changeAction('saveas'), __self: this, __source: { fileName: _jsxFileName, lineNumber: 146, columnNumber: 13 } },\n    ' ',\n    t('Save as ...'), \" \\xA0\")),\n\n\n    ___EmotionJSX(\"hr\", { __self: this, __source: { fileName: _jsxFileName, lineNumber: 151, columnNumber: 11 } }),\n    ___EmotionJSX(FormItem, { label: t('Chart name'), required: true, __self: this, __source: { fileName: _jsxFileName, lineNumber: 152, columnNumber: 11 } },\n    ___EmotionJSX(Input, { name: \"new_slice_name\", type: \"text\", placeholder: \"Name\", value: this.state.newSliceName, onChange: this.onSliceNameChange, \"data-test\": \"new-chart-name\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 153, columnNumber: 13 } })),\n\n    ___EmotionJSX(FormItem, { label: t('Add to dashboard'), \"data-test\": \"save-chart-modal-select-dashboard-form\", __self: this, __source: { fileName: _jsxFileName, lineNumber: 155, columnNumber: 11 } },\n    ___EmotionJSX(Select, { allowClear: true, allowNewOptions: true, ariaLabel: t('Select a dashboard'), options: this.props.dashboards, onChange: this.onDashboardSelectChange, value: dashboardSelectValue || undefined, placeholder:\n      // Using markdown to allow for good i18n\n      ___EmotionJSX(ReactMarkdown, { source: SELECT_PLACEHOLDER, renderers: { paragraph: 'span' }, __self: this, __source: { fileName: _jsxFileName, lineNumber: 158, columnNumber: 13 } }), __self: this, __source: { fileName: _jsxFileName, lineNumber: 156, columnNumber: 13 } }))));\n\n\n\n  } // @ts-ignore\n  __reactstandin__regenerateByEval(key, code) {// @ts-ignore\n    this[key] = eval(code);}}function mapStateToProps({ explore, saveModal }) {var _explore$user;\n  return {\n    datasource: explore.datasource,\n    slice: explore.slice,\n    userId: (_explore$user = explore.user) == null ? void 0 : _explore$user.userId,\n    dashboards: saveModal.dashboards,\n    alert: saveModal.saveModalAlert };\n\n}const _default =\nconnect(mapStateToProps, () => ({}))(SaveModal);export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(SK_DASHBOARD_ID, \"SK_DASHBOARD_ID\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/explore/components/SaveModal.tsx\");reactHotLoader.register(SELECT_PLACEHOLDER, \"SELECT_PLACEHOLDER\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/explore/components/SaveModal.tsx\");reactHotLoader.register(StyledModal, \"StyledModal\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/explore/components/SaveModal.tsx\");reactHotLoader.register(SaveModal, \"SaveModal\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/explore/components/SaveModal.tsx\");reactHotLoader.register(mapStateToProps, \"mapStateToProps\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/explore/components/SaveModal.tsx\");reactHotLoader.register(_default, \"default\", \"/home/ubuntu/my_plugin/superset/superset-frontend/src/explore/components/SaveModal.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/home/ubuntu/my_plugin/superset/superset-frontend/src/explore/components/SaveModal.tsx"],"names":[],"mappings":"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","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint camelcase: 0 */\nimport React from 'react';\nimport { Input } from 'src/common/components';\nimport { Form, FormItem } from 'src/components/Form';\nimport Alert from 'src/components/Alert';\nimport { JsonObject, t, styled } from '@superset-ui/core';\nimport ReactMarkdown from 'react-markdown';\nimport Modal from 'src/components/Modal';\nimport { Radio } from 'src/components/Radio';\nimport Button from 'src/components/Button';\nimport { Select } from 'src/components';\nimport { SelectValue } from 'antd/lib/select';\nimport { connect } from 'react-redux';\n\n// Session storage key for recent dashboard\nconst SK_DASHBOARD_ID = 'save_chart_recent_dashboard';\nconst SELECT_PLACEHOLDER = t('**Select** a dashboard OR **create** a new one');\n\ntype SaveModalProps = {\n  onHide: () => void;\n  actions: Record<string, any>;\n  form_data?: Record<string, any>;\n  userId: number;\n  dashboards: Array<any>;\n  alert?: string;\n  sliceName?: string;\n  slice?: Record<string, any>;\n  datasource?: Record<string, any>;\n  dashboardId: '' | number | null;\n};\n\ntype ActionType = 'overwrite' | 'saveas';\n\ntype SaveModalState = {\n  saveToDashboardId: number | string | null;\n  newSliceName?: string;\n  newDashboardName?: string;\n  alert: string | null;\n  action: ActionType;\n};\n\nexport const StyledModal = styled(Modal)`\n  .ant-modal-body {\n    overflow: visible;\n  }\n`;\n\nclass SaveModal extends React.Component<SaveModalProps, SaveModalState> {\n  constructor(props: SaveModalProps) {\n    super(props);\n    this.state = {\n      saveToDashboardId: null,\n      newSliceName: props.sliceName,\n      alert: null,\n      action: this.canOverwriteSlice() ? 'overwrite' : 'saveas',\n    };\n    this.onDashboardSelectChange = this.onDashboardSelectChange.bind(this);\n    this.onSliceNameChange = this.onSliceNameChange.bind(this);\n    this.changeAction = this.changeAction.bind(this);\n    this.saveOrOverwrite = this.saveOrOverwrite.bind(this);\n  }\n\n  canOverwriteSlice(): boolean {\n    return this.props.slice?.owners?.includes(this.props.userId);\n  }\n\n  componentDidMount() {\n    this.props.actions.fetchDashboards(this.props.userId).then(() => {\n      const dashboardIds = this.props.dashboards.map(\n        dashboard => dashboard.value,\n      );\n      const lastDashboard = sessionStorage.getItem(SK_DASHBOARD_ID);\n      let recentDashboard = lastDashboard && parseInt(lastDashboard, 10);\n\n      if (this.props.dashboardId) {\n        recentDashboard = this.props.dashboardId;\n      }\n\n      if (\n        recentDashboard !== null &&\n        dashboardIds.indexOf(recentDashboard) !== -1\n      ) {\n        this.setState({\n          saveToDashboardId: recentDashboard,\n        });\n      }\n    });\n  }\n\n  onSliceNameChange(event: React.ChangeEvent<HTMLInputElement>) {\n    this.setState({ newSliceName: event.target.value });\n  }\n\n  onDashboardSelectChange(selected: SelectValue) {\n    const newDashboardName = selected ? String(selected) : undefined;\n    const saveToDashboardId =\n      selected && typeof selected === 'number' ? selected : null;\n    this.setState({ saveToDashboardId, newDashboardName });\n  }\n\n  changeAction(action: ActionType) {\n    this.setState({ action });\n  }\n\n  saveOrOverwrite(gotodash: boolean) {\n    this.setState({ alert: null });\n    this.props.actions.removeSaveModalAlert();\n    const sliceParams: Record<string, any> = {};\n\n    if (this.props.slice && this.props.slice.slice_id) {\n      sliceParams.slice_id = this.props.slice.slice_id;\n    }\n    if (sliceParams.action === 'saveas') {\n      if (this.state.newSliceName === '') {\n        this.setState({ alert: t('Please enter a chart name') });\n        return;\n      }\n    }\n    sliceParams.action = this.state.action;\n    sliceParams.slice_name = this.state.newSliceName;\n    sliceParams.save_to_dashboard_id = this.state.saveToDashboardId;\n    sliceParams.new_dashboard_name = this.state.newDashboardName;\n\n    this.props.actions\n      .saveSlice(this.props.form_data, sliceParams)\n      .then((data: JsonObject) => {\n        if (data.dashboard_id === null) {\n          sessionStorage.removeItem(SK_DASHBOARD_ID);\n        } else {\n          sessionStorage.setItem(SK_DASHBOARD_ID, data.dashboard_id);\n        }\n        // Go to new slice url or dashboard url\n        const url = gotodash ? data.dashboard_url : data.slice.slice_url;\n        window.location.assign(url);\n      });\n    this.props.onHide();\n  }\n\n  removeAlert() {\n    if (this.props.alert) {\n      this.props.actions.removeSaveModalAlert();\n    }\n    this.setState({ alert: null });\n  }\n\n  render() {\n    const dashboardSelectValue =\n      this.state.saveToDashboardId || this.state.newDashboardName;\n    return (\n      <StyledModal\n        show\n        onHide={this.props.onHide}\n        title={t('Save chart')}\n        footer={\n          <div data-test=\"save-modal-footer\">\n            <Button\n              id=\"btn_cancel\"\n              buttonSize=\"small\"\n              onClick={this.props.onHide}\n            >\n              {t('Cancel')}\n            </Button>\n            <Button\n              id=\"btn_modal_save_goto_dash\"\n              buttonSize=\"small\"\n              disabled={\n                !this.state.newSliceName ||\n                (!this.state.saveToDashboardId && !this.state.newDashboardName)\n              }\n              onClick={() => this.saveOrOverwrite(true)}\n            >\n              {t('Save & go to dashboard')}\n            </Button>\n            <Button\n              id=\"btn_modal_save\"\n              buttonSize=\"small\"\n              buttonStyle=\"primary\"\n              onClick={() => this.saveOrOverwrite(false)}\n              disabled={!this.state.newSliceName}\n              data-test=\"btn-modal-save\"\n            >\n              {!this.canOverwriteSlice() && this.props.slice\n                ? t('Save as new chart')\n                : t('Save')}\n            </Button>\n          </div>\n        }\n      >\n        <Form data-test=\"save-modal-body\" layout=\"vertical\">\n          {(this.state.alert || this.props.alert) && (\n            <Alert\n              type=\"warning\"\n              message={\n                <>\n                  {this.state.alert ? this.state.alert : this.props.alert}\n                  <i\n                    role=\"button\"\n                    aria-label=\"Remove alert\"\n                    tabIndex={0}\n                    className=\"fa fa-close pull-right\"\n                    onClick={this.removeAlert.bind(this)}\n                    style={{ cursor: 'pointer' }}\n                  />\n                </>\n              }\n            />\n          )}\n          <FormItem data-test=\"radio-group\">\n            <Radio\n              id=\"overwrite-radio\"\n              disabled={!this.canOverwriteSlice()}\n              checked={this.state.action === 'overwrite'}\n              onChange={() => this.changeAction('overwrite')}\n              data-test=\"save-overwrite-radio\"\n            >\n              {t('Save (Overwrite)')}\n            </Radio>\n            <Radio\n              id=\"saveas-radio\"\n              data-test=\"saveas-radio\"\n              checked={this.state.action === 'saveas'}\n              onChange={() => this.changeAction('saveas')}\n            >\n              {' '}\n              {t('Save as ...')} &nbsp;\n            </Radio>\n          </FormItem>\n          <hr />\n          <FormItem label={t('Chart name')} required>\n            <Input\n              name=\"new_slice_name\"\n              type=\"text\"\n              placeholder=\"Name\"\n              value={this.state.newSliceName}\n              onChange={this.onSliceNameChange}\n              data-test=\"new-chart-name\"\n            />\n          </FormItem>\n          <FormItem\n            label={t('Add to dashboard')}\n            data-test=\"save-chart-modal-select-dashboard-form\"\n          >\n            <Select\n              allowClear\n              allowNewOptions\n              ariaLabel={t('Select a dashboard')}\n              options={this.props.dashboards}\n              onChange={this.onDashboardSelectChange}\n              value={dashboardSelectValue || undefined}\n              placeholder={\n                // Using markdown to allow for good i18n\n                <ReactMarkdown\n                  source={SELECT_PLACEHOLDER}\n                  renderers={{ paragraph: 'span' }}\n                />\n              }\n            />\n          </FormItem>\n        </Form>\n      </StyledModal>\n    );\n  }\n}\n\nfunction mapStateToProps({\n  explore,\n  saveModal,\n}: Record<string, any>): Partial<SaveModalProps> {\n  return {\n    datasource: explore.datasource,\n    slice: explore.slice,\n    userId: explore.user?.userId,\n    dashboards: saveModal.dashboards,\n    alert: saveModal.saveModalAlert,\n  };\n}\n\nexport default connect(mapStateToProps, () => ({}))(SaveModal);\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}