{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();import \"core-js/modules/es.string.replace.js\";var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;};import { format as d3Format } from 'd3-format';\nimport NumberFormats from '../NumberFormats';\nimport createNumberFormatter from '../createNumberFormatter';\nconst siFormatter = d3Format(\".3~s\");\nconst float2PointFormatter = d3Format(\".2~f\");\nconst float4PointFormatter = d3Format(\".4~f\");\n\nfunction formatValue(value) {\n  if (value === 0) {\n    return '0';\n  }\n\n  const absoluteValue = Math.abs(value);\n\n  if (absoluteValue >= 1000) {\n    // Normal human being are more familiar\n    // with billion (B) that giga (G)\n    return siFormatter(value).replace('G', 'B');\n  }\n\n  if (absoluteValue >= 1) {\n    return float2PointFormatter(value);\n  }\n\n  if (absoluteValue >= 0.001) {\n    return float4PointFormatter(value);\n  }\n\n  if (absoluteValue > 0.000001) {\n    return siFormatter(value * 1000000) + \"\\xB5\";\n  }\n\n  return siFormatter(value);\n}\n\nconst BLANK = () => '';\n\nconst ADD_PLUS = (value) => value > 0 ? '+' : '';\n\nexport default function createSmartNumberFormatter({\n  signed = false,\n  id,\n  label,\n  description } =\n{}) {\n  const getSign = signed ? ADD_PLUS : BLANK;\n  return createNumberFormatter((value) => \"\" + getSign(value) + formatValue(value), {\n    id: (id != null ? id : signed) ? NumberFormats.signed.SMART_NUMBER : NumberFormats.SMART_NUMBER,\n    label: label != null ? label : 'Adaptive formatter',\n    description });\n\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(siFormatter, \"siFormatter\", \"/home/ubuntu/my_plugin/superset/superset-frontend/node_modules/@encodable/format/esm/number/factories/createSmartNumberFormatter.js\");reactHotLoader.register(float2PointFormatter, \"float2PointFormatter\", \"/home/ubuntu/my_plugin/superset/superset-frontend/node_modules/@encodable/format/esm/number/factories/createSmartNumberFormatter.js\");reactHotLoader.register(float4PointFormatter, \"float4PointFormatter\", \"/home/ubuntu/my_plugin/superset/superset-frontend/node_modules/@encodable/format/esm/number/factories/createSmartNumberFormatter.js\");reactHotLoader.register(formatValue, \"formatValue\", \"/home/ubuntu/my_plugin/superset/superset-frontend/node_modules/@encodable/format/esm/number/factories/createSmartNumberFormatter.js\");reactHotLoader.register(BLANK, \"BLANK\", \"/home/ubuntu/my_plugin/superset/superset-frontend/node_modules/@encodable/format/esm/number/factories/createSmartNumberFormatter.js\");reactHotLoader.register(ADD_PLUS, \"ADD_PLUS\", \"/home/ubuntu/my_plugin/superset/superset-frontend/node_modules/@encodable/format/esm/number/factories/createSmartNumberFormatter.js\");reactHotLoader.register(createSmartNumberFormatter, \"createSmartNumberFormatter\", \"/home/ubuntu/my_plugin/superset/superset-frontend/node_modules/@encodable/format/esm/number/factories/createSmartNumberFormatter.js\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/home/ubuntu/my_plugin/superset/superset-frontend/node_modules/@encodable/format/esm/number/factories/createSmartNumberFormatter.js"],"names":["format","d3Format","NumberFormats","createNumberFormatter","siFormatter","float2PointFormatter","float4PointFormatter","formatValue","value","absoluteValue","Math","abs","replace","BLANK","ADD_PLUS","createSmartNumberFormatter","signed","id","label","description","getSign","SMART_NUMBER"],"mappings":"qVAAA,SAASA,MAAM,IAAIC,QAAnB,QAAmC,WAAnC;AACA,OAAOC,aAAP,MAA0B,kBAA1B;AACA,OAAOC,qBAAP,MAAkC,0BAAlC;AACA,MAAMC,WAAW,GAAGH,QAAQ,CAAC,MAAD,CAA5B;AACA,MAAMI,oBAAoB,GAAGJ,QAAQ,CAAC,MAAD,CAArC;AACA,MAAMK,oBAAoB,GAAGL,QAAQ,CAAC,MAAD,CAArC;;AAEA,SAASM,WAAT,CAAqBC,KAArB,EAA4B;AAC1B,MAAIA,KAAK,KAAK,CAAd,EAAiB;AACf,WAAO,GAAP;AACD;;AAED,QAAMC,aAAa,GAAGC,IAAI,CAACC,GAAL,CAASH,KAAT,CAAtB;;AAEA,MAAIC,aAAa,IAAI,IAArB,EAA2B;AACzB;AACA;AACA,WAAOL,WAAW,CAACI,KAAD,CAAX,CAAmBI,OAAnB,CAA2B,GAA3B,EAAgC,GAAhC,CAAP;AACD;;AAED,MAAIH,aAAa,IAAI,CAArB,EAAwB;AACtB,WAAOJ,oBAAoB,CAACG,KAAD,CAA3B;AACD;;AAED,MAAIC,aAAa,IAAI,KAArB,EAA4B;AAC1B,WAAOH,oBAAoB,CAACE,KAAD,CAA3B;AACD;;AAED,MAAIC,aAAa,GAAG,QAApB,EAA8B;AAC5B,WAAOL,WAAW,CAACI,KAAK,GAAG,OAAT,CAAX,GAA+B,MAAtC;AACD;;AAED,SAAOJ,WAAW,CAACI,KAAD,CAAlB;AACD;;AAED,MAAMK,KAAK,GAAG,MAAM,EAApB;;AAEA,MAAMC,QAAQ,GAAG,CAAAN,KAAK,KAAIA,KAAK,GAAG,CAAR,GAAY,GAAZ,GAAkB,EAA5C;;AAEA,eAAe,SAASO,0BAAT,CAAoC;AACjDC,EAAAA,MAAM,GAAG,KADwC;AAEjDC,EAAAA,EAFiD;AAGjDC,EAAAA,KAHiD;AAIjDC,EAAAA,WAJiD;AAK/C,EALW,EAKP;AACN,QAAMC,OAAO,GAAGJ,MAAM,GAAGF,QAAH,GAAcD,KAApC;AACA,SAAOV,qBAAqB,CAAC,CAAAK,KAAK,KAAI,KAAKY,OAAO,CAACZ,KAAD,CAAZ,GAAsBD,WAAW,CAACC,KAAD,CAA3C,EAAoD;AAC9ES,IAAAA,EAAE,EAAE,CAACA,EAAE,IAAI,IAAN,GAAaA,EAAb,GAAkBD,MAAnB,IAA6Bd,aAAa,CAACc,MAAd,CAAqBK,YAAlD,GAAiEnB,aAAa,CAACmB,YADL;AAE9EH,IAAAA,KAAK,EAAEA,KAAK,IAAI,IAAT,GAAgBA,KAAhB,GAAwB,oBAF+C;AAG9EC,IAAAA,WAH8E,EAApD,CAA5B;;AAKD,C,iLAhDKf,W,gLACAC,oB,yLACAC,oB,yLAEGC,W,gLA4BHM,K,0KAEAC,Q,6KAEkBC,0B","sourcesContent":["import { format as d3Format } from 'd3-format';\nimport NumberFormats from '../NumberFormats';\nimport createNumberFormatter from '../createNumberFormatter';\nconst siFormatter = d3Format(\".3~s\");\nconst float2PointFormatter = d3Format(\".2~f\");\nconst float4PointFormatter = d3Format(\".4~f\");\n\nfunction formatValue(value) {\n  if (value === 0) {\n    return '0';\n  }\n\n  const absoluteValue = Math.abs(value);\n\n  if (absoluteValue >= 1000) {\n    // Normal human being are more familiar\n    // with billion (B) that giga (G)\n    return siFormatter(value).replace('G', 'B');\n  }\n\n  if (absoluteValue >= 1) {\n    return float2PointFormatter(value);\n  }\n\n  if (absoluteValue >= 0.001) {\n    return float4PointFormatter(value);\n  }\n\n  if (absoluteValue > 0.000001) {\n    return siFormatter(value * 1000000) + \"\\xB5\";\n  }\n\n  return siFormatter(value);\n}\n\nconst BLANK = () => '';\n\nconst ADD_PLUS = value => value > 0 ? '+' : '';\n\nexport default function createSmartNumberFormatter({\n  signed = false,\n  id,\n  label,\n  description\n} = {}) {\n  const getSign = signed ? ADD_PLUS : BLANK;\n  return createNumberFormatter(value => \"\" + getSign(value) + formatValue(value), {\n    id: (id != null ? id : signed) ? NumberFormats.signed.SMART_NUMBER : NumberFormats.SMART_NUMBER,\n    label: label != null ? label : 'Adaptive formatter',\n    description\n  });\n}"]},"metadata":{},"sourceType":"module"}